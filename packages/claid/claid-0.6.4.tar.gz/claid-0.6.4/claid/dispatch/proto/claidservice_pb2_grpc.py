# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from dispatch.proto import claidservice_pb2 as dispatch_dot_proto_dot_claidservice__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class ClaidServiceStub(object):
    """Service for modules to talk to the CLAID middleware.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SendReceivePackages = channel.stream_stream(
                '/claidservice.ClaidService/SendReceivePackages',
                request_serializer=dispatch_dot_proto_dot_claidservice__pb2.DataPackage.SerializeToString,
                response_deserializer=dispatch_dot_proto_dot_claidservice__pb2.DataPackage.FromString,
                )
        self.GetModuleList = channel.unary_unary(
                '/claidservice.ClaidService/GetModuleList',
                request_serializer=dispatch_dot_proto_dot_claidservice__pb2.ModuleListRequest.SerializeToString,
                response_deserializer=dispatch_dot_proto_dot_claidservice__pb2.ModuleListResponse.FromString,
                )
        self.InitRuntime = channel.unary_unary(
                '/claidservice.ClaidService/InitRuntime',
                request_serializer=dispatch_dot_proto_dot_claidservice__pb2.InitRuntimeRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )


class ClaidServiceServicer(object):
    """Service for modules to talk to the CLAID middleware.
    """

    def SendReceivePackages(self, request_iterator, context):
        """Continuous stream of DataPackage's between client and server.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetModuleList(self, request, context):
        """Get the modules to set up during initialization.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InitRuntime(self, request, context):
        """Init Modules
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ClaidServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SendReceivePackages': grpc.stream_stream_rpc_method_handler(
                    servicer.SendReceivePackages,
                    request_deserializer=dispatch_dot_proto_dot_claidservice__pb2.DataPackage.FromString,
                    response_serializer=dispatch_dot_proto_dot_claidservice__pb2.DataPackage.SerializeToString,
            ),
            'GetModuleList': grpc.unary_unary_rpc_method_handler(
                    servicer.GetModuleList,
                    request_deserializer=dispatch_dot_proto_dot_claidservice__pb2.ModuleListRequest.FromString,
                    response_serializer=dispatch_dot_proto_dot_claidservice__pb2.ModuleListResponse.SerializeToString,
            ),
            'InitRuntime': grpc.unary_unary_rpc_method_handler(
                    servicer.InitRuntime,
                    request_deserializer=dispatch_dot_proto_dot_claidservice__pb2.InitRuntimeRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'claidservice.ClaidService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ClaidService(object):
    """Service for modules to talk to the CLAID middleware.
    """

    @staticmethod
    def SendReceivePackages(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/claidservice.ClaidService/SendReceivePackages',
            dispatch_dot_proto_dot_claidservice__pb2.DataPackage.SerializeToString,
            dispatch_dot_proto_dot_claidservice__pb2.DataPackage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetModuleList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/claidservice.ClaidService/GetModuleList',
            dispatch_dot_proto_dot_claidservice__pb2.ModuleListRequest.SerializeToString,
            dispatch_dot_proto_dot_claidservice__pb2.ModuleListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def InitRuntime(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/claidservice.ClaidService/InitRuntime',
            dispatch_dot_proto_dot_claidservice__pb2.InitRuntimeRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ClaidRemoteServiceStub(object):
    """Service for two instances of the CLAID middleware to talk to each other over a TCP connection.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SendReceivePackages = channel.stream_stream(
                '/claidservice.ClaidRemoteService/SendReceivePackages',
                request_serializer=dispatch_dot_proto_dot_claidservice__pb2.DataPackage.SerializeToString,
                response_deserializer=dispatch_dot_proto_dot_claidservice__pb2.DataPackage.FromString,
                )


class ClaidRemoteServiceServicer(object):
    """Service for two instances of the CLAID middleware to talk to each other over a TCP connection.
    """

    def SendReceivePackages(self, request_iterator, context):
        """Continuous stream of DataPackage's between remote client and remote server.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ClaidRemoteServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SendReceivePackages': grpc.stream_stream_rpc_method_handler(
                    servicer.SendReceivePackages,
                    request_deserializer=dispatch_dot_proto_dot_claidservice__pb2.DataPackage.FromString,
                    response_serializer=dispatch_dot_proto_dot_claidservice__pb2.DataPackage.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'claidservice.ClaidRemoteService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ClaidRemoteService(object):
    """Service for two instances of the CLAID middleware to talk to each other over a TCP connection.
    """

    @staticmethod
    def SendReceivePackages(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/claidservice.ClaidRemoteService/SendReceivePackages',
            dispatch_dot_proto_dot_claidservice__pb2.DataPackage.SerializeToString,
            dispatch_dot_proto_dot_claidservice__pb2.DataPackage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
