// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: attr_value.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_attr_5fvalue_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_attr_5fvalue_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_attr_5fvalue_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_attr_5fvalue_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_attr_5fvalue_2eproto;
namespace gs {
namespace rpc {
class AttrValue;
struct AttrValueDefaultTypeInternal;
extern AttrValueDefaultTypeInternal _AttrValue_default_instance_;
class AttrValue_ListValue;
struct AttrValue_ListValueDefaultTypeInternal;
extern AttrValue_ListValueDefaultTypeInternal _AttrValue_ListValue_default_instance_;
class Chunk;
struct ChunkDefaultTypeInternal;
extern ChunkDefaultTypeInternal _Chunk_default_instance_;
class ChunkMeta;
struct ChunkMetaDefaultTypeInternal;
extern ChunkMetaDefaultTypeInternal _ChunkMeta_default_instance_;
class ChunkMeta_AttrEntry_DoNotUse;
struct ChunkMeta_AttrEntry_DoNotUseDefaultTypeInternal;
extern ChunkMeta_AttrEntry_DoNotUseDefaultTypeInternal _ChunkMeta_AttrEntry_DoNotUse_default_instance_;
class Chunk_AttrEntry_DoNotUse;
struct Chunk_AttrEntry_DoNotUseDefaultTypeInternal;
extern Chunk_AttrEntry_DoNotUseDefaultTypeInternal _Chunk_AttrEntry_DoNotUse_default_instance_;
class LargeAttrValue;
struct LargeAttrValueDefaultTypeInternal;
extern LargeAttrValueDefaultTypeInternal _LargeAttrValue_default_instance_;
class LargeAttrValue_ChunkList;
struct LargeAttrValue_ChunkListDefaultTypeInternal;
extern LargeAttrValue_ChunkListDefaultTypeInternal _LargeAttrValue_ChunkList_default_instance_;
class LargeAttrValue_ChunkMetaList;
struct LargeAttrValue_ChunkMetaListDefaultTypeInternal;
extern LargeAttrValue_ChunkMetaListDefaultTypeInternal _LargeAttrValue_ChunkMetaList_default_instance_;
class NameAttrList;
struct NameAttrListDefaultTypeInternal;
extern NameAttrListDefaultTypeInternal _NameAttrList_default_instance_;
class NameAttrList_AttrEntry_DoNotUse;
struct NameAttrList_AttrEntry_DoNotUseDefaultTypeInternal;
extern NameAttrList_AttrEntry_DoNotUseDefaultTypeInternal _NameAttrList_AttrEntry_DoNotUse_default_instance_;
}  // namespace rpc
}  // namespace gs
PROTOBUF_NAMESPACE_OPEN
template<> ::gs::rpc::AttrValue* Arena::CreateMaybeMessage<::gs::rpc::AttrValue>(Arena*);
template<> ::gs::rpc::AttrValue_ListValue* Arena::CreateMaybeMessage<::gs::rpc::AttrValue_ListValue>(Arena*);
template<> ::gs::rpc::Chunk* Arena::CreateMaybeMessage<::gs::rpc::Chunk>(Arena*);
template<> ::gs::rpc::ChunkMeta* Arena::CreateMaybeMessage<::gs::rpc::ChunkMeta>(Arena*);
template<> ::gs::rpc::ChunkMeta_AttrEntry_DoNotUse* Arena::CreateMaybeMessage<::gs::rpc::ChunkMeta_AttrEntry_DoNotUse>(Arena*);
template<> ::gs::rpc::Chunk_AttrEntry_DoNotUse* Arena::CreateMaybeMessage<::gs::rpc::Chunk_AttrEntry_DoNotUse>(Arena*);
template<> ::gs::rpc::LargeAttrValue* Arena::CreateMaybeMessage<::gs::rpc::LargeAttrValue>(Arena*);
template<> ::gs::rpc::LargeAttrValue_ChunkList* Arena::CreateMaybeMessage<::gs::rpc::LargeAttrValue_ChunkList>(Arena*);
template<> ::gs::rpc::LargeAttrValue_ChunkMetaList* Arena::CreateMaybeMessage<::gs::rpc::LargeAttrValue_ChunkMetaList>(Arena*);
template<> ::gs::rpc::NameAttrList* Arena::CreateMaybeMessage<::gs::rpc::NameAttrList>(Arena*);
template<> ::gs::rpc::NameAttrList_AttrEntry_DoNotUse* Arena::CreateMaybeMessage<::gs::rpc::NameAttrList_AttrEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace gs {
namespace rpc {

enum AttrValue_NullValue : int {
  AttrValue_NullValue_NULL_VALUE = 0,
  AttrValue_NullValue_AttrValue_NullValue_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  AttrValue_NullValue_AttrValue_NullValue_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool AttrValue_NullValue_IsValid(int value);
constexpr AttrValue_NullValue AttrValue_NullValue_NullValue_MIN = AttrValue_NullValue_NULL_VALUE;
constexpr AttrValue_NullValue AttrValue_NullValue_NullValue_MAX = AttrValue_NullValue_NULL_VALUE;
constexpr int AttrValue_NullValue_NullValue_ARRAYSIZE = AttrValue_NullValue_NullValue_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AttrValue_NullValue_descriptor();
template<typename T>
inline const std::string& AttrValue_NullValue_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AttrValue_NullValue>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AttrValue_NullValue_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AttrValue_NullValue_descriptor(), enum_t_value);
}
inline bool AttrValue_NullValue_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AttrValue_NullValue* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AttrValue_NullValue>(
    AttrValue_NullValue_descriptor(), name, value);
}
// ===================================================================

class AttrValue_ListValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gs.rpc.AttrValue.ListValue) */ {
 public:
  inline AttrValue_ListValue() : AttrValue_ListValue(nullptr) {}
  ~AttrValue_ListValue() override;
  explicit PROTOBUF_CONSTEXPR AttrValue_ListValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AttrValue_ListValue(const AttrValue_ListValue& from);
  AttrValue_ListValue(AttrValue_ListValue&& from) noexcept
    : AttrValue_ListValue() {
    *this = ::std::move(from);
  }

  inline AttrValue_ListValue& operator=(const AttrValue_ListValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline AttrValue_ListValue& operator=(AttrValue_ListValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AttrValue_ListValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const AttrValue_ListValue* internal_default_instance() {
    return reinterpret_cast<const AttrValue_ListValue*>(
               &_AttrValue_ListValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AttrValue_ListValue& a, AttrValue_ListValue& b) {
    a.Swap(&b);
  }
  inline void Swap(AttrValue_ListValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AttrValue_ListValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AttrValue_ListValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AttrValue_ListValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AttrValue_ListValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AttrValue_ListValue& from) {
    AttrValue_ListValue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AttrValue_ListValue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gs.rpc.AttrValue.ListValue";
  }
  protected:
  explicit AttrValue_ListValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSFieldNumber = 2,
    kIFieldNumber = 3,
    kFFieldNumber = 4,
    kBFieldNumber = 5,
    kFuncFieldNumber = 9,
    kListFieldNumber = 10,
  };
  // repeated bytes s = 2;
  int s_size() const;
  private:
  int _internal_s_size() const;
  public:
  void clear_s();
  const std::string& s(int index) const;
  std::string* mutable_s(int index);
  void set_s(int index, const std::string& value);
  void set_s(int index, std::string&& value);
  void set_s(int index, const char* value);
  void set_s(int index, const void* value, size_t size);
  std::string* add_s();
  void add_s(const std::string& value);
  void add_s(std::string&& value);
  void add_s(const char* value);
  void add_s(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& s() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_s();
  private:
  const std::string& _internal_s(int index) const;
  std::string* _internal_add_s();
  public:

  // repeated int64 i = 3 [packed = true];
  int i_size() const;
  private:
  int _internal_i_size() const;
  public:
  void clear_i();
  private:
  int64_t _internal_i(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_i() const;
  void _internal_add_i(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_i();
  public:
  int64_t i(int index) const;
  void set_i(int index, int64_t value);
  void add_i(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      i() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_i();

  // repeated float f = 4 [packed = true];
  int f_size() const;
  private:
  int _internal_f_size() const;
  public:
  void clear_f();
  private:
  float _internal_f(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_f() const;
  void _internal_add_f(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_f();
  public:
  float f(int index) const;
  void set_f(int index, float value);
  void add_f(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      f() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_f();

  // repeated bool b = 5 [packed = true];
  int b_size() const;
  private:
  int _internal_b_size() const;
  public:
  void clear_b();
  private:
  bool _internal_b(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_b() const;
  void _internal_add_b(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_b();
  public:
  bool b(int index) const;
  void set_b(int index, bool value);
  void add_b(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      b() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_b();

  // repeated .gs.rpc.NameAttrList func = 9;
  int func_size() const;
  private:
  int _internal_func_size() const;
  public:
  void clear_func();
  ::gs::rpc::NameAttrList* mutable_func(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gs::rpc::NameAttrList >*
      mutable_func();
  private:
  const ::gs::rpc::NameAttrList& _internal_func(int index) const;
  ::gs::rpc::NameAttrList* _internal_add_func();
  public:
  const ::gs::rpc::NameAttrList& func(int index) const;
  ::gs::rpc::NameAttrList* add_func();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gs::rpc::NameAttrList >&
      func() const;

  // repeated .gs.rpc.AttrValue.ListValue list = 10;
  int list_size() const;
  private:
  int _internal_list_size() const;
  public:
  void clear_list();
  ::gs::rpc::AttrValue_ListValue* mutable_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gs::rpc::AttrValue_ListValue >*
      mutable_list();
  private:
  const ::gs::rpc::AttrValue_ListValue& _internal_list(int index) const;
  ::gs::rpc::AttrValue_ListValue* _internal_add_list();
  public:
  const ::gs::rpc::AttrValue_ListValue& list(int index) const;
  ::gs::rpc::AttrValue_ListValue* add_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gs::rpc::AttrValue_ListValue >&
      list() const;

  // @@protoc_insertion_point(class_scope:gs.rpc.AttrValue.ListValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> s_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > i_;
    mutable std::atomic<int> _i_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > f_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > b_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gs::rpc::NameAttrList > func_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gs::rpc::AttrValue_ListValue > list_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_attr_5fvalue_2eproto;
};
// -------------------------------------------------------------------

class AttrValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gs.rpc.AttrValue) */ {
 public:
  inline AttrValue() : AttrValue(nullptr) {}
  ~AttrValue() override;
  explicit PROTOBUF_CONSTEXPR AttrValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AttrValue(const AttrValue& from);
  AttrValue(AttrValue&& from) noexcept
    : AttrValue() {
    *this = ::std::move(from);
  }

  inline AttrValue& operator=(const AttrValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline AttrValue& operator=(AttrValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AttrValue& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kNull = 1,
    kS = 2,
    kI = 3,
    kU = 4,
    kF = 5,
    kB = 6,
    kList = 11,
    kFunc = 12,
    VALUE_NOT_SET = 0,
  };

  static inline const AttrValue* internal_default_instance() {
    return reinterpret_cast<const AttrValue*>(
               &_AttrValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AttrValue& a, AttrValue& b) {
    a.Swap(&b);
  }
  inline void Swap(AttrValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AttrValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AttrValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AttrValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AttrValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AttrValue& from) {
    AttrValue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AttrValue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gs.rpc.AttrValue";
  }
  protected:
  explicit AttrValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AttrValue_ListValue ListValue;

  typedef AttrValue_NullValue NullValue;
  static constexpr NullValue NULL_VALUE =
    AttrValue_NullValue_NULL_VALUE;
  static inline bool NullValue_IsValid(int value) {
    return AttrValue_NullValue_IsValid(value);
  }
  static constexpr NullValue NullValue_MIN =
    AttrValue_NullValue_NullValue_MIN;
  static constexpr NullValue NullValue_MAX =
    AttrValue_NullValue_NullValue_MAX;
  static constexpr int NullValue_ARRAYSIZE =
    AttrValue_NullValue_NullValue_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  NullValue_descriptor() {
    return AttrValue_NullValue_descriptor();
  }
  template<typename T>
  static inline const std::string& NullValue_Name(T enum_t_value) {
    static_assert(::std::is_same<T, NullValue>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function NullValue_Name.");
    return AttrValue_NullValue_Name(enum_t_value);
  }
  static inline bool NullValue_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      NullValue* value) {
    return AttrValue_NullValue_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNullFieldNumber = 1,
    kSFieldNumber = 2,
    kIFieldNumber = 3,
    kUFieldNumber = 4,
    kFFieldNumber = 5,
    kBFieldNumber = 6,
    kListFieldNumber = 11,
    kFuncFieldNumber = 12,
  };
  // .gs.rpc.AttrValue.NullValue null = 1;
  bool has_null() const;
  private:
  bool _internal_has_null() const;
  public:
  void clear_null();
  ::gs::rpc::AttrValue_NullValue null() const;
  void set_null(::gs::rpc::AttrValue_NullValue value);
  private:
  ::gs::rpc::AttrValue_NullValue _internal_null() const;
  void _internal_set_null(::gs::rpc::AttrValue_NullValue value);
  public:

  // bytes s = 2;
  bool has_s() const;
  private:
  bool _internal_has_s() const;
  public:
  void clear_s();
  const std::string& s() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_s(ArgT0&& arg0, ArgT... args);
  std::string* mutable_s();
  PROTOBUF_NODISCARD std::string* release_s();
  void set_allocated_s(std::string* s);
  private:
  const std::string& _internal_s() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_s(const std::string& value);
  std::string* _internal_mutable_s();
  public:

  // int64 i = 3;
  bool has_i() const;
  private:
  bool _internal_has_i() const;
  public:
  void clear_i();
  int64_t i() const;
  void set_i(int64_t value);
  private:
  int64_t _internal_i() const;
  void _internal_set_i(int64_t value);
  public:

  // uint64 u = 4;
  bool has_u() const;
  private:
  bool _internal_has_u() const;
  public:
  void clear_u();
  uint64_t u() const;
  void set_u(uint64_t value);
  private:
  uint64_t _internal_u() const;
  void _internal_set_u(uint64_t value);
  public:

  // float f = 5;
  bool has_f() const;
  private:
  bool _internal_has_f() const;
  public:
  void clear_f();
  float f() const;
  void set_f(float value);
  private:
  float _internal_f() const;
  void _internal_set_f(float value);
  public:

  // bool b = 6;
  bool has_b() const;
  private:
  bool _internal_has_b() const;
  public:
  void clear_b();
  bool b() const;
  void set_b(bool value);
  private:
  bool _internal_b() const;
  void _internal_set_b(bool value);
  public:

  // .gs.rpc.AttrValue.ListValue list = 11;
  bool has_list() const;
  private:
  bool _internal_has_list() const;
  public:
  void clear_list();
  const ::gs::rpc::AttrValue_ListValue& list() const;
  PROTOBUF_NODISCARD ::gs::rpc::AttrValue_ListValue* release_list();
  ::gs::rpc::AttrValue_ListValue* mutable_list();
  void set_allocated_list(::gs::rpc::AttrValue_ListValue* list);
  private:
  const ::gs::rpc::AttrValue_ListValue& _internal_list() const;
  ::gs::rpc::AttrValue_ListValue* _internal_mutable_list();
  public:
  void unsafe_arena_set_allocated_list(
      ::gs::rpc::AttrValue_ListValue* list);
  ::gs::rpc::AttrValue_ListValue* unsafe_arena_release_list();

  // .gs.rpc.NameAttrList func = 12;
  bool has_func() const;
  private:
  bool _internal_has_func() const;
  public:
  void clear_func();
  const ::gs::rpc::NameAttrList& func() const;
  PROTOBUF_NODISCARD ::gs::rpc::NameAttrList* release_func();
  ::gs::rpc::NameAttrList* mutable_func();
  void set_allocated_func(::gs::rpc::NameAttrList* func);
  private:
  const ::gs::rpc::NameAttrList& _internal_func() const;
  ::gs::rpc::NameAttrList* _internal_mutable_func();
  public:
  void unsafe_arena_set_allocated_func(
      ::gs::rpc::NameAttrList* func);
  ::gs::rpc::NameAttrList* unsafe_arena_release_func();

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:gs.rpc.AttrValue)
 private:
  class _Internal;
  void set_has_null();
  void set_has_s();
  void set_has_i();
  void set_has_u();
  void set_has_f();
  void set_has_b();
  void set_has_list();
  void set_has_func();

  inline bool has_value() const;
  inline void clear_has_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union ValueUnion {
      constexpr ValueUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      int null_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr s_;
      int64_t i_;
      uint64_t u_;
      float f_;
      bool b_;
      ::gs::rpc::AttrValue_ListValue* list_;
      ::gs::rpc::NameAttrList* func_;
    } value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_attr_5fvalue_2eproto;
};
// -------------------------------------------------------------------

class NameAttrList_AttrEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<NameAttrList_AttrEntry_DoNotUse, 
    int32_t, ::gs::rpc::AttrValue,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<NameAttrList_AttrEntry_DoNotUse, 
    int32_t, ::gs::rpc::AttrValue,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  NameAttrList_AttrEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR NameAttrList_AttrEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit NameAttrList_AttrEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const NameAttrList_AttrEntry_DoNotUse& other);
  static const NameAttrList_AttrEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const NameAttrList_AttrEntry_DoNotUse*>(&_NameAttrList_AttrEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_attr_5fvalue_2eproto;
};

// -------------------------------------------------------------------

class NameAttrList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gs.rpc.NameAttrList) */ {
 public:
  inline NameAttrList() : NameAttrList(nullptr) {}
  ~NameAttrList() override;
  explicit PROTOBUF_CONSTEXPR NameAttrList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NameAttrList(const NameAttrList& from);
  NameAttrList(NameAttrList&& from) noexcept
    : NameAttrList() {
    *this = ::std::move(from);
  }

  inline NameAttrList& operator=(const NameAttrList& from) {
    CopyFrom(from);
    return *this;
  }
  inline NameAttrList& operator=(NameAttrList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NameAttrList& default_instance() {
    return *internal_default_instance();
  }
  static inline const NameAttrList* internal_default_instance() {
    return reinterpret_cast<const NameAttrList*>(
               &_NameAttrList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(NameAttrList& a, NameAttrList& b) {
    a.Swap(&b);
  }
  inline void Swap(NameAttrList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NameAttrList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NameAttrList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NameAttrList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NameAttrList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NameAttrList& from) {
    NameAttrList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NameAttrList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gs.rpc.NameAttrList";
  }
  protected:
  explicit NameAttrList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kAttrFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // map<int32, .gs.rpc.AttrValue> attr = 2;
  int attr_size() const;
  private:
  int _internal_attr_size() const;
  public:
  void clear_attr();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::gs::rpc::AttrValue >&
      _internal_attr() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::gs::rpc::AttrValue >*
      _internal_mutable_attr();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::gs::rpc::AttrValue >&
      attr() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::gs::rpc::AttrValue >*
      mutable_attr();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:gs.rpc.NameAttrList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        NameAttrList_AttrEntry_DoNotUse,
        int32_t, ::gs::rpc::AttrValue,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> attr_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_attr_5fvalue_2eproto;
};
// -------------------------------------------------------------------

class Chunk_AttrEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Chunk_AttrEntry_DoNotUse, 
    int32_t, ::gs::rpc::AttrValue,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Chunk_AttrEntry_DoNotUse, 
    int32_t, ::gs::rpc::AttrValue,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  Chunk_AttrEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR Chunk_AttrEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Chunk_AttrEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Chunk_AttrEntry_DoNotUse& other);
  static const Chunk_AttrEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Chunk_AttrEntry_DoNotUse*>(&_Chunk_AttrEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_attr_5fvalue_2eproto;
};

// -------------------------------------------------------------------

class Chunk final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gs.rpc.Chunk) */ {
 public:
  inline Chunk() : Chunk(nullptr) {}
  ~Chunk() override;
  explicit PROTOBUF_CONSTEXPR Chunk(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Chunk(const Chunk& from);
  Chunk(Chunk&& from) noexcept
    : Chunk() {
    *this = ::std::move(from);
  }

  inline Chunk& operator=(const Chunk& from) {
    CopyFrom(from);
    return *this;
  }
  inline Chunk& operator=(Chunk&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Chunk& default_instance() {
    return *internal_default_instance();
  }
  static inline const Chunk* internal_default_instance() {
    return reinterpret_cast<const Chunk*>(
               &_Chunk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Chunk& a, Chunk& b) {
    a.Swap(&b);
  }
  inline void Swap(Chunk* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Chunk* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Chunk* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Chunk>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Chunk& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Chunk& from) {
    Chunk::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Chunk* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gs.rpc.Chunk";
  }
  protected:
  explicit Chunk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kAttrFieldNumber = 2,
    kBufferFieldNumber = 1,
  };
  // map<int32, .gs.rpc.AttrValue> attr = 2;
  int attr_size() const;
  private:
  int _internal_attr_size() const;
  public:
  void clear_attr();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::gs::rpc::AttrValue >&
      _internal_attr() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::gs::rpc::AttrValue >*
      _internal_mutable_attr();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::gs::rpc::AttrValue >&
      attr() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::gs::rpc::AttrValue >*
      mutable_attr();

  // bytes buffer = 1;
  void clear_buffer();
  const std::string& buffer() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_buffer(ArgT0&& arg0, ArgT... args);
  std::string* mutable_buffer();
  PROTOBUF_NODISCARD std::string* release_buffer();
  void set_allocated_buffer(std::string* buffer);
  private:
  const std::string& _internal_buffer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_buffer(const std::string& value);
  std::string* _internal_mutable_buffer();
  public:

  // @@protoc_insertion_point(class_scope:gs.rpc.Chunk)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        Chunk_AttrEntry_DoNotUse,
        int32_t, ::gs::rpc::AttrValue,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> attr_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buffer_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_attr_5fvalue_2eproto;
};
// -------------------------------------------------------------------

class ChunkMeta_AttrEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ChunkMeta_AttrEntry_DoNotUse, 
    int32_t, ::gs::rpc::AttrValue,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ChunkMeta_AttrEntry_DoNotUse, 
    int32_t, ::gs::rpc::AttrValue,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  ChunkMeta_AttrEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR ChunkMeta_AttrEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit ChunkMeta_AttrEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ChunkMeta_AttrEntry_DoNotUse& other);
  static const ChunkMeta_AttrEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ChunkMeta_AttrEntry_DoNotUse*>(&_ChunkMeta_AttrEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_attr_5fvalue_2eproto;
};

// -------------------------------------------------------------------

class ChunkMeta final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gs.rpc.ChunkMeta) */ {
 public:
  inline ChunkMeta() : ChunkMeta(nullptr) {}
  ~ChunkMeta() override;
  explicit PROTOBUF_CONSTEXPR ChunkMeta(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChunkMeta(const ChunkMeta& from);
  ChunkMeta(ChunkMeta&& from) noexcept
    : ChunkMeta() {
    *this = ::std::move(from);
  }

  inline ChunkMeta& operator=(const ChunkMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChunkMeta& operator=(ChunkMeta&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChunkMeta& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChunkMeta* internal_default_instance() {
    return reinterpret_cast<const ChunkMeta*>(
               &_ChunkMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ChunkMeta& a, ChunkMeta& b) {
    a.Swap(&b);
  }
  inline void Swap(ChunkMeta* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChunkMeta* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChunkMeta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChunkMeta>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChunkMeta& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChunkMeta& from) {
    ChunkMeta::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChunkMeta* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gs.rpc.ChunkMeta";
  }
  protected:
  explicit ChunkMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kAttrFieldNumber = 3,
    kSizeFieldNumber = 1,
  };
  // map<int32, .gs.rpc.AttrValue> attr = 3;
  int attr_size() const;
  private:
  int _internal_attr_size() const;
  public:
  void clear_attr();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::gs::rpc::AttrValue >&
      _internal_attr() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::gs::rpc::AttrValue >*
      _internal_mutable_attr();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::gs::rpc::AttrValue >&
      attr() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::gs::rpc::AttrValue >*
      mutable_attr();

  // int64 size = 1;
  void clear_size();
  int64_t size() const;
  void set_size(int64_t value);
  private:
  int64_t _internal_size() const;
  void _internal_set_size(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:gs.rpc.ChunkMeta)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        ChunkMeta_AttrEntry_DoNotUse,
        int32_t, ::gs::rpc::AttrValue,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> attr_;
    int64_t size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_attr_5fvalue_2eproto;
};
// -------------------------------------------------------------------

class LargeAttrValue_ChunkList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gs.rpc.LargeAttrValue.ChunkList) */ {
 public:
  inline LargeAttrValue_ChunkList() : LargeAttrValue_ChunkList(nullptr) {}
  ~LargeAttrValue_ChunkList() override;
  explicit PROTOBUF_CONSTEXPR LargeAttrValue_ChunkList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LargeAttrValue_ChunkList(const LargeAttrValue_ChunkList& from);
  LargeAttrValue_ChunkList(LargeAttrValue_ChunkList&& from) noexcept
    : LargeAttrValue_ChunkList() {
    *this = ::std::move(from);
  }

  inline LargeAttrValue_ChunkList& operator=(const LargeAttrValue_ChunkList& from) {
    CopyFrom(from);
    return *this;
  }
  inline LargeAttrValue_ChunkList& operator=(LargeAttrValue_ChunkList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LargeAttrValue_ChunkList& default_instance() {
    return *internal_default_instance();
  }
  static inline const LargeAttrValue_ChunkList* internal_default_instance() {
    return reinterpret_cast<const LargeAttrValue_ChunkList*>(
               &_LargeAttrValue_ChunkList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(LargeAttrValue_ChunkList& a, LargeAttrValue_ChunkList& b) {
    a.Swap(&b);
  }
  inline void Swap(LargeAttrValue_ChunkList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LargeAttrValue_ChunkList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LargeAttrValue_ChunkList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LargeAttrValue_ChunkList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LargeAttrValue_ChunkList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LargeAttrValue_ChunkList& from) {
    LargeAttrValue_ChunkList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LargeAttrValue_ChunkList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gs.rpc.LargeAttrValue.ChunkList";
  }
  protected:
  explicit LargeAttrValue_ChunkList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated .gs.rpc.Chunk items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::gs::rpc::Chunk* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gs::rpc::Chunk >*
      mutable_items();
  private:
  const ::gs::rpc::Chunk& _internal_items(int index) const;
  ::gs::rpc::Chunk* _internal_add_items();
  public:
  const ::gs::rpc::Chunk& items(int index) const;
  ::gs::rpc::Chunk* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gs::rpc::Chunk >&
      items() const;

  // @@protoc_insertion_point(class_scope:gs.rpc.LargeAttrValue.ChunkList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gs::rpc::Chunk > items_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_attr_5fvalue_2eproto;
};
// -------------------------------------------------------------------

class LargeAttrValue_ChunkMetaList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gs.rpc.LargeAttrValue.ChunkMetaList) */ {
 public:
  inline LargeAttrValue_ChunkMetaList() : LargeAttrValue_ChunkMetaList(nullptr) {}
  ~LargeAttrValue_ChunkMetaList() override;
  explicit PROTOBUF_CONSTEXPR LargeAttrValue_ChunkMetaList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LargeAttrValue_ChunkMetaList(const LargeAttrValue_ChunkMetaList& from);
  LargeAttrValue_ChunkMetaList(LargeAttrValue_ChunkMetaList&& from) noexcept
    : LargeAttrValue_ChunkMetaList() {
    *this = ::std::move(from);
  }

  inline LargeAttrValue_ChunkMetaList& operator=(const LargeAttrValue_ChunkMetaList& from) {
    CopyFrom(from);
    return *this;
  }
  inline LargeAttrValue_ChunkMetaList& operator=(LargeAttrValue_ChunkMetaList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LargeAttrValue_ChunkMetaList& default_instance() {
    return *internal_default_instance();
  }
  static inline const LargeAttrValue_ChunkMetaList* internal_default_instance() {
    return reinterpret_cast<const LargeAttrValue_ChunkMetaList*>(
               &_LargeAttrValue_ChunkMetaList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(LargeAttrValue_ChunkMetaList& a, LargeAttrValue_ChunkMetaList& b) {
    a.Swap(&b);
  }
  inline void Swap(LargeAttrValue_ChunkMetaList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LargeAttrValue_ChunkMetaList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LargeAttrValue_ChunkMetaList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LargeAttrValue_ChunkMetaList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LargeAttrValue_ChunkMetaList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LargeAttrValue_ChunkMetaList& from) {
    LargeAttrValue_ChunkMetaList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LargeAttrValue_ChunkMetaList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gs.rpc.LargeAttrValue.ChunkMetaList";
  }
  protected:
  explicit LargeAttrValue_ChunkMetaList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated .gs.rpc.ChunkMeta items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::gs::rpc::ChunkMeta* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gs::rpc::ChunkMeta >*
      mutable_items();
  private:
  const ::gs::rpc::ChunkMeta& _internal_items(int index) const;
  ::gs::rpc::ChunkMeta* _internal_add_items();
  public:
  const ::gs::rpc::ChunkMeta& items(int index) const;
  ::gs::rpc::ChunkMeta* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gs::rpc::ChunkMeta >&
      items() const;

  // @@protoc_insertion_point(class_scope:gs.rpc.LargeAttrValue.ChunkMetaList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gs::rpc::ChunkMeta > items_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_attr_5fvalue_2eproto;
};
// -------------------------------------------------------------------

class LargeAttrValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gs.rpc.LargeAttrValue) */ {
 public:
  inline LargeAttrValue() : LargeAttrValue(nullptr) {}
  ~LargeAttrValue() override;
  explicit PROTOBUF_CONSTEXPR LargeAttrValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LargeAttrValue(const LargeAttrValue& from);
  LargeAttrValue(LargeAttrValue&& from) noexcept
    : LargeAttrValue() {
    *this = ::std::move(from);
  }

  inline LargeAttrValue& operator=(const LargeAttrValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline LargeAttrValue& operator=(LargeAttrValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LargeAttrValue& default_instance() {
    return *internal_default_instance();
  }
  enum LargeValueCase {
    kChunkList = 1,
    kChunkMetaList = 2,
    LARGE_VALUE_NOT_SET = 0,
  };

  static inline const LargeAttrValue* internal_default_instance() {
    return reinterpret_cast<const LargeAttrValue*>(
               &_LargeAttrValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(LargeAttrValue& a, LargeAttrValue& b) {
    a.Swap(&b);
  }
  inline void Swap(LargeAttrValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LargeAttrValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LargeAttrValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LargeAttrValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LargeAttrValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LargeAttrValue& from) {
    LargeAttrValue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LargeAttrValue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gs.rpc.LargeAttrValue";
  }
  protected:
  explicit LargeAttrValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LargeAttrValue_ChunkList ChunkList;
  typedef LargeAttrValue_ChunkMetaList ChunkMetaList;

  // accessors -------------------------------------------------------

  enum : int {
    kChunkListFieldNumber = 1,
    kChunkMetaListFieldNumber = 2,
  };
  // .gs.rpc.LargeAttrValue.ChunkList chunk_list = 1;
  bool has_chunk_list() const;
  private:
  bool _internal_has_chunk_list() const;
  public:
  void clear_chunk_list();
  const ::gs::rpc::LargeAttrValue_ChunkList& chunk_list() const;
  PROTOBUF_NODISCARD ::gs::rpc::LargeAttrValue_ChunkList* release_chunk_list();
  ::gs::rpc::LargeAttrValue_ChunkList* mutable_chunk_list();
  void set_allocated_chunk_list(::gs::rpc::LargeAttrValue_ChunkList* chunk_list);
  private:
  const ::gs::rpc::LargeAttrValue_ChunkList& _internal_chunk_list() const;
  ::gs::rpc::LargeAttrValue_ChunkList* _internal_mutable_chunk_list();
  public:
  void unsafe_arena_set_allocated_chunk_list(
      ::gs::rpc::LargeAttrValue_ChunkList* chunk_list);
  ::gs::rpc::LargeAttrValue_ChunkList* unsafe_arena_release_chunk_list();

  // .gs.rpc.LargeAttrValue.ChunkMetaList chunk_meta_list = 2;
  bool has_chunk_meta_list() const;
  private:
  bool _internal_has_chunk_meta_list() const;
  public:
  void clear_chunk_meta_list();
  const ::gs::rpc::LargeAttrValue_ChunkMetaList& chunk_meta_list() const;
  PROTOBUF_NODISCARD ::gs::rpc::LargeAttrValue_ChunkMetaList* release_chunk_meta_list();
  ::gs::rpc::LargeAttrValue_ChunkMetaList* mutable_chunk_meta_list();
  void set_allocated_chunk_meta_list(::gs::rpc::LargeAttrValue_ChunkMetaList* chunk_meta_list);
  private:
  const ::gs::rpc::LargeAttrValue_ChunkMetaList& _internal_chunk_meta_list() const;
  ::gs::rpc::LargeAttrValue_ChunkMetaList* _internal_mutable_chunk_meta_list();
  public:
  void unsafe_arena_set_allocated_chunk_meta_list(
      ::gs::rpc::LargeAttrValue_ChunkMetaList* chunk_meta_list);
  ::gs::rpc::LargeAttrValue_ChunkMetaList* unsafe_arena_release_chunk_meta_list();

  void clear_large_value();
  LargeValueCase large_value_case() const;
  // @@protoc_insertion_point(class_scope:gs.rpc.LargeAttrValue)
 private:
  class _Internal;
  void set_has_chunk_list();
  void set_has_chunk_meta_list();

  inline bool has_large_value() const;
  inline void clear_has_large_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union LargeValueUnion {
      constexpr LargeValueUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::gs::rpc::LargeAttrValue_ChunkList* chunk_list_;
      ::gs::rpc::LargeAttrValue_ChunkMetaList* chunk_meta_list_;
    } large_value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_attr_5fvalue_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AttrValue_ListValue

// repeated bytes s = 2;
inline int AttrValue_ListValue::_internal_s_size() const {
  return _impl_.s_.size();
}
inline int AttrValue_ListValue::s_size() const {
  return _internal_s_size();
}
inline void AttrValue_ListValue::clear_s() {
  _impl_.s_.Clear();
}
inline std::string* AttrValue_ListValue::add_s() {
  std::string* _s = _internal_add_s();
  // @@protoc_insertion_point(field_add_mutable:gs.rpc.AttrValue.ListValue.s)
  return _s;
}
inline const std::string& AttrValue_ListValue::_internal_s(int index) const {
  return _impl_.s_.Get(index);
}
inline const std::string& AttrValue_ListValue::s(int index) const {
  // @@protoc_insertion_point(field_get:gs.rpc.AttrValue.ListValue.s)
  return _internal_s(index);
}
inline std::string* AttrValue_ListValue::mutable_s(int index) {
  // @@protoc_insertion_point(field_mutable:gs.rpc.AttrValue.ListValue.s)
  return _impl_.s_.Mutable(index);
}
inline void AttrValue_ListValue::set_s(int index, const std::string& value) {
  _impl_.s_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:gs.rpc.AttrValue.ListValue.s)
}
inline void AttrValue_ListValue::set_s(int index, std::string&& value) {
  _impl_.s_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:gs.rpc.AttrValue.ListValue.s)
}
inline void AttrValue_ListValue::set_s(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.s_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gs.rpc.AttrValue.ListValue.s)
}
inline void AttrValue_ListValue::set_s(int index, const void* value, size_t size) {
  _impl_.s_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gs.rpc.AttrValue.ListValue.s)
}
inline std::string* AttrValue_ListValue::_internal_add_s() {
  return _impl_.s_.Add();
}
inline void AttrValue_ListValue::add_s(const std::string& value) {
  _impl_.s_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gs.rpc.AttrValue.ListValue.s)
}
inline void AttrValue_ListValue::add_s(std::string&& value) {
  _impl_.s_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:gs.rpc.AttrValue.ListValue.s)
}
inline void AttrValue_ListValue::add_s(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.s_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gs.rpc.AttrValue.ListValue.s)
}
inline void AttrValue_ListValue::add_s(const void* value, size_t size) {
  _impl_.s_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gs.rpc.AttrValue.ListValue.s)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AttrValue_ListValue::s() const {
  // @@protoc_insertion_point(field_list:gs.rpc.AttrValue.ListValue.s)
  return _impl_.s_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AttrValue_ListValue::mutable_s() {
  // @@protoc_insertion_point(field_mutable_list:gs.rpc.AttrValue.ListValue.s)
  return &_impl_.s_;
}

// repeated int64 i = 3 [packed = true];
inline int AttrValue_ListValue::_internal_i_size() const {
  return _impl_.i_.size();
}
inline int AttrValue_ListValue::i_size() const {
  return _internal_i_size();
}
inline void AttrValue_ListValue::clear_i() {
  _impl_.i_.Clear();
}
inline int64_t AttrValue_ListValue::_internal_i(int index) const {
  return _impl_.i_.Get(index);
}
inline int64_t AttrValue_ListValue::i(int index) const {
  // @@protoc_insertion_point(field_get:gs.rpc.AttrValue.ListValue.i)
  return _internal_i(index);
}
inline void AttrValue_ListValue::set_i(int index, int64_t value) {
  _impl_.i_.Set(index, value);
  // @@protoc_insertion_point(field_set:gs.rpc.AttrValue.ListValue.i)
}
inline void AttrValue_ListValue::_internal_add_i(int64_t value) {
  _impl_.i_.Add(value);
}
inline void AttrValue_ListValue::add_i(int64_t value) {
  _internal_add_i(value);
  // @@protoc_insertion_point(field_add:gs.rpc.AttrValue.ListValue.i)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
AttrValue_ListValue::_internal_i() const {
  return _impl_.i_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
AttrValue_ListValue::i() const {
  // @@protoc_insertion_point(field_list:gs.rpc.AttrValue.ListValue.i)
  return _internal_i();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
AttrValue_ListValue::_internal_mutable_i() {
  return &_impl_.i_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
AttrValue_ListValue::mutable_i() {
  // @@protoc_insertion_point(field_mutable_list:gs.rpc.AttrValue.ListValue.i)
  return _internal_mutable_i();
}

// repeated float f = 4 [packed = true];
inline int AttrValue_ListValue::_internal_f_size() const {
  return _impl_.f_.size();
}
inline int AttrValue_ListValue::f_size() const {
  return _internal_f_size();
}
inline void AttrValue_ListValue::clear_f() {
  _impl_.f_.Clear();
}
inline float AttrValue_ListValue::_internal_f(int index) const {
  return _impl_.f_.Get(index);
}
inline float AttrValue_ListValue::f(int index) const {
  // @@protoc_insertion_point(field_get:gs.rpc.AttrValue.ListValue.f)
  return _internal_f(index);
}
inline void AttrValue_ListValue::set_f(int index, float value) {
  _impl_.f_.Set(index, value);
  // @@protoc_insertion_point(field_set:gs.rpc.AttrValue.ListValue.f)
}
inline void AttrValue_ListValue::_internal_add_f(float value) {
  _impl_.f_.Add(value);
}
inline void AttrValue_ListValue::add_f(float value) {
  _internal_add_f(value);
  // @@protoc_insertion_point(field_add:gs.rpc.AttrValue.ListValue.f)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
AttrValue_ListValue::_internal_f() const {
  return _impl_.f_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
AttrValue_ListValue::f() const {
  // @@protoc_insertion_point(field_list:gs.rpc.AttrValue.ListValue.f)
  return _internal_f();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
AttrValue_ListValue::_internal_mutable_f() {
  return &_impl_.f_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
AttrValue_ListValue::mutable_f() {
  // @@protoc_insertion_point(field_mutable_list:gs.rpc.AttrValue.ListValue.f)
  return _internal_mutable_f();
}

// repeated bool b = 5 [packed = true];
inline int AttrValue_ListValue::_internal_b_size() const {
  return _impl_.b_.size();
}
inline int AttrValue_ListValue::b_size() const {
  return _internal_b_size();
}
inline void AttrValue_ListValue::clear_b() {
  _impl_.b_.Clear();
}
inline bool AttrValue_ListValue::_internal_b(int index) const {
  return _impl_.b_.Get(index);
}
inline bool AttrValue_ListValue::b(int index) const {
  // @@protoc_insertion_point(field_get:gs.rpc.AttrValue.ListValue.b)
  return _internal_b(index);
}
inline void AttrValue_ListValue::set_b(int index, bool value) {
  _impl_.b_.Set(index, value);
  // @@protoc_insertion_point(field_set:gs.rpc.AttrValue.ListValue.b)
}
inline void AttrValue_ListValue::_internal_add_b(bool value) {
  _impl_.b_.Add(value);
}
inline void AttrValue_ListValue::add_b(bool value) {
  _internal_add_b(value);
  // @@protoc_insertion_point(field_add:gs.rpc.AttrValue.ListValue.b)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
AttrValue_ListValue::_internal_b() const {
  return _impl_.b_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
AttrValue_ListValue::b() const {
  // @@protoc_insertion_point(field_list:gs.rpc.AttrValue.ListValue.b)
  return _internal_b();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
AttrValue_ListValue::_internal_mutable_b() {
  return &_impl_.b_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
AttrValue_ListValue::mutable_b() {
  // @@protoc_insertion_point(field_mutable_list:gs.rpc.AttrValue.ListValue.b)
  return _internal_mutable_b();
}

// repeated .gs.rpc.NameAttrList func = 9;
inline int AttrValue_ListValue::_internal_func_size() const {
  return _impl_.func_.size();
}
inline int AttrValue_ListValue::func_size() const {
  return _internal_func_size();
}
inline void AttrValue_ListValue::clear_func() {
  _impl_.func_.Clear();
}
inline ::gs::rpc::NameAttrList* AttrValue_ListValue::mutable_func(int index) {
  // @@protoc_insertion_point(field_mutable:gs.rpc.AttrValue.ListValue.func)
  return _impl_.func_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gs::rpc::NameAttrList >*
AttrValue_ListValue::mutable_func() {
  // @@protoc_insertion_point(field_mutable_list:gs.rpc.AttrValue.ListValue.func)
  return &_impl_.func_;
}
inline const ::gs::rpc::NameAttrList& AttrValue_ListValue::_internal_func(int index) const {
  return _impl_.func_.Get(index);
}
inline const ::gs::rpc::NameAttrList& AttrValue_ListValue::func(int index) const {
  // @@protoc_insertion_point(field_get:gs.rpc.AttrValue.ListValue.func)
  return _internal_func(index);
}
inline ::gs::rpc::NameAttrList* AttrValue_ListValue::_internal_add_func() {
  return _impl_.func_.Add();
}
inline ::gs::rpc::NameAttrList* AttrValue_ListValue::add_func() {
  ::gs::rpc::NameAttrList* _add = _internal_add_func();
  // @@protoc_insertion_point(field_add:gs.rpc.AttrValue.ListValue.func)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gs::rpc::NameAttrList >&
AttrValue_ListValue::func() const {
  // @@protoc_insertion_point(field_list:gs.rpc.AttrValue.ListValue.func)
  return _impl_.func_;
}

// repeated .gs.rpc.AttrValue.ListValue list = 10;
inline int AttrValue_ListValue::_internal_list_size() const {
  return _impl_.list_.size();
}
inline int AttrValue_ListValue::list_size() const {
  return _internal_list_size();
}
inline void AttrValue_ListValue::clear_list() {
  _impl_.list_.Clear();
}
inline ::gs::rpc::AttrValue_ListValue* AttrValue_ListValue::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:gs.rpc.AttrValue.ListValue.list)
  return _impl_.list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gs::rpc::AttrValue_ListValue >*
AttrValue_ListValue::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:gs.rpc.AttrValue.ListValue.list)
  return &_impl_.list_;
}
inline const ::gs::rpc::AttrValue_ListValue& AttrValue_ListValue::_internal_list(int index) const {
  return _impl_.list_.Get(index);
}
inline const ::gs::rpc::AttrValue_ListValue& AttrValue_ListValue::list(int index) const {
  // @@protoc_insertion_point(field_get:gs.rpc.AttrValue.ListValue.list)
  return _internal_list(index);
}
inline ::gs::rpc::AttrValue_ListValue* AttrValue_ListValue::_internal_add_list() {
  return _impl_.list_.Add();
}
inline ::gs::rpc::AttrValue_ListValue* AttrValue_ListValue::add_list() {
  ::gs::rpc::AttrValue_ListValue* _add = _internal_add_list();
  // @@protoc_insertion_point(field_add:gs.rpc.AttrValue.ListValue.list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gs::rpc::AttrValue_ListValue >&
AttrValue_ListValue::list() const {
  // @@protoc_insertion_point(field_list:gs.rpc.AttrValue.ListValue.list)
  return _impl_.list_;
}

// -------------------------------------------------------------------

// AttrValue

// .gs.rpc.AttrValue.NullValue null = 1;
inline bool AttrValue::_internal_has_null() const {
  return value_case() == kNull;
}
inline bool AttrValue::has_null() const {
  return _internal_has_null();
}
inline void AttrValue::set_has_null() {
  _impl_._oneof_case_[0] = kNull;
}
inline void AttrValue::clear_null() {
  if (_internal_has_null()) {
    _impl_.value_.null_ = 0;
    clear_has_value();
  }
}
inline ::gs::rpc::AttrValue_NullValue AttrValue::_internal_null() const {
  if (_internal_has_null()) {
    return static_cast< ::gs::rpc::AttrValue_NullValue >(_impl_.value_.null_);
  }
  return static_cast< ::gs::rpc::AttrValue_NullValue >(0);
}
inline ::gs::rpc::AttrValue_NullValue AttrValue::null() const {
  // @@protoc_insertion_point(field_get:gs.rpc.AttrValue.null)
  return _internal_null();
}
inline void AttrValue::_internal_set_null(::gs::rpc::AttrValue_NullValue value) {
  if (!_internal_has_null()) {
    clear_value();
    set_has_null();
  }
  _impl_.value_.null_ = value;
}
inline void AttrValue::set_null(::gs::rpc::AttrValue_NullValue value) {
  _internal_set_null(value);
  // @@protoc_insertion_point(field_set:gs.rpc.AttrValue.null)
}

// bytes s = 2;
inline bool AttrValue::_internal_has_s() const {
  return value_case() == kS;
}
inline bool AttrValue::has_s() const {
  return _internal_has_s();
}
inline void AttrValue::set_has_s() {
  _impl_._oneof_case_[0] = kS;
}
inline void AttrValue::clear_s() {
  if (_internal_has_s()) {
    _impl_.value_.s_.Destroy();
    clear_has_value();
  }
}
inline const std::string& AttrValue::s() const {
  // @@protoc_insertion_point(field_get:gs.rpc.AttrValue.s)
  return _internal_s();
}
template <typename ArgT0, typename... ArgT>
inline void AttrValue::set_s(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_s()) {
    clear_value();
    set_has_s();
    _impl_.value_.s_.InitDefault();
  }
  _impl_.value_.s_.SetBytes( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gs.rpc.AttrValue.s)
}
inline std::string* AttrValue::mutable_s() {
  std::string* _s = _internal_mutable_s();
  // @@protoc_insertion_point(field_mutable:gs.rpc.AttrValue.s)
  return _s;
}
inline const std::string& AttrValue::_internal_s() const {
  if (_internal_has_s()) {
    return _impl_.value_.s_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void AttrValue::_internal_set_s(const std::string& value) {
  if (!_internal_has_s()) {
    clear_value();
    set_has_s();
    _impl_.value_.s_.InitDefault();
  }
  _impl_.value_.s_.Set(value, GetArenaForAllocation());
}
inline std::string* AttrValue::_internal_mutable_s() {
  if (!_internal_has_s()) {
    clear_value();
    set_has_s();
    _impl_.value_.s_.InitDefault();
  }
  return _impl_.value_.s_.Mutable(      GetArenaForAllocation());
}
inline std::string* AttrValue::release_s() {
  // @@protoc_insertion_point(field_release:gs.rpc.AttrValue.s)
  if (_internal_has_s()) {
    clear_has_value();
    return _impl_.value_.s_.Release();
  } else {
    return nullptr;
  }
}
inline void AttrValue::set_allocated_s(std::string* s) {
  if (has_value()) {
    clear_value();
  }
  if (s != nullptr) {
    set_has_s();
    _impl_.value_.s_.InitAllocated(s, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.AttrValue.s)
}

// int64 i = 3;
inline bool AttrValue::_internal_has_i() const {
  return value_case() == kI;
}
inline bool AttrValue::has_i() const {
  return _internal_has_i();
}
inline void AttrValue::set_has_i() {
  _impl_._oneof_case_[0] = kI;
}
inline void AttrValue::clear_i() {
  if (_internal_has_i()) {
    _impl_.value_.i_ = int64_t{0};
    clear_has_value();
  }
}
inline int64_t AttrValue::_internal_i() const {
  if (_internal_has_i()) {
    return _impl_.value_.i_;
  }
  return int64_t{0};
}
inline void AttrValue::_internal_set_i(int64_t value) {
  if (!_internal_has_i()) {
    clear_value();
    set_has_i();
  }
  _impl_.value_.i_ = value;
}
inline int64_t AttrValue::i() const {
  // @@protoc_insertion_point(field_get:gs.rpc.AttrValue.i)
  return _internal_i();
}
inline void AttrValue::set_i(int64_t value) {
  _internal_set_i(value);
  // @@protoc_insertion_point(field_set:gs.rpc.AttrValue.i)
}

// uint64 u = 4;
inline bool AttrValue::_internal_has_u() const {
  return value_case() == kU;
}
inline bool AttrValue::has_u() const {
  return _internal_has_u();
}
inline void AttrValue::set_has_u() {
  _impl_._oneof_case_[0] = kU;
}
inline void AttrValue::clear_u() {
  if (_internal_has_u()) {
    _impl_.value_.u_ = uint64_t{0u};
    clear_has_value();
  }
}
inline uint64_t AttrValue::_internal_u() const {
  if (_internal_has_u()) {
    return _impl_.value_.u_;
  }
  return uint64_t{0u};
}
inline void AttrValue::_internal_set_u(uint64_t value) {
  if (!_internal_has_u()) {
    clear_value();
    set_has_u();
  }
  _impl_.value_.u_ = value;
}
inline uint64_t AttrValue::u() const {
  // @@protoc_insertion_point(field_get:gs.rpc.AttrValue.u)
  return _internal_u();
}
inline void AttrValue::set_u(uint64_t value) {
  _internal_set_u(value);
  // @@protoc_insertion_point(field_set:gs.rpc.AttrValue.u)
}

// float f = 5;
inline bool AttrValue::_internal_has_f() const {
  return value_case() == kF;
}
inline bool AttrValue::has_f() const {
  return _internal_has_f();
}
inline void AttrValue::set_has_f() {
  _impl_._oneof_case_[0] = kF;
}
inline void AttrValue::clear_f() {
  if (_internal_has_f()) {
    _impl_.value_.f_ = 0;
    clear_has_value();
  }
}
inline float AttrValue::_internal_f() const {
  if (_internal_has_f()) {
    return _impl_.value_.f_;
  }
  return 0;
}
inline void AttrValue::_internal_set_f(float value) {
  if (!_internal_has_f()) {
    clear_value();
    set_has_f();
  }
  _impl_.value_.f_ = value;
}
inline float AttrValue::f() const {
  // @@protoc_insertion_point(field_get:gs.rpc.AttrValue.f)
  return _internal_f();
}
inline void AttrValue::set_f(float value) {
  _internal_set_f(value);
  // @@protoc_insertion_point(field_set:gs.rpc.AttrValue.f)
}

// bool b = 6;
inline bool AttrValue::_internal_has_b() const {
  return value_case() == kB;
}
inline bool AttrValue::has_b() const {
  return _internal_has_b();
}
inline void AttrValue::set_has_b() {
  _impl_._oneof_case_[0] = kB;
}
inline void AttrValue::clear_b() {
  if (_internal_has_b()) {
    _impl_.value_.b_ = false;
    clear_has_value();
  }
}
inline bool AttrValue::_internal_b() const {
  if (_internal_has_b()) {
    return _impl_.value_.b_;
  }
  return false;
}
inline void AttrValue::_internal_set_b(bool value) {
  if (!_internal_has_b()) {
    clear_value();
    set_has_b();
  }
  _impl_.value_.b_ = value;
}
inline bool AttrValue::b() const {
  // @@protoc_insertion_point(field_get:gs.rpc.AttrValue.b)
  return _internal_b();
}
inline void AttrValue::set_b(bool value) {
  _internal_set_b(value);
  // @@protoc_insertion_point(field_set:gs.rpc.AttrValue.b)
}

// .gs.rpc.AttrValue.ListValue list = 11;
inline bool AttrValue::_internal_has_list() const {
  return value_case() == kList;
}
inline bool AttrValue::has_list() const {
  return _internal_has_list();
}
inline void AttrValue::set_has_list() {
  _impl_._oneof_case_[0] = kList;
}
inline void AttrValue::clear_list() {
  if (_internal_has_list()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.value_.list_;
    }
    clear_has_value();
  }
}
inline ::gs::rpc::AttrValue_ListValue* AttrValue::release_list() {
  // @@protoc_insertion_point(field_release:gs.rpc.AttrValue.list)
  if (_internal_has_list()) {
    clear_has_value();
    ::gs::rpc::AttrValue_ListValue* temp = _impl_.value_.list_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::gs::rpc::AttrValue_ListValue& AttrValue::_internal_list() const {
  return _internal_has_list()
      ? *_impl_.value_.list_
      : reinterpret_cast< ::gs::rpc::AttrValue_ListValue&>(::gs::rpc::_AttrValue_ListValue_default_instance_);
}
inline const ::gs::rpc::AttrValue_ListValue& AttrValue::list() const {
  // @@protoc_insertion_point(field_get:gs.rpc.AttrValue.list)
  return _internal_list();
}
inline ::gs::rpc::AttrValue_ListValue* AttrValue::unsafe_arena_release_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:gs.rpc.AttrValue.list)
  if (_internal_has_list()) {
    clear_has_value();
    ::gs::rpc::AttrValue_ListValue* temp = _impl_.value_.list_;
    _impl_.value_.list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AttrValue::unsafe_arena_set_allocated_list(::gs::rpc::AttrValue_ListValue* list) {
  clear_value();
  if (list) {
    set_has_list();
    _impl_.value_.list_ = list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gs.rpc.AttrValue.list)
}
inline ::gs::rpc::AttrValue_ListValue* AttrValue::_internal_mutable_list() {
  if (!_internal_has_list()) {
    clear_value();
    set_has_list();
    _impl_.value_.list_ = CreateMaybeMessage< ::gs::rpc::AttrValue_ListValue >(GetArenaForAllocation());
  }
  return _impl_.value_.list_;
}
inline ::gs::rpc::AttrValue_ListValue* AttrValue::mutable_list() {
  ::gs::rpc::AttrValue_ListValue* _msg = _internal_mutable_list();
  // @@protoc_insertion_point(field_mutable:gs.rpc.AttrValue.list)
  return _msg;
}

// .gs.rpc.NameAttrList func = 12;
inline bool AttrValue::_internal_has_func() const {
  return value_case() == kFunc;
}
inline bool AttrValue::has_func() const {
  return _internal_has_func();
}
inline void AttrValue::set_has_func() {
  _impl_._oneof_case_[0] = kFunc;
}
inline void AttrValue::clear_func() {
  if (_internal_has_func()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.value_.func_;
    }
    clear_has_value();
  }
}
inline ::gs::rpc::NameAttrList* AttrValue::release_func() {
  // @@protoc_insertion_point(field_release:gs.rpc.AttrValue.func)
  if (_internal_has_func()) {
    clear_has_value();
    ::gs::rpc::NameAttrList* temp = _impl_.value_.func_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.func_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::gs::rpc::NameAttrList& AttrValue::_internal_func() const {
  return _internal_has_func()
      ? *_impl_.value_.func_
      : reinterpret_cast< ::gs::rpc::NameAttrList&>(::gs::rpc::_NameAttrList_default_instance_);
}
inline const ::gs::rpc::NameAttrList& AttrValue::func() const {
  // @@protoc_insertion_point(field_get:gs.rpc.AttrValue.func)
  return _internal_func();
}
inline ::gs::rpc::NameAttrList* AttrValue::unsafe_arena_release_func() {
  // @@protoc_insertion_point(field_unsafe_arena_release:gs.rpc.AttrValue.func)
  if (_internal_has_func()) {
    clear_has_value();
    ::gs::rpc::NameAttrList* temp = _impl_.value_.func_;
    _impl_.value_.func_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AttrValue::unsafe_arena_set_allocated_func(::gs::rpc::NameAttrList* func) {
  clear_value();
  if (func) {
    set_has_func();
    _impl_.value_.func_ = func;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gs.rpc.AttrValue.func)
}
inline ::gs::rpc::NameAttrList* AttrValue::_internal_mutable_func() {
  if (!_internal_has_func()) {
    clear_value();
    set_has_func();
    _impl_.value_.func_ = CreateMaybeMessage< ::gs::rpc::NameAttrList >(GetArenaForAllocation());
  }
  return _impl_.value_.func_;
}
inline ::gs::rpc::NameAttrList* AttrValue::mutable_func() {
  ::gs::rpc::NameAttrList* _msg = _internal_mutable_func();
  // @@protoc_insertion_point(field_mutable:gs.rpc.AttrValue.func)
  return _msg;
}

inline bool AttrValue::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void AttrValue::clear_has_value() {
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}
inline AttrValue::ValueCase AttrValue::value_case() const {
  return AttrValue::ValueCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// NameAttrList

// string name = 1;
inline void NameAttrList::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& NameAttrList::name() const {
  // @@protoc_insertion_point(field_get:gs.rpc.NameAttrList.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NameAttrList::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gs.rpc.NameAttrList.name)
}
inline std::string* NameAttrList::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:gs.rpc.NameAttrList.name)
  return _s;
}
inline const std::string& NameAttrList::_internal_name() const {
  return _impl_.name_.Get();
}
inline void NameAttrList::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* NameAttrList::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* NameAttrList::release_name() {
  // @@protoc_insertion_point(field_release:gs.rpc.NameAttrList.name)
  return _impl_.name_.Release();
}
inline void NameAttrList::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.NameAttrList.name)
}

// map<int32, .gs.rpc.AttrValue> attr = 2;
inline int NameAttrList::_internal_attr_size() const {
  return _impl_.attr_.size();
}
inline int NameAttrList::attr_size() const {
  return _internal_attr_size();
}
inline void NameAttrList::clear_attr() {
  _impl_.attr_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::gs::rpc::AttrValue >&
NameAttrList::_internal_attr() const {
  return _impl_.attr_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::gs::rpc::AttrValue >&
NameAttrList::attr() const {
  // @@protoc_insertion_point(field_map:gs.rpc.NameAttrList.attr)
  return _internal_attr();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::gs::rpc::AttrValue >*
NameAttrList::_internal_mutable_attr() {
  return _impl_.attr_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::gs::rpc::AttrValue >*
NameAttrList::mutable_attr() {
  // @@protoc_insertion_point(field_mutable_map:gs.rpc.NameAttrList.attr)
  return _internal_mutable_attr();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Chunk

// bytes buffer = 1;
inline void Chunk::clear_buffer() {
  _impl_.buffer_.ClearToEmpty();
}
inline const std::string& Chunk::buffer() const {
  // @@protoc_insertion_point(field_get:gs.rpc.Chunk.buffer)
  return _internal_buffer();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Chunk::set_buffer(ArgT0&& arg0, ArgT... args) {
 
 _impl_.buffer_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gs.rpc.Chunk.buffer)
}
inline std::string* Chunk::mutable_buffer() {
  std::string* _s = _internal_mutable_buffer();
  // @@protoc_insertion_point(field_mutable:gs.rpc.Chunk.buffer)
  return _s;
}
inline const std::string& Chunk::_internal_buffer() const {
  return _impl_.buffer_.Get();
}
inline void Chunk::_internal_set_buffer(const std::string& value) {
  
  _impl_.buffer_.Set(value, GetArenaForAllocation());
}
inline std::string* Chunk::_internal_mutable_buffer() {
  
  return _impl_.buffer_.Mutable(GetArenaForAllocation());
}
inline std::string* Chunk::release_buffer() {
  // @@protoc_insertion_point(field_release:gs.rpc.Chunk.buffer)
  return _impl_.buffer_.Release();
}
inline void Chunk::set_allocated_buffer(std::string* buffer) {
  if (buffer != nullptr) {
    
  } else {
    
  }
  _impl_.buffer_.SetAllocated(buffer, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.buffer_.IsDefault()) {
    _impl_.buffer_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.Chunk.buffer)
}

// map<int32, .gs.rpc.AttrValue> attr = 2;
inline int Chunk::_internal_attr_size() const {
  return _impl_.attr_.size();
}
inline int Chunk::attr_size() const {
  return _internal_attr_size();
}
inline void Chunk::clear_attr() {
  _impl_.attr_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::gs::rpc::AttrValue >&
Chunk::_internal_attr() const {
  return _impl_.attr_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::gs::rpc::AttrValue >&
Chunk::attr() const {
  // @@protoc_insertion_point(field_map:gs.rpc.Chunk.attr)
  return _internal_attr();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::gs::rpc::AttrValue >*
Chunk::_internal_mutable_attr() {
  return _impl_.attr_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::gs::rpc::AttrValue >*
Chunk::mutable_attr() {
  // @@protoc_insertion_point(field_mutable_map:gs.rpc.Chunk.attr)
  return _internal_mutable_attr();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ChunkMeta

// int64 size = 1;
inline void ChunkMeta::clear_size() {
  _impl_.size_ = int64_t{0};
}
inline int64_t ChunkMeta::_internal_size() const {
  return _impl_.size_;
}
inline int64_t ChunkMeta::size() const {
  // @@protoc_insertion_point(field_get:gs.rpc.ChunkMeta.size)
  return _internal_size();
}
inline void ChunkMeta::_internal_set_size(int64_t value) {
  
  _impl_.size_ = value;
}
inline void ChunkMeta::set_size(int64_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:gs.rpc.ChunkMeta.size)
}

// map<int32, .gs.rpc.AttrValue> attr = 3;
inline int ChunkMeta::_internal_attr_size() const {
  return _impl_.attr_.size();
}
inline int ChunkMeta::attr_size() const {
  return _internal_attr_size();
}
inline void ChunkMeta::clear_attr() {
  _impl_.attr_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::gs::rpc::AttrValue >&
ChunkMeta::_internal_attr() const {
  return _impl_.attr_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::gs::rpc::AttrValue >&
ChunkMeta::attr() const {
  // @@protoc_insertion_point(field_map:gs.rpc.ChunkMeta.attr)
  return _internal_attr();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::gs::rpc::AttrValue >*
ChunkMeta::_internal_mutable_attr() {
  return _impl_.attr_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::gs::rpc::AttrValue >*
ChunkMeta::mutable_attr() {
  // @@protoc_insertion_point(field_mutable_map:gs.rpc.ChunkMeta.attr)
  return _internal_mutable_attr();
}

// -------------------------------------------------------------------

// LargeAttrValue_ChunkList

// repeated .gs.rpc.Chunk items = 1;
inline int LargeAttrValue_ChunkList::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int LargeAttrValue_ChunkList::items_size() const {
  return _internal_items_size();
}
inline void LargeAttrValue_ChunkList::clear_items() {
  _impl_.items_.Clear();
}
inline ::gs::rpc::Chunk* LargeAttrValue_ChunkList::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:gs.rpc.LargeAttrValue.ChunkList.items)
  return _impl_.items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gs::rpc::Chunk >*
LargeAttrValue_ChunkList::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:gs.rpc.LargeAttrValue.ChunkList.items)
  return &_impl_.items_;
}
inline const ::gs::rpc::Chunk& LargeAttrValue_ChunkList::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline const ::gs::rpc::Chunk& LargeAttrValue_ChunkList::items(int index) const {
  // @@protoc_insertion_point(field_get:gs.rpc.LargeAttrValue.ChunkList.items)
  return _internal_items(index);
}
inline ::gs::rpc::Chunk* LargeAttrValue_ChunkList::_internal_add_items() {
  return _impl_.items_.Add();
}
inline ::gs::rpc::Chunk* LargeAttrValue_ChunkList::add_items() {
  ::gs::rpc::Chunk* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:gs.rpc.LargeAttrValue.ChunkList.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gs::rpc::Chunk >&
LargeAttrValue_ChunkList::items() const {
  // @@protoc_insertion_point(field_list:gs.rpc.LargeAttrValue.ChunkList.items)
  return _impl_.items_;
}

// -------------------------------------------------------------------

// LargeAttrValue_ChunkMetaList

// repeated .gs.rpc.ChunkMeta items = 1;
inline int LargeAttrValue_ChunkMetaList::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int LargeAttrValue_ChunkMetaList::items_size() const {
  return _internal_items_size();
}
inline void LargeAttrValue_ChunkMetaList::clear_items() {
  _impl_.items_.Clear();
}
inline ::gs::rpc::ChunkMeta* LargeAttrValue_ChunkMetaList::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:gs.rpc.LargeAttrValue.ChunkMetaList.items)
  return _impl_.items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gs::rpc::ChunkMeta >*
LargeAttrValue_ChunkMetaList::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:gs.rpc.LargeAttrValue.ChunkMetaList.items)
  return &_impl_.items_;
}
inline const ::gs::rpc::ChunkMeta& LargeAttrValue_ChunkMetaList::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline const ::gs::rpc::ChunkMeta& LargeAttrValue_ChunkMetaList::items(int index) const {
  // @@protoc_insertion_point(field_get:gs.rpc.LargeAttrValue.ChunkMetaList.items)
  return _internal_items(index);
}
inline ::gs::rpc::ChunkMeta* LargeAttrValue_ChunkMetaList::_internal_add_items() {
  return _impl_.items_.Add();
}
inline ::gs::rpc::ChunkMeta* LargeAttrValue_ChunkMetaList::add_items() {
  ::gs::rpc::ChunkMeta* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:gs.rpc.LargeAttrValue.ChunkMetaList.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gs::rpc::ChunkMeta >&
LargeAttrValue_ChunkMetaList::items() const {
  // @@protoc_insertion_point(field_list:gs.rpc.LargeAttrValue.ChunkMetaList.items)
  return _impl_.items_;
}

// -------------------------------------------------------------------

// LargeAttrValue

// .gs.rpc.LargeAttrValue.ChunkList chunk_list = 1;
inline bool LargeAttrValue::_internal_has_chunk_list() const {
  return large_value_case() == kChunkList;
}
inline bool LargeAttrValue::has_chunk_list() const {
  return _internal_has_chunk_list();
}
inline void LargeAttrValue::set_has_chunk_list() {
  _impl_._oneof_case_[0] = kChunkList;
}
inline void LargeAttrValue::clear_chunk_list() {
  if (_internal_has_chunk_list()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.large_value_.chunk_list_;
    }
    clear_has_large_value();
  }
}
inline ::gs::rpc::LargeAttrValue_ChunkList* LargeAttrValue::release_chunk_list() {
  // @@protoc_insertion_point(field_release:gs.rpc.LargeAttrValue.chunk_list)
  if (_internal_has_chunk_list()) {
    clear_has_large_value();
    ::gs::rpc::LargeAttrValue_ChunkList* temp = _impl_.large_value_.chunk_list_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.large_value_.chunk_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::gs::rpc::LargeAttrValue_ChunkList& LargeAttrValue::_internal_chunk_list() const {
  return _internal_has_chunk_list()
      ? *_impl_.large_value_.chunk_list_
      : reinterpret_cast< ::gs::rpc::LargeAttrValue_ChunkList&>(::gs::rpc::_LargeAttrValue_ChunkList_default_instance_);
}
inline const ::gs::rpc::LargeAttrValue_ChunkList& LargeAttrValue::chunk_list() const {
  // @@protoc_insertion_point(field_get:gs.rpc.LargeAttrValue.chunk_list)
  return _internal_chunk_list();
}
inline ::gs::rpc::LargeAttrValue_ChunkList* LargeAttrValue::unsafe_arena_release_chunk_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:gs.rpc.LargeAttrValue.chunk_list)
  if (_internal_has_chunk_list()) {
    clear_has_large_value();
    ::gs::rpc::LargeAttrValue_ChunkList* temp = _impl_.large_value_.chunk_list_;
    _impl_.large_value_.chunk_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void LargeAttrValue::unsafe_arena_set_allocated_chunk_list(::gs::rpc::LargeAttrValue_ChunkList* chunk_list) {
  clear_large_value();
  if (chunk_list) {
    set_has_chunk_list();
    _impl_.large_value_.chunk_list_ = chunk_list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gs.rpc.LargeAttrValue.chunk_list)
}
inline ::gs::rpc::LargeAttrValue_ChunkList* LargeAttrValue::_internal_mutable_chunk_list() {
  if (!_internal_has_chunk_list()) {
    clear_large_value();
    set_has_chunk_list();
    _impl_.large_value_.chunk_list_ = CreateMaybeMessage< ::gs::rpc::LargeAttrValue_ChunkList >(GetArenaForAllocation());
  }
  return _impl_.large_value_.chunk_list_;
}
inline ::gs::rpc::LargeAttrValue_ChunkList* LargeAttrValue::mutable_chunk_list() {
  ::gs::rpc::LargeAttrValue_ChunkList* _msg = _internal_mutable_chunk_list();
  // @@protoc_insertion_point(field_mutable:gs.rpc.LargeAttrValue.chunk_list)
  return _msg;
}

// .gs.rpc.LargeAttrValue.ChunkMetaList chunk_meta_list = 2;
inline bool LargeAttrValue::_internal_has_chunk_meta_list() const {
  return large_value_case() == kChunkMetaList;
}
inline bool LargeAttrValue::has_chunk_meta_list() const {
  return _internal_has_chunk_meta_list();
}
inline void LargeAttrValue::set_has_chunk_meta_list() {
  _impl_._oneof_case_[0] = kChunkMetaList;
}
inline void LargeAttrValue::clear_chunk_meta_list() {
  if (_internal_has_chunk_meta_list()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.large_value_.chunk_meta_list_;
    }
    clear_has_large_value();
  }
}
inline ::gs::rpc::LargeAttrValue_ChunkMetaList* LargeAttrValue::release_chunk_meta_list() {
  // @@protoc_insertion_point(field_release:gs.rpc.LargeAttrValue.chunk_meta_list)
  if (_internal_has_chunk_meta_list()) {
    clear_has_large_value();
    ::gs::rpc::LargeAttrValue_ChunkMetaList* temp = _impl_.large_value_.chunk_meta_list_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.large_value_.chunk_meta_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::gs::rpc::LargeAttrValue_ChunkMetaList& LargeAttrValue::_internal_chunk_meta_list() const {
  return _internal_has_chunk_meta_list()
      ? *_impl_.large_value_.chunk_meta_list_
      : reinterpret_cast< ::gs::rpc::LargeAttrValue_ChunkMetaList&>(::gs::rpc::_LargeAttrValue_ChunkMetaList_default_instance_);
}
inline const ::gs::rpc::LargeAttrValue_ChunkMetaList& LargeAttrValue::chunk_meta_list() const {
  // @@protoc_insertion_point(field_get:gs.rpc.LargeAttrValue.chunk_meta_list)
  return _internal_chunk_meta_list();
}
inline ::gs::rpc::LargeAttrValue_ChunkMetaList* LargeAttrValue::unsafe_arena_release_chunk_meta_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:gs.rpc.LargeAttrValue.chunk_meta_list)
  if (_internal_has_chunk_meta_list()) {
    clear_has_large_value();
    ::gs::rpc::LargeAttrValue_ChunkMetaList* temp = _impl_.large_value_.chunk_meta_list_;
    _impl_.large_value_.chunk_meta_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void LargeAttrValue::unsafe_arena_set_allocated_chunk_meta_list(::gs::rpc::LargeAttrValue_ChunkMetaList* chunk_meta_list) {
  clear_large_value();
  if (chunk_meta_list) {
    set_has_chunk_meta_list();
    _impl_.large_value_.chunk_meta_list_ = chunk_meta_list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gs.rpc.LargeAttrValue.chunk_meta_list)
}
inline ::gs::rpc::LargeAttrValue_ChunkMetaList* LargeAttrValue::_internal_mutable_chunk_meta_list() {
  if (!_internal_has_chunk_meta_list()) {
    clear_large_value();
    set_has_chunk_meta_list();
    _impl_.large_value_.chunk_meta_list_ = CreateMaybeMessage< ::gs::rpc::LargeAttrValue_ChunkMetaList >(GetArenaForAllocation());
  }
  return _impl_.large_value_.chunk_meta_list_;
}
inline ::gs::rpc::LargeAttrValue_ChunkMetaList* LargeAttrValue::mutable_chunk_meta_list() {
  ::gs::rpc::LargeAttrValue_ChunkMetaList* _msg = _internal_mutable_chunk_meta_list();
  // @@protoc_insertion_point(field_mutable:gs.rpc.LargeAttrValue.chunk_meta_list)
  return _msg;
}

inline bool LargeAttrValue::has_large_value() const {
  return large_value_case() != LARGE_VALUE_NOT_SET;
}
inline void LargeAttrValue::clear_has_large_value() {
  _impl_._oneof_case_[0] = LARGE_VALUE_NOT_SET;
}
inline LargeAttrValue::LargeValueCase LargeAttrValue::large_value_case() const {
  return LargeAttrValue::LargeValueCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc
}  // namespace gs

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::gs::rpc::AttrValue_NullValue> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gs::rpc::AttrValue_NullValue>() {
  return ::gs::rpc::AttrValue_NullValue_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_attr_5fvalue_2eproto
