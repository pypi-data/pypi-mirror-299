// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ddl_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ddl_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ddl_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "graph_def.pb.h"
#include "schema_common.pb.h"
#include "request_option.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ddl_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ddl_5fservice_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ddl_5fservice_2eproto;
namespace gs {
namespace rpc {
namespace groot {
class AddEdgeKindRequest;
struct AddEdgeKindRequestDefaultTypeInternal;
extern AddEdgeKindRequestDefaultTypeInternal _AddEdgeKindRequest_default_instance_;
class AddEdgeTypePropertiesRequest;
struct AddEdgeTypePropertiesRequestDefaultTypeInternal;
extern AddEdgeTypePropertiesRequestDefaultTypeInternal _AddEdgeTypePropertiesRequest_default_instance_;
class AddVertexTypePropertiesRequest;
struct AddVertexTypePropertiesRequestDefaultTypeInternal;
extern AddVertexTypePropertiesRequestDefaultTypeInternal _AddVertexTypePropertiesRequest_default_instance_;
class BatchSubmitRequest;
struct BatchSubmitRequestDefaultTypeInternal;
extern BatchSubmitRequestDefaultTypeInternal _BatchSubmitRequest_default_instance_;
class BatchSubmitRequest_DDLRequest;
struct BatchSubmitRequest_DDLRequestDefaultTypeInternal;
extern BatchSubmitRequest_DDLRequestDefaultTypeInternal _BatchSubmitRequest_DDLRequest_default_instance_;
class BatchSubmitResponse;
struct BatchSubmitResponseDefaultTypeInternal;
extern BatchSubmitResponseDefaultTypeInternal _BatchSubmitResponse_default_instance_;
class CreateEdgeTypeRequest;
struct CreateEdgeTypeRequestDefaultTypeInternal;
extern CreateEdgeTypeRequestDefaultTypeInternal _CreateEdgeTypeRequest_default_instance_;
class CreateVertexTypeRequest;
struct CreateVertexTypeRequestDefaultTypeInternal;
extern CreateVertexTypeRequestDefaultTypeInternal _CreateVertexTypeRequest_default_instance_;
class DropEdgeTypeRequest;
struct DropEdgeTypeRequestDefaultTypeInternal;
extern DropEdgeTypeRequestDefaultTypeInternal _DropEdgeTypeRequest_default_instance_;
class DropVertexTypeRequest;
struct DropVertexTypeRequestDefaultTypeInternal;
extern DropVertexTypeRequestDefaultTypeInternal _DropVertexTypeRequest_default_instance_;
class GetGraphDefRequest;
struct GetGraphDefRequestDefaultTypeInternal;
extern GetGraphDefRequestDefaultTypeInternal _GetGraphDefRequest_default_instance_;
class GetGraphDefResponse;
struct GetGraphDefResponseDefaultTypeInternal;
extern GetGraphDefResponseDefaultTypeInternal _GetGraphDefResponse_default_instance_;
class RemoveEdgeKindRequest;
struct RemoveEdgeKindRequestDefaultTypeInternal;
extern RemoveEdgeKindRequestDefaultTypeInternal _RemoveEdgeKindRequest_default_instance_;
}  // namespace groot
}  // namespace rpc
}  // namespace gs
PROTOBUF_NAMESPACE_OPEN
template<> ::gs::rpc::groot::AddEdgeKindRequest* Arena::CreateMaybeMessage<::gs::rpc::groot::AddEdgeKindRequest>(Arena*);
template<> ::gs::rpc::groot::AddEdgeTypePropertiesRequest* Arena::CreateMaybeMessage<::gs::rpc::groot::AddEdgeTypePropertiesRequest>(Arena*);
template<> ::gs::rpc::groot::AddVertexTypePropertiesRequest* Arena::CreateMaybeMessage<::gs::rpc::groot::AddVertexTypePropertiesRequest>(Arena*);
template<> ::gs::rpc::groot::BatchSubmitRequest* Arena::CreateMaybeMessage<::gs::rpc::groot::BatchSubmitRequest>(Arena*);
template<> ::gs::rpc::groot::BatchSubmitRequest_DDLRequest* Arena::CreateMaybeMessage<::gs::rpc::groot::BatchSubmitRequest_DDLRequest>(Arena*);
template<> ::gs::rpc::groot::BatchSubmitResponse* Arena::CreateMaybeMessage<::gs::rpc::groot::BatchSubmitResponse>(Arena*);
template<> ::gs::rpc::groot::CreateEdgeTypeRequest* Arena::CreateMaybeMessage<::gs::rpc::groot::CreateEdgeTypeRequest>(Arena*);
template<> ::gs::rpc::groot::CreateVertexTypeRequest* Arena::CreateMaybeMessage<::gs::rpc::groot::CreateVertexTypeRequest>(Arena*);
template<> ::gs::rpc::groot::DropEdgeTypeRequest* Arena::CreateMaybeMessage<::gs::rpc::groot::DropEdgeTypeRequest>(Arena*);
template<> ::gs::rpc::groot::DropVertexTypeRequest* Arena::CreateMaybeMessage<::gs::rpc::groot::DropVertexTypeRequest>(Arena*);
template<> ::gs::rpc::groot::GetGraphDefRequest* Arena::CreateMaybeMessage<::gs::rpc::groot::GetGraphDefRequest>(Arena*);
template<> ::gs::rpc::groot::GetGraphDefResponse* Arena::CreateMaybeMessage<::gs::rpc::groot::GetGraphDefResponse>(Arena*);
template<> ::gs::rpc::groot::RemoveEdgeKindRequest* Arena::CreateMaybeMessage<::gs::rpc::groot::RemoveEdgeKindRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace gs {
namespace rpc {
namespace groot {

// ===================================================================

class BatchSubmitRequest_DDLRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gs.rpc.groot.BatchSubmitRequest.DDLRequest) */ {
 public:
  inline BatchSubmitRequest_DDLRequest() : BatchSubmitRequest_DDLRequest(nullptr) {}
  ~BatchSubmitRequest_DDLRequest() override;
  explicit PROTOBUF_CONSTEXPR BatchSubmitRequest_DDLRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BatchSubmitRequest_DDLRequest(const BatchSubmitRequest_DDLRequest& from);
  BatchSubmitRequest_DDLRequest(BatchSubmitRequest_DDLRequest&& from) noexcept
    : BatchSubmitRequest_DDLRequest() {
    *this = ::std::move(from);
  }

  inline BatchSubmitRequest_DDLRequest& operator=(const BatchSubmitRequest_DDLRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchSubmitRequest_DDLRequest& operator=(BatchSubmitRequest_DDLRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BatchSubmitRequest_DDLRequest& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kCreateVertexTypeRequest = 1,
    kCreateEdgeTypeRequest = 2,
    kAddEdgeKindRequest = 3,
    kRemoveEdgeKindRequest = 4,
    kDropVertexTypeRequest = 5,
    kDropEdgeTypeRequest = 6,
    kAddVertexTypePropertiesRequest = 7,
    kAddEdgeTypePropertiesRequest = 8,
    VALUE_NOT_SET = 0,
  };

  static inline const BatchSubmitRequest_DDLRequest* internal_default_instance() {
    return reinterpret_cast<const BatchSubmitRequest_DDLRequest*>(
               &_BatchSubmitRequest_DDLRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BatchSubmitRequest_DDLRequest& a, BatchSubmitRequest_DDLRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BatchSubmitRequest_DDLRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatchSubmitRequest_DDLRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BatchSubmitRequest_DDLRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BatchSubmitRequest_DDLRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BatchSubmitRequest_DDLRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BatchSubmitRequest_DDLRequest& from) {
    BatchSubmitRequest_DDLRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchSubmitRequest_DDLRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gs.rpc.groot.BatchSubmitRequest.DDLRequest";
  }
  protected:
  explicit BatchSubmitRequest_DDLRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCreateVertexTypeRequestFieldNumber = 1,
    kCreateEdgeTypeRequestFieldNumber = 2,
    kAddEdgeKindRequestFieldNumber = 3,
    kRemoveEdgeKindRequestFieldNumber = 4,
    kDropVertexTypeRequestFieldNumber = 5,
    kDropEdgeTypeRequestFieldNumber = 6,
    kAddVertexTypePropertiesRequestFieldNumber = 7,
    kAddEdgeTypePropertiesRequestFieldNumber = 8,
  };
  // .gs.rpc.groot.CreateVertexTypeRequest create_vertex_type_request = 1;
  bool has_create_vertex_type_request() const;
  private:
  bool _internal_has_create_vertex_type_request() const;
  public:
  void clear_create_vertex_type_request();
  const ::gs::rpc::groot::CreateVertexTypeRequest& create_vertex_type_request() const;
  PROTOBUF_NODISCARD ::gs::rpc::groot::CreateVertexTypeRequest* release_create_vertex_type_request();
  ::gs::rpc::groot::CreateVertexTypeRequest* mutable_create_vertex_type_request();
  void set_allocated_create_vertex_type_request(::gs::rpc::groot::CreateVertexTypeRequest* create_vertex_type_request);
  private:
  const ::gs::rpc::groot::CreateVertexTypeRequest& _internal_create_vertex_type_request() const;
  ::gs::rpc::groot::CreateVertexTypeRequest* _internal_mutable_create_vertex_type_request();
  public:
  void unsafe_arena_set_allocated_create_vertex_type_request(
      ::gs::rpc::groot::CreateVertexTypeRequest* create_vertex_type_request);
  ::gs::rpc::groot::CreateVertexTypeRequest* unsafe_arena_release_create_vertex_type_request();

  // .gs.rpc.groot.CreateEdgeTypeRequest create_edge_type_request = 2;
  bool has_create_edge_type_request() const;
  private:
  bool _internal_has_create_edge_type_request() const;
  public:
  void clear_create_edge_type_request();
  const ::gs::rpc::groot::CreateEdgeTypeRequest& create_edge_type_request() const;
  PROTOBUF_NODISCARD ::gs::rpc::groot::CreateEdgeTypeRequest* release_create_edge_type_request();
  ::gs::rpc::groot::CreateEdgeTypeRequest* mutable_create_edge_type_request();
  void set_allocated_create_edge_type_request(::gs::rpc::groot::CreateEdgeTypeRequest* create_edge_type_request);
  private:
  const ::gs::rpc::groot::CreateEdgeTypeRequest& _internal_create_edge_type_request() const;
  ::gs::rpc::groot::CreateEdgeTypeRequest* _internal_mutable_create_edge_type_request();
  public:
  void unsafe_arena_set_allocated_create_edge_type_request(
      ::gs::rpc::groot::CreateEdgeTypeRequest* create_edge_type_request);
  ::gs::rpc::groot::CreateEdgeTypeRequest* unsafe_arena_release_create_edge_type_request();

  // .gs.rpc.groot.AddEdgeKindRequest add_edge_kind_request = 3;
  bool has_add_edge_kind_request() const;
  private:
  bool _internal_has_add_edge_kind_request() const;
  public:
  void clear_add_edge_kind_request();
  const ::gs::rpc::groot::AddEdgeKindRequest& add_edge_kind_request() const;
  PROTOBUF_NODISCARD ::gs::rpc::groot::AddEdgeKindRequest* release_add_edge_kind_request();
  ::gs::rpc::groot::AddEdgeKindRequest* mutable_add_edge_kind_request();
  void set_allocated_add_edge_kind_request(::gs::rpc::groot::AddEdgeKindRequest* add_edge_kind_request);
  private:
  const ::gs::rpc::groot::AddEdgeKindRequest& _internal_add_edge_kind_request() const;
  ::gs::rpc::groot::AddEdgeKindRequest* _internal_mutable_add_edge_kind_request();
  public:
  void unsafe_arena_set_allocated_add_edge_kind_request(
      ::gs::rpc::groot::AddEdgeKindRequest* add_edge_kind_request);
  ::gs::rpc::groot::AddEdgeKindRequest* unsafe_arena_release_add_edge_kind_request();

  // .gs.rpc.groot.RemoveEdgeKindRequest remove_edge_kind_request = 4;
  bool has_remove_edge_kind_request() const;
  private:
  bool _internal_has_remove_edge_kind_request() const;
  public:
  void clear_remove_edge_kind_request();
  const ::gs::rpc::groot::RemoveEdgeKindRequest& remove_edge_kind_request() const;
  PROTOBUF_NODISCARD ::gs::rpc::groot::RemoveEdgeKindRequest* release_remove_edge_kind_request();
  ::gs::rpc::groot::RemoveEdgeKindRequest* mutable_remove_edge_kind_request();
  void set_allocated_remove_edge_kind_request(::gs::rpc::groot::RemoveEdgeKindRequest* remove_edge_kind_request);
  private:
  const ::gs::rpc::groot::RemoveEdgeKindRequest& _internal_remove_edge_kind_request() const;
  ::gs::rpc::groot::RemoveEdgeKindRequest* _internal_mutable_remove_edge_kind_request();
  public:
  void unsafe_arena_set_allocated_remove_edge_kind_request(
      ::gs::rpc::groot::RemoveEdgeKindRequest* remove_edge_kind_request);
  ::gs::rpc::groot::RemoveEdgeKindRequest* unsafe_arena_release_remove_edge_kind_request();

  // .gs.rpc.groot.DropVertexTypeRequest drop_vertex_type_request = 5;
  bool has_drop_vertex_type_request() const;
  private:
  bool _internal_has_drop_vertex_type_request() const;
  public:
  void clear_drop_vertex_type_request();
  const ::gs::rpc::groot::DropVertexTypeRequest& drop_vertex_type_request() const;
  PROTOBUF_NODISCARD ::gs::rpc::groot::DropVertexTypeRequest* release_drop_vertex_type_request();
  ::gs::rpc::groot::DropVertexTypeRequest* mutable_drop_vertex_type_request();
  void set_allocated_drop_vertex_type_request(::gs::rpc::groot::DropVertexTypeRequest* drop_vertex_type_request);
  private:
  const ::gs::rpc::groot::DropVertexTypeRequest& _internal_drop_vertex_type_request() const;
  ::gs::rpc::groot::DropVertexTypeRequest* _internal_mutable_drop_vertex_type_request();
  public:
  void unsafe_arena_set_allocated_drop_vertex_type_request(
      ::gs::rpc::groot::DropVertexTypeRequest* drop_vertex_type_request);
  ::gs::rpc::groot::DropVertexTypeRequest* unsafe_arena_release_drop_vertex_type_request();

  // .gs.rpc.groot.DropEdgeTypeRequest drop_edge_type_request = 6;
  bool has_drop_edge_type_request() const;
  private:
  bool _internal_has_drop_edge_type_request() const;
  public:
  void clear_drop_edge_type_request();
  const ::gs::rpc::groot::DropEdgeTypeRequest& drop_edge_type_request() const;
  PROTOBUF_NODISCARD ::gs::rpc::groot::DropEdgeTypeRequest* release_drop_edge_type_request();
  ::gs::rpc::groot::DropEdgeTypeRequest* mutable_drop_edge_type_request();
  void set_allocated_drop_edge_type_request(::gs::rpc::groot::DropEdgeTypeRequest* drop_edge_type_request);
  private:
  const ::gs::rpc::groot::DropEdgeTypeRequest& _internal_drop_edge_type_request() const;
  ::gs::rpc::groot::DropEdgeTypeRequest* _internal_mutable_drop_edge_type_request();
  public:
  void unsafe_arena_set_allocated_drop_edge_type_request(
      ::gs::rpc::groot::DropEdgeTypeRequest* drop_edge_type_request);
  ::gs::rpc::groot::DropEdgeTypeRequest* unsafe_arena_release_drop_edge_type_request();

  // .gs.rpc.groot.AddVertexTypePropertiesRequest add_vertex_type_properties_request = 7;
  bool has_add_vertex_type_properties_request() const;
  private:
  bool _internal_has_add_vertex_type_properties_request() const;
  public:
  void clear_add_vertex_type_properties_request();
  const ::gs::rpc::groot::AddVertexTypePropertiesRequest& add_vertex_type_properties_request() const;
  PROTOBUF_NODISCARD ::gs::rpc::groot::AddVertexTypePropertiesRequest* release_add_vertex_type_properties_request();
  ::gs::rpc::groot::AddVertexTypePropertiesRequest* mutable_add_vertex_type_properties_request();
  void set_allocated_add_vertex_type_properties_request(::gs::rpc::groot::AddVertexTypePropertiesRequest* add_vertex_type_properties_request);
  private:
  const ::gs::rpc::groot::AddVertexTypePropertiesRequest& _internal_add_vertex_type_properties_request() const;
  ::gs::rpc::groot::AddVertexTypePropertiesRequest* _internal_mutable_add_vertex_type_properties_request();
  public:
  void unsafe_arena_set_allocated_add_vertex_type_properties_request(
      ::gs::rpc::groot::AddVertexTypePropertiesRequest* add_vertex_type_properties_request);
  ::gs::rpc::groot::AddVertexTypePropertiesRequest* unsafe_arena_release_add_vertex_type_properties_request();

  // .gs.rpc.groot.AddEdgeTypePropertiesRequest add_edge_type_properties_request = 8;
  bool has_add_edge_type_properties_request() const;
  private:
  bool _internal_has_add_edge_type_properties_request() const;
  public:
  void clear_add_edge_type_properties_request();
  const ::gs::rpc::groot::AddEdgeTypePropertiesRequest& add_edge_type_properties_request() const;
  PROTOBUF_NODISCARD ::gs::rpc::groot::AddEdgeTypePropertiesRequest* release_add_edge_type_properties_request();
  ::gs::rpc::groot::AddEdgeTypePropertiesRequest* mutable_add_edge_type_properties_request();
  void set_allocated_add_edge_type_properties_request(::gs::rpc::groot::AddEdgeTypePropertiesRequest* add_edge_type_properties_request);
  private:
  const ::gs::rpc::groot::AddEdgeTypePropertiesRequest& _internal_add_edge_type_properties_request() const;
  ::gs::rpc::groot::AddEdgeTypePropertiesRequest* _internal_mutable_add_edge_type_properties_request();
  public:
  void unsafe_arena_set_allocated_add_edge_type_properties_request(
      ::gs::rpc::groot::AddEdgeTypePropertiesRequest* add_edge_type_properties_request);
  ::gs::rpc::groot::AddEdgeTypePropertiesRequest* unsafe_arena_release_add_edge_type_properties_request();

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:gs.rpc.groot.BatchSubmitRequest.DDLRequest)
 private:
  class _Internal;
  void set_has_create_vertex_type_request();
  void set_has_create_edge_type_request();
  void set_has_add_edge_kind_request();
  void set_has_remove_edge_kind_request();
  void set_has_drop_vertex_type_request();
  void set_has_drop_edge_type_request();
  void set_has_add_vertex_type_properties_request();
  void set_has_add_edge_type_properties_request();

  inline bool has_value() const;
  inline void clear_has_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union ValueUnion {
      constexpr ValueUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::gs::rpc::groot::CreateVertexTypeRequest* create_vertex_type_request_;
      ::gs::rpc::groot::CreateEdgeTypeRequest* create_edge_type_request_;
      ::gs::rpc::groot::AddEdgeKindRequest* add_edge_kind_request_;
      ::gs::rpc::groot::RemoveEdgeKindRequest* remove_edge_kind_request_;
      ::gs::rpc::groot::DropVertexTypeRequest* drop_vertex_type_request_;
      ::gs::rpc::groot::DropEdgeTypeRequest* drop_edge_type_request_;
      ::gs::rpc::groot::AddVertexTypePropertiesRequest* add_vertex_type_properties_request_;
      ::gs::rpc::groot::AddEdgeTypePropertiesRequest* add_edge_type_properties_request_;
    } value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ddl_5fservice_2eproto;
};
// -------------------------------------------------------------------

class BatchSubmitRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gs.rpc.groot.BatchSubmitRequest) */ {
 public:
  inline BatchSubmitRequest() : BatchSubmitRequest(nullptr) {}
  ~BatchSubmitRequest() override;
  explicit PROTOBUF_CONSTEXPR BatchSubmitRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BatchSubmitRequest(const BatchSubmitRequest& from);
  BatchSubmitRequest(BatchSubmitRequest&& from) noexcept
    : BatchSubmitRequest() {
    *this = ::std::move(from);
  }

  inline BatchSubmitRequest& operator=(const BatchSubmitRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchSubmitRequest& operator=(BatchSubmitRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BatchSubmitRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const BatchSubmitRequest* internal_default_instance() {
    return reinterpret_cast<const BatchSubmitRequest*>(
               &_BatchSubmitRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BatchSubmitRequest& a, BatchSubmitRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BatchSubmitRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatchSubmitRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BatchSubmitRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BatchSubmitRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BatchSubmitRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BatchSubmitRequest& from) {
    BatchSubmitRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchSubmitRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gs.rpc.groot.BatchSubmitRequest";
  }
  protected:
  explicit BatchSubmitRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef BatchSubmitRequest_DDLRequest DDLRequest;

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 3,
    kRequestOptionsFieldNumber = 4,
    kFormatVersionFieldNumber = 1,
    kSimpleResponseFieldNumber = 2,
  };
  // repeated .gs.rpc.groot.BatchSubmitRequest.DDLRequest value = 3;
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  ::gs::rpc::groot::BatchSubmitRequest_DDLRequest* mutable_value(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gs::rpc::groot::BatchSubmitRequest_DDLRequest >*
      mutable_value();
  private:
  const ::gs::rpc::groot::BatchSubmitRequest_DDLRequest& _internal_value(int index) const;
  ::gs::rpc::groot::BatchSubmitRequest_DDLRequest* _internal_add_value();
  public:
  const ::gs::rpc::groot::BatchSubmitRequest_DDLRequest& value(int index) const;
  ::gs::rpc::groot::BatchSubmitRequest_DDLRequest* add_value();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gs::rpc::groot::BatchSubmitRequest_DDLRequest >&
      value() const;

  // .gs.rpc.groot.RequestOptionsPb request_options = 4;
  bool has_request_options() const;
  private:
  bool _internal_has_request_options() const;
  public:
  void clear_request_options();
  const ::gs::rpc::groot::RequestOptionsPb& request_options() const;
  PROTOBUF_NODISCARD ::gs::rpc::groot::RequestOptionsPb* release_request_options();
  ::gs::rpc::groot::RequestOptionsPb* mutable_request_options();
  void set_allocated_request_options(::gs::rpc::groot::RequestOptionsPb* request_options);
  private:
  const ::gs::rpc::groot::RequestOptionsPb& _internal_request_options() const;
  ::gs::rpc::groot::RequestOptionsPb* _internal_mutable_request_options();
  public:
  void unsafe_arena_set_allocated_request_options(
      ::gs::rpc::groot::RequestOptionsPb* request_options);
  ::gs::rpc::groot::RequestOptionsPb* unsafe_arena_release_request_options();

  // int32 format_version = 1;
  void clear_format_version();
  int32_t format_version() const;
  void set_format_version(int32_t value);
  private:
  int32_t _internal_format_version() const;
  void _internal_set_format_version(int32_t value);
  public:

  // bool simple_response = 2;
  void clear_simple_response();
  bool simple_response() const;
  void set_simple_response(bool value);
  private:
  bool _internal_simple_response() const;
  void _internal_set_simple_response(bool value);
  public:

  // @@protoc_insertion_point(class_scope:gs.rpc.groot.BatchSubmitRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gs::rpc::groot::BatchSubmitRequest_DDLRequest > value_;
    ::gs::rpc::groot::RequestOptionsPb* request_options_;
    int32_t format_version_;
    bool simple_response_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ddl_5fservice_2eproto;
};
// -------------------------------------------------------------------

class BatchSubmitResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gs.rpc.groot.BatchSubmitResponse) */ {
 public:
  inline BatchSubmitResponse() : BatchSubmitResponse(nullptr) {}
  ~BatchSubmitResponse() override;
  explicit PROTOBUF_CONSTEXPR BatchSubmitResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BatchSubmitResponse(const BatchSubmitResponse& from);
  BatchSubmitResponse(BatchSubmitResponse&& from) noexcept
    : BatchSubmitResponse() {
    *this = ::std::move(from);
  }

  inline BatchSubmitResponse& operator=(const BatchSubmitResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchSubmitResponse& operator=(BatchSubmitResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BatchSubmitResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const BatchSubmitResponse* internal_default_instance() {
    return reinterpret_cast<const BatchSubmitResponse*>(
               &_BatchSubmitResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BatchSubmitResponse& a, BatchSubmitResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BatchSubmitResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatchSubmitResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BatchSubmitResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BatchSubmitResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BatchSubmitResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BatchSubmitResponse& from) {
    BatchSubmitResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchSubmitResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gs.rpc.groot.BatchSubmitResponse";
  }
  protected:
  explicit BatchSubmitResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGraphDefFieldNumber = 2,
    kFormatVersionFieldNumber = 1,
  };
  // .gs.rpc.graph.GraphDefPb graph_def = 2;
  bool has_graph_def() const;
  private:
  bool _internal_has_graph_def() const;
  public:
  void clear_graph_def();
  const ::gs::rpc::graph::GraphDefPb& graph_def() const;
  PROTOBUF_NODISCARD ::gs::rpc::graph::GraphDefPb* release_graph_def();
  ::gs::rpc::graph::GraphDefPb* mutable_graph_def();
  void set_allocated_graph_def(::gs::rpc::graph::GraphDefPb* graph_def);
  private:
  const ::gs::rpc::graph::GraphDefPb& _internal_graph_def() const;
  ::gs::rpc::graph::GraphDefPb* _internal_mutable_graph_def();
  public:
  void unsafe_arena_set_allocated_graph_def(
      ::gs::rpc::graph::GraphDefPb* graph_def);
  ::gs::rpc::graph::GraphDefPb* unsafe_arena_release_graph_def();

  // int32 format_version = 1;
  void clear_format_version();
  int32_t format_version() const;
  void set_format_version(int32_t value);
  private:
  int32_t _internal_format_version() const;
  void _internal_set_format_version(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:gs.rpc.groot.BatchSubmitResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::gs::rpc::graph::GraphDefPb* graph_def_;
    int32_t format_version_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ddl_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CreateVertexTypeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gs.rpc.groot.CreateVertexTypeRequest) */ {
 public:
  inline CreateVertexTypeRequest() : CreateVertexTypeRequest(nullptr) {}
  ~CreateVertexTypeRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateVertexTypeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateVertexTypeRequest(const CreateVertexTypeRequest& from);
  CreateVertexTypeRequest(CreateVertexTypeRequest&& from) noexcept
    : CreateVertexTypeRequest() {
    *this = ::std::move(from);
  }

  inline CreateVertexTypeRequest& operator=(const CreateVertexTypeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateVertexTypeRequest& operator=(CreateVertexTypeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateVertexTypeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateVertexTypeRequest* internal_default_instance() {
    return reinterpret_cast<const CreateVertexTypeRequest*>(
               &_CreateVertexTypeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CreateVertexTypeRequest& a, CreateVertexTypeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateVertexTypeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateVertexTypeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateVertexTypeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateVertexTypeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateVertexTypeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateVertexTypeRequest& from) {
    CreateVertexTypeRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateVertexTypeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gs.rpc.groot.CreateVertexTypeRequest";
  }
  protected:
  explicit CreateVertexTypeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeDefFieldNumber = 1,
  };
  // .gs.rpc.graph.TypeDefPb type_def = 1;
  bool has_type_def() const;
  private:
  bool _internal_has_type_def() const;
  public:
  void clear_type_def();
  const ::gs::rpc::graph::TypeDefPb& type_def() const;
  PROTOBUF_NODISCARD ::gs::rpc::graph::TypeDefPb* release_type_def();
  ::gs::rpc::graph::TypeDefPb* mutable_type_def();
  void set_allocated_type_def(::gs::rpc::graph::TypeDefPb* type_def);
  private:
  const ::gs::rpc::graph::TypeDefPb& _internal_type_def() const;
  ::gs::rpc::graph::TypeDefPb* _internal_mutable_type_def();
  public:
  void unsafe_arena_set_allocated_type_def(
      ::gs::rpc::graph::TypeDefPb* type_def);
  ::gs::rpc::graph::TypeDefPb* unsafe_arena_release_type_def();

  // @@protoc_insertion_point(class_scope:gs.rpc.groot.CreateVertexTypeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::gs::rpc::graph::TypeDefPb* type_def_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ddl_5fservice_2eproto;
};
// -------------------------------------------------------------------

class AddVertexTypePropertiesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gs.rpc.groot.AddVertexTypePropertiesRequest) */ {
 public:
  inline AddVertexTypePropertiesRequest() : AddVertexTypePropertiesRequest(nullptr) {}
  ~AddVertexTypePropertiesRequest() override;
  explicit PROTOBUF_CONSTEXPR AddVertexTypePropertiesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddVertexTypePropertiesRequest(const AddVertexTypePropertiesRequest& from);
  AddVertexTypePropertiesRequest(AddVertexTypePropertiesRequest&& from) noexcept
    : AddVertexTypePropertiesRequest() {
    *this = ::std::move(from);
  }

  inline AddVertexTypePropertiesRequest& operator=(const AddVertexTypePropertiesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddVertexTypePropertiesRequest& operator=(AddVertexTypePropertiesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddVertexTypePropertiesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddVertexTypePropertiesRequest* internal_default_instance() {
    return reinterpret_cast<const AddVertexTypePropertiesRequest*>(
               &_AddVertexTypePropertiesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AddVertexTypePropertiesRequest& a, AddVertexTypePropertiesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddVertexTypePropertiesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddVertexTypePropertiesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddVertexTypePropertiesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddVertexTypePropertiesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddVertexTypePropertiesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AddVertexTypePropertiesRequest& from) {
    AddVertexTypePropertiesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddVertexTypePropertiesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gs.rpc.groot.AddVertexTypePropertiesRequest";
  }
  protected:
  explicit AddVertexTypePropertiesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeDefFieldNumber = 1,
  };
  // .gs.rpc.graph.TypeDefPb type_def = 1;
  bool has_type_def() const;
  private:
  bool _internal_has_type_def() const;
  public:
  void clear_type_def();
  const ::gs::rpc::graph::TypeDefPb& type_def() const;
  PROTOBUF_NODISCARD ::gs::rpc::graph::TypeDefPb* release_type_def();
  ::gs::rpc::graph::TypeDefPb* mutable_type_def();
  void set_allocated_type_def(::gs::rpc::graph::TypeDefPb* type_def);
  private:
  const ::gs::rpc::graph::TypeDefPb& _internal_type_def() const;
  ::gs::rpc::graph::TypeDefPb* _internal_mutable_type_def();
  public:
  void unsafe_arena_set_allocated_type_def(
      ::gs::rpc::graph::TypeDefPb* type_def);
  ::gs::rpc::graph::TypeDefPb* unsafe_arena_release_type_def();

  // @@protoc_insertion_point(class_scope:gs.rpc.groot.AddVertexTypePropertiesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::gs::rpc::graph::TypeDefPb* type_def_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ddl_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CreateEdgeTypeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gs.rpc.groot.CreateEdgeTypeRequest) */ {
 public:
  inline CreateEdgeTypeRequest() : CreateEdgeTypeRequest(nullptr) {}
  ~CreateEdgeTypeRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateEdgeTypeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateEdgeTypeRequest(const CreateEdgeTypeRequest& from);
  CreateEdgeTypeRequest(CreateEdgeTypeRequest&& from) noexcept
    : CreateEdgeTypeRequest() {
    *this = ::std::move(from);
  }

  inline CreateEdgeTypeRequest& operator=(const CreateEdgeTypeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateEdgeTypeRequest& operator=(CreateEdgeTypeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateEdgeTypeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateEdgeTypeRequest* internal_default_instance() {
    return reinterpret_cast<const CreateEdgeTypeRequest*>(
               &_CreateEdgeTypeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CreateEdgeTypeRequest& a, CreateEdgeTypeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateEdgeTypeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateEdgeTypeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateEdgeTypeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateEdgeTypeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateEdgeTypeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateEdgeTypeRequest& from) {
    CreateEdgeTypeRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateEdgeTypeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gs.rpc.groot.CreateEdgeTypeRequest";
  }
  protected:
  explicit CreateEdgeTypeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeDefFieldNumber = 1,
  };
  // .gs.rpc.graph.TypeDefPb type_def = 1;
  bool has_type_def() const;
  private:
  bool _internal_has_type_def() const;
  public:
  void clear_type_def();
  const ::gs::rpc::graph::TypeDefPb& type_def() const;
  PROTOBUF_NODISCARD ::gs::rpc::graph::TypeDefPb* release_type_def();
  ::gs::rpc::graph::TypeDefPb* mutable_type_def();
  void set_allocated_type_def(::gs::rpc::graph::TypeDefPb* type_def);
  private:
  const ::gs::rpc::graph::TypeDefPb& _internal_type_def() const;
  ::gs::rpc::graph::TypeDefPb* _internal_mutable_type_def();
  public:
  void unsafe_arena_set_allocated_type_def(
      ::gs::rpc::graph::TypeDefPb* type_def);
  ::gs::rpc::graph::TypeDefPb* unsafe_arena_release_type_def();

  // @@protoc_insertion_point(class_scope:gs.rpc.groot.CreateEdgeTypeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::gs::rpc::graph::TypeDefPb* type_def_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ddl_5fservice_2eproto;
};
// -------------------------------------------------------------------

class AddEdgeTypePropertiesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gs.rpc.groot.AddEdgeTypePropertiesRequest) */ {
 public:
  inline AddEdgeTypePropertiesRequest() : AddEdgeTypePropertiesRequest(nullptr) {}
  ~AddEdgeTypePropertiesRequest() override;
  explicit PROTOBUF_CONSTEXPR AddEdgeTypePropertiesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddEdgeTypePropertiesRequest(const AddEdgeTypePropertiesRequest& from);
  AddEdgeTypePropertiesRequest(AddEdgeTypePropertiesRequest&& from) noexcept
    : AddEdgeTypePropertiesRequest() {
    *this = ::std::move(from);
  }

  inline AddEdgeTypePropertiesRequest& operator=(const AddEdgeTypePropertiesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddEdgeTypePropertiesRequest& operator=(AddEdgeTypePropertiesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddEdgeTypePropertiesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddEdgeTypePropertiesRequest* internal_default_instance() {
    return reinterpret_cast<const AddEdgeTypePropertiesRequest*>(
               &_AddEdgeTypePropertiesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(AddEdgeTypePropertiesRequest& a, AddEdgeTypePropertiesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddEdgeTypePropertiesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddEdgeTypePropertiesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddEdgeTypePropertiesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddEdgeTypePropertiesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddEdgeTypePropertiesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AddEdgeTypePropertiesRequest& from) {
    AddEdgeTypePropertiesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddEdgeTypePropertiesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gs.rpc.groot.AddEdgeTypePropertiesRequest";
  }
  protected:
  explicit AddEdgeTypePropertiesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeDefFieldNumber = 1,
  };
  // .gs.rpc.graph.TypeDefPb type_def = 1;
  bool has_type_def() const;
  private:
  bool _internal_has_type_def() const;
  public:
  void clear_type_def();
  const ::gs::rpc::graph::TypeDefPb& type_def() const;
  PROTOBUF_NODISCARD ::gs::rpc::graph::TypeDefPb* release_type_def();
  ::gs::rpc::graph::TypeDefPb* mutable_type_def();
  void set_allocated_type_def(::gs::rpc::graph::TypeDefPb* type_def);
  private:
  const ::gs::rpc::graph::TypeDefPb& _internal_type_def() const;
  ::gs::rpc::graph::TypeDefPb* _internal_mutable_type_def();
  public:
  void unsafe_arena_set_allocated_type_def(
      ::gs::rpc::graph::TypeDefPb* type_def);
  ::gs::rpc::graph::TypeDefPb* unsafe_arena_release_type_def();

  // @@protoc_insertion_point(class_scope:gs.rpc.groot.AddEdgeTypePropertiesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::gs::rpc::graph::TypeDefPb* type_def_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ddl_5fservice_2eproto;
};
// -------------------------------------------------------------------

class AddEdgeKindRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gs.rpc.groot.AddEdgeKindRequest) */ {
 public:
  inline AddEdgeKindRequest() : AddEdgeKindRequest(nullptr) {}
  ~AddEdgeKindRequest() override;
  explicit PROTOBUF_CONSTEXPR AddEdgeKindRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddEdgeKindRequest(const AddEdgeKindRequest& from);
  AddEdgeKindRequest(AddEdgeKindRequest&& from) noexcept
    : AddEdgeKindRequest() {
    *this = ::std::move(from);
  }

  inline AddEdgeKindRequest& operator=(const AddEdgeKindRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddEdgeKindRequest& operator=(AddEdgeKindRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddEdgeKindRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddEdgeKindRequest* internal_default_instance() {
    return reinterpret_cast<const AddEdgeKindRequest*>(
               &_AddEdgeKindRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(AddEdgeKindRequest& a, AddEdgeKindRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddEdgeKindRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddEdgeKindRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddEdgeKindRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddEdgeKindRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddEdgeKindRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AddEdgeKindRequest& from) {
    AddEdgeKindRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddEdgeKindRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gs.rpc.groot.AddEdgeKindRequest";
  }
  protected:
  explicit AddEdgeKindRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEdgeLabelFieldNumber = 1,
    kSrcVertexLabelFieldNumber = 2,
    kDstVertexLabelFieldNumber = 3,
  };
  // string edge_label = 1;
  void clear_edge_label();
  const std::string& edge_label() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_edge_label(ArgT0&& arg0, ArgT... args);
  std::string* mutable_edge_label();
  PROTOBUF_NODISCARD std::string* release_edge_label();
  void set_allocated_edge_label(std::string* edge_label);
  private:
  const std::string& _internal_edge_label() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_edge_label(const std::string& value);
  std::string* _internal_mutable_edge_label();
  public:

  // string src_vertex_label = 2;
  void clear_src_vertex_label();
  const std::string& src_vertex_label() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_src_vertex_label(ArgT0&& arg0, ArgT... args);
  std::string* mutable_src_vertex_label();
  PROTOBUF_NODISCARD std::string* release_src_vertex_label();
  void set_allocated_src_vertex_label(std::string* src_vertex_label);
  private:
  const std::string& _internal_src_vertex_label() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_src_vertex_label(const std::string& value);
  std::string* _internal_mutable_src_vertex_label();
  public:

  // string dst_vertex_label = 3;
  void clear_dst_vertex_label();
  const std::string& dst_vertex_label() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dst_vertex_label(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dst_vertex_label();
  PROTOBUF_NODISCARD std::string* release_dst_vertex_label();
  void set_allocated_dst_vertex_label(std::string* dst_vertex_label);
  private:
  const std::string& _internal_dst_vertex_label() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dst_vertex_label(const std::string& value);
  std::string* _internal_mutable_dst_vertex_label();
  public:

  // @@protoc_insertion_point(class_scope:gs.rpc.groot.AddEdgeKindRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr edge_label_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr src_vertex_label_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dst_vertex_label_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ddl_5fservice_2eproto;
};
// -------------------------------------------------------------------

class RemoveEdgeKindRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gs.rpc.groot.RemoveEdgeKindRequest) */ {
 public:
  inline RemoveEdgeKindRequest() : RemoveEdgeKindRequest(nullptr) {}
  ~RemoveEdgeKindRequest() override;
  explicit PROTOBUF_CONSTEXPR RemoveEdgeKindRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoveEdgeKindRequest(const RemoveEdgeKindRequest& from);
  RemoveEdgeKindRequest(RemoveEdgeKindRequest&& from) noexcept
    : RemoveEdgeKindRequest() {
    *this = ::std::move(from);
  }

  inline RemoveEdgeKindRequest& operator=(const RemoveEdgeKindRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveEdgeKindRequest& operator=(RemoveEdgeKindRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemoveEdgeKindRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoveEdgeKindRequest* internal_default_instance() {
    return reinterpret_cast<const RemoveEdgeKindRequest*>(
               &_RemoveEdgeKindRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(RemoveEdgeKindRequest& a, RemoveEdgeKindRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveEdgeKindRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveEdgeKindRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemoveEdgeKindRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RemoveEdgeKindRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RemoveEdgeKindRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RemoveEdgeKindRequest& from) {
    RemoveEdgeKindRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveEdgeKindRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gs.rpc.groot.RemoveEdgeKindRequest";
  }
  protected:
  explicit RemoveEdgeKindRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEdgeLabelFieldNumber = 1,
    kSrcVertexLabelFieldNumber = 2,
    kDstVertexLabelFieldNumber = 3,
  };
  // string edge_label = 1;
  void clear_edge_label();
  const std::string& edge_label() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_edge_label(ArgT0&& arg0, ArgT... args);
  std::string* mutable_edge_label();
  PROTOBUF_NODISCARD std::string* release_edge_label();
  void set_allocated_edge_label(std::string* edge_label);
  private:
  const std::string& _internal_edge_label() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_edge_label(const std::string& value);
  std::string* _internal_mutable_edge_label();
  public:

  // string src_vertex_label = 2;
  void clear_src_vertex_label();
  const std::string& src_vertex_label() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_src_vertex_label(ArgT0&& arg0, ArgT... args);
  std::string* mutable_src_vertex_label();
  PROTOBUF_NODISCARD std::string* release_src_vertex_label();
  void set_allocated_src_vertex_label(std::string* src_vertex_label);
  private:
  const std::string& _internal_src_vertex_label() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_src_vertex_label(const std::string& value);
  std::string* _internal_mutable_src_vertex_label();
  public:

  // string dst_vertex_label = 3;
  void clear_dst_vertex_label();
  const std::string& dst_vertex_label() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dst_vertex_label(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dst_vertex_label();
  PROTOBUF_NODISCARD std::string* release_dst_vertex_label();
  void set_allocated_dst_vertex_label(std::string* dst_vertex_label);
  private:
  const std::string& _internal_dst_vertex_label() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dst_vertex_label(const std::string& value);
  std::string* _internal_mutable_dst_vertex_label();
  public:

  // @@protoc_insertion_point(class_scope:gs.rpc.groot.RemoveEdgeKindRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr edge_label_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr src_vertex_label_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dst_vertex_label_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ddl_5fservice_2eproto;
};
// -------------------------------------------------------------------

class DropVertexTypeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gs.rpc.groot.DropVertexTypeRequest) */ {
 public:
  inline DropVertexTypeRequest() : DropVertexTypeRequest(nullptr) {}
  ~DropVertexTypeRequest() override;
  explicit PROTOBUF_CONSTEXPR DropVertexTypeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DropVertexTypeRequest(const DropVertexTypeRequest& from);
  DropVertexTypeRequest(DropVertexTypeRequest&& from) noexcept
    : DropVertexTypeRequest() {
    *this = ::std::move(from);
  }

  inline DropVertexTypeRequest& operator=(const DropVertexTypeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DropVertexTypeRequest& operator=(DropVertexTypeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DropVertexTypeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DropVertexTypeRequest* internal_default_instance() {
    return reinterpret_cast<const DropVertexTypeRequest*>(
               &_DropVertexTypeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(DropVertexTypeRequest& a, DropVertexTypeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DropVertexTypeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DropVertexTypeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DropVertexTypeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DropVertexTypeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DropVertexTypeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DropVertexTypeRequest& from) {
    DropVertexTypeRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DropVertexTypeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gs.rpc.groot.DropVertexTypeRequest";
  }
  protected:
  explicit DropVertexTypeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelFieldNumber = 1,
  };
  // string label = 1;
  void clear_label();
  const std::string& label() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_label(ArgT0&& arg0, ArgT... args);
  std::string* mutable_label();
  PROTOBUF_NODISCARD std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // @@protoc_insertion_point(class_scope:gs.rpc.groot.DropVertexTypeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ddl_5fservice_2eproto;
};
// -------------------------------------------------------------------

class DropEdgeTypeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gs.rpc.groot.DropEdgeTypeRequest) */ {
 public:
  inline DropEdgeTypeRequest() : DropEdgeTypeRequest(nullptr) {}
  ~DropEdgeTypeRequest() override;
  explicit PROTOBUF_CONSTEXPR DropEdgeTypeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DropEdgeTypeRequest(const DropEdgeTypeRequest& from);
  DropEdgeTypeRequest(DropEdgeTypeRequest&& from) noexcept
    : DropEdgeTypeRequest() {
    *this = ::std::move(from);
  }

  inline DropEdgeTypeRequest& operator=(const DropEdgeTypeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DropEdgeTypeRequest& operator=(DropEdgeTypeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DropEdgeTypeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DropEdgeTypeRequest* internal_default_instance() {
    return reinterpret_cast<const DropEdgeTypeRequest*>(
               &_DropEdgeTypeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(DropEdgeTypeRequest& a, DropEdgeTypeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DropEdgeTypeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DropEdgeTypeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DropEdgeTypeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DropEdgeTypeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DropEdgeTypeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DropEdgeTypeRequest& from) {
    DropEdgeTypeRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DropEdgeTypeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gs.rpc.groot.DropEdgeTypeRequest";
  }
  protected:
  explicit DropEdgeTypeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelFieldNumber = 1,
  };
  // string label = 1;
  void clear_label();
  const std::string& label() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_label(ArgT0&& arg0, ArgT... args);
  std::string* mutable_label();
  PROTOBUF_NODISCARD std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // @@protoc_insertion_point(class_scope:gs.rpc.groot.DropEdgeTypeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ddl_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetGraphDefRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gs.rpc.groot.GetGraphDefRequest) */ {
 public:
  inline GetGraphDefRequest() : GetGraphDefRequest(nullptr) {}
  ~GetGraphDefRequest() override;
  explicit PROTOBUF_CONSTEXPR GetGraphDefRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetGraphDefRequest(const GetGraphDefRequest& from);
  GetGraphDefRequest(GetGraphDefRequest&& from) noexcept
    : GetGraphDefRequest() {
    *this = ::std::move(from);
  }

  inline GetGraphDefRequest& operator=(const GetGraphDefRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGraphDefRequest& operator=(GetGraphDefRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetGraphDefRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetGraphDefRequest* internal_default_instance() {
    return reinterpret_cast<const GetGraphDefRequest*>(
               &_GetGraphDefRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GetGraphDefRequest& a, GetGraphDefRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGraphDefRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetGraphDefRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetGraphDefRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetGraphDefRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetGraphDefRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetGraphDefRequest& from) {
    GetGraphDefRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGraphDefRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gs.rpc.groot.GetGraphDefRequest";
  }
  protected:
  explicit GetGraphDefRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // @@protoc_insertion_point(class_scope:gs.rpc.groot.GetGraphDefRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ddl_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetGraphDefResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gs.rpc.groot.GetGraphDefResponse) */ {
 public:
  inline GetGraphDefResponse() : GetGraphDefResponse(nullptr) {}
  ~GetGraphDefResponse() override;
  explicit PROTOBUF_CONSTEXPR GetGraphDefResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetGraphDefResponse(const GetGraphDefResponse& from);
  GetGraphDefResponse(GetGraphDefResponse&& from) noexcept
    : GetGraphDefResponse() {
    *this = ::std::move(from);
  }

  inline GetGraphDefResponse& operator=(const GetGraphDefResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGraphDefResponse& operator=(GetGraphDefResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetGraphDefResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetGraphDefResponse* internal_default_instance() {
    return reinterpret_cast<const GetGraphDefResponse*>(
               &_GetGraphDefResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(GetGraphDefResponse& a, GetGraphDefResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGraphDefResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetGraphDefResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetGraphDefResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetGraphDefResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetGraphDefResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetGraphDefResponse& from) {
    GetGraphDefResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGraphDefResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gs.rpc.groot.GetGraphDefResponse";
  }
  protected:
  explicit GetGraphDefResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGraphDefFieldNumber = 1,
  };
  // .gs.rpc.graph.GraphDefPb graph_def = 1;
  bool has_graph_def() const;
  private:
  bool _internal_has_graph_def() const;
  public:
  void clear_graph_def();
  const ::gs::rpc::graph::GraphDefPb& graph_def() const;
  PROTOBUF_NODISCARD ::gs::rpc::graph::GraphDefPb* release_graph_def();
  ::gs::rpc::graph::GraphDefPb* mutable_graph_def();
  void set_allocated_graph_def(::gs::rpc::graph::GraphDefPb* graph_def);
  private:
  const ::gs::rpc::graph::GraphDefPb& _internal_graph_def() const;
  ::gs::rpc::graph::GraphDefPb* _internal_mutable_graph_def();
  public:
  void unsafe_arena_set_allocated_graph_def(
      ::gs::rpc::graph::GraphDefPb* graph_def);
  ::gs::rpc::graph::GraphDefPb* unsafe_arena_release_graph_def();

  // @@protoc_insertion_point(class_scope:gs.rpc.groot.GetGraphDefResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::gs::rpc::graph::GraphDefPb* graph_def_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ddl_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BatchSubmitRequest_DDLRequest

// .gs.rpc.groot.CreateVertexTypeRequest create_vertex_type_request = 1;
inline bool BatchSubmitRequest_DDLRequest::_internal_has_create_vertex_type_request() const {
  return value_case() == kCreateVertexTypeRequest;
}
inline bool BatchSubmitRequest_DDLRequest::has_create_vertex_type_request() const {
  return _internal_has_create_vertex_type_request();
}
inline void BatchSubmitRequest_DDLRequest::set_has_create_vertex_type_request() {
  _impl_._oneof_case_[0] = kCreateVertexTypeRequest;
}
inline void BatchSubmitRequest_DDLRequest::clear_create_vertex_type_request() {
  if (_internal_has_create_vertex_type_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.value_.create_vertex_type_request_;
    }
    clear_has_value();
  }
}
inline ::gs::rpc::groot::CreateVertexTypeRequest* BatchSubmitRequest_DDLRequest::release_create_vertex_type_request() {
  // @@protoc_insertion_point(field_release:gs.rpc.groot.BatchSubmitRequest.DDLRequest.create_vertex_type_request)
  if (_internal_has_create_vertex_type_request()) {
    clear_has_value();
    ::gs::rpc::groot::CreateVertexTypeRequest* temp = _impl_.value_.create_vertex_type_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.create_vertex_type_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::gs::rpc::groot::CreateVertexTypeRequest& BatchSubmitRequest_DDLRequest::_internal_create_vertex_type_request() const {
  return _internal_has_create_vertex_type_request()
      ? *_impl_.value_.create_vertex_type_request_
      : reinterpret_cast< ::gs::rpc::groot::CreateVertexTypeRequest&>(::gs::rpc::groot::_CreateVertexTypeRequest_default_instance_);
}
inline const ::gs::rpc::groot::CreateVertexTypeRequest& BatchSubmitRequest_DDLRequest::create_vertex_type_request() const {
  // @@protoc_insertion_point(field_get:gs.rpc.groot.BatchSubmitRequest.DDLRequest.create_vertex_type_request)
  return _internal_create_vertex_type_request();
}
inline ::gs::rpc::groot::CreateVertexTypeRequest* BatchSubmitRequest_DDLRequest::unsafe_arena_release_create_vertex_type_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:gs.rpc.groot.BatchSubmitRequest.DDLRequest.create_vertex_type_request)
  if (_internal_has_create_vertex_type_request()) {
    clear_has_value();
    ::gs::rpc::groot::CreateVertexTypeRequest* temp = _impl_.value_.create_vertex_type_request_;
    _impl_.value_.create_vertex_type_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BatchSubmitRequest_DDLRequest::unsafe_arena_set_allocated_create_vertex_type_request(::gs::rpc::groot::CreateVertexTypeRequest* create_vertex_type_request) {
  clear_value();
  if (create_vertex_type_request) {
    set_has_create_vertex_type_request();
    _impl_.value_.create_vertex_type_request_ = create_vertex_type_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gs.rpc.groot.BatchSubmitRequest.DDLRequest.create_vertex_type_request)
}
inline ::gs::rpc::groot::CreateVertexTypeRequest* BatchSubmitRequest_DDLRequest::_internal_mutable_create_vertex_type_request() {
  if (!_internal_has_create_vertex_type_request()) {
    clear_value();
    set_has_create_vertex_type_request();
    _impl_.value_.create_vertex_type_request_ = CreateMaybeMessage< ::gs::rpc::groot::CreateVertexTypeRequest >(GetArenaForAllocation());
  }
  return _impl_.value_.create_vertex_type_request_;
}
inline ::gs::rpc::groot::CreateVertexTypeRequest* BatchSubmitRequest_DDLRequest::mutable_create_vertex_type_request() {
  ::gs::rpc::groot::CreateVertexTypeRequest* _msg = _internal_mutable_create_vertex_type_request();
  // @@protoc_insertion_point(field_mutable:gs.rpc.groot.BatchSubmitRequest.DDLRequest.create_vertex_type_request)
  return _msg;
}

// .gs.rpc.groot.CreateEdgeTypeRequest create_edge_type_request = 2;
inline bool BatchSubmitRequest_DDLRequest::_internal_has_create_edge_type_request() const {
  return value_case() == kCreateEdgeTypeRequest;
}
inline bool BatchSubmitRequest_DDLRequest::has_create_edge_type_request() const {
  return _internal_has_create_edge_type_request();
}
inline void BatchSubmitRequest_DDLRequest::set_has_create_edge_type_request() {
  _impl_._oneof_case_[0] = kCreateEdgeTypeRequest;
}
inline void BatchSubmitRequest_DDLRequest::clear_create_edge_type_request() {
  if (_internal_has_create_edge_type_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.value_.create_edge_type_request_;
    }
    clear_has_value();
  }
}
inline ::gs::rpc::groot::CreateEdgeTypeRequest* BatchSubmitRequest_DDLRequest::release_create_edge_type_request() {
  // @@protoc_insertion_point(field_release:gs.rpc.groot.BatchSubmitRequest.DDLRequest.create_edge_type_request)
  if (_internal_has_create_edge_type_request()) {
    clear_has_value();
    ::gs::rpc::groot::CreateEdgeTypeRequest* temp = _impl_.value_.create_edge_type_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.create_edge_type_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::gs::rpc::groot::CreateEdgeTypeRequest& BatchSubmitRequest_DDLRequest::_internal_create_edge_type_request() const {
  return _internal_has_create_edge_type_request()
      ? *_impl_.value_.create_edge_type_request_
      : reinterpret_cast< ::gs::rpc::groot::CreateEdgeTypeRequest&>(::gs::rpc::groot::_CreateEdgeTypeRequest_default_instance_);
}
inline const ::gs::rpc::groot::CreateEdgeTypeRequest& BatchSubmitRequest_DDLRequest::create_edge_type_request() const {
  // @@protoc_insertion_point(field_get:gs.rpc.groot.BatchSubmitRequest.DDLRequest.create_edge_type_request)
  return _internal_create_edge_type_request();
}
inline ::gs::rpc::groot::CreateEdgeTypeRequest* BatchSubmitRequest_DDLRequest::unsafe_arena_release_create_edge_type_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:gs.rpc.groot.BatchSubmitRequest.DDLRequest.create_edge_type_request)
  if (_internal_has_create_edge_type_request()) {
    clear_has_value();
    ::gs::rpc::groot::CreateEdgeTypeRequest* temp = _impl_.value_.create_edge_type_request_;
    _impl_.value_.create_edge_type_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BatchSubmitRequest_DDLRequest::unsafe_arena_set_allocated_create_edge_type_request(::gs::rpc::groot::CreateEdgeTypeRequest* create_edge_type_request) {
  clear_value();
  if (create_edge_type_request) {
    set_has_create_edge_type_request();
    _impl_.value_.create_edge_type_request_ = create_edge_type_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gs.rpc.groot.BatchSubmitRequest.DDLRequest.create_edge_type_request)
}
inline ::gs::rpc::groot::CreateEdgeTypeRequest* BatchSubmitRequest_DDLRequest::_internal_mutable_create_edge_type_request() {
  if (!_internal_has_create_edge_type_request()) {
    clear_value();
    set_has_create_edge_type_request();
    _impl_.value_.create_edge_type_request_ = CreateMaybeMessage< ::gs::rpc::groot::CreateEdgeTypeRequest >(GetArenaForAllocation());
  }
  return _impl_.value_.create_edge_type_request_;
}
inline ::gs::rpc::groot::CreateEdgeTypeRequest* BatchSubmitRequest_DDLRequest::mutable_create_edge_type_request() {
  ::gs::rpc::groot::CreateEdgeTypeRequest* _msg = _internal_mutable_create_edge_type_request();
  // @@protoc_insertion_point(field_mutable:gs.rpc.groot.BatchSubmitRequest.DDLRequest.create_edge_type_request)
  return _msg;
}

// .gs.rpc.groot.AddEdgeKindRequest add_edge_kind_request = 3;
inline bool BatchSubmitRequest_DDLRequest::_internal_has_add_edge_kind_request() const {
  return value_case() == kAddEdgeKindRequest;
}
inline bool BatchSubmitRequest_DDLRequest::has_add_edge_kind_request() const {
  return _internal_has_add_edge_kind_request();
}
inline void BatchSubmitRequest_DDLRequest::set_has_add_edge_kind_request() {
  _impl_._oneof_case_[0] = kAddEdgeKindRequest;
}
inline void BatchSubmitRequest_DDLRequest::clear_add_edge_kind_request() {
  if (_internal_has_add_edge_kind_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.value_.add_edge_kind_request_;
    }
    clear_has_value();
  }
}
inline ::gs::rpc::groot::AddEdgeKindRequest* BatchSubmitRequest_DDLRequest::release_add_edge_kind_request() {
  // @@protoc_insertion_point(field_release:gs.rpc.groot.BatchSubmitRequest.DDLRequest.add_edge_kind_request)
  if (_internal_has_add_edge_kind_request()) {
    clear_has_value();
    ::gs::rpc::groot::AddEdgeKindRequest* temp = _impl_.value_.add_edge_kind_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.add_edge_kind_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::gs::rpc::groot::AddEdgeKindRequest& BatchSubmitRequest_DDLRequest::_internal_add_edge_kind_request() const {
  return _internal_has_add_edge_kind_request()
      ? *_impl_.value_.add_edge_kind_request_
      : reinterpret_cast< ::gs::rpc::groot::AddEdgeKindRequest&>(::gs::rpc::groot::_AddEdgeKindRequest_default_instance_);
}
inline const ::gs::rpc::groot::AddEdgeKindRequest& BatchSubmitRequest_DDLRequest::add_edge_kind_request() const {
  // @@protoc_insertion_point(field_get:gs.rpc.groot.BatchSubmitRequest.DDLRequest.add_edge_kind_request)
  return _internal_add_edge_kind_request();
}
inline ::gs::rpc::groot::AddEdgeKindRequest* BatchSubmitRequest_DDLRequest::unsafe_arena_release_add_edge_kind_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:gs.rpc.groot.BatchSubmitRequest.DDLRequest.add_edge_kind_request)
  if (_internal_has_add_edge_kind_request()) {
    clear_has_value();
    ::gs::rpc::groot::AddEdgeKindRequest* temp = _impl_.value_.add_edge_kind_request_;
    _impl_.value_.add_edge_kind_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BatchSubmitRequest_DDLRequest::unsafe_arena_set_allocated_add_edge_kind_request(::gs::rpc::groot::AddEdgeKindRequest* add_edge_kind_request) {
  clear_value();
  if (add_edge_kind_request) {
    set_has_add_edge_kind_request();
    _impl_.value_.add_edge_kind_request_ = add_edge_kind_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gs.rpc.groot.BatchSubmitRequest.DDLRequest.add_edge_kind_request)
}
inline ::gs::rpc::groot::AddEdgeKindRequest* BatchSubmitRequest_DDLRequest::_internal_mutable_add_edge_kind_request() {
  if (!_internal_has_add_edge_kind_request()) {
    clear_value();
    set_has_add_edge_kind_request();
    _impl_.value_.add_edge_kind_request_ = CreateMaybeMessage< ::gs::rpc::groot::AddEdgeKindRequest >(GetArenaForAllocation());
  }
  return _impl_.value_.add_edge_kind_request_;
}
inline ::gs::rpc::groot::AddEdgeKindRequest* BatchSubmitRequest_DDLRequest::mutable_add_edge_kind_request() {
  ::gs::rpc::groot::AddEdgeKindRequest* _msg = _internal_mutable_add_edge_kind_request();
  // @@protoc_insertion_point(field_mutable:gs.rpc.groot.BatchSubmitRequest.DDLRequest.add_edge_kind_request)
  return _msg;
}

// .gs.rpc.groot.RemoveEdgeKindRequest remove_edge_kind_request = 4;
inline bool BatchSubmitRequest_DDLRequest::_internal_has_remove_edge_kind_request() const {
  return value_case() == kRemoveEdgeKindRequest;
}
inline bool BatchSubmitRequest_DDLRequest::has_remove_edge_kind_request() const {
  return _internal_has_remove_edge_kind_request();
}
inline void BatchSubmitRequest_DDLRequest::set_has_remove_edge_kind_request() {
  _impl_._oneof_case_[0] = kRemoveEdgeKindRequest;
}
inline void BatchSubmitRequest_DDLRequest::clear_remove_edge_kind_request() {
  if (_internal_has_remove_edge_kind_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.value_.remove_edge_kind_request_;
    }
    clear_has_value();
  }
}
inline ::gs::rpc::groot::RemoveEdgeKindRequest* BatchSubmitRequest_DDLRequest::release_remove_edge_kind_request() {
  // @@protoc_insertion_point(field_release:gs.rpc.groot.BatchSubmitRequest.DDLRequest.remove_edge_kind_request)
  if (_internal_has_remove_edge_kind_request()) {
    clear_has_value();
    ::gs::rpc::groot::RemoveEdgeKindRequest* temp = _impl_.value_.remove_edge_kind_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.remove_edge_kind_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::gs::rpc::groot::RemoveEdgeKindRequest& BatchSubmitRequest_DDLRequest::_internal_remove_edge_kind_request() const {
  return _internal_has_remove_edge_kind_request()
      ? *_impl_.value_.remove_edge_kind_request_
      : reinterpret_cast< ::gs::rpc::groot::RemoveEdgeKindRequest&>(::gs::rpc::groot::_RemoveEdgeKindRequest_default_instance_);
}
inline const ::gs::rpc::groot::RemoveEdgeKindRequest& BatchSubmitRequest_DDLRequest::remove_edge_kind_request() const {
  // @@protoc_insertion_point(field_get:gs.rpc.groot.BatchSubmitRequest.DDLRequest.remove_edge_kind_request)
  return _internal_remove_edge_kind_request();
}
inline ::gs::rpc::groot::RemoveEdgeKindRequest* BatchSubmitRequest_DDLRequest::unsafe_arena_release_remove_edge_kind_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:gs.rpc.groot.BatchSubmitRequest.DDLRequest.remove_edge_kind_request)
  if (_internal_has_remove_edge_kind_request()) {
    clear_has_value();
    ::gs::rpc::groot::RemoveEdgeKindRequest* temp = _impl_.value_.remove_edge_kind_request_;
    _impl_.value_.remove_edge_kind_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BatchSubmitRequest_DDLRequest::unsafe_arena_set_allocated_remove_edge_kind_request(::gs::rpc::groot::RemoveEdgeKindRequest* remove_edge_kind_request) {
  clear_value();
  if (remove_edge_kind_request) {
    set_has_remove_edge_kind_request();
    _impl_.value_.remove_edge_kind_request_ = remove_edge_kind_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gs.rpc.groot.BatchSubmitRequest.DDLRequest.remove_edge_kind_request)
}
inline ::gs::rpc::groot::RemoveEdgeKindRequest* BatchSubmitRequest_DDLRequest::_internal_mutable_remove_edge_kind_request() {
  if (!_internal_has_remove_edge_kind_request()) {
    clear_value();
    set_has_remove_edge_kind_request();
    _impl_.value_.remove_edge_kind_request_ = CreateMaybeMessage< ::gs::rpc::groot::RemoveEdgeKindRequest >(GetArenaForAllocation());
  }
  return _impl_.value_.remove_edge_kind_request_;
}
inline ::gs::rpc::groot::RemoveEdgeKindRequest* BatchSubmitRequest_DDLRequest::mutable_remove_edge_kind_request() {
  ::gs::rpc::groot::RemoveEdgeKindRequest* _msg = _internal_mutable_remove_edge_kind_request();
  // @@protoc_insertion_point(field_mutable:gs.rpc.groot.BatchSubmitRequest.DDLRequest.remove_edge_kind_request)
  return _msg;
}

// .gs.rpc.groot.DropVertexTypeRequest drop_vertex_type_request = 5;
inline bool BatchSubmitRequest_DDLRequest::_internal_has_drop_vertex_type_request() const {
  return value_case() == kDropVertexTypeRequest;
}
inline bool BatchSubmitRequest_DDLRequest::has_drop_vertex_type_request() const {
  return _internal_has_drop_vertex_type_request();
}
inline void BatchSubmitRequest_DDLRequest::set_has_drop_vertex_type_request() {
  _impl_._oneof_case_[0] = kDropVertexTypeRequest;
}
inline void BatchSubmitRequest_DDLRequest::clear_drop_vertex_type_request() {
  if (_internal_has_drop_vertex_type_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.value_.drop_vertex_type_request_;
    }
    clear_has_value();
  }
}
inline ::gs::rpc::groot::DropVertexTypeRequest* BatchSubmitRequest_DDLRequest::release_drop_vertex_type_request() {
  // @@protoc_insertion_point(field_release:gs.rpc.groot.BatchSubmitRequest.DDLRequest.drop_vertex_type_request)
  if (_internal_has_drop_vertex_type_request()) {
    clear_has_value();
    ::gs::rpc::groot::DropVertexTypeRequest* temp = _impl_.value_.drop_vertex_type_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.drop_vertex_type_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::gs::rpc::groot::DropVertexTypeRequest& BatchSubmitRequest_DDLRequest::_internal_drop_vertex_type_request() const {
  return _internal_has_drop_vertex_type_request()
      ? *_impl_.value_.drop_vertex_type_request_
      : reinterpret_cast< ::gs::rpc::groot::DropVertexTypeRequest&>(::gs::rpc::groot::_DropVertexTypeRequest_default_instance_);
}
inline const ::gs::rpc::groot::DropVertexTypeRequest& BatchSubmitRequest_DDLRequest::drop_vertex_type_request() const {
  // @@protoc_insertion_point(field_get:gs.rpc.groot.BatchSubmitRequest.DDLRequest.drop_vertex_type_request)
  return _internal_drop_vertex_type_request();
}
inline ::gs::rpc::groot::DropVertexTypeRequest* BatchSubmitRequest_DDLRequest::unsafe_arena_release_drop_vertex_type_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:gs.rpc.groot.BatchSubmitRequest.DDLRequest.drop_vertex_type_request)
  if (_internal_has_drop_vertex_type_request()) {
    clear_has_value();
    ::gs::rpc::groot::DropVertexTypeRequest* temp = _impl_.value_.drop_vertex_type_request_;
    _impl_.value_.drop_vertex_type_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BatchSubmitRequest_DDLRequest::unsafe_arena_set_allocated_drop_vertex_type_request(::gs::rpc::groot::DropVertexTypeRequest* drop_vertex_type_request) {
  clear_value();
  if (drop_vertex_type_request) {
    set_has_drop_vertex_type_request();
    _impl_.value_.drop_vertex_type_request_ = drop_vertex_type_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gs.rpc.groot.BatchSubmitRequest.DDLRequest.drop_vertex_type_request)
}
inline ::gs::rpc::groot::DropVertexTypeRequest* BatchSubmitRequest_DDLRequest::_internal_mutable_drop_vertex_type_request() {
  if (!_internal_has_drop_vertex_type_request()) {
    clear_value();
    set_has_drop_vertex_type_request();
    _impl_.value_.drop_vertex_type_request_ = CreateMaybeMessage< ::gs::rpc::groot::DropVertexTypeRequest >(GetArenaForAllocation());
  }
  return _impl_.value_.drop_vertex_type_request_;
}
inline ::gs::rpc::groot::DropVertexTypeRequest* BatchSubmitRequest_DDLRequest::mutable_drop_vertex_type_request() {
  ::gs::rpc::groot::DropVertexTypeRequest* _msg = _internal_mutable_drop_vertex_type_request();
  // @@protoc_insertion_point(field_mutable:gs.rpc.groot.BatchSubmitRequest.DDLRequest.drop_vertex_type_request)
  return _msg;
}

// .gs.rpc.groot.DropEdgeTypeRequest drop_edge_type_request = 6;
inline bool BatchSubmitRequest_DDLRequest::_internal_has_drop_edge_type_request() const {
  return value_case() == kDropEdgeTypeRequest;
}
inline bool BatchSubmitRequest_DDLRequest::has_drop_edge_type_request() const {
  return _internal_has_drop_edge_type_request();
}
inline void BatchSubmitRequest_DDLRequest::set_has_drop_edge_type_request() {
  _impl_._oneof_case_[0] = kDropEdgeTypeRequest;
}
inline void BatchSubmitRequest_DDLRequest::clear_drop_edge_type_request() {
  if (_internal_has_drop_edge_type_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.value_.drop_edge_type_request_;
    }
    clear_has_value();
  }
}
inline ::gs::rpc::groot::DropEdgeTypeRequest* BatchSubmitRequest_DDLRequest::release_drop_edge_type_request() {
  // @@protoc_insertion_point(field_release:gs.rpc.groot.BatchSubmitRequest.DDLRequest.drop_edge_type_request)
  if (_internal_has_drop_edge_type_request()) {
    clear_has_value();
    ::gs::rpc::groot::DropEdgeTypeRequest* temp = _impl_.value_.drop_edge_type_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.drop_edge_type_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::gs::rpc::groot::DropEdgeTypeRequest& BatchSubmitRequest_DDLRequest::_internal_drop_edge_type_request() const {
  return _internal_has_drop_edge_type_request()
      ? *_impl_.value_.drop_edge_type_request_
      : reinterpret_cast< ::gs::rpc::groot::DropEdgeTypeRequest&>(::gs::rpc::groot::_DropEdgeTypeRequest_default_instance_);
}
inline const ::gs::rpc::groot::DropEdgeTypeRequest& BatchSubmitRequest_DDLRequest::drop_edge_type_request() const {
  // @@protoc_insertion_point(field_get:gs.rpc.groot.BatchSubmitRequest.DDLRequest.drop_edge_type_request)
  return _internal_drop_edge_type_request();
}
inline ::gs::rpc::groot::DropEdgeTypeRequest* BatchSubmitRequest_DDLRequest::unsafe_arena_release_drop_edge_type_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:gs.rpc.groot.BatchSubmitRequest.DDLRequest.drop_edge_type_request)
  if (_internal_has_drop_edge_type_request()) {
    clear_has_value();
    ::gs::rpc::groot::DropEdgeTypeRequest* temp = _impl_.value_.drop_edge_type_request_;
    _impl_.value_.drop_edge_type_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BatchSubmitRequest_DDLRequest::unsafe_arena_set_allocated_drop_edge_type_request(::gs::rpc::groot::DropEdgeTypeRequest* drop_edge_type_request) {
  clear_value();
  if (drop_edge_type_request) {
    set_has_drop_edge_type_request();
    _impl_.value_.drop_edge_type_request_ = drop_edge_type_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gs.rpc.groot.BatchSubmitRequest.DDLRequest.drop_edge_type_request)
}
inline ::gs::rpc::groot::DropEdgeTypeRequest* BatchSubmitRequest_DDLRequest::_internal_mutable_drop_edge_type_request() {
  if (!_internal_has_drop_edge_type_request()) {
    clear_value();
    set_has_drop_edge_type_request();
    _impl_.value_.drop_edge_type_request_ = CreateMaybeMessage< ::gs::rpc::groot::DropEdgeTypeRequest >(GetArenaForAllocation());
  }
  return _impl_.value_.drop_edge_type_request_;
}
inline ::gs::rpc::groot::DropEdgeTypeRequest* BatchSubmitRequest_DDLRequest::mutable_drop_edge_type_request() {
  ::gs::rpc::groot::DropEdgeTypeRequest* _msg = _internal_mutable_drop_edge_type_request();
  // @@protoc_insertion_point(field_mutable:gs.rpc.groot.BatchSubmitRequest.DDLRequest.drop_edge_type_request)
  return _msg;
}

// .gs.rpc.groot.AddVertexTypePropertiesRequest add_vertex_type_properties_request = 7;
inline bool BatchSubmitRequest_DDLRequest::_internal_has_add_vertex_type_properties_request() const {
  return value_case() == kAddVertexTypePropertiesRequest;
}
inline bool BatchSubmitRequest_DDLRequest::has_add_vertex_type_properties_request() const {
  return _internal_has_add_vertex_type_properties_request();
}
inline void BatchSubmitRequest_DDLRequest::set_has_add_vertex_type_properties_request() {
  _impl_._oneof_case_[0] = kAddVertexTypePropertiesRequest;
}
inline void BatchSubmitRequest_DDLRequest::clear_add_vertex_type_properties_request() {
  if (_internal_has_add_vertex_type_properties_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.value_.add_vertex_type_properties_request_;
    }
    clear_has_value();
  }
}
inline ::gs::rpc::groot::AddVertexTypePropertiesRequest* BatchSubmitRequest_DDLRequest::release_add_vertex_type_properties_request() {
  // @@protoc_insertion_point(field_release:gs.rpc.groot.BatchSubmitRequest.DDLRequest.add_vertex_type_properties_request)
  if (_internal_has_add_vertex_type_properties_request()) {
    clear_has_value();
    ::gs::rpc::groot::AddVertexTypePropertiesRequest* temp = _impl_.value_.add_vertex_type_properties_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.add_vertex_type_properties_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::gs::rpc::groot::AddVertexTypePropertiesRequest& BatchSubmitRequest_DDLRequest::_internal_add_vertex_type_properties_request() const {
  return _internal_has_add_vertex_type_properties_request()
      ? *_impl_.value_.add_vertex_type_properties_request_
      : reinterpret_cast< ::gs::rpc::groot::AddVertexTypePropertiesRequest&>(::gs::rpc::groot::_AddVertexTypePropertiesRequest_default_instance_);
}
inline const ::gs::rpc::groot::AddVertexTypePropertiesRequest& BatchSubmitRequest_DDLRequest::add_vertex_type_properties_request() const {
  // @@protoc_insertion_point(field_get:gs.rpc.groot.BatchSubmitRequest.DDLRequest.add_vertex_type_properties_request)
  return _internal_add_vertex_type_properties_request();
}
inline ::gs::rpc::groot::AddVertexTypePropertiesRequest* BatchSubmitRequest_DDLRequest::unsafe_arena_release_add_vertex_type_properties_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:gs.rpc.groot.BatchSubmitRequest.DDLRequest.add_vertex_type_properties_request)
  if (_internal_has_add_vertex_type_properties_request()) {
    clear_has_value();
    ::gs::rpc::groot::AddVertexTypePropertiesRequest* temp = _impl_.value_.add_vertex_type_properties_request_;
    _impl_.value_.add_vertex_type_properties_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BatchSubmitRequest_DDLRequest::unsafe_arena_set_allocated_add_vertex_type_properties_request(::gs::rpc::groot::AddVertexTypePropertiesRequest* add_vertex_type_properties_request) {
  clear_value();
  if (add_vertex_type_properties_request) {
    set_has_add_vertex_type_properties_request();
    _impl_.value_.add_vertex_type_properties_request_ = add_vertex_type_properties_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gs.rpc.groot.BatchSubmitRequest.DDLRequest.add_vertex_type_properties_request)
}
inline ::gs::rpc::groot::AddVertexTypePropertiesRequest* BatchSubmitRequest_DDLRequest::_internal_mutable_add_vertex_type_properties_request() {
  if (!_internal_has_add_vertex_type_properties_request()) {
    clear_value();
    set_has_add_vertex_type_properties_request();
    _impl_.value_.add_vertex_type_properties_request_ = CreateMaybeMessage< ::gs::rpc::groot::AddVertexTypePropertiesRequest >(GetArenaForAllocation());
  }
  return _impl_.value_.add_vertex_type_properties_request_;
}
inline ::gs::rpc::groot::AddVertexTypePropertiesRequest* BatchSubmitRequest_DDLRequest::mutable_add_vertex_type_properties_request() {
  ::gs::rpc::groot::AddVertexTypePropertiesRequest* _msg = _internal_mutable_add_vertex_type_properties_request();
  // @@protoc_insertion_point(field_mutable:gs.rpc.groot.BatchSubmitRequest.DDLRequest.add_vertex_type_properties_request)
  return _msg;
}

// .gs.rpc.groot.AddEdgeTypePropertiesRequest add_edge_type_properties_request = 8;
inline bool BatchSubmitRequest_DDLRequest::_internal_has_add_edge_type_properties_request() const {
  return value_case() == kAddEdgeTypePropertiesRequest;
}
inline bool BatchSubmitRequest_DDLRequest::has_add_edge_type_properties_request() const {
  return _internal_has_add_edge_type_properties_request();
}
inline void BatchSubmitRequest_DDLRequest::set_has_add_edge_type_properties_request() {
  _impl_._oneof_case_[0] = kAddEdgeTypePropertiesRequest;
}
inline void BatchSubmitRequest_DDLRequest::clear_add_edge_type_properties_request() {
  if (_internal_has_add_edge_type_properties_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.value_.add_edge_type_properties_request_;
    }
    clear_has_value();
  }
}
inline ::gs::rpc::groot::AddEdgeTypePropertiesRequest* BatchSubmitRequest_DDLRequest::release_add_edge_type_properties_request() {
  // @@protoc_insertion_point(field_release:gs.rpc.groot.BatchSubmitRequest.DDLRequest.add_edge_type_properties_request)
  if (_internal_has_add_edge_type_properties_request()) {
    clear_has_value();
    ::gs::rpc::groot::AddEdgeTypePropertiesRequest* temp = _impl_.value_.add_edge_type_properties_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.add_edge_type_properties_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::gs::rpc::groot::AddEdgeTypePropertiesRequest& BatchSubmitRequest_DDLRequest::_internal_add_edge_type_properties_request() const {
  return _internal_has_add_edge_type_properties_request()
      ? *_impl_.value_.add_edge_type_properties_request_
      : reinterpret_cast< ::gs::rpc::groot::AddEdgeTypePropertiesRequest&>(::gs::rpc::groot::_AddEdgeTypePropertiesRequest_default_instance_);
}
inline const ::gs::rpc::groot::AddEdgeTypePropertiesRequest& BatchSubmitRequest_DDLRequest::add_edge_type_properties_request() const {
  // @@protoc_insertion_point(field_get:gs.rpc.groot.BatchSubmitRequest.DDLRequest.add_edge_type_properties_request)
  return _internal_add_edge_type_properties_request();
}
inline ::gs::rpc::groot::AddEdgeTypePropertiesRequest* BatchSubmitRequest_DDLRequest::unsafe_arena_release_add_edge_type_properties_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:gs.rpc.groot.BatchSubmitRequest.DDLRequest.add_edge_type_properties_request)
  if (_internal_has_add_edge_type_properties_request()) {
    clear_has_value();
    ::gs::rpc::groot::AddEdgeTypePropertiesRequest* temp = _impl_.value_.add_edge_type_properties_request_;
    _impl_.value_.add_edge_type_properties_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BatchSubmitRequest_DDLRequest::unsafe_arena_set_allocated_add_edge_type_properties_request(::gs::rpc::groot::AddEdgeTypePropertiesRequest* add_edge_type_properties_request) {
  clear_value();
  if (add_edge_type_properties_request) {
    set_has_add_edge_type_properties_request();
    _impl_.value_.add_edge_type_properties_request_ = add_edge_type_properties_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gs.rpc.groot.BatchSubmitRequest.DDLRequest.add_edge_type_properties_request)
}
inline ::gs::rpc::groot::AddEdgeTypePropertiesRequest* BatchSubmitRequest_DDLRequest::_internal_mutable_add_edge_type_properties_request() {
  if (!_internal_has_add_edge_type_properties_request()) {
    clear_value();
    set_has_add_edge_type_properties_request();
    _impl_.value_.add_edge_type_properties_request_ = CreateMaybeMessage< ::gs::rpc::groot::AddEdgeTypePropertiesRequest >(GetArenaForAllocation());
  }
  return _impl_.value_.add_edge_type_properties_request_;
}
inline ::gs::rpc::groot::AddEdgeTypePropertiesRequest* BatchSubmitRequest_DDLRequest::mutable_add_edge_type_properties_request() {
  ::gs::rpc::groot::AddEdgeTypePropertiesRequest* _msg = _internal_mutable_add_edge_type_properties_request();
  // @@protoc_insertion_point(field_mutable:gs.rpc.groot.BatchSubmitRequest.DDLRequest.add_edge_type_properties_request)
  return _msg;
}

inline bool BatchSubmitRequest_DDLRequest::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void BatchSubmitRequest_DDLRequest::clear_has_value() {
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}
inline BatchSubmitRequest_DDLRequest::ValueCase BatchSubmitRequest_DDLRequest::value_case() const {
  return BatchSubmitRequest_DDLRequest::ValueCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// BatchSubmitRequest

// int32 format_version = 1;
inline void BatchSubmitRequest::clear_format_version() {
  _impl_.format_version_ = 0;
}
inline int32_t BatchSubmitRequest::_internal_format_version() const {
  return _impl_.format_version_;
}
inline int32_t BatchSubmitRequest::format_version() const {
  // @@protoc_insertion_point(field_get:gs.rpc.groot.BatchSubmitRequest.format_version)
  return _internal_format_version();
}
inline void BatchSubmitRequest::_internal_set_format_version(int32_t value) {
  
  _impl_.format_version_ = value;
}
inline void BatchSubmitRequest::set_format_version(int32_t value) {
  _internal_set_format_version(value);
  // @@protoc_insertion_point(field_set:gs.rpc.groot.BatchSubmitRequest.format_version)
}

// bool simple_response = 2;
inline void BatchSubmitRequest::clear_simple_response() {
  _impl_.simple_response_ = false;
}
inline bool BatchSubmitRequest::_internal_simple_response() const {
  return _impl_.simple_response_;
}
inline bool BatchSubmitRequest::simple_response() const {
  // @@protoc_insertion_point(field_get:gs.rpc.groot.BatchSubmitRequest.simple_response)
  return _internal_simple_response();
}
inline void BatchSubmitRequest::_internal_set_simple_response(bool value) {
  
  _impl_.simple_response_ = value;
}
inline void BatchSubmitRequest::set_simple_response(bool value) {
  _internal_set_simple_response(value);
  // @@protoc_insertion_point(field_set:gs.rpc.groot.BatchSubmitRequest.simple_response)
}

// repeated .gs.rpc.groot.BatchSubmitRequest.DDLRequest value = 3;
inline int BatchSubmitRequest::_internal_value_size() const {
  return _impl_.value_.size();
}
inline int BatchSubmitRequest::value_size() const {
  return _internal_value_size();
}
inline void BatchSubmitRequest::clear_value() {
  _impl_.value_.Clear();
}
inline ::gs::rpc::groot::BatchSubmitRequest_DDLRequest* BatchSubmitRequest::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:gs.rpc.groot.BatchSubmitRequest.value)
  return _impl_.value_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gs::rpc::groot::BatchSubmitRequest_DDLRequest >*
BatchSubmitRequest::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:gs.rpc.groot.BatchSubmitRequest.value)
  return &_impl_.value_;
}
inline const ::gs::rpc::groot::BatchSubmitRequest_DDLRequest& BatchSubmitRequest::_internal_value(int index) const {
  return _impl_.value_.Get(index);
}
inline const ::gs::rpc::groot::BatchSubmitRequest_DDLRequest& BatchSubmitRequest::value(int index) const {
  // @@protoc_insertion_point(field_get:gs.rpc.groot.BatchSubmitRequest.value)
  return _internal_value(index);
}
inline ::gs::rpc::groot::BatchSubmitRequest_DDLRequest* BatchSubmitRequest::_internal_add_value() {
  return _impl_.value_.Add();
}
inline ::gs::rpc::groot::BatchSubmitRequest_DDLRequest* BatchSubmitRequest::add_value() {
  ::gs::rpc::groot::BatchSubmitRequest_DDLRequest* _add = _internal_add_value();
  // @@protoc_insertion_point(field_add:gs.rpc.groot.BatchSubmitRequest.value)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gs::rpc::groot::BatchSubmitRequest_DDLRequest >&
BatchSubmitRequest::value() const {
  // @@protoc_insertion_point(field_list:gs.rpc.groot.BatchSubmitRequest.value)
  return _impl_.value_;
}

// .gs.rpc.groot.RequestOptionsPb request_options = 4;
inline bool BatchSubmitRequest::_internal_has_request_options() const {
  return this != internal_default_instance() && _impl_.request_options_ != nullptr;
}
inline bool BatchSubmitRequest::has_request_options() const {
  return _internal_has_request_options();
}
inline const ::gs::rpc::groot::RequestOptionsPb& BatchSubmitRequest::_internal_request_options() const {
  const ::gs::rpc::groot::RequestOptionsPb* p = _impl_.request_options_;
  return p != nullptr ? *p : reinterpret_cast<const ::gs::rpc::groot::RequestOptionsPb&>(
      ::gs::rpc::groot::_RequestOptionsPb_default_instance_);
}
inline const ::gs::rpc::groot::RequestOptionsPb& BatchSubmitRequest::request_options() const {
  // @@protoc_insertion_point(field_get:gs.rpc.groot.BatchSubmitRequest.request_options)
  return _internal_request_options();
}
inline void BatchSubmitRequest::unsafe_arena_set_allocated_request_options(
    ::gs::rpc::groot::RequestOptionsPb* request_options) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.request_options_);
  }
  _impl_.request_options_ = request_options;
  if (request_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gs.rpc.groot.BatchSubmitRequest.request_options)
}
inline ::gs::rpc::groot::RequestOptionsPb* BatchSubmitRequest::release_request_options() {
  
  ::gs::rpc::groot::RequestOptionsPb* temp = _impl_.request_options_;
  _impl_.request_options_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::gs::rpc::groot::RequestOptionsPb* BatchSubmitRequest::unsafe_arena_release_request_options() {
  // @@protoc_insertion_point(field_release:gs.rpc.groot.BatchSubmitRequest.request_options)
  
  ::gs::rpc::groot::RequestOptionsPb* temp = _impl_.request_options_;
  _impl_.request_options_ = nullptr;
  return temp;
}
inline ::gs::rpc::groot::RequestOptionsPb* BatchSubmitRequest::_internal_mutable_request_options() {
  
  if (_impl_.request_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::gs::rpc::groot::RequestOptionsPb>(GetArenaForAllocation());
    _impl_.request_options_ = p;
  }
  return _impl_.request_options_;
}
inline ::gs::rpc::groot::RequestOptionsPb* BatchSubmitRequest::mutable_request_options() {
  ::gs::rpc::groot::RequestOptionsPb* _msg = _internal_mutable_request_options();
  // @@protoc_insertion_point(field_mutable:gs.rpc.groot.BatchSubmitRequest.request_options)
  return _msg;
}
inline void BatchSubmitRequest::set_allocated_request_options(::gs::rpc::groot::RequestOptionsPb* request_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.request_options_);
  }
  if (request_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(request_options));
    if (message_arena != submessage_arena) {
      request_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request_options, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.request_options_ = request_options;
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.groot.BatchSubmitRequest.request_options)
}

// -------------------------------------------------------------------

// BatchSubmitResponse

// int32 format_version = 1;
inline void BatchSubmitResponse::clear_format_version() {
  _impl_.format_version_ = 0;
}
inline int32_t BatchSubmitResponse::_internal_format_version() const {
  return _impl_.format_version_;
}
inline int32_t BatchSubmitResponse::format_version() const {
  // @@protoc_insertion_point(field_get:gs.rpc.groot.BatchSubmitResponse.format_version)
  return _internal_format_version();
}
inline void BatchSubmitResponse::_internal_set_format_version(int32_t value) {
  
  _impl_.format_version_ = value;
}
inline void BatchSubmitResponse::set_format_version(int32_t value) {
  _internal_set_format_version(value);
  // @@protoc_insertion_point(field_set:gs.rpc.groot.BatchSubmitResponse.format_version)
}

// .gs.rpc.graph.GraphDefPb graph_def = 2;
inline bool BatchSubmitResponse::_internal_has_graph_def() const {
  return this != internal_default_instance() && _impl_.graph_def_ != nullptr;
}
inline bool BatchSubmitResponse::has_graph_def() const {
  return _internal_has_graph_def();
}
inline const ::gs::rpc::graph::GraphDefPb& BatchSubmitResponse::_internal_graph_def() const {
  const ::gs::rpc::graph::GraphDefPb* p = _impl_.graph_def_;
  return p != nullptr ? *p : reinterpret_cast<const ::gs::rpc::graph::GraphDefPb&>(
      ::gs::rpc::graph::_GraphDefPb_default_instance_);
}
inline const ::gs::rpc::graph::GraphDefPb& BatchSubmitResponse::graph_def() const {
  // @@protoc_insertion_point(field_get:gs.rpc.groot.BatchSubmitResponse.graph_def)
  return _internal_graph_def();
}
inline void BatchSubmitResponse::unsafe_arena_set_allocated_graph_def(
    ::gs::rpc::graph::GraphDefPb* graph_def) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.graph_def_);
  }
  _impl_.graph_def_ = graph_def;
  if (graph_def) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gs.rpc.groot.BatchSubmitResponse.graph_def)
}
inline ::gs::rpc::graph::GraphDefPb* BatchSubmitResponse::release_graph_def() {
  
  ::gs::rpc::graph::GraphDefPb* temp = _impl_.graph_def_;
  _impl_.graph_def_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::gs::rpc::graph::GraphDefPb* BatchSubmitResponse::unsafe_arena_release_graph_def() {
  // @@protoc_insertion_point(field_release:gs.rpc.groot.BatchSubmitResponse.graph_def)
  
  ::gs::rpc::graph::GraphDefPb* temp = _impl_.graph_def_;
  _impl_.graph_def_ = nullptr;
  return temp;
}
inline ::gs::rpc::graph::GraphDefPb* BatchSubmitResponse::_internal_mutable_graph_def() {
  
  if (_impl_.graph_def_ == nullptr) {
    auto* p = CreateMaybeMessage<::gs::rpc::graph::GraphDefPb>(GetArenaForAllocation());
    _impl_.graph_def_ = p;
  }
  return _impl_.graph_def_;
}
inline ::gs::rpc::graph::GraphDefPb* BatchSubmitResponse::mutable_graph_def() {
  ::gs::rpc::graph::GraphDefPb* _msg = _internal_mutable_graph_def();
  // @@protoc_insertion_point(field_mutable:gs.rpc.groot.BatchSubmitResponse.graph_def)
  return _msg;
}
inline void BatchSubmitResponse::set_allocated_graph_def(::gs::rpc::graph::GraphDefPb* graph_def) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.graph_def_);
  }
  if (graph_def) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(graph_def));
    if (message_arena != submessage_arena) {
      graph_def = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, graph_def, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.graph_def_ = graph_def;
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.groot.BatchSubmitResponse.graph_def)
}

// -------------------------------------------------------------------

// CreateVertexTypeRequest

// .gs.rpc.graph.TypeDefPb type_def = 1;
inline bool CreateVertexTypeRequest::_internal_has_type_def() const {
  return this != internal_default_instance() && _impl_.type_def_ != nullptr;
}
inline bool CreateVertexTypeRequest::has_type_def() const {
  return _internal_has_type_def();
}
inline const ::gs::rpc::graph::TypeDefPb& CreateVertexTypeRequest::_internal_type_def() const {
  const ::gs::rpc::graph::TypeDefPb* p = _impl_.type_def_;
  return p != nullptr ? *p : reinterpret_cast<const ::gs::rpc::graph::TypeDefPb&>(
      ::gs::rpc::graph::_TypeDefPb_default_instance_);
}
inline const ::gs::rpc::graph::TypeDefPb& CreateVertexTypeRequest::type_def() const {
  // @@protoc_insertion_point(field_get:gs.rpc.groot.CreateVertexTypeRequest.type_def)
  return _internal_type_def();
}
inline void CreateVertexTypeRequest::unsafe_arena_set_allocated_type_def(
    ::gs::rpc::graph::TypeDefPb* type_def) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.type_def_);
  }
  _impl_.type_def_ = type_def;
  if (type_def) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gs.rpc.groot.CreateVertexTypeRequest.type_def)
}
inline ::gs::rpc::graph::TypeDefPb* CreateVertexTypeRequest::release_type_def() {
  
  ::gs::rpc::graph::TypeDefPb* temp = _impl_.type_def_;
  _impl_.type_def_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::gs::rpc::graph::TypeDefPb* CreateVertexTypeRequest::unsafe_arena_release_type_def() {
  // @@protoc_insertion_point(field_release:gs.rpc.groot.CreateVertexTypeRequest.type_def)
  
  ::gs::rpc::graph::TypeDefPb* temp = _impl_.type_def_;
  _impl_.type_def_ = nullptr;
  return temp;
}
inline ::gs::rpc::graph::TypeDefPb* CreateVertexTypeRequest::_internal_mutable_type_def() {
  
  if (_impl_.type_def_ == nullptr) {
    auto* p = CreateMaybeMessage<::gs::rpc::graph::TypeDefPb>(GetArenaForAllocation());
    _impl_.type_def_ = p;
  }
  return _impl_.type_def_;
}
inline ::gs::rpc::graph::TypeDefPb* CreateVertexTypeRequest::mutable_type_def() {
  ::gs::rpc::graph::TypeDefPb* _msg = _internal_mutable_type_def();
  // @@protoc_insertion_point(field_mutable:gs.rpc.groot.CreateVertexTypeRequest.type_def)
  return _msg;
}
inline void CreateVertexTypeRequest::set_allocated_type_def(::gs::rpc::graph::TypeDefPb* type_def) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.type_def_);
  }
  if (type_def) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(type_def));
    if (message_arena != submessage_arena) {
      type_def = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, type_def, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.type_def_ = type_def;
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.groot.CreateVertexTypeRequest.type_def)
}

// -------------------------------------------------------------------

// AddVertexTypePropertiesRequest

// .gs.rpc.graph.TypeDefPb type_def = 1;
inline bool AddVertexTypePropertiesRequest::_internal_has_type_def() const {
  return this != internal_default_instance() && _impl_.type_def_ != nullptr;
}
inline bool AddVertexTypePropertiesRequest::has_type_def() const {
  return _internal_has_type_def();
}
inline const ::gs::rpc::graph::TypeDefPb& AddVertexTypePropertiesRequest::_internal_type_def() const {
  const ::gs::rpc::graph::TypeDefPb* p = _impl_.type_def_;
  return p != nullptr ? *p : reinterpret_cast<const ::gs::rpc::graph::TypeDefPb&>(
      ::gs::rpc::graph::_TypeDefPb_default_instance_);
}
inline const ::gs::rpc::graph::TypeDefPb& AddVertexTypePropertiesRequest::type_def() const {
  // @@protoc_insertion_point(field_get:gs.rpc.groot.AddVertexTypePropertiesRequest.type_def)
  return _internal_type_def();
}
inline void AddVertexTypePropertiesRequest::unsafe_arena_set_allocated_type_def(
    ::gs::rpc::graph::TypeDefPb* type_def) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.type_def_);
  }
  _impl_.type_def_ = type_def;
  if (type_def) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gs.rpc.groot.AddVertexTypePropertiesRequest.type_def)
}
inline ::gs::rpc::graph::TypeDefPb* AddVertexTypePropertiesRequest::release_type_def() {
  
  ::gs::rpc::graph::TypeDefPb* temp = _impl_.type_def_;
  _impl_.type_def_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::gs::rpc::graph::TypeDefPb* AddVertexTypePropertiesRequest::unsafe_arena_release_type_def() {
  // @@protoc_insertion_point(field_release:gs.rpc.groot.AddVertexTypePropertiesRequest.type_def)
  
  ::gs::rpc::graph::TypeDefPb* temp = _impl_.type_def_;
  _impl_.type_def_ = nullptr;
  return temp;
}
inline ::gs::rpc::graph::TypeDefPb* AddVertexTypePropertiesRequest::_internal_mutable_type_def() {
  
  if (_impl_.type_def_ == nullptr) {
    auto* p = CreateMaybeMessage<::gs::rpc::graph::TypeDefPb>(GetArenaForAllocation());
    _impl_.type_def_ = p;
  }
  return _impl_.type_def_;
}
inline ::gs::rpc::graph::TypeDefPb* AddVertexTypePropertiesRequest::mutable_type_def() {
  ::gs::rpc::graph::TypeDefPb* _msg = _internal_mutable_type_def();
  // @@protoc_insertion_point(field_mutable:gs.rpc.groot.AddVertexTypePropertiesRequest.type_def)
  return _msg;
}
inline void AddVertexTypePropertiesRequest::set_allocated_type_def(::gs::rpc::graph::TypeDefPb* type_def) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.type_def_);
  }
  if (type_def) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(type_def));
    if (message_arena != submessage_arena) {
      type_def = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, type_def, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.type_def_ = type_def;
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.groot.AddVertexTypePropertiesRequest.type_def)
}

// -------------------------------------------------------------------

// CreateEdgeTypeRequest

// .gs.rpc.graph.TypeDefPb type_def = 1;
inline bool CreateEdgeTypeRequest::_internal_has_type_def() const {
  return this != internal_default_instance() && _impl_.type_def_ != nullptr;
}
inline bool CreateEdgeTypeRequest::has_type_def() const {
  return _internal_has_type_def();
}
inline const ::gs::rpc::graph::TypeDefPb& CreateEdgeTypeRequest::_internal_type_def() const {
  const ::gs::rpc::graph::TypeDefPb* p = _impl_.type_def_;
  return p != nullptr ? *p : reinterpret_cast<const ::gs::rpc::graph::TypeDefPb&>(
      ::gs::rpc::graph::_TypeDefPb_default_instance_);
}
inline const ::gs::rpc::graph::TypeDefPb& CreateEdgeTypeRequest::type_def() const {
  // @@protoc_insertion_point(field_get:gs.rpc.groot.CreateEdgeTypeRequest.type_def)
  return _internal_type_def();
}
inline void CreateEdgeTypeRequest::unsafe_arena_set_allocated_type_def(
    ::gs::rpc::graph::TypeDefPb* type_def) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.type_def_);
  }
  _impl_.type_def_ = type_def;
  if (type_def) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gs.rpc.groot.CreateEdgeTypeRequest.type_def)
}
inline ::gs::rpc::graph::TypeDefPb* CreateEdgeTypeRequest::release_type_def() {
  
  ::gs::rpc::graph::TypeDefPb* temp = _impl_.type_def_;
  _impl_.type_def_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::gs::rpc::graph::TypeDefPb* CreateEdgeTypeRequest::unsafe_arena_release_type_def() {
  // @@protoc_insertion_point(field_release:gs.rpc.groot.CreateEdgeTypeRequest.type_def)
  
  ::gs::rpc::graph::TypeDefPb* temp = _impl_.type_def_;
  _impl_.type_def_ = nullptr;
  return temp;
}
inline ::gs::rpc::graph::TypeDefPb* CreateEdgeTypeRequest::_internal_mutable_type_def() {
  
  if (_impl_.type_def_ == nullptr) {
    auto* p = CreateMaybeMessage<::gs::rpc::graph::TypeDefPb>(GetArenaForAllocation());
    _impl_.type_def_ = p;
  }
  return _impl_.type_def_;
}
inline ::gs::rpc::graph::TypeDefPb* CreateEdgeTypeRequest::mutable_type_def() {
  ::gs::rpc::graph::TypeDefPb* _msg = _internal_mutable_type_def();
  // @@protoc_insertion_point(field_mutable:gs.rpc.groot.CreateEdgeTypeRequest.type_def)
  return _msg;
}
inline void CreateEdgeTypeRequest::set_allocated_type_def(::gs::rpc::graph::TypeDefPb* type_def) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.type_def_);
  }
  if (type_def) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(type_def));
    if (message_arena != submessage_arena) {
      type_def = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, type_def, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.type_def_ = type_def;
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.groot.CreateEdgeTypeRequest.type_def)
}

// -------------------------------------------------------------------

// AddEdgeTypePropertiesRequest

// .gs.rpc.graph.TypeDefPb type_def = 1;
inline bool AddEdgeTypePropertiesRequest::_internal_has_type_def() const {
  return this != internal_default_instance() && _impl_.type_def_ != nullptr;
}
inline bool AddEdgeTypePropertiesRequest::has_type_def() const {
  return _internal_has_type_def();
}
inline const ::gs::rpc::graph::TypeDefPb& AddEdgeTypePropertiesRequest::_internal_type_def() const {
  const ::gs::rpc::graph::TypeDefPb* p = _impl_.type_def_;
  return p != nullptr ? *p : reinterpret_cast<const ::gs::rpc::graph::TypeDefPb&>(
      ::gs::rpc::graph::_TypeDefPb_default_instance_);
}
inline const ::gs::rpc::graph::TypeDefPb& AddEdgeTypePropertiesRequest::type_def() const {
  // @@protoc_insertion_point(field_get:gs.rpc.groot.AddEdgeTypePropertiesRequest.type_def)
  return _internal_type_def();
}
inline void AddEdgeTypePropertiesRequest::unsafe_arena_set_allocated_type_def(
    ::gs::rpc::graph::TypeDefPb* type_def) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.type_def_);
  }
  _impl_.type_def_ = type_def;
  if (type_def) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gs.rpc.groot.AddEdgeTypePropertiesRequest.type_def)
}
inline ::gs::rpc::graph::TypeDefPb* AddEdgeTypePropertiesRequest::release_type_def() {
  
  ::gs::rpc::graph::TypeDefPb* temp = _impl_.type_def_;
  _impl_.type_def_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::gs::rpc::graph::TypeDefPb* AddEdgeTypePropertiesRequest::unsafe_arena_release_type_def() {
  // @@protoc_insertion_point(field_release:gs.rpc.groot.AddEdgeTypePropertiesRequest.type_def)
  
  ::gs::rpc::graph::TypeDefPb* temp = _impl_.type_def_;
  _impl_.type_def_ = nullptr;
  return temp;
}
inline ::gs::rpc::graph::TypeDefPb* AddEdgeTypePropertiesRequest::_internal_mutable_type_def() {
  
  if (_impl_.type_def_ == nullptr) {
    auto* p = CreateMaybeMessage<::gs::rpc::graph::TypeDefPb>(GetArenaForAllocation());
    _impl_.type_def_ = p;
  }
  return _impl_.type_def_;
}
inline ::gs::rpc::graph::TypeDefPb* AddEdgeTypePropertiesRequest::mutable_type_def() {
  ::gs::rpc::graph::TypeDefPb* _msg = _internal_mutable_type_def();
  // @@protoc_insertion_point(field_mutable:gs.rpc.groot.AddEdgeTypePropertiesRequest.type_def)
  return _msg;
}
inline void AddEdgeTypePropertiesRequest::set_allocated_type_def(::gs::rpc::graph::TypeDefPb* type_def) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.type_def_);
  }
  if (type_def) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(type_def));
    if (message_arena != submessage_arena) {
      type_def = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, type_def, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.type_def_ = type_def;
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.groot.AddEdgeTypePropertiesRequest.type_def)
}

// -------------------------------------------------------------------

// AddEdgeKindRequest

// string edge_label = 1;
inline void AddEdgeKindRequest::clear_edge_label() {
  _impl_.edge_label_.ClearToEmpty();
}
inline const std::string& AddEdgeKindRequest::edge_label() const {
  // @@protoc_insertion_point(field_get:gs.rpc.groot.AddEdgeKindRequest.edge_label)
  return _internal_edge_label();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddEdgeKindRequest::set_edge_label(ArgT0&& arg0, ArgT... args) {
 
 _impl_.edge_label_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gs.rpc.groot.AddEdgeKindRequest.edge_label)
}
inline std::string* AddEdgeKindRequest::mutable_edge_label() {
  std::string* _s = _internal_mutable_edge_label();
  // @@protoc_insertion_point(field_mutable:gs.rpc.groot.AddEdgeKindRequest.edge_label)
  return _s;
}
inline const std::string& AddEdgeKindRequest::_internal_edge_label() const {
  return _impl_.edge_label_.Get();
}
inline void AddEdgeKindRequest::_internal_set_edge_label(const std::string& value) {
  
  _impl_.edge_label_.Set(value, GetArenaForAllocation());
}
inline std::string* AddEdgeKindRequest::_internal_mutable_edge_label() {
  
  return _impl_.edge_label_.Mutable(GetArenaForAllocation());
}
inline std::string* AddEdgeKindRequest::release_edge_label() {
  // @@protoc_insertion_point(field_release:gs.rpc.groot.AddEdgeKindRequest.edge_label)
  return _impl_.edge_label_.Release();
}
inline void AddEdgeKindRequest::set_allocated_edge_label(std::string* edge_label) {
  if (edge_label != nullptr) {
    
  } else {
    
  }
  _impl_.edge_label_.SetAllocated(edge_label, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.edge_label_.IsDefault()) {
    _impl_.edge_label_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.groot.AddEdgeKindRequest.edge_label)
}

// string src_vertex_label = 2;
inline void AddEdgeKindRequest::clear_src_vertex_label() {
  _impl_.src_vertex_label_.ClearToEmpty();
}
inline const std::string& AddEdgeKindRequest::src_vertex_label() const {
  // @@protoc_insertion_point(field_get:gs.rpc.groot.AddEdgeKindRequest.src_vertex_label)
  return _internal_src_vertex_label();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddEdgeKindRequest::set_src_vertex_label(ArgT0&& arg0, ArgT... args) {
 
 _impl_.src_vertex_label_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gs.rpc.groot.AddEdgeKindRequest.src_vertex_label)
}
inline std::string* AddEdgeKindRequest::mutable_src_vertex_label() {
  std::string* _s = _internal_mutable_src_vertex_label();
  // @@protoc_insertion_point(field_mutable:gs.rpc.groot.AddEdgeKindRequest.src_vertex_label)
  return _s;
}
inline const std::string& AddEdgeKindRequest::_internal_src_vertex_label() const {
  return _impl_.src_vertex_label_.Get();
}
inline void AddEdgeKindRequest::_internal_set_src_vertex_label(const std::string& value) {
  
  _impl_.src_vertex_label_.Set(value, GetArenaForAllocation());
}
inline std::string* AddEdgeKindRequest::_internal_mutable_src_vertex_label() {
  
  return _impl_.src_vertex_label_.Mutable(GetArenaForAllocation());
}
inline std::string* AddEdgeKindRequest::release_src_vertex_label() {
  // @@protoc_insertion_point(field_release:gs.rpc.groot.AddEdgeKindRequest.src_vertex_label)
  return _impl_.src_vertex_label_.Release();
}
inline void AddEdgeKindRequest::set_allocated_src_vertex_label(std::string* src_vertex_label) {
  if (src_vertex_label != nullptr) {
    
  } else {
    
  }
  _impl_.src_vertex_label_.SetAllocated(src_vertex_label, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.src_vertex_label_.IsDefault()) {
    _impl_.src_vertex_label_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.groot.AddEdgeKindRequest.src_vertex_label)
}

// string dst_vertex_label = 3;
inline void AddEdgeKindRequest::clear_dst_vertex_label() {
  _impl_.dst_vertex_label_.ClearToEmpty();
}
inline const std::string& AddEdgeKindRequest::dst_vertex_label() const {
  // @@protoc_insertion_point(field_get:gs.rpc.groot.AddEdgeKindRequest.dst_vertex_label)
  return _internal_dst_vertex_label();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddEdgeKindRequest::set_dst_vertex_label(ArgT0&& arg0, ArgT... args) {
 
 _impl_.dst_vertex_label_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gs.rpc.groot.AddEdgeKindRequest.dst_vertex_label)
}
inline std::string* AddEdgeKindRequest::mutable_dst_vertex_label() {
  std::string* _s = _internal_mutable_dst_vertex_label();
  // @@protoc_insertion_point(field_mutable:gs.rpc.groot.AddEdgeKindRequest.dst_vertex_label)
  return _s;
}
inline const std::string& AddEdgeKindRequest::_internal_dst_vertex_label() const {
  return _impl_.dst_vertex_label_.Get();
}
inline void AddEdgeKindRequest::_internal_set_dst_vertex_label(const std::string& value) {
  
  _impl_.dst_vertex_label_.Set(value, GetArenaForAllocation());
}
inline std::string* AddEdgeKindRequest::_internal_mutable_dst_vertex_label() {
  
  return _impl_.dst_vertex_label_.Mutable(GetArenaForAllocation());
}
inline std::string* AddEdgeKindRequest::release_dst_vertex_label() {
  // @@protoc_insertion_point(field_release:gs.rpc.groot.AddEdgeKindRequest.dst_vertex_label)
  return _impl_.dst_vertex_label_.Release();
}
inline void AddEdgeKindRequest::set_allocated_dst_vertex_label(std::string* dst_vertex_label) {
  if (dst_vertex_label != nullptr) {
    
  } else {
    
  }
  _impl_.dst_vertex_label_.SetAllocated(dst_vertex_label, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.dst_vertex_label_.IsDefault()) {
    _impl_.dst_vertex_label_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.groot.AddEdgeKindRequest.dst_vertex_label)
}

// -------------------------------------------------------------------

// RemoveEdgeKindRequest

// string edge_label = 1;
inline void RemoveEdgeKindRequest::clear_edge_label() {
  _impl_.edge_label_.ClearToEmpty();
}
inline const std::string& RemoveEdgeKindRequest::edge_label() const {
  // @@protoc_insertion_point(field_get:gs.rpc.groot.RemoveEdgeKindRequest.edge_label)
  return _internal_edge_label();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RemoveEdgeKindRequest::set_edge_label(ArgT0&& arg0, ArgT... args) {
 
 _impl_.edge_label_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gs.rpc.groot.RemoveEdgeKindRequest.edge_label)
}
inline std::string* RemoveEdgeKindRequest::mutable_edge_label() {
  std::string* _s = _internal_mutable_edge_label();
  // @@protoc_insertion_point(field_mutable:gs.rpc.groot.RemoveEdgeKindRequest.edge_label)
  return _s;
}
inline const std::string& RemoveEdgeKindRequest::_internal_edge_label() const {
  return _impl_.edge_label_.Get();
}
inline void RemoveEdgeKindRequest::_internal_set_edge_label(const std::string& value) {
  
  _impl_.edge_label_.Set(value, GetArenaForAllocation());
}
inline std::string* RemoveEdgeKindRequest::_internal_mutable_edge_label() {
  
  return _impl_.edge_label_.Mutable(GetArenaForAllocation());
}
inline std::string* RemoveEdgeKindRequest::release_edge_label() {
  // @@protoc_insertion_point(field_release:gs.rpc.groot.RemoveEdgeKindRequest.edge_label)
  return _impl_.edge_label_.Release();
}
inline void RemoveEdgeKindRequest::set_allocated_edge_label(std::string* edge_label) {
  if (edge_label != nullptr) {
    
  } else {
    
  }
  _impl_.edge_label_.SetAllocated(edge_label, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.edge_label_.IsDefault()) {
    _impl_.edge_label_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.groot.RemoveEdgeKindRequest.edge_label)
}

// string src_vertex_label = 2;
inline void RemoveEdgeKindRequest::clear_src_vertex_label() {
  _impl_.src_vertex_label_.ClearToEmpty();
}
inline const std::string& RemoveEdgeKindRequest::src_vertex_label() const {
  // @@protoc_insertion_point(field_get:gs.rpc.groot.RemoveEdgeKindRequest.src_vertex_label)
  return _internal_src_vertex_label();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RemoveEdgeKindRequest::set_src_vertex_label(ArgT0&& arg0, ArgT... args) {
 
 _impl_.src_vertex_label_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gs.rpc.groot.RemoveEdgeKindRequest.src_vertex_label)
}
inline std::string* RemoveEdgeKindRequest::mutable_src_vertex_label() {
  std::string* _s = _internal_mutable_src_vertex_label();
  // @@protoc_insertion_point(field_mutable:gs.rpc.groot.RemoveEdgeKindRequest.src_vertex_label)
  return _s;
}
inline const std::string& RemoveEdgeKindRequest::_internal_src_vertex_label() const {
  return _impl_.src_vertex_label_.Get();
}
inline void RemoveEdgeKindRequest::_internal_set_src_vertex_label(const std::string& value) {
  
  _impl_.src_vertex_label_.Set(value, GetArenaForAllocation());
}
inline std::string* RemoveEdgeKindRequest::_internal_mutable_src_vertex_label() {
  
  return _impl_.src_vertex_label_.Mutable(GetArenaForAllocation());
}
inline std::string* RemoveEdgeKindRequest::release_src_vertex_label() {
  // @@protoc_insertion_point(field_release:gs.rpc.groot.RemoveEdgeKindRequest.src_vertex_label)
  return _impl_.src_vertex_label_.Release();
}
inline void RemoveEdgeKindRequest::set_allocated_src_vertex_label(std::string* src_vertex_label) {
  if (src_vertex_label != nullptr) {
    
  } else {
    
  }
  _impl_.src_vertex_label_.SetAllocated(src_vertex_label, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.src_vertex_label_.IsDefault()) {
    _impl_.src_vertex_label_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.groot.RemoveEdgeKindRequest.src_vertex_label)
}

// string dst_vertex_label = 3;
inline void RemoveEdgeKindRequest::clear_dst_vertex_label() {
  _impl_.dst_vertex_label_.ClearToEmpty();
}
inline const std::string& RemoveEdgeKindRequest::dst_vertex_label() const {
  // @@protoc_insertion_point(field_get:gs.rpc.groot.RemoveEdgeKindRequest.dst_vertex_label)
  return _internal_dst_vertex_label();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RemoveEdgeKindRequest::set_dst_vertex_label(ArgT0&& arg0, ArgT... args) {
 
 _impl_.dst_vertex_label_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gs.rpc.groot.RemoveEdgeKindRequest.dst_vertex_label)
}
inline std::string* RemoveEdgeKindRequest::mutable_dst_vertex_label() {
  std::string* _s = _internal_mutable_dst_vertex_label();
  // @@protoc_insertion_point(field_mutable:gs.rpc.groot.RemoveEdgeKindRequest.dst_vertex_label)
  return _s;
}
inline const std::string& RemoveEdgeKindRequest::_internal_dst_vertex_label() const {
  return _impl_.dst_vertex_label_.Get();
}
inline void RemoveEdgeKindRequest::_internal_set_dst_vertex_label(const std::string& value) {
  
  _impl_.dst_vertex_label_.Set(value, GetArenaForAllocation());
}
inline std::string* RemoveEdgeKindRequest::_internal_mutable_dst_vertex_label() {
  
  return _impl_.dst_vertex_label_.Mutable(GetArenaForAllocation());
}
inline std::string* RemoveEdgeKindRequest::release_dst_vertex_label() {
  // @@protoc_insertion_point(field_release:gs.rpc.groot.RemoveEdgeKindRequest.dst_vertex_label)
  return _impl_.dst_vertex_label_.Release();
}
inline void RemoveEdgeKindRequest::set_allocated_dst_vertex_label(std::string* dst_vertex_label) {
  if (dst_vertex_label != nullptr) {
    
  } else {
    
  }
  _impl_.dst_vertex_label_.SetAllocated(dst_vertex_label, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.dst_vertex_label_.IsDefault()) {
    _impl_.dst_vertex_label_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.groot.RemoveEdgeKindRequest.dst_vertex_label)
}

// -------------------------------------------------------------------

// DropVertexTypeRequest

// string label = 1;
inline void DropVertexTypeRequest::clear_label() {
  _impl_.label_.ClearToEmpty();
}
inline const std::string& DropVertexTypeRequest::label() const {
  // @@protoc_insertion_point(field_get:gs.rpc.groot.DropVertexTypeRequest.label)
  return _internal_label();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DropVertexTypeRequest::set_label(ArgT0&& arg0, ArgT... args) {
 
 _impl_.label_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gs.rpc.groot.DropVertexTypeRequest.label)
}
inline std::string* DropVertexTypeRequest::mutable_label() {
  std::string* _s = _internal_mutable_label();
  // @@protoc_insertion_point(field_mutable:gs.rpc.groot.DropVertexTypeRequest.label)
  return _s;
}
inline const std::string& DropVertexTypeRequest::_internal_label() const {
  return _impl_.label_.Get();
}
inline void DropVertexTypeRequest::_internal_set_label(const std::string& value) {
  
  _impl_.label_.Set(value, GetArenaForAllocation());
}
inline std::string* DropVertexTypeRequest::_internal_mutable_label() {
  
  return _impl_.label_.Mutable(GetArenaForAllocation());
}
inline std::string* DropVertexTypeRequest::release_label() {
  // @@protoc_insertion_point(field_release:gs.rpc.groot.DropVertexTypeRequest.label)
  return _impl_.label_.Release();
}
inline void DropVertexTypeRequest::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    
  } else {
    
  }
  _impl_.label_.SetAllocated(label, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.label_.IsDefault()) {
    _impl_.label_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.groot.DropVertexTypeRequest.label)
}

// -------------------------------------------------------------------

// DropEdgeTypeRequest

// string label = 1;
inline void DropEdgeTypeRequest::clear_label() {
  _impl_.label_.ClearToEmpty();
}
inline const std::string& DropEdgeTypeRequest::label() const {
  // @@protoc_insertion_point(field_get:gs.rpc.groot.DropEdgeTypeRequest.label)
  return _internal_label();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DropEdgeTypeRequest::set_label(ArgT0&& arg0, ArgT... args) {
 
 _impl_.label_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gs.rpc.groot.DropEdgeTypeRequest.label)
}
inline std::string* DropEdgeTypeRequest::mutable_label() {
  std::string* _s = _internal_mutable_label();
  // @@protoc_insertion_point(field_mutable:gs.rpc.groot.DropEdgeTypeRequest.label)
  return _s;
}
inline const std::string& DropEdgeTypeRequest::_internal_label() const {
  return _impl_.label_.Get();
}
inline void DropEdgeTypeRequest::_internal_set_label(const std::string& value) {
  
  _impl_.label_.Set(value, GetArenaForAllocation());
}
inline std::string* DropEdgeTypeRequest::_internal_mutable_label() {
  
  return _impl_.label_.Mutable(GetArenaForAllocation());
}
inline std::string* DropEdgeTypeRequest::release_label() {
  // @@protoc_insertion_point(field_release:gs.rpc.groot.DropEdgeTypeRequest.label)
  return _impl_.label_.Release();
}
inline void DropEdgeTypeRequest::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    
  } else {
    
  }
  _impl_.label_.SetAllocated(label, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.label_.IsDefault()) {
    _impl_.label_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.groot.DropEdgeTypeRequest.label)
}

// -------------------------------------------------------------------

// GetGraphDefRequest

// string key = 1;
inline void GetGraphDefRequest::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& GetGraphDefRequest::key() const {
  // @@protoc_insertion_point(field_get:gs.rpc.groot.GetGraphDefRequest.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetGraphDefRequest::set_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gs.rpc.groot.GetGraphDefRequest.key)
}
inline std::string* GetGraphDefRequest::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:gs.rpc.groot.GetGraphDefRequest.key)
  return _s;
}
inline const std::string& GetGraphDefRequest::_internal_key() const {
  return _impl_.key_.Get();
}
inline void GetGraphDefRequest::_internal_set_key(const std::string& value) {
  
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* GetGraphDefRequest::_internal_mutable_key() {
  
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* GetGraphDefRequest::release_key() {
  // @@protoc_insertion_point(field_release:gs.rpc.groot.GetGraphDefRequest.key)
  return _impl_.key_.Release();
}
inline void GetGraphDefRequest::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.groot.GetGraphDefRequest.key)
}

// -------------------------------------------------------------------

// GetGraphDefResponse

// .gs.rpc.graph.GraphDefPb graph_def = 1;
inline bool GetGraphDefResponse::_internal_has_graph_def() const {
  return this != internal_default_instance() && _impl_.graph_def_ != nullptr;
}
inline bool GetGraphDefResponse::has_graph_def() const {
  return _internal_has_graph_def();
}
inline const ::gs::rpc::graph::GraphDefPb& GetGraphDefResponse::_internal_graph_def() const {
  const ::gs::rpc::graph::GraphDefPb* p = _impl_.graph_def_;
  return p != nullptr ? *p : reinterpret_cast<const ::gs::rpc::graph::GraphDefPb&>(
      ::gs::rpc::graph::_GraphDefPb_default_instance_);
}
inline const ::gs::rpc::graph::GraphDefPb& GetGraphDefResponse::graph_def() const {
  // @@protoc_insertion_point(field_get:gs.rpc.groot.GetGraphDefResponse.graph_def)
  return _internal_graph_def();
}
inline void GetGraphDefResponse::unsafe_arena_set_allocated_graph_def(
    ::gs::rpc::graph::GraphDefPb* graph_def) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.graph_def_);
  }
  _impl_.graph_def_ = graph_def;
  if (graph_def) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gs.rpc.groot.GetGraphDefResponse.graph_def)
}
inline ::gs::rpc::graph::GraphDefPb* GetGraphDefResponse::release_graph_def() {
  
  ::gs::rpc::graph::GraphDefPb* temp = _impl_.graph_def_;
  _impl_.graph_def_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::gs::rpc::graph::GraphDefPb* GetGraphDefResponse::unsafe_arena_release_graph_def() {
  // @@protoc_insertion_point(field_release:gs.rpc.groot.GetGraphDefResponse.graph_def)
  
  ::gs::rpc::graph::GraphDefPb* temp = _impl_.graph_def_;
  _impl_.graph_def_ = nullptr;
  return temp;
}
inline ::gs::rpc::graph::GraphDefPb* GetGraphDefResponse::_internal_mutable_graph_def() {
  
  if (_impl_.graph_def_ == nullptr) {
    auto* p = CreateMaybeMessage<::gs::rpc::graph::GraphDefPb>(GetArenaForAllocation());
    _impl_.graph_def_ = p;
  }
  return _impl_.graph_def_;
}
inline ::gs::rpc::graph::GraphDefPb* GetGraphDefResponse::mutable_graph_def() {
  ::gs::rpc::graph::GraphDefPb* _msg = _internal_mutable_graph_def();
  // @@protoc_insertion_point(field_mutable:gs.rpc.groot.GetGraphDefResponse.graph_def)
  return _msg;
}
inline void GetGraphDefResponse::set_allocated_graph_def(::gs::rpc::graph::GraphDefPb* graph_def) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.graph_def_);
  }
  if (graph_def) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(graph_def));
    if (message_arena != submessage_arena) {
      graph_def = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, graph_def, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.graph_def_ = graph_def;
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.groot.GetGraphDefResponse.graph_def)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace groot
}  // namespace rpc
}  // namespace gs

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ddl_5fservice_2eproto
