// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: op_def.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_op_5fdef_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_op_5fdef_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "attr_value.pb.h"
#include "error/coordinator.pb.h"
#include "graph_def.pb.h"
#include "types.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_op_5fdef_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_op_5fdef_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_op_5fdef_2eproto;
namespace gs {
namespace rpc {
class DagDef;
struct DagDefDefaultTypeInternal;
extern DagDefDefaultTypeInternal _DagDef_default_instance_;
class OpDef;
struct OpDefDefaultTypeInternal;
extern OpDefDefaultTypeInternal _OpDef_default_instance_;
class OpDef_AttrEntry_DoNotUse;
struct OpDef_AttrEntry_DoNotUseDefaultTypeInternal;
extern OpDef_AttrEntry_DoNotUseDefaultTypeInternal _OpDef_AttrEntry_DoNotUse_default_instance_;
class OpResult;
struct OpResultDefaultTypeInternal;
extern OpResultDefaultTypeInternal _OpResult_default_instance_;
class OpResult_Meta;
struct OpResult_MetaDefaultTypeInternal;
extern OpResult_MetaDefaultTypeInternal _OpResult_Meta_default_instance_;
}  // namespace rpc
}  // namespace gs
PROTOBUF_NAMESPACE_OPEN
template<> ::gs::rpc::DagDef* Arena::CreateMaybeMessage<::gs::rpc::DagDef>(Arena*);
template<> ::gs::rpc::OpDef* Arena::CreateMaybeMessage<::gs::rpc::OpDef>(Arena*);
template<> ::gs::rpc::OpDef_AttrEntry_DoNotUse* Arena::CreateMaybeMessage<::gs::rpc::OpDef_AttrEntry_DoNotUse>(Arena*);
template<> ::gs::rpc::OpResult* Arena::CreateMaybeMessage<::gs::rpc::OpResult>(Arena*);
template<> ::gs::rpc::OpResult_Meta* Arena::CreateMaybeMessage<::gs::rpc::OpResult_Meta>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace gs {
namespace rpc {

// ===================================================================

class OpDef_AttrEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<OpDef_AttrEntry_DoNotUse, 
    int32_t, ::gs::rpc::AttrValue,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<OpDef_AttrEntry_DoNotUse, 
    int32_t, ::gs::rpc::AttrValue,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  OpDef_AttrEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR OpDef_AttrEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit OpDef_AttrEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const OpDef_AttrEntry_DoNotUse& other);
  static const OpDef_AttrEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const OpDef_AttrEntry_DoNotUse*>(&_OpDef_AttrEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_op_5fdef_2eproto;
};

// -------------------------------------------------------------------

class OpDef final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gs.rpc.OpDef) */ {
 public:
  inline OpDef() : OpDef(nullptr) {}
  ~OpDef() override;
  explicit PROTOBUF_CONSTEXPR OpDef(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OpDef(const OpDef& from);
  OpDef(OpDef&& from) noexcept
    : OpDef() {
    *this = ::std::move(from);
  }

  inline OpDef& operator=(const OpDef& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpDef& operator=(OpDef&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OpDef& default_instance() {
    return *internal_default_instance();
  }
  static inline const OpDef* internal_default_instance() {
    return reinterpret_cast<const OpDef*>(
               &_OpDef_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(OpDef& a, OpDef& b) {
    a.Swap(&b);
  }
  inline void Swap(OpDef* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OpDef* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OpDef* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OpDef>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OpDef& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OpDef& from) {
    OpDef::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpDef* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gs.rpc.OpDef";
  }
  protected:
  explicit OpDef(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kParentsFieldNumber = 4,
    kAttrFieldNumber = 6,
    kKeyFieldNumber = 2,
    kLargeAttrFieldNumber = 7,
    kQueryArgsFieldNumber = 8,
    kOpFieldNumber = 3,
    kOutputTypeFieldNumber = 5,
  };
  // repeated string parents = 4;
  int parents_size() const;
  private:
  int _internal_parents_size() const;
  public:
  void clear_parents();
  const std::string& parents(int index) const;
  std::string* mutable_parents(int index);
  void set_parents(int index, const std::string& value);
  void set_parents(int index, std::string&& value);
  void set_parents(int index, const char* value);
  void set_parents(int index, const char* value, size_t size);
  std::string* add_parents();
  void add_parents(const std::string& value);
  void add_parents(std::string&& value);
  void add_parents(const char* value);
  void add_parents(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& parents() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_parents();
  private:
  const std::string& _internal_parents(int index) const;
  std::string* _internal_add_parents();
  public:

  // map<int32, .gs.rpc.AttrValue> attr = 6;
  int attr_size() const;
  private:
  int _internal_attr_size() const;
  public:
  void clear_attr();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::gs::rpc::AttrValue >&
      _internal_attr() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::gs::rpc::AttrValue >*
      _internal_mutable_attr();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::gs::rpc::AttrValue >&
      attr() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::gs::rpc::AttrValue >*
      mutable_attr();

  // string key = 2;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // .gs.rpc.LargeAttrValue large_attr = 7;
  bool has_large_attr() const;
  private:
  bool _internal_has_large_attr() const;
  public:
  void clear_large_attr();
  const ::gs::rpc::LargeAttrValue& large_attr() const;
  PROTOBUF_NODISCARD ::gs::rpc::LargeAttrValue* release_large_attr();
  ::gs::rpc::LargeAttrValue* mutable_large_attr();
  void set_allocated_large_attr(::gs::rpc::LargeAttrValue* large_attr);
  private:
  const ::gs::rpc::LargeAttrValue& _internal_large_attr() const;
  ::gs::rpc::LargeAttrValue* _internal_mutable_large_attr();
  public:
  void unsafe_arena_set_allocated_large_attr(
      ::gs::rpc::LargeAttrValue* large_attr);
  ::gs::rpc::LargeAttrValue* unsafe_arena_release_large_attr();

  // .gs.rpc.QueryArgs query_args = 8;
  bool has_query_args() const;
  private:
  bool _internal_has_query_args() const;
  public:
  void clear_query_args();
  const ::gs::rpc::QueryArgs& query_args() const;
  PROTOBUF_NODISCARD ::gs::rpc::QueryArgs* release_query_args();
  ::gs::rpc::QueryArgs* mutable_query_args();
  void set_allocated_query_args(::gs::rpc::QueryArgs* query_args);
  private:
  const ::gs::rpc::QueryArgs& _internal_query_args() const;
  ::gs::rpc::QueryArgs* _internal_mutable_query_args();
  public:
  void unsafe_arena_set_allocated_query_args(
      ::gs::rpc::QueryArgs* query_args);
  ::gs::rpc::QueryArgs* unsafe_arena_release_query_args();

  // .gs.rpc.OperationType op = 3;
  void clear_op();
  ::gs::rpc::OperationType op() const;
  void set_op(::gs::rpc::OperationType value);
  private:
  ::gs::rpc::OperationType _internal_op() const;
  void _internal_set_op(::gs::rpc::OperationType value);
  public:

  // .gs.rpc.OutputType output_type = 5;
  void clear_output_type();
  ::gs::rpc::OutputType output_type() const;
  void set_output_type(::gs::rpc::OutputType value);
  private:
  ::gs::rpc::OutputType _internal_output_type() const;
  void _internal_set_output_type(::gs::rpc::OutputType value);
  public:

  // @@protoc_insertion_point(class_scope:gs.rpc.OpDef)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> parents_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        OpDef_AttrEntry_DoNotUse,
        int32_t, ::gs::rpc::AttrValue,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> attr_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    ::gs::rpc::LargeAttrValue* large_attr_;
    ::gs::rpc::QueryArgs* query_args_;
    int op_;
    int output_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_op_5fdef_2eproto;
};
// -------------------------------------------------------------------

class OpResult_Meta final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gs.rpc.OpResult.Meta) */ {
 public:
  inline OpResult_Meta() : OpResult_Meta(nullptr) {}
  ~OpResult_Meta() override;
  explicit PROTOBUF_CONSTEXPR OpResult_Meta(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OpResult_Meta(const OpResult_Meta& from);
  OpResult_Meta(OpResult_Meta&& from) noexcept
    : OpResult_Meta() {
    *this = ::std::move(from);
  }

  inline OpResult_Meta& operator=(const OpResult_Meta& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpResult_Meta& operator=(OpResult_Meta&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OpResult_Meta& default_instance() {
    return *internal_default_instance();
  }
  static inline const OpResult_Meta* internal_default_instance() {
    return reinterpret_cast<const OpResult_Meta*>(
               &_OpResult_Meta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(OpResult_Meta& a, OpResult_Meta& b) {
    a.Swap(&b);
  }
  inline void Swap(OpResult_Meta* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OpResult_Meta* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OpResult_Meta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OpResult_Meta>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OpResult_Meta& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OpResult_Meta& from) {
    OpResult_Meta::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpResult_Meta* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gs.rpc.OpResult.Meta";
  }
  protected:
  explicit OpResult_Meta(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetricsFieldNumber = 1,
    kHasLargeResultFieldNumber = 2,
  };
  // string metrics = 1;
  void clear_metrics();
  const std::string& metrics() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_metrics(ArgT0&& arg0, ArgT... args);
  std::string* mutable_metrics();
  PROTOBUF_NODISCARD std::string* release_metrics();
  void set_allocated_metrics(std::string* metrics);
  private:
  const std::string& _internal_metrics() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_metrics(const std::string& value);
  std::string* _internal_mutable_metrics();
  public:

  // bool has_large_result = 2;
  void clear_has_large_result();
  bool has_large_result() const;
  void set_has_large_result(bool value);
  private:
  bool _internal_has_large_result() const;
  void _internal_set_has_large_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:gs.rpc.OpResult.Meta)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metrics_;
    bool has_large_result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_op_5fdef_2eproto;
};
// -------------------------------------------------------------------

class OpResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gs.rpc.OpResult) */ {
 public:
  inline OpResult() : OpResult(nullptr) {}
  ~OpResult() override;
  explicit PROTOBUF_CONSTEXPR OpResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OpResult(const OpResult& from);
  OpResult(OpResult&& from) noexcept
    : OpResult() {
    *this = ::std::move(from);
  }

  inline OpResult& operator=(const OpResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpResult& operator=(OpResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OpResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const OpResult* internal_default_instance() {
    return reinterpret_cast<const OpResult*>(
               &_OpResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(OpResult& a, OpResult& b) {
    a.Swap(&b);
  }
  inline void Swap(OpResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OpResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OpResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OpResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OpResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OpResult& from) {
    OpResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gs.rpc.OpResult";
  }
  protected:
  explicit OpResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef OpResult_Meta Meta;

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 2,
    kResultFieldNumber = 4,
    kErrorMsgFieldNumber = 5,
    kMetaFieldNumber = 3,
    kGraphDefFieldNumber = 7,
    kCodeFieldNumber = 1,
  };
  // string key = 2;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // bytes result = 4;
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // string error_msg = 5;
  void clear_error_msg();
  const std::string& error_msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_msg();
  PROTOBUF_NODISCARD std::string* release_error_msg();
  void set_allocated_error_msg(std::string* error_msg);
  private:
  const std::string& _internal_error_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_msg(const std::string& value);
  std::string* _internal_mutable_error_msg();
  public:

  // .gs.rpc.OpResult.Meta meta = 3;
  bool has_meta() const;
  private:
  bool _internal_has_meta() const;
  public:
  void clear_meta();
  const ::gs::rpc::OpResult_Meta& meta() const;
  PROTOBUF_NODISCARD ::gs::rpc::OpResult_Meta* release_meta();
  ::gs::rpc::OpResult_Meta* mutable_meta();
  void set_allocated_meta(::gs::rpc::OpResult_Meta* meta);
  private:
  const ::gs::rpc::OpResult_Meta& _internal_meta() const;
  ::gs::rpc::OpResult_Meta* _internal_mutable_meta();
  public:
  void unsafe_arena_set_allocated_meta(
      ::gs::rpc::OpResult_Meta* meta);
  ::gs::rpc::OpResult_Meta* unsafe_arena_release_meta();

  // .gs.rpc.graph.GraphDefPb graph_def = 7;
  bool has_graph_def() const;
  private:
  bool _internal_has_graph_def() const;
  public:
  void clear_graph_def();
  const ::gs::rpc::graph::GraphDefPb& graph_def() const;
  PROTOBUF_NODISCARD ::gs::rpc::graph::GraphDefPb* release_graph_def();
  ::gs::rpc::graph::GraphDefPb* mutable_graph_def();
  void set_allocated_graph_def(::gs::rpc::graph::GraphDefPb* graph_def);
  private:
  const ::gs::rpc::graph::GraphDefPb& _internal_graph_def() const;
  ::gs::rpc::graph::GraphDefPb* _internal_mutable_graph_def();
  public:
  void unsafe_arena_set_allocated_graph_def(
      ::gs::rpc::graph::GraphDefPb* graph_def);
  ::gs::rpc::graph::GraphDefPb* unsafe_arena_release_graph_def();

  // .gs.rpc.Code code = 1;
  void clear_code();
  ::gs::rpc::Code code() const;
  void set_code(::gs::rpc::Code value);
  private:
  ::gs::rpc::Code _internal_code() const;
  void _internal_set_code(::gs::rpc::Code value);
  public:

  // @@protoc_insertion_point(class_scope:gs.rpc.OpResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_msg_;
    ::gs::rpc::OpResult_Meta* meta_;
    ::gs::rpc::graph::GraphDefPb* graph_def_;
    int code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_op_5fdef_2eproto;
};
// -------------------------------------------------------------------

class DagDef final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gs.rpc.DagDef) */ {
 public:
  inline DagDef() : DagDef(nullptr) {}
  ~DagDef() override;
  explicit PROTOBUF_CONSTEXPR DagDef(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DagDef(const DagDef& from);
  DagDef(DagDef&& from) noexcept
    : DagDef() {
    *this = ::std::move(from);
  }

  inline DagDef& operator=(const DagDef& from) {
    CopyFrom(from);
    return *this;
  }
  inline DagDef& operator=(DagDef&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DagDef& default_instance() {
    return *internal_default_instance();
  }
  static inline const DagDef* internal_default_instance() {
    return reinterpret_cast<const DagDef*>(
               &_DagDef_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DagDef& a, DagDef& b) {
    a.Swap(&b);
  }
  inline void Swap(DagDef* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DagDef* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DagDef* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DagDef>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DagDef& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DagDef& from) {
    DagDef::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DagDef* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gs.rpc.DagDef";
  }
  protected:
  explicit DagDef(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpFieldNumber = 1,
  };
  // repeated .gs.rpc.OpDef op = 1;
  int op_size() const;
  private:
  int _internal_op_size() const;
  public:
  void clear_op();
  ::gs::rpc::OpDef* mutable_op(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gs::rpc::OpDef >*
      mutable_op();
  private:
  const ::gs::rpc::OpDef& _internal_op(int index) const;
  ::gs::rpc::OpDef* _internal_add_op();
  public:
  const ::gs::rpc::OpDef& op(int index) const;
  ::gs::rpc::OpDef* add_op();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gs::rpc::OpDef >&
      op() const;

  // @@protoc_insertion_point(class_scope:gs.rpc.DagDef)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gs::rpc::OpDef > op_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_op_5fdef_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// OpDef

// string key = 2;
inline void OpDef::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& OpDef::key() const {
  // @@protoc_insertion_point(field_get:gs.rpc.OpDef.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OpDef::set_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gs.rpc.OpDef.key)
}
inline std::string* OpDef::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:gs.rpc.OpDef.key)
  return _s;
}
inline const std::string& OpDef::_internal_key() const {
  return _impl_.key_.Get();
}
inline void OpDef::_internal_set_key(const std::string& value) {
  
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* OpDef::_internal_mutable_key() {
  
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* OpDef::release_key() {
  // @@protoc_insertion_point(field_release:gs.rpc.OpDef.key)
  return _impl_.key_.Release();
}
inline void OpDef::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.OpDef.key)
}

// .gs.rpc.OperationType op = 3;
inline void OpDef::clear_op() {
  _impl_.op_ = 0;
}
inline ::gs::rpc::OperationType OpDef::_internal_op() const {
  return static_cast< ::gs::rpc::OperationType >(_impl_.op_);
}
inline ::gs::rpc::OperationType OpDef::op() const {
  // @@protoc_insertion_point(field_get:gs.rpc.OpDef.op)
  return _internal_op();
}
inline void OpDef::_internal_set_op(::gs::rpc::OperationType value) {
  
  _impl_.op_ = value;
}
inline void OpDef::set_op(::gs::rpc::OperationType value) {
  _internal_set_op(value);
  // @@protoc_insertion_point(field_set:gs.rpc.OpDef.op)
}

// repeated string parents = 4;
inline int OpDef::_internal_parents_size() const {
  return _impl_.parents_.size();
}
inline int OpDef::parents_size() const {
  return _internal_parents_size();
}
inline void OpDef::clear_parents() {
  _impl_.parents_.Clear();
}
inline std::string* OpDef::add_parents() {
  std::string* _s = _internal_add_parents();
  // @@protoc_insertion_point(field_add_mutable:gs.rpc.OpDef.parents)
  return _s;
}
inline const std::string& OpDef::_internal_parents(int index) const {
  return _impl_.parents_.Get(index);
}
inline const std::string& OpDef::parents(int index) const {
  // @@protoc_insertion_point(field_get:gs.rpc.OpDef.parents)
  return _internal_parents(index);
}
inline std::string* OpDef::mutable_parents(int index) {
  // @@protoc_insertion_point(field_mutable:gs.rpc.OpDef.parents)
  return _impl_.parents_.Mutable(index);
}
inline void OpDef::set_parents(int index, const std::string& value) {
  _impl_.parents_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:gs.rpc.OpDef.parents)
}
inline void OpDef::set_parents(int index, std::string&& value) {
  _impl_.parents_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:gs.rpc.OpDef.parents)
}
inline void OpDef::set_parents(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.parents_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gs.rpc.OpDef.parents)
}
inline void OpDef::set_parents(int index, const char* value, size_t size) {
  _impl_.parents_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gs.rpc.OpDef.parents)
}
inline std::string* OpDef::_internal_add_parents() {
  return _impl_.parents_.Add();
}
inline void OpDef::add_parents(const std::string& value) {
  _impl_.parents_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gs.rpc.OpDef.parents)
}
inline void OpDef::add_parents(std::string&& value) {
  _impl_.parents_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:gs.rpc.OpDef.parents)
}
inline void OpDef::add_parents(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.parents_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gs.rpc.OpDef.parents)
}
inline void OpDef::add_parents(const char* value, size_t size) {
  _impl_.parents_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gs.rpc.OpDef.parents)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
OpDef::parents() const {
  // @@protoc_insertion_point(field_list:gs.rpc.OpDef.parents)
  return _impl_.parents_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
OpDef::mutable_parents() {
  // @@protoc_insertion_point(field_mutable_list:gs.rpc.OpDef.parents)
  return &_impl_.parents_;
}

// .gs.rpc.OutputType output_type = 5;
inline void OpDef::clear_output_type() {
  _impl_.output_type_ = 0;
}
inline ::gs::rpc::OutputType OpDef::_internal_output_type() const {
  return static_cast< ::gs::rpc::OutputType >(_impl_.output_type_);
}
inline ::gs::rpc::OutputType OpDef::output_type() const {
  // @@protoc_insertion_point(field_get:gs.rpc.OpDef.output_type)
  return _internal_output_type();
}
inline void OpDef::_internal_set_output_type(::gs::rpc::OutputType value) {
  
  _impl_.output_type_ = value;
}
inline void OpDef::set_output_type(::gs::rpc::OutputType value) {
  _internal_set_output_type(value);
  // @@protoc_insertion_point(field_set:gs.rpc.OpDef.output_type)
}

// map<int32, .gs.rpc.AttrValue> attr = 6;
inline int OpDef::_internal_attr_size() const {
  return _impl_.attr_.size();
}
inline int OpDef::attr_size() const {
  return _internal_attr_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::gs::rpc::AttrValue >&
OpDef::_internal_attr() const {
  return _impl_.attr_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::gs::rpc::AttrValue >&
OpDef::attr() const {
  // @@protoc_insertion_point(field_map:gs.rpc.OpDef.attr)
  return _internal_attr();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::gs::rpc::AttrValue >*
OpDef::_internal_mutable_attr() {
  return _impl_.attr_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::gs::rpc::AttrValue >*
OpDef::mutable_attr() {
  // @@protoc_insertion_point(field_mutable_map:gs.rpc.OpDef.attr)
  return _internal_mutable_attr();
}

// .gs.rpc.LargeAttrValue large_attr = 7;
inline bool OpDef::_internal_has_large_attr() const {
  return this != internal_default_instance() && _impl_.large_attr_ != nullptr;
}
inline bool OpDef::has_large_attr() const {
  return _internal_has_large_attr();
}
inline const ::gs::rpc::LargeAttrValue& OpDef::_internal_large_attr() const {
  const ::gs::rpc::LargeAttrValue* p = _impl_.large_attr_;
  return p != nullptr ? *p : reinterpret_cast<const ::gs::rpc::LargeAttrValue&>(
      ::gs::rpc::_LargeAttrValue_default_instance_);
}
inline const ::gs::rpc::LargeAttrValue& OpDef::large_attr() const {
  // @@protoc_insertion_point(field_get:gs.rpc.OpDef.large_attr)
  return _internal_large_attr();
}
inline void OpDef::unsafe_arena_set_allocated_large_attr(
    ::gs::rpc::LargeAttrValue* large_attr) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.large_attr_);
  }
  _impl_.large_attr_ = large_attr;
  if (large_attr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gs.rpc.OpDef.large_attr)
}
inline ::gs::rpc::LargeAttrValue* OpDef::release_large_attr() {
  
  ::gs::rpc::LargeAttrValue* temp = _impl_.large_attr_;
  _impl_.large_attr_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::gs::rpc::LargeAttrValue* OpDef::unsafe_arena_release_large_attr() {
  // @@protoc_insertion_point(field_release:gs.rpc.OpDef.large_attr)
  
  ::gs::rpc::LargeAttrValue* temp = _impl_.large_attr_;
  _impl_.large_attr_ = nullptr;
  return temp;
}
inline ::gs::rpc::LargeAttrValue* OpDef::_internal_mutable_large_attr() {
  
  if (_impl_.large_attr_ == nullptr) {
    auto* p = CreateMaybeMessage<::gs::rpc::LargeAttrValue>(GetArenaForAllocation());
    _impl_.large_attr_ = p;
  }
  return _impl_.large_attr_;
}
inline ::gs::rpc::LargeAttrValue* OpDef::mutable_large_attr() {
  ::gs::rpc::LargeAttrValue* _msg = _internal_mutable_large_attr();
  // @@protoc_insertion_point(field_mutable:gs.rpc.OpDef.large_attr)
  return _msg;
}
inline void OpDef::set_allocated_large_attr(::gs::rpc::LargeAttrValue* large_attr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.large_attr_);
  }
  if (large_attr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(large_attr));
    if (message_arena != submessage_arena) {
      large_attr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, large_attr, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.large_attr_ = large_attr;
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.OpDef.large_attr)
}

// .gs.rpc.QueryArgs query_args = 8;
inline bool OpDef::_internal_has_query_args() const {
  return this != internal_default_instance() && _impl_.query_args_ != nullptr;
}
inline bool OpDef::has_query_args() const {
  return _internal_has_query_args();
}
inline const ::gs::rpc::QueryArgs& OpDef::_internal_query_args() const {
  const ::gs::rpc::QueryArgs* p = _impl_.query_args_;
  return p != nullptr ? *p : reinterpret_cast<const ::gs::rpc::QueryArgs&>(
      ::gs::rpc::_QueryArgs_default_instance_);
}
inline const ::gs::rpc::QueryArgs& OpDef::query_args() const {
  // @@protoc_insertion_point(field_get:gs.rpc.OpDef.query_args)
  return _internal_query_args();
}
inline void OpDef::unsafe_arena_set_allocated_query_args(
    ::gs::rpc::QueryArgs* query_args) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.query_args_);
  }
  _impl_.query_args_ = query_args;
  if (query_args) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gs.rpc.OpDef.query_args)
}
inline ::gs::rpc::QueryArgs* OpDef::release_query_args() {
  
  ::gs::rpc::QueryArgs* temp = _impl_.query_args_;
  _impl_.query_args_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::gs::rpc::QueryArgs* OpDef::unsafe_arena_release_query_args() {
  // @@protoc_insertion_point(field_release:gs.rpc.OpDef.query_args)
  
  ::gs::rpc::QueryArgs* temp = _impl_.query_args_;
  _impl_.query_args_ = nullptr;
  return temp;
}
inline ::gs::rpc::QueryArgs* OpDef::_internal_mutable_query_args() {
  
  if (_impl_.query_args_ == nullptr) {
    auto* p = CreateMaybeMessage<::gs::rpc::QueryArgs>(GetArenaForAllocation());
    _impl_.query_args_ = p;
  }
  return _impl_.query_args_;
}
inline ::gs::rpc::QueryArgs* OpDef::mutable_query_args() {
  ::gs::rpc::QueryArgs* _msg = _internal_mutable_query_args();
  // @@protoc_insertion_point(field_mutable:gs.rpc.OpDef.query_args)
  return _msg;
}
inline void OpDef::set_allocated_query_args(::gs::rpc::QueryArgs* query_args) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.query_args_);
  }
  if (query_args) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(query_args));
    if (message_arena != submessage_arena) {
      query_args = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, query_args, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.query_args_ = query_args;
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.OpDef.query_args)
}

// -------------------------------------------------------------------

// OpResult_Meta

// string metrics = 1;
inline void OpResult_Meta::clear_metrics() {
  _impl_.metrics_.ClearToEmpty();
}
inline const std::string& OpResult_Meta::metrics() const {
  // @@protoc_insertion_point(field_get:gs.rpc.OpResult.Meta.metrics)
  return _internal_metrics();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OpResult_Meta::set_metrics(ArgT0&& arg0, ArgT... args) {
 
 _impl_.metrics_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gs.rpc.OpResult.Meta.metrics)
}
inline std::string* OpResult_Meta::mutable_metrics() {
  std::string* _s = _internal_mutable_metrics();
  // @@protoc_insertion_point(field_mutable:gs.rpc.OpResult.Meta.metrics)
  return _s;
}
inline const std::string& OpResult_Meta::_internal_metrics() const {
  return _impl_.metrics_.Get();
}
inline void OpResult_Meta::_internal_set_metrics(const std::string& value) {
  
  _impl_.metrics_.Set(value, GetArenaForAllocation());
}
inline std::string* OpResult_Meta::_internal_mutable_metrics() {
  
  return _impl_.metrics_.Mutable(GetArenaForAllocation());
}
inline std::string* OpResult_Meta::release_metrics() {
  // @@protoc_insertion_point(field_release:gs.rpc.OpResult.Meta.metrics)
  return _impl_.metrics_.Release();
}
inline void OpResult_Meta::set_allocated_metrics(std::string* metrics) {
  if (metrics != nullptr) {
    
  } else {
    
  }
  _impl_.metrics_.SetAllocated(metrics, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.metrics_.IsDefault()) {
    _impl_.metrics_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.OpResult.Meta.metrics)
}

// bool has_large_result = 2;
inline void OpResult_Meta::clear_has_large_result() {
  _impl_.has_large_result_ = false;
}
inline bool OpResult_Meta::_internal_has_large_result() const {
  return _impl_.has_large_result_;
}
inline bool OpResult_Meta::has_large_result() const {
  // @@protoc_insertion_point(field_get:gs.rpc.OpResult.Meta.has_large_result)
  return _internal_has_large_result();
}
inline void OpResult_Meta::_internal_set_has_large_result(bool value) {
  
  _impl_.has_large_result_ = value;
}
inline void OpResult_Meta::set_has_large_result(bool value) {
  _internal_set_has_large_result(value);
  // @@protoc_insertion_point(field_set:gs.rpc.OpResult.Meta.has_large_result)
}

// -------------------------------------------------------------------

// OpResult

// .gs.rpc.Code code = 1;
inline void OpResult::clear_code() {
  _impl_.code_ = 0;
}
inline ::gs::rpc::Code OpResult::_internal_code() const {
  return static_cast< ::gs::rpc::Code >(_impl_.code_);
}
inline ::gs::rpc::Code OpResult::code() const {
  // @@protoc_insertion_point(field_get:gs.rpc.OpResult.code)
  return _internal_code();
}
inline void OpResult::_internal_set_code(::gs::rpc::Code value) {
  
  _impl_.code_ = value;
}
inline void OpResult::set_code(::gs::rpc::Code value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:gs.rpc.OpResult.code)
}

// string key = 2;
inline void OpResult::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& OpResult::key() const {
  // @@protoc_insertion_point(field_get:gs.rpc.OpResult.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OpResult::set_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gs.rpc.OpResult.key)
}
inline std::string* OpResult::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:gs.rpc.OpResult.key)
  return _s;
}
inline const std::string& OpResult::_internal_key() const {
  return _impl_.key_.Get();
}
inline void OpResult::_internal_set_key(const std::string& value) {
  
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* OpResult::_internal_mutable_key() {
  
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* OpResult::release_key() {
  // @@protoc_insertion_point(field_release:gs.rpc.OpResult.key)
  return _impl_.key_.Release();
}
inline void OpResult::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.OpResult.key)
}

// .gs.rpc.OpResult.Meta meta = 3;
inline bool OpResult::_internal_has_meta() const {
  return this != internal_default_instance() && _impl_.meta_ != nullptr;
}
inline bool OpResult::has_meta() const {
  return _internal_has_meta();
}
inline void OpResult::clear_meta() {
  if (GetArenaForAllocation() == nullptr && _impl_.meta_ != nullptr) {
    delete _impl_.meta_;
  }
  _impl_.meta_ = nullptr;
}
inline const ::gs::rpc::OpResult_Meta& OpResult::_internal_meta() const {
  const ::gs::rpc::OpResult_Meta* p = _impl_.meta_;
  return p != nullptr ? *p : reinterpret_cast<const ::gs::rpc::OpResult_Meta&>(
      ::gs::rpc::_OpResult_Meta_default_instance_);
}
inline const ::gs::rpc::OpResult_Meta& OpResult::meta() const {
  // @@protoc_insertion_point(field_get:gs.rpc.OpResult.meta)
  return _internal_meta();
}
inline void OpResult::unsafe_arena_set_allocated_meta(
    ::gs::rpc::OpResult_Meta* meta) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.meta_);
  }
  _impl_.meta_ = meta;
  if (meta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gs.rpc.OpResult.meta)
}
inline ::gs::rpc::OpResult_Meta* OpResult::release_meta() {
  
  ::gs::rpc::OpResult_Meta* temp = _impl_.meta_;
  _impl_.meta_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::gs::rpc::OpResult_Meta* OpResult::unsafe_arena_release_meta() {
  // @@protoc_insertion_point(field_release:gs.rpc.OpResult.meta)
  
  ::gs::rpc::OpResult_Meta* temp = _impl_.meta_;
  _impl_.meta_ = nullptr;
  return temp;
}
inline ::gs::rpc::OpResult_Meta* OpResult::_internal_mutable_meta() {
  
  if (_impl_.meta_ == nullptr) {
    auto* p = CreateMaybeMessage<::gs::rpc::OpResult_Meta>(GetArenaForAllocation());
    _impl_.meta_ = p;
  }
  return _impl_.meta_;
}
inline ::gs::rpc::OpResult_Meta* OpResult::mutable_meta() {
  ::gs::rpc::OpResult_Meta* _msg = _internal_mutable_meta();
  // @@protoc_insertion_point(field_mutable:gs.rpc.OpResult.meta)
  return _msg;
}
inline void OpResult::set_allocated_meta(::gs::rpc::OpResult_Meta* meta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.meta_;
  }
  if (meta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(meta);
    if (message_arena != submessage_arena) {
      meta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.meta_ = meta;
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.OpResult.meta)
}

// bytes result = 4;
inline void OpResult::clear_result() {
  _impl_.result_.ClearToEmpty();
}
inline const std::string& OpResult::result() const {
  // @@protoc_insertion_point(field_get:gs.rpc.OpResult.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OpResult::set_result(ArgT0&& arg0, ArgT... args) {
 
 _impl_.result_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gs.rpc.OpResult.result)
}
inline std::string* OpResult::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:gs.rpc.OpResult.result)
  return _s;
}
inline const std::string& OpResult::_internal_result() const {
  return _impl_.result_.Get();
}
inline void OpResult::_internal_set_result(const std::string& value) {
  
  _impl_.result_.Set(value, GetArenaForAllocation());
}
inline std::string* OpResult::_internal_mutable_result() {
  
  return _impl_.result_.Mutable(GetArenaForAllocation());
}
inline std::string* OpResult::release_result() {
  // @@protoc_insertion_point(field_release:gs.rpc.OpResult.result)
  return _impl_.result_.Release();
}
inline void OpResult::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  _impl_.result_.SetAllocated(result, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.result_.IsDefault()) {
    _impl_.result_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.OpResult.result)
}

// string error_msg = 5;
inline void OpResult::clear_error_msg() {
  _impl_.error_msg_.ClearToEmpty();
}
inline const std::string& OpResult::error_msg() const {
  // @@protoc_insertion_point(field_get:gs.rpc.OpResult.error_msg)
  return _internal_error_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OpResult::set_error_msg(ArgT0&& arg0, ArgT... args) {
 
 _impl_.error_msg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gs.rpc.OpResult.error_msg)
}
inline std::string* OpResult::mutable_error_msg() {
  std::string* _s = _internal_mutable_error_msg();
  // @@protoc_insertion_point(field_mutable:gs.rpc.OpResult.error_msg)
  return _s;
}
inline const std::string& OpResult::_internal_error_msg() const {
  return _impl_.error_msg_.Get();
}
inline void OpResult::_internal_set_error_msg(const std::string& value) {
  
  _impl_.error_msg_.Set(value, GetArenaForAllocation());
}
inline std::string* OpResult::_internal_mutable_error_msg() {
  
  return _impl_.error_msg_.Mutable(GetArenaForAllocation());
}
inline std::string* OpResult::release_error_msg() {
  // @@protoc_insertion_point(field_release:gs.rpc.OpResult.error_msg)
  return _impl_.error_msg_.Release();
}
inline void OpResult::set_allocated_error_msg(std::string* error_msg) {
  if (error_msg != nullptr) {
    
  } else {
    
  }
  _impl_.error_msg_.SetAllocated(error_msg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_msg_.IsDefault()) {
    _impl_.error_msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.OpResult.error_msg)
}

// .gs.rpc.graph.GraphDefPb graph_def = 7;
inline bool OpResult::_internal_has_graph_def() const {
  return this != internal_default_instance() && _impl_.graph_def_ != nullptr;
}
inline bool OpResult::has_graph_def() const {
  return _internal_has_graph_def();
}
inline const ::gs::rpc::graph::GraphDefPb& OpResult::_internal_graph_def() const {
  const ::gs::rpc::graph::GraphDefPb* p = _impl_.graph_def_;
  return p != nullptr ? *p : reinterpret_cast<const ::gs::rpc::graph::GraphDefPb&>(
      ::gs::rpc::graph::_GraphDefPb_default_instance_);
}
inline const ::gs::rpc::graph::GraphDefPb& OpResult::graph_def() const {
  // @@protoc_insertion_point(field_get:gs.rpc.OpResult.graph_def)
  return _internal_graph_def();
}
inline void OpResult::unsafe_arena_set_allocated_graph_def(
    ::gs::rpc::graph::GraphDefPb* graph_def) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.graph_def_);
  }
  _impl_.graph_def_ = graph_def;
  if (graph_def) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gs.rpc.OpResult.graph_def)
}
inline ::gs::rpc::graph::GraphDefPb* OpResult::release_graph_def() {
  
  ::gs::rpc::graph::GraphDefPb* temp = _impl_.graph_def_;
  _impl_.graph_def_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::gs::rpc::graph::GraphDefPb* OpResult::unsafe_arena_release_graph_def() {
  // @@protoc_insertion_point(field_release:gs.rpc.OpResult.graph_def)
  
  ::gs::rpc::graph::GraphDefPb* temp = _impl_.graph_def_;
  _impl_.graph_def_ = nullptr;
  return temp;
}
inline ::gs::rpc::graph::GraphDefPb* OpResult::_internal_mutable_graph_def() {
  
  if (_impl_.graph_def_ == nullptr) {
    auto* p = CreateMaybeMessage<::gs::rpc::graph::GraphDefPb>(GetArenaForAllocation());
    _impl_.graph_def_ = p;
  }
  return _impl_.graph_def_;
}
inline ::gs::rpc::graph::GraphDefPb* OpResult::mutable_graph_def() {
  ::gs::rpc::graph::GraphDefPb* _msg = _internal_mutable_graph_def();
  // @@protoc_insertion_point(field_mutable:gs.rpc.OpResult.graph_def)
  return _msg;
}
inline void OpResult::set_allocated_graph_def(::gs::rpc::graph::GraphDefPb* graph_def) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.graph_def_);
  }
  if (graph_def) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(graph_def));
    if (message_arena != submessage_arena) {
      graph_def = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, graph_def, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.graph_def_ = graph_def;
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.OpResult.graph_def)
}

// -------------------------------------------------------------------

// DagDef

// repeated .gs.rpc.OpDef op = 1;
inline int DagDef::_internal_op_size() const {
  return _impl_.op_.size();
}
inline int DagDef::op_size() const {
  return _internal_op_size();
}
inline void DagDef::clear_op() {
  _impl_.op_.Clear();
}
inline ::gs::rpc::OpDef* DagDef::mutable_op(int index) {
  // @@protoc_insertion_point(field_mutable:gs.rpc.DagDef.op)
  return _impl_.op_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gs::rpc::OpDef >*
DagDef::mutable_op() {
  // @@protoc_insertion_point(field_mutable_list:gs.rpc.DagDef.op)
  return &_impl_.op_;
}
inline const ::gs::rpc::OpDef& DagDef::_internal_op(int index) const {
  return _impl_.op_.Get(index);
}
inline const ::gs::rpc::OpDef& DagDef::op(int index) const {
  // @@protoc_insertion_point(field_get:gs.rpc.DagDef.op)
  return _internal_op(index);
}
inline ::gs::rpc::OpDef* DagDef::_internal_add_op() {
  return _impl_.op_.Add();
}
inline ::gs::rpc::OpDef* DagDef::add_op() {
  ::gs::rpc::OpDef* _add = _internal_add_op();
  // @@protoc_insertion_point(field_add:gs.rpc.DagDef.op)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gs::rpc::OpDef >&
DagDef::op() const {
  // @@protoc_insertion_point(field_list:gs.rpc.DagDef.op)
  return _impl_.op_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc
}  // namespace gs

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_op_5fdef_2eproto
