// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: write_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_write_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_write_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "request_option.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_write_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_write_5fservice_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_write_5fservice_2eproto;
namespace gs {
namespace rpc {
namespace groot {
class BatchWriteRequest;
struct BatchWriteRequestDefaultTypeInternal;
extern BatchWriteRequestDefaultTypeInternal _BatchWriteRequest_default_instance_;
class BatchWriteResponse;
struct BatchWriteResponseDefaultTypeInternal;
extern BatchWriteResponseDefaultTypeInternal _BatchWriteResponse_default_instance_;
class DataRecordPb;
struct DataRecordPbDefaultTypeInternal;
extern DataRecordPbDefaultTypeInternal _DataRecordPb_default_instance_;
class DataRecordPb_PropertiesEntry_DoNotUse;
struct DataRecordPb_PropertiesEntry_DoNotUseDefaultTypeInternal;
extern DataRecordPb_PropertiesEntry_DoNotUseDefaultTypeInternal _DataRecordPb_PropertiesEntry_DoNotUse_default_instance_;
class EdgeRecordKeyPb;
struct EdgeRecordKeyPbDefaultTypeInternal;
extern EdgeRecordKeyPbDefaultTypeInternal _EdgeRecordKeyPb_default_instance_;
class GetClientIdRequest;
struct GetClientIdRequestDefaultTypeInternal;
extern GetClientIdRequestDefaultTypeInternal _GetClientIdRequest_default_instance_;
class GetClientIdResponse;
struct GetClientIdResponseDefaultTypeInternal;
extern GetClientIdResponseDefaultTypeInternal _GetClientIdResponse_default_instance_;
class RemoteFlushRequest;
struct RemoteFlushRequestDefaultTypeInternal;
extern RemoteFlushRequestDefaultTypeInternal _RemoteFlushRequest_default_instance_;
class RemoteFlushResponse;
struct RemoteFlushResponseDefaultTypeInternal;
extern RemoteFlushResponseDefaultTypeInternal _RemoteFlushResponse_default_instance_;
class ReplayRecordsRequest;
struct ReplayRecordsRequestDefaultTypeInternal;
extern ReplayRecordsRequestDefaultTypeInternal _ReplayRecordsRequest_default_instance_;
class ReplayRecordsResponse;
struct ReplayRecordsResponseDefaultTypeInternal;
extern ReplayRecordsResponseDefaultTypeInternal _ReplayRecordsResponse_default_instance_;
class VertexRecordKeyPb;
struct VertexRecordKeyPbDefaultTypeInternal;
extern VertexRecordKeyPbDefaultTypeInternal _VertexRecordKeyPb_default_instance_;
class VertexRecordKeyPb_PkPropertiesEntry_DoNotUse;
struct VertexRecordKeyPb_PkPropertiesEntry_DoNotUseDefaultTypeInternal;
extern VertexRecordKeyPb_PkPropertiesEntry_DoNotUseDefaultTypeInternal _VertexRecordKeyPb_PkPropertiesEntry_DoNotUse_default_instance_;
class WriteRequestPb;
struct WriteRequestPbDefaultTypeInternal;
extern WriteRequestPbDefaultTypeInternal _WriteRequestPb_default_instance_;
}  // namespace groot
}  // namespace rpc
}  // namespace gs
PROTOBUF_NAMESPACE_OPEN
template<> ::gs::rpc::groot::BatchWriteRequest* Arena::CreateMaybeMessage<::gs::rpc::groot::BatchWriteRequest>(Arena*);
template<> ::gs::rpc::groot::BatchWriteResponse* Arena::CreateMaybeMessage<::gs::rpc::groot::BatchWriteResponse>(Arena*);
template<> ::gs::rpc::groot::DataRecordPb* Arena::CreateMaybeMessage<::gs::rpc::groot::DataRecordPb>(Arena*);
template<> ::gs::rpc::groot::DataRecordPb_PropertiesEntry_DoNotUse* Arena::CreateMaybeMessage<::gs::rpc::groot::DataRecordPb_PropertiesEntry_DoNotUse>(Arena*);
template<> ::gs::rpc::groot::EdgeRecordKeyPb* Arena::CreateMaybeMessage<::gs::rpc::groot::EdgeRecordKeyPb>(Arena*);
template<> ::gs::rpc::groot::GetClientIdRequest* Arena::CreateMaybeMessage<::gs::rpc::groot::GetClientIdRequest>(Arena*);
template<> ::gs::rpc::groot::GetClientIdResponse* Arena::CreateMaybeMessage<::gs::rpc::groot::GetClientIdResponse>(Arena*);
template<> ::gs::rpc::groot::RemoteFlushRequest* Arena::CreateMaybeMessage<::gs::rpc::groot::RemoteFlushRequest>(Arena*);
template<> ::gs::rpc::groot::RemoteFlushResponse* Arena::CreateMaybeMessage<::gs::rpc::groot::RemoteFlushResponse>(Arena*);
template<> ::gs::rpc::groot::ReplayRecordsRequest* Arena::CreateMaybeMessage<::gs::rpc::groot::ReplayRecordsRequest>(Arena*);
template<> ::gs::rpc::groot::ReplayRecordsResponse* Arena::CreateMaybeMessage<::gs::rpc::groot::ReplayRecordsResponse>(Arena*);
template<> ::gs::rpc::groot::VertexRecordKeyPb* Arena::CreateMaybeMessage<::gs::rpc::groot::VertexRecordKeyPb>(Arena*);
template<> ::gs::rpc::groot::VertexRecordKeyPb_PkPropertiesEntry_DoNotUse* Arena::CreateMaybeMessage<::gs::rpc::groot::VertexRecordKeyPb_PkPropertiesEntry_DoNotUse>(Arena*);
template<> ::gs::rpc::groot::WriteRequestPb* Arena::CreateMaybeMessage<::gs::rpc::groot::WriteRequestPb>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace gs {
namespace rpc {
namespace groot {

enum WriteTypePb : int {
  UNKNOWN = 0,
  INSERT = 1,
  UPDATE = 2,
  DELETE = 3,
  CLEAR_PROPERTY = 4,
  WriteTypePb_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  WriteTypePb_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool WriteTypePb_IsValid(int value);
constexpr WriteTypePb WriteTypePb_MIN = UNKNOWN;
constexpr WriteTypePb WriteTypePb_MAX = CLEAR_PROPERTY;
constexpr int WriteTypePb_ARRAYSIZE = WriteTypePb_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WriteTypePb_descriptor();
template<typename T>
inline const std::string& WriteTypePb_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WriteTypePb>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WriteTypePb_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    WriteTypePb_descriptor(), enum_t_value);
}
inline bool WriteTypePb_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, WriteTypePb* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<WriteTypePb>(
    WriteTypePb_descriptor(), name, value);
}
// ===================================================================

class ReplayRecordsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gs.rpc.groot.ReplayRecordsRequest) */ {
 public:
  inline ReplayRecordsRequest() : ReplayRecordsRequest(nullptr) {}
  ~ReplayRecordsRequest() override;
  explicit PROTOBUF_CONSTEXPR ReplayRecordsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReplayRecordsRequest(const ReplayRecordsRequest& from);
  ReplayRecordsRequest(ReplayRecordsRequest&& from) noexcept
    : ReplayRecordsRequest() {
    *this = ::std::move(from);
  }

  inline ReplayRecordsRequest& operator=(const ReplayRecordsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplayRecordsRequest& operator=(ReplayRecordsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReplayRecordsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReplayRecordsRequest* internal_default_instance() {
    return reinterpret_cast<const ReplayRecordsRequest*>(
               &_ReplayRecordsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ReplayRecordsRequest& a, ReplayRecordsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReplayRecordsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReplayRecordsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReplayRecordsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReplayRecordsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReplayRecordsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReplayRecordsRequest& from) {
    ReplayRecordsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReplayRecordsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gs.rpc.groot.ReplayRecordsRequest";
  }
  protected:
  explicit ReplayRecordsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOffsetFieldNumber = 1,
    kTimestampFieldNumber = 2,
  };
  // int64 offset = 1;
  void clear_offset();
  int64_t offset() const;
  void set_offset(int64_t value);
  private:
  int64_t _internal_offset() const;
  void _internal_set_offset(int64_t value);
  public:

  // int64 timestamp = 2;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:gs.rpc.groot.ReplayRecordsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t offset_;
    int64_t timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_write_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ReplayRecordsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gs.rpc.groot.ReplayRecordsResponse) */ {
 public:
  inline ReplayRecordsResponse() : ReplayRecordsResponse(nullptr) {}
  ~ReplayRecordsResponse() override;
  explicit PROTOBUF_CONSTEXPR ReplayRecordsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReplayRecordsResponse(const ReplayRecordsResponse& from);
  ReplayRecordsResponse(ReplayRecordsResponse&& from) noexcept
    : ReplayRecordsResponse() {
    *this = ::std::move(from);
  }

  inline ReplayRecordsResponse& operator=(const ReplayRecordsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplayRecordsResponse& operator=(ReplayRecordsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReplayRecordsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReplayRecordsResponse* internal_default_instance() {
    return reinterpret_cast<const ReplayRecordsResponse*>(
               &_ReplayRecordsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ReplayRecordsResponse& a, ReplayRecordsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ReplayRecordsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReplayRecordsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReplayRecordsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReplayRecordsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReplayRecordsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReplayRecordsResponse& from) {
    ReplayRecordsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReplayRecordsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gs.rpc.groot.ReplayRecordsResponse";
  }
  protected:
  explicit ReplayRecordsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSnapshotIdFieldNumber = 1,
  };
  // repeated int64 snapshot_id = 1;
  int snapshot_id_size() const;
  private:
  int _internal_snapshot_id_size() const;
  public:
  void clear_snapshot_id();
  private:
  int64_t _internal_snapshot_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_snapshot_id() const;
  void _internal_add_snapshot_id(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_snapshot_id();
  public:
  int64_t snapshot_id(int index) const;
  void set_snapshot_id(int index, int64_t value);
  void add_snapshot_id(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      snapshot_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_snapshot_id();

  // @@protoc_insertion_point(class_scope:gs.rpc.groot.ReplayRecordsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > snapshot_id_;
    mutable std::atomic<int> _snapshot_id_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_write_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetClientIdRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:gs.rpc.groot.GetClientIdRequest) */ {
 public:
  inline GetClientIdRequest() : GetClientIdRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR GetClientIdRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetClientIdRequest(const GetClientIdRequest& from);
  GetClientIdRequest(GetClientIdRequest&& from) noexcept
    : GetClientIdRequest() {
    *this = ::std::move(from);
  }

  inline GetClientIdRequest& operator=(const GetClientIdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetClientIdRequest& operator=(GetClientIdRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetClientIdRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetClientIdRequest* internal_default_instance() {
    return reinterpret_cast<const GetClientIdRequest*>(
               &_GetClientIdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetClientIdRequest& a, GetClientIdRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetClientIdRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetClientIdRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetClientIdRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetClientIdRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetClientIdRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetClientIdRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gs.rpc.groot.GetClientIdRequest";
  }
  protected:
  explicit GetClientIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:gs.rpc.groot.GetClientIdRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_write_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetClientIdResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gs.rpc.groot.GetClientIdResponse) */ {
 public:
  inline GetClientIdResponse() : GetClientIdResponse(nullptr) {}
  ~GetClientIdResponse() override;
  explicit PROTOBUF_CONSTEXPR GetClientIdResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetClientIdResponse(const GetClientIdResponse& from);
  GetClientIdResponse(GetClientIdResponse&& from) noexcept
    : GetClientIdResponse() {
    *this = ::std::move(from);
  }

  inline GetClientIdResponse& operator=(const GetClientIdResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetClientIdResponse& operator=(GetClientIdResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetClientIdResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetClientIdResponse* internal_default_instance() {
    return reinterpret_cast<const GetClientIdResponse*>(
               &_GetClientIdResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetClientIdResponse& a, GetClientIdResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetClientIdResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetClientIdResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetClientIdResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetClientIdResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetClientIdResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetClientIdResponse& from) {
    GetClientIdResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetClientIdResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gs.rpc.groot.GetClientIdResponse";
  }
  protected:
  explicit GetClientIdResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdFieldNumber = 1,
  };
  // string client_id = 1;
  void clear_client_id();
  const std::string& client_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_client_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_client_id();
  PROTOBUF_NODISCARD std::string* release_client_id();
  void set_allocated_client_id(std::string* client_id);
  private:
  const std::string& _internal_client_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_id(const std::string& value);
  std::string* _internal_mutable_client_id();
  public:

  // @@protoc_insertion_point(class_scope:gs.rpc.groot.GetClientIdResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_write_5fservice_2eproto;
};
// -------------------------------------------------------------------

class BatchWriteRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gs.rpc.groot.BatchWriteRequest) */ {
 public:
  inline BatchWriteRequest() : BatchWriteRequest(nullptr) {}
  ~BatchWriteRequest() override;
  explicit PROTOBUF_CONSTEXPR BatchWriteRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BatchWriteRequest(const BatchWriteRequest& from);
  BatchWriteRequest(BatchWriteRequest&& from) noexcept
    : BatchWriteRequest() {
    *this = ::std::move(from);
  }

  inline BatchWriteRequest& operator=(const BatchWriteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchWriteRequest& operator=(BatchWriteRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BatchWriteRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const BatchWriteRequest* internal_default_instance() {
    return reinterpret_cast<const BatchWriteRequest*>(
               &_BatchWriteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(BatchWriteRequest& a, BatchWriteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BatchWriteRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatchWriteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BatchWriteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BatchWriteRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BatchWriteRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BatchWriteRequest& from) {
    BatchWriteRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchWriteRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gs.rpc.groot.BatchWriteRequest";
  }
  protected:
  explicit BatchWriteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWriteRequestsFieldNumber = 2,
    kClientIdFieldNumber = 1,
    kRequestOptionsFieldNumber = 3,
  };
  // repeated .gs.rpc.groot.WriteRequestPb write_requests = 2;
  int write_requests_size() const;
  private:
  int _internal_write_requests_size() const;
  public:
  void clear_write_requests();
  ::gs::rpc::groot::WriteRequestPb* mutable_write_requests(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gs::rpc::groot::WriteRequestPb >*
      mutable_write_requests();
  private:
  const ::gs::rpc::groot::WriteRequestPb& _internal_write_requests(int index) const;
  ::gs::rpc::groot::WriteRequestPb* _internal_add_write_requests();
  public:
  const ::gs::rpc::groot::WriteRequestPb& write_requests(int index) const;
  ::gs::rpc::groot::WriteRequestPb* add_write_requests();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gs::rpc::groot::WriteRequestPb >&
      write_requests() const;

  // string client_id = 1;
  void clear_client_id();
  const std::string& client_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_client_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_client_id();
  PROTOBUF_NODISCARD std::string* release_client_id();
  void set_allocated_client_id(std::string* client_id);
  private:
  const std::string& _internal_client_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_id(const std::string& value);
  std::string* _internal_mutable_client_id();
  public:

  // .gs.rpc.groot.RequestOptionsPb request_options = 3;
  bool has_request_options() const;
  private:
  bool _internal_has_request_options() const;
  public:
  void clear_request_options();
  const ::gs::rpc::groot::RequestOptionsPb& request_options() const;
  PROTOBUF_NODISCARD ::gs::rpc::groot::RequestOptionsPb* release_request_options();
  ::gs::rpc::groot::RequestOptionsPb* mutable_request_options();
  void set_allocated_request_options(::gs::rpc::groot::RequestOptionsPb* request_options);
  private:
  const ::gs::rpc::groot::RequestOptionsPb& _internal_request_options() const;
  ::gs::rpc::groot::RequestOptionsPb* _internal_mutable_request_options();
  public:
  void unsafe_arena_set_allocated_request_options(
      ::gs::rpc::groot::RequestOptionsPb* request_options);
  ::gs::rpc::groot::RequestOptionsPb* unsafe_arena_release_request_options();

  // @@protoc_insertion_point(class_scope:gs.rpc.groot.BatchWriteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gs::rpc::groot::WriteRequestPb > write_requests_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
    ::gs::rpc::groot::RequestOptionsPb* request_options_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_write_5fservice_2eproto;
};
// -------------------------------------------------------------------

class BatchWriteResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gs.rpc.groot.BatchWriteResponse) */ {
 public:
  inline BatchWriteResponse() : BatchWriteResponse(nullptr) {}
  ~BatchWriteResponse() override;
  explicit PROTOBUF_CONSTEXPR BatchWriteResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BatchWriteResponse(const BatchWriteResponse& from);
  BatchWriteResponse(BatchWriteResponse&& from) noexcept
    : BatchWriteResponse() {
    *this = ::std::move(from);
  }

  inline BatchWriteResponse& operator=(const BatchWriteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchWriteResponse& operator=(BatchWriteResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BatchWriteResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const BatchWriteResponse* internal_default_instance() {
    return reinterpret_cast<const BatchWriteResponse*>(
               &_BatchWriteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(BatchWriteResponse& a, BatchWriteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BatchWriteResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatchWriteResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BatchWriteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BatchWriteResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BatchWriteResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BatchWriteResponse& from) {
    BatchWriteResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchWriteResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gs.rpc.groot.BatchWriteResponse";
  }
  protected:
  explicit BatchWriteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSnapshotIdFieldNumber = 1,
  };
  // int64 snapshot_id = 1;
  void clear_snapshot_id();
  int64_t snapshot_id() const;
  void set_snapshot_id(int64_t value);
  private:
  int64_t _internal_snapshot_id() const;
  void _internal_set_snapshot_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:gs.rpc.groot.BatchWriteResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t snapshot_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_write_5fservice_2eproto;
};
// -------------------------------------------------------------------

class RemoteFlushRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gs.rpc.groot.RemoteFlushRequest) */ {
 public:
  inline RemoteFlushRequest() : RemoteFlushRequest(nullptr) {}
  ~RemoteFlushRequest() override;
  explicit PROTOBUF_CONSTEXPR RemoteFlushRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoteFlushRequest(const RemoteFlushRequest& from);
  RemoteFlushRequest(RemoteFlushRequest&& from) noexcept
    : RemoteFlushRequest() {
    *this = ::std::move(from);
  }

  inline RemoteFlushRequest& operator=(const RemoteFlushRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoteFlushRequest& operator=(RemoteFlushRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemoteFlushRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoteFlushRequest* internal_default_instance() {
    return reinterpret_cast<const RemoteFlushRequest*>(
               &_RemoteFlushRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RemoteFlushRequest& a, RemoteFlushRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoteFlushRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoteFlushRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemoteFlushRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RemoteFlushRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RemoteFlushRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RemoteFlushRequest& from) {
    RemoteFlushRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoteFlushRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gs.rpc.groot.RemoteFlushRequest";
  }
  protected:
  explicit RemoteFlushRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSnapshotIdFieldNumber = 1,
    kWaitTimeMsFieldNumber = 2,
  };
  // int64 snapshot_id = 1;
  void clear_snapshot_id();
  int64_t snapshot_id() const;
  void set_snapshot_id(int64_t value);
  private:
  int64_t _internal_snapshot_id() const;
  void _internal_set_snapshot_id(int64_t value);
  public:

  // int64 wait_time_ms = 2;
  void clear_wait_time_ms();
  int64_t wait_time_ms() const;
  void set_wait_time_ms(int64_t value);
  private:
  int64_t _internal_wait_time_ms() const;
  void _internal_set_wait_time_ms(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:gs.rpc.groot.RemoteFlushRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t snapshot_id_;
    int64_t wait_time_ms_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_write_5fservice_2eproto;
};
// -------------------------------------------------------------------

class RemoteFlushResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gs.rpc.groot.RemoteFlushResponse) */ {
 public:
  inline RemoteFlushResponse() : RemoteFlushResponse(nullptr) {}
  ~RemoteFlushResponse() override;
  explicit PROTOBUF_CONSTEXPR RemoteFlushResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoteFlushResponse(const RemoteFlushResponse& from);
  RemoteFlushResponse(RemoteFlushResponse&& from) noexcept
    : RemoteFlushResponse() {
    *this = ::std::move(from);
  }

  inline RemoteFlushResponse& operator=(const RemoteFlushResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoteFlushResponse& operator=(RemoteFlushResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemoteFlushResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoteFlushResponse* internal_default_instance() {
    return reinterpret_cast<const RemoteFlushResponse*>(
               &_RemoteFlushResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(RemoteFlushResponse& a, RemoteFlushResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoteFlushResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoteFlushResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemoteFlushResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RemoteFlushResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RemoteFlushResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RemoteFlushResponse& from) {
    RemoteFlushResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoteFlushResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gs.rpc.groot.RemoteFlushResponse";
  }
  protected:
  explicit RemoteFlushResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:gs.rpc.groot.RemoteFlushResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_write_5fservice_2eproto;
};
// -------------------------------------------------------------------

class WriteRequestPb final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gs.rpc.groot.WriteRequestPb) */ {
 public:
  inline WriteRequestPb() : WriteRequestPb(nullptr) {}
  ~WriteRequestPb() override;
  explicit PROTOBUF_CONSTEXPR WriteRequestPb(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WriteRequestPb(const WriteRequestPb& from);
  WriteRequestPb(WriteRequestPb&& from) noexcept
    : WriteRequestPb() {
    *this = ::std::move(from);
  }

  inline WriteRequestPb& operator=(const WriteRequestPb& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriteRequestPb& operator=(WriteRequestPb&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WriteRequestPb& default_instance() {
    return *internal_default_instance();
  }
  static inline const WriteRequestPb* internal_default_instance() {
    return reinterpret_cast<const WriteRequestPb*>(
               &_WriteRequestPb_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(WriteRequestPb& a, WriteRequestPb& b) {
    a.Swap(&b);
  }
  inline void Swap(WriteRequestPb* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WriteRequestPb* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WriteRequestPb* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WriteRequestPb>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WriteRequestPb& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WriteRequestPb& from) {
    WriteRequestPb::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriteRequestPb* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gs.rpc.groot.WriteRequestPb";
  }
  protected:
  explicit WriteRequestPb(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataRecordFieldNumber = 2,
    kWriteTypeFieldNumber = 1,
  };
  // .gs.rpc.groot.DataRecordPb data_record = 2;
  bool has_data_record() const;
  private:
  bool _internal_has_data_record() const;
  public:
  void clear_data_record();
  const ::gs::rpc::groot::DataRecordPb& data_record() const;
  PROTOBUF_NODISCARD ::gs::rpc::groot::DataRecordPb* release_data_record();
  ::gs::rpc::groot::DataRecordPb* mutable_data_record();
  void set_allocated_data_record(::gs::rpc::groot::DataRecordPb* data_record);
  private:
  const ::gs::rpc::groot::DataRecordPb& _internal_data_record() const;
  ::gs::rpc::groot::DataRecordPb* _internal_mutable_data_record();
  public:
  void unsafe_arena_set_allocated_data_record(
      ::gs::rpc::groot::DataRecordPb* data_record);
  ::gs::rpc::groot::DataRecordPb* unsafe_arena_release_data_record();

  // .gs.rpc.groot.WriteTypePb write_type = 1;
  void clear_write_type();
  ::gs::rpc::groot::WriteTypePb write_type() const;
  void set_write_type(::gs::rpc::groot::WriteTypePb value);
  private:
  ::gs::rpc::groot::WriteTypePb _internal_write_type() const;
  void _internal_set_write_type(::gs::rpc::groot::WriteTypePb value);
  public:

  // @@protoc_insertion_point(class_scope:gs.rpc.groot.WriteRequestPb)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::gs::rpc::groot::DataRecordPb* data_record_;
    int write_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_write_5fservice_2eproto;
};
// -------------------------------------------------------------------

class DataRecordPb_PropertiesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<DataRecordPb_PropertiesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<DataRecordPb_PropertiesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  DataRecordPb_PropertiesEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR DataRecordPb_PropertiesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit DataRecordPb_PropertiesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const DataRecordPb_PropertiesEntry_DoNotUse& other);
  static const DataRecordPb_PropertiesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const DataRecordPb_PropertiesEntry_DoNotUse*>(&_DataRecordPb_PropertiesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "gs.rpc.groot.DataRecordPb.PropertiesEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "gs.rpc.groot.DataRecordPb.PropertiesEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_write_5fservice_2eproto;
};

// -------------------------------------------------------------------

class DataRecordPb final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gs.rpc.groot.DataRecordPb) */ {
 public:
  inline DataRecordPb() : DataRecordPb(nullptr) {}
  ~DataRecordPb() override;
  explicit PROTOBUF_CONSTEXPR DataRecordPb(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DataRecordPb(const DataRecordPb& from);
  DataRecordPb(DataRecordPb&& from) noexcept
    : DataRecordPb() {
    *this = ::std::move(from);
  }

  inline DataRecordPb& operator=(const DataRecordPb& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataRecordPb& operator=(DataRecordPb&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DataRecordPb& default_instance() {
    return *internal_default_instance();
  }
  enum RecordKeyCase {
    kVertexRecordKey = 1,
    kEdgeRecordKey = 2,
    RECORD_KEY_NOT_SET = 0,
  };

  static inline const DataRecordPb* internal_default_instance() {
    return reinterpret_cast<const DataRecordPb*>(
               &_DataRecordPb_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(DataRecordPb& a, DataRecordPb& b) {
    a.Swap(&b);
  }
  inline void Swap(DataRecordPb* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataRecordPb* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DataRecordPb* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DataRecordPb>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DataRecordPb& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DataRecordPb& from) {
    DataRecordPb::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataRecordPb* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gs.rpc.groot.DataRecordPb";
  }
  protected:
  explicit DataRecordPb(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kPropertiesFieldNumber = 3,
    kVertexRecordKeyFieldNumber = 1,
    kEdgeRecordKeyFieldNumber = 2,
  };
  // map<string, string> properties = 3;
  int properties_size() const;
  private:
  int _internal_properties_size() const;
  public:
  void clear_properties();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_properties() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_properties();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      properties() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_properties();

  // .gs.rpc.groot.VertexRecordKeyPb vertex_record_key = 1;
  bool has_vertex_record_key() const;
  private:
  bool _internal_has_vertex_record_key() const;
  public:
  void clear_vertex_record_key();
  const ::gs::rpc::groot::VertexRecordKeyPb& vertex_record_key() const;
  PROTOBUF_NODISCARD ::gs::rpc::groot::VertexRecordKeyPb* release_vertex_record_key();
  ::gs::rpc::groot::VertexRecordKeyPb* mutable_vertex_record_key();
  void set_allocated_vertex_record_key(::gs::rpc::groot::VertexRecordKeyPb* vertex_record_key);
  private:
  const ::gs::rpc::groot::VertexRecordKeyPb& _internal_vertex_record_key() const;
  ::gs::rpc::groot::VertexRecordKeyPb* _internal_mutable_vertex_record_key();
  public:
  void unsafe_arena_set_allocated_vertex_record_key(
      ::gs::rpc::groot::VertexRecordKeyPb* vertex_record_key);
  ::gs::rpc::groot::VertexRecordKeyPb* unsafe_arena_release_vertex_record_key();

  // .gs.rpc.groot.EdgeRecordKeyPb edge_record_key = 2;
  bool has_edge_record_key() const;
  private:
  bool _internal_has_edge_record_key() const;
  public:
  void clear_edge_record_key();
  const ::gs::rpc::groot::EdgeRecordKeyPb& edge_record_key() const;
  PROTOBUF_NODISCARD ::gs::rpc::groot::EdgeRecordKeyPb* release_edge_record_key();
  ::gs::rpc::groot::EdgeRecordKeyPb* mutable_edge_record_key();
  void set_allocated_edge_record_key(::gs::rpc::groot::EdgeRecordKeyPb* edge_record_key);
  private:
  const ::gs::rpc::groot::EdgeRecordKeyPb& _internal_edge_record_key() const;
  ::gs::rpc::groot::EdgeRecordKeyPb* _internal_mutable_edge_record_key();
  public:
  void unsafe_arena_set_allocated_edge_record_key(
      ::gs::rpc::groot::EdgeRecordKeyPb* edge_record_key);
  ::gs::rpc::groot::EdgeRecordKeyPb* unsafe_arena_release_edge_record_key();

  void clear_record_key();
  RecordKeyCase record_key_case() const;
  // @@protoc_insertion_point(class_scope:gs.rpc.groot.DataRecordPb)
 private:
  class _Internal;
  void set_has_vertex_record_key();
  void set_has_edge_record_key();

  inline bool has_record_key() const;
  inline void clear_has_record_key();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        DataRecordPb_PropertiesEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> properties_;
    union RecordKeyUnion {
      constexpr RecordKeyUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::gs::rpc::groot::VertexRecordKeyPb* vertex_record_key_;
      ::gs::rpc::groot::EdgeRecordKeyPb* edge_record_key_;
    } record_key_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_write_5fservice_2eproto;
};
// -------------------------------------------------------------------

class VertexRecordKeyPb_PkPropertiesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<VertexRecordKeyPb_PkPropertiesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<VertexRecordKeyPb_PkPropertiesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  VertexRecordKeyPb_PkPropertiesEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR VertexRecordKeyPb_PkPropertiesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit VertexRecordKeyPb_PkPropertiesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const VertexRecordKeyPb_PkPropertiesEntry_DoNotUse& other);
  static const VertexRecordKeyPb_PkPropertiesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const VertexRecordKeyPb_PkPropertiesEntry_DoNotUse*>(&_VertexRecordKeyPb_PkPropertiesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "gs.rpc.groot.VertexRecordKeyPb.PkPropertiesEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "gs.rpc.groot.VertexRecordKeyPb.PkPropertiesEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_write_5fservice_2eproto;
};

// -------------------------------------------------------------------

class VertexRecordKeyPb final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gs.rpc.groot.VertexRecordKeyPb) */ {
 public:
  inline VertexRecordKeyPb() : VertexRecordKeyPb(nullptr) {}
  ~VertexRecordKeyPb() override;
  explicit PROTOBUF_CONSTEXPR VertexRecordKeyPb(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VertexRecordKeyPb(const VertexRecordKeyPb& from);
  VertexRecordKeyPb(VertexRecordKeyPb&& from) noexcept
    : VertexRecordKeyPb() {
    *this = ::std::move(from);
  }

  inline VertexRecordKeyPb& operator=(const VertexRecordKeyPb& from) {
    CopyFrom(from);
    return *this;
  }
  inline VertexRecordKeyPb& operator=(VertexRecordKeyPb&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VertexRecordKeyPb& default_instance() {
    return *internal_default_instance();
  }
  static inline const VertexRecordKeyPb* internal_default_instance() {
    return reinterpret_cast<const VertexRecordKeyPb*>(
               &_VertexRecordKeyPb_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(VertexRecordKeyPb& a, VertexRecordKeyPb& b) {
    a.Swap(&b);
  }
  inline void Swap(VertexRecordKeyPb* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VertexRecordKeyPb* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VertexRecordKeyPb* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VertexRecordKeyPb>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VertexRecordKeyPb& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VertexRecordKeyPb& from) {
    VertexRecordKeyPb::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VertexRecordKeyPb* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gs.rpc.groot.VertexRecordKeyPb";
  }
  protected:
  explicit VertexRecordKeyPb(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kPkPropertiesFieldNumber = 2,
    kLabelFieldNumber = 1,
  };
  // map<string, string> pk_properties = 2;
  int pk_properties_size() const;
  private:
  int _internal_pk_properties_size() const;
  public:
  void clear_pk_properties();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_pk_properties() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_pk_properties();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      pk_properties() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_pk_properties();

  // string label = 1;
  void clear_label();
  const std::string& label() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_label(ArgT0&& arg0, ArgT... args);
  std::string* mutable_label();
  PROTOBUF_NODISCARD std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // @@protoc_insertion_point(class_scope:gs.rpc.groot.VertexRecordKeyPb)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        VertexRecordKeyPb_PkPropertiesEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> pk_properties_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_write_5fservice_2eproto;
};
// -------------------------------------------------------------------

class EdgeRecordKeyPb final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gs.rpc.groot.EdgeRecordKeyPb) */ {
 public:
  inline EdgeRecordKeyPb() : EdgeRecordKeyPb(nullptr) {}
  ~EdgeRecordKeyPb() override;
  explicit PROTOBUF_CONSTEXPR EdgeRecordKeyPb(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EdgeRecordKeyPb(const EdgeRecordKeyPb& from);
  EdgeRecordKeyPb(EdgeRecordKeyPb&& from) noexcept
    : EdgeRecordKeyPb() {
    *this = ::std::move(from);
  }

  inline EdgeRecordKeyPb& operator=(const EdgeRecordKeyPb& from) {
    CopyFrom(from);
    return *this;
  }
  inline EdgeRecordKeyPb& operator=(EdgeRecordKeyPb&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EdgeRecordKeyPb& default_instance() {
    return *internal_default_instance();
  }
  static inline const EdgeRecordKeyPb* internal_default_instance() {
    return reinterpret_cast<const EdgeRecordKeyPb*>(
               &_EdgeRecordKeyPb_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(EdgeRecordKeyPb& a, EdgeRecordKeyPb& b) {
    a.Swap(&b);
  }
  inline void Swap(EdgeRecordKeyPb* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EdgeRecordKeyPb* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EdgeRecordKeyPb* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EdgeRecordKeyPb>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EdgeRecordKeyPb& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EdgeRecordKeyPb& from) {
    EdgeRecordKeyPb::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EdgeRecordKeyPb* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gs.rpc.groot.EdgeRecordKeyPb";
  }
  protected:
  explicit EdgeRecordKeyPb(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelFieldNumber = 1,
    kSrcVertexKeyFieldNumber = 2,
    kDstVertexKeyFieldNumber = 3,
    kInnerIdFieldNumber = 4,
  };
  // string label = 1;
  void clear_label();
  const std::string& label() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_label(ArgT0&& arg0, ArgT... args);
  std::string* mutable_label();
  PROTOBUF_NODISCARD std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // .gs.rpc.groot.VertexRecordKeyPb src_vertex_key = 2;
  bool has_src_vertex_key() const;
  private:
  bool _internal_has_src_vertex_key() const;
  public:
  void clear_src_vertex_key();
  const ::gs::rpc::groot::VertexRecordKeyPb& src_vertex_key() const;
  PROTOBUF_NODISCARD ::gs::rpc::groot::VertexRecordKeyPb* release_src_vertex_key();
  ::gs::rpc::groot::VertexRecordKeyPb* mutable_src_vertex_key();
  void set_allocated_src_vertex_key(::gs::rpc::groot::VertexRecordKeyPb* src_vertex_key);
  private:
  const ::gs::rpc::groot::VertexRecordKeyPb& _internal_src_vertex_key() const;
  ::gs::rpc::groot::VertexRecordKeyPb* _internal_mutable_src_vertex_key();
  public:
  void unsafe_arena_set_allocated_src_vertex_key(
      ::gs::rpc::groot::VertexRecordKeyPb* src_vertex_key);
  ::gs::rpc::groot::VertexRecordKeyPb* unsafe_arena_release_src_vertex_key();

  // .gs.rpc.groot.VertexRecordKeyPb dst_vertex_key = 3;
  bool has_dst_vertex_key() const;
  private:
  bool _internal_has_dst_vertex_key() const;
  public:
  void clear_dst_vertex_key();
  const ::gs::rpc::groot::VertexRecordKeyPb& dst_vertex_key() const;
  PROTOBUF_NODISCARD ::gs::rpc::groot::VertexRecordKeyPb* release_dst_vertex_key();
  ::gs::rpc::groot::VertexRecordKeyPb* mutable_dst_vertex_key();
  void set_allocated_dst_vertex_key(::gs::rpc::groot::VertexRecordKeyPb* dst_vertex_key);
  private:
  const ::gs::rpc::groot::VertexRecordKeyPb& _internal_dst_vertex_key() const;
  ::gs::rpc::groot::VertexRecordKeyPb* _internal_mutable_dst_vertex_key();
  public:
  void unsafe_arena_set_allocated_dst_vertex_key(
      ::gs::rpc::groot::VertexRecordKeyPb* dst_vertex_key);
  ::gs::rpc::groot::VertexRecordKeyPb* unsafe_arena_release_dst_vertex_key();

  // int64 inner_id = 4;
  void clear_inner_id();
  int64_t inner_id() const;
  void set_inner_id(int64_t value);
  private:
  int64_t _internal_inner_id() const;
  void _internal_set_inner_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:gs.rpc.groot.EdgeRecordKeyPb)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
    ::gs::rpc::groot::VertexRecordKeyPb* src_vertex_key_;
    ::gs::rpc::groot::VertexRecordKeyPb* dst_vertex_key_;
    int64_t inner_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_write_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ReplayRecordsRequest

// int64 offset = 1;
inline void ReplayRecordsRequest::clear_offset() {
  _impl_.offset_ = int64_t{0};
}
inline int64_t ReplayRecordsRequest::_internal_offset() const {
  return _impl_.offset_;
}
inline int64_t ReplayRecordsRequest::offset() const {
  // @@protoc_insertion_point(field_get:gs.rpc.groot.ReplayRecordsRequest.offset)
  return _internal_offset();
}
inline void ReplayRecordsRequest::_internal_set_offset(int64_t value) {
  
  _impl_.offset_ = value;
}
inline void ReplayRecordsRequest::set_offset(int64_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:gs.rpc.groot.ReplayRecordsRequest.offset)
}

// int64 timestamp = 2;
inline void ReplayRecordsRequest::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t ReplayRecordsRequest::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t ReplayRecordsRequest::timestamp() const {
  // @@protoc_insertion_point(field_get:gs.rpc.groot.ReplayRecordsRequest.timestamp)
  return _internal_timestamp();
}
inline void ReplayRecordsRequest::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void ReplayRecordsRequest::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:gs.rpc.groot.ReplayRecordsRequest.timestamp)
}

// -------------------------------------------------------------------

// ReplayRecordsResponse

// repeated int64 snapshot_id = 1;
inline int ReplayRecordsResponse::_internal_snapshot_id_size() const {
  return _impl_.snapshot_id_.size();
}
inline int ReplayRecordsResponse::snapshot_id_size() const {
  return _internal_snapshot_id_size();
}
inline void ReplayRecordsResponse::clear_snapshot_id() {
  _impl_.snapshot_id_.Clear();
}
inline int64_t ReplayRecordsResponse::_internal_snapshot_id(int index) const {
  return _impl_.snapshot_id_.Get(index);
}
inline int64_t ReplayRecordsResponse::snapshot_id(int index) const {
  // @@protoc_insertion_point(field_get:gs.rpc.groot.ReplayRecordsResponse.snapshot_id)
  return _internal_snapshot_id(index);
}
inline void ReplayRecordsResponse::set_snapshot_id(int index, int64_t value) {
  _impl_.snapshot_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:gs.rpc.groot.ReplayRecordsResponse.snapshot_id)
}
inline void ReplayRecordsResponse::_internal_add_snapshot_id(int64_t value) {
  _impl_.snapshot_id_.Add(value);
}
inline void ReplayRecordsResponse::add_snapshot_id(int64_t value) {
  _internal_add_snapshot_id(value);
  // @@protoc_insertion_point(field_add:gs.rpc.groot.ReplayRecordsResponse.snapshot_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
ReplayRecordsResponse::_internal_snapshot_id() const {
  return _impl_.snapshot_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
ReplayRecordsResponse::snapshot_id() const {
  // @@protoc_insertion_point(field_list:gs.rpc.groot.ReplayRecordsResponse.snapshot_id)
  return _internal_snapshot_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
ReplayRecordsResponse::_internal_mutable_snapshot_id() {
  return &_impl_.snapshot_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
ReplayRecordsResponse::mutable_snapshot_id() {
  // @@protoc_insertion_point(field_mutable_list:gs.rpc.groot.ReplayRecordsResponse.snapshot_id)
  return _internal_mutable_snapshot_id();
}

// -------------------------------------------------------------------

// GetClientIdRequest

// -------------------------------------------------------------------

// GetClientIdResponse

// string client_id = 1;
inline void GetClientIdResponse::clear_client_id() {
  _impl_.client_id_.ClearToEmpty();
}
inline const std::string& GetClientIdResponse::client_id() const {
  // @@protoc_insertion_point(field_get:gs.rpc.groot.GetClientIdResponse.client_id)
  return _internal_client_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetClientIdResponse::set_client_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.client_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gs.rpc.groot.GetClientIdResponse.client_id)
}
inline std::string* GetClientIdResponse::mutable_client_id() {
  std::string* _s = _internal_mutable_client_id();
  // @@protoc_insertion_point(field_mutable:gs.rpc.groot.GetClientIdResponse.client_id)
  return _s;
}
inline const std::string& GetClientIdResponse::_internal_client_id() const {
  return _impl_.client_id_.Get();
}
inline void GetClientIdResponse::_internal_set_client_id(const std::string& value) {
  
  _impl_.client_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetClientIdResponse::_internal_mutable_client_id() {
  
  return _impl_.client_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetClientIdResponse::release_client_id() {
  // @@protoc_insertion_point(field_release:gs.rpc.groot.GetClientIdResponse.client_id)
  return _impl_.client_id_.Release();
}
inline void GetClientIdResponse::set_allocated_client_id(std::string* client_id) {
  if (client_id != nullptr) {
    
  } else {
    
  }
  _impl_.client_id_.SetAllocated(client_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.client_id_.IsDefault()) {
    _impl_.client_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.groot.GetClientIdResponse.client_id)
}

// -------------------------------------------------------------------

// BatchWriteRequest

// string client_id = 1;
inline void BatchWriteRequest::clear_client_id() {
  _impl_.client_id_.ClearToEmpty();
}
inline const std::string& BatchWriteRequest::client_id() const {
  // @@protoc_insertion_point(field_get:gs.rpc.groot.BatchWriteRequest.client_id)
  return _internal_client_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BatchWriteRequest::set_client_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.client_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gs.rpc.groot.BatchWriteRequest.client_id)
}
inline std::string* BatchWriteRequest::mutable_client_id() {
  std::string* _s = _internal_mutable_client_id();
  // @@protoc_insertion_point(field_mutable:gs.rpc.groot.BatchWriteRequest.client_id)
  return _s;
}
inline const std::string& BatchWriteRequest::_internal_client_id() const {
  return _impl_.client_id_.Get();
}
inline void BatchWriteRequest::_internal_set_client_id(const std::string& value) {
  
  _impl_.client_id_.Set(value, GetArenaForAllocation());
}
inline std::string* BatchWriteRequest::_internal_mutable_client_id() {
  
  return _impl_.client_id_.Mutable(GetArenaForAllocation());
}
inline std::string* BatchWriteRequest::release_client_id() {
  // @@protoc_insertion_point(field_release:gs.rpc.groot.BatchWriteRequest.client_id)
  return _impl_.client_id_.Release();
}
inline void BatchWriteRequest::set_allocated_client_id(std::string* client_id) {
  if (client_id != nullptr) {
    
  } else {
    
  }
  _impl_.client_id_.SetAllocated(client_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.client_id_.IsDefault()) {
    _impl_.client_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.groot.BatchWriteRequest.client_id)
}

// repeated .gs.rpc.groot.WriteRequestPb write_requests = 2;
inline int BatchWriteRequest::_internal_write_requests_size() const {
  return _impl_.write_requests_.size();
}
inline int BatchWriteRequest::write_requests_size() const {
  return _internal_write_requests_size();
}
inline void BatchWriteRequest::clear_write_requests() {
  _impl_.write_requests_.Clear();
}
inline ::gs::rpc::groot::WriteRequestPb* BatchWriteRequest::mutable_write_requests(int index) {
  // @@protoc_insertion_point(field_mutable:gs.rpc.groot.BatchWriteRequest.write_requests)
  return _impl_.write_requests_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gs::rpc::groot::WriteRequestPb >*
BatchWriteRequest::mutable_write_requests() {
  // @@protoc_insertion_point(field_mutable_list:gs.rpc.groot.BatchWriteRequest.write_requests)
  return &_impl_.write_requests_;
}
inline const ::gs::rpc::groot::WriteRequestPb& BatchWriteRequest::_internal_write_requests(int index) const {
  return _impl_.write_requests_.Get(index);
}
inline const ::gs::rpc::groot::WriteRequestPb& BatchWriteRequest::write_requests(int index) const {
  // @@protoc_insertion_point(field_get:gs.rpc.groot.BatchWriteRequest.write_requests)
  return _internal_write_requests(index);
}
inline ::gs::rpc::groot::WriteRequestPb* BatchWriteRequest::_internal_add_write_requests() {
  return _impl_.write_requests_.Add();
}
inline ::gs::rpc::groot::WriteRequestPb* BatchWriteRequest::add_write_requests() {
  ::gs::rpc::groot::WriteRequestPb* _add = _internal_add_write_requests();
  // @@protoc_insertion_point(field_add:gs.rpc.groot.BatchWriteRequest.write_requests)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gs::rpc::groot::WriteRequestPb >&
BatchWriteRequest::write_requests() const {
  // @@protoc_insertion_point(field_list:gs.rpc.groot.BatchWriteRequest.write_requests)
  return _impl_.write_requests_;
}

// .gs.rpc.groot.RequestOptionsPb request_options = 3;
inline bool BatchWriteRequest::_internal_has_request_options() const {
  return this != internal_default_instance() && _impl_.request_options_ != nullptr;
}
inline bool BatchWriteRequest::has_request_options() const {
  return _internal_has_request_options();
}
inline const ::gs::rpc::groot::RequestOptionsPb& BatchWriteRequest::_internal_request_options() const {
  const ::gs::rpc::groot::RequestOptionsPb* p = _impl_.request_options_;
  return p != nullptr ? *p : reinterpret_cast<const ::gs::rpc::groot::RequestOptionsPb&>(
      ::gs::rpc::groot::_RequestOptionsPb_default_instance_);
}
inline const ::gs::rpc::groot::RequestOptionsPb& BatchWriteRequest::request_options() const {
  // @@protoc_insertion_point(field_get:gs.rpc.groot.BatchWriteRequest.request_options)
  return _internal_request_options();
}
inline void BatchWriteRequest::unsafe_arena_set_allocated_request_options(
    ::gs::rpc::groot::RequestOptionsPb* request_options) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.request_options_);
  }
  _impl_.request_options_ = request_options;
  if (request_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gs.rpc.groot.BatchWriteRequest.request_options)
}
inline ::gs::rpc::groot::RequestOptionsPb* BatchWriteRequest::release_request_options() {
  
  ::gs::rpc::groot::RequestOptionsPb* temp = _impl_.request_options_;
  _impl_.request_options_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::gs::rpc::groot::RequestOptionsPb* BatchWriteRequest::unsafe_arena_release_request_options() {
  // @@protoc_insertion_point(field_release:gs.rpc.groot.BatchWriteRequest.request_options)
  
  ::gs::rpc::groot::RequestOptionsPb* temp = _impl_.request_options_;
  _impl_.request_options_ = nullptr;
  return temp;
}
inline ::gs::rpc::groot::RequestOptionsPb* BatchWriteRequest::_internal_mutable_request_options() {
  
  if (_impl_.request_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::gs::rpc::groot::RequestOptionsPb>(GetArenaForAllocation());
    _impl_.request_options_ = p;
  }
  return _impl_.request_options_;
}
inline ::gs::rpc::groot::RequestOptionsPb* BatchWriteRequest::mutable_request_options() {
  ::gs::rpc::groot::RequestOptionsPb* _msg = _internal_mutable_request_options();
  // @@protoc_insertion_point(field_mutable:gs.rpc.groot.BatchWriteRequest.request_options)
  return _msg;
}
inline void BatchWriteRequest::set_allocated_request_options(::gs::rpc::groot::RequestOptionsPb* request_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.request_options_);
  }
  if (request_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(request_options));
    if (message_arena != submessage_arena) {
      request_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request_options, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.request_options_ = request_options;
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.groot.BatchWriteRequest.request_options)
}

// -------------------------------------------------------------------

// BatchWriteResponse

// int64 snapshot_id = 1;
inline void BatchWriteResponse::clear_snapshot_id() {
  _impl_.snapshot_id_ = int64_t{0};
}
inline int64_t BatchWriteResponse::_internal_snapshot_id() const {
  return _impl_.snapshot_id_;
}
inline int64_t BatchWriteResponse::snapshot_id() const {
  // @@protoc_insertion_point(field_get:gs.rpc.groot.BatchWriteResponse.snapshot_id)
  return _internal_snapshot_id();
}
inline void BatchWriteResponse::_internal_set_snapshot_id(int64_t value) {
  
  _impl_.snapshot_id_ = value;
}
inline void BatchWriteResponse::set_snapshot_id(int64_t value) {
  _internal_set_snapshot_id(value);
  // @@protoc_insertion_point(field_set:gs.rpc.groot.BatchWriteResponse.snapshot_id)
}

// -------------------------------------------------------------------

// RemoteFlushRequest

// int64 snapshot_id = 1;
inline void RemoteFlushRequest::clear_snapshot_id() {
  _impl_.snapshot_id_ = int64_t{0};
}
inline int64_t RemoteFlushRequest::_internal_snapshot_id() const {
  return _impl_.snapshot_id_;
}
inline int64_t RemoteFlushRequest::snapshot_id() const {
  // @@protoc_insertion_point(field_get:gs.rpc.groot.RemoteFlushRequest.snapshot_id)
  return _internal_snapshot_id();
}
inline void RemoteFlushRequest::_internal_set_snapshot_id(int64_t value) {
  
  _impl_.snapshot_id_ = value;
}
inline void RemoteFlushRequest::set_snapshot_id(int64_t value) {
  _internal_set_snapshot_id(value);
  // @@protoc_insertion_point(field_set:gs.rpc.groot.RemoteFlushRequest.snapshot_id)
}

// int64 wait_time_ms = 2;
inline void RemoteFlushRequest::clear_wait_time_ms() {
  _impl_.wait_time_ms_ = int64_t{0};
}
inline int64_t RemoteFlushRequest::_internal_wait_time_ms() const {
  return _impl_.wait_time_ms_;
}
inline int64_t RemoteFlushRequest::wait_time_ms() const {
  // @@protoc_insertion_point(field_get:gs.rpc.groot.RemoteFlushRequest.wait_time_ms)
  return _internal_wait_time_ms();
}
inline void RemoteFlushRequest::_internal_set_wait_time_ms(int64_t value) {
  
  _impl_.wait_time_ms_ = value;
}
inline void RemoteFlushRequest::set_wait_time_ms(int64_t value) {
  _internal_set_wait_time_ms(value);
  // @@protoc_insertion_point(field_set:gs.rpc.groot.RemoteFlushRequest.wait_time_ms)
}

// -------------------------------------------------------------------

// RemoteFlushResponse

// bool success = 1;
inline void RemoteFlushResponse::clear_success() {
  _impl_.success_ = false;
}
inline bool RemoteFlushResponse::_internal_success() const {
  return _impl_.success_;
}
inline bool RemoteFlushResponse::success() const {
  // @@protoc_insertion_point(field_get:gs.rpc.groot.RemoteFlushResponse.success)
  return _internal_success();
}
inline void RemoteFlushResponse::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void RemoteFlushResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:gs.rpc.groot.RemoteFlushResponse.success)
}

// -------------------------------------------------------------------

// WriteRequestPb

// .gs.rpc.groot.WriteTypePb write_type = 1;
inline void WriteRequestPb::clear_write_type() {
  _impl_.write_type_ = 0;
}
inline ::gs::rpc::groot::WriteTypePb WriteRequestPb::_internal_write_type() const {
  return static_cast< ::gs::rpc::groot::WriteTypePb >(_impl_.write_type_);
}
inline ::gs::rpc::groot::WriteTypePb WriteRequestPb::write_type() const {
  // @@protoc_insertion_point(field_get:gs.rpc.groot.WriteRequestPb.write_type)
  return _internal_write_type();
}
inline void WriteRequestPb::_internal_set_write_type(::gs::rpc::groot::WriteTypePb value) {
  
  _impl_.write_type_ = value;
}
inline void WriteRequestPb::set_write_type(::gs::rpc::groot::WriteTypePb value) {
  _internal_set_write_type(value);
  // @@protoc_insertion_point(field_set:gs.rpc.groot.WriteRequestPb.write_type)
}

// .gs.rpc.groot.DataRecordPb data_record = 2;
inline bool WriteRequestPb::_internal_has_data_record() const {
  return this != internal_default_instance() && _impl_.data_record_ != nullptr;
}
inline bool WriteRequestPb::has_data_record() const {
  return _internal_has_data_record();
}
inline void WriteRequestPb::clear_data_record() {
  if (GetArenaForAllocation() == nullptr && _impl_.data_record_ != nullptr) {
    delete _impl_.data_record_;
  }
  _impl_.data_record_ = nullptr;
}
inline const ::gs::rpc::groot::DataRecordPb& WriteRequestPb::_internal_data_record() const {
  const ::gs::rpc::groot::DataRecordPb* p = _impl_.data_record_;
  return p != nullptr ? *p : reinterpret_cast<const ::gs::rpc::groot::DataRecordPb&>(
      ::gs::rpc::groot::_DataRecordPb_default_instance_);
}
inline const ::gs::rpc::groot::DataRecordPb& WriteRequestPb::data_record() const {
  // @@protoc_insertion_point(field_get:gs.rpc.groot.WriteRequestPb.data_record)
  return _internal_data_record();
}
inline void WriteRequestPb::unsafe_arena_set_allocated_data_record(
    ::gs::rpc::groot::DataRecordPb* data_record) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_record_);
  }
  _impl_.data_record_ = data_record;
  if (data_record) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gs.rpc.groot.WriteRequestPb.data_record)
}
inline ::gs::rpc::groot::DataRecordPb* WriteRequestPb::release_data_record() {
  
  ::gs::rpc::groot::DataRecordPb* temp = _impl_.data_record_;
  _impl_.data_record_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::gs::rpc::groot::DataRecordPb* WriteRequestPb::unsafe_arena_release_data_record() {
  // @@protoc_insertion_point(field_release:gs.rpc.groot.WriteRequestPb.data_record)
  
  ::gs::rpc::groot::DataRecordPb* temp = _impl_.data_record_;
  _impl_.data_record_ = nullptr;
  return temp;
}
inline ::gs::rpc::groot::DataRecordPb* WriteRequestPb::_internal_mutable_data_record() {
  
  if (_impl_.data_record_ == nullptr) {
    auto* p = CreateMaybeMessage<::gs::rpc::groot::DataRecordPb>(GetArenaForAllocation());
    _impl_.data_record_ = p;
  }
  return _impl_.data_record_;
}
inline ::gs::rpc::groot::DataRecordPb* WriteRequestPb::mutable_data_record() {
  ::gs::rpc::groot::DataRecordPb* _msg = _internal_mutable_data_record();
  // @@protoc_insertion_point(field_mutable:gs.rpc.groot.WriteRequestPb.data_record)
  return _msg;
}
inline void WriteRequestPb::set_allocated_data_record(::gs::rpc::groot::DataRecordPb* data_record) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.data_record_;
  }
  if (data_record) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(data_record);
    if (message_arena != submessage_arena) {
      data_record = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data_record, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.data_record_ = data_record;
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.groot.WriteRequestPb.data_record)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// DataRecordPb

// .gs.rpc.groot.VertexRecordKeyPb vertex_record_key = 1;
inline bool DataRecordPb::_internal_has_vertex_record_key() const {
  return record_key_case() == kVertexRecordKey;
}
inline bool DataRecordPb::has_vertex_record_key() const {
  return _internal_has_vertex_record_key();
}
inline void DataRecordPb::set_has_vertex_record_key() {
  _impl_._oneof_case_[0] = kVertexRecordKey;
}
inline void DataRecordPb::clear_vertex_record_key() {
  if (_internal_has_vertex_record_key()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.record_key_.vertex_record_key_;
    }
    clear_has_record_key();
  }
}
inline ::gs::rpc::groot::VertexRecordKeyPb* DataRecordPb::release_vertex_record_key() {
  // @@protoc_insertion_point(field_release:gs.rpc.groot.DataRecordPb.vertex_record_key)
  if (_internal_has_vertex_record_key()) {
    clear_has_record_key();
    ::gs::rpc::groot::VertexRecordKeyPb* temp = _impl_.record_key_.vertex_record_key_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.record_key_.vertex_record_key_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::gs::rpc::groot::VertexRecordKeyPb& DataRecordPb::_internal_vertex_record_key() const {
  return _internal_has_vertex_record_key()
      ? *_impl_.record_key_.vertex_record_key_
      : reinterpret_cast< ::gs::rpc::groot::VertexRecordKeyPb&>(::gs::rpc::groot::_VertexRecordKeyPb_default_instance_);
}
inline const ::gs::rpc::groot::VertexRecordKeyPb& DataRecordPb::vertex_record_key() const {
  // @@protoc_insertion_point(field_get:gs.rpc.groot.DataRecordPb.vertex_record_key)
  return _internal_vertex_record_key();
}
inline ::gs::rpc::groot::VertexRecordKeyPb* DataRecordPb::unsafe_arena_release_vertex_record_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:gs.rpc.groot.DataRecordPb.vertex_record_key)
  if (_internal_has_vertex_record_key()) {
    clear_has_record_key();
    ::gs::rpc::groot::VertexRecordKeyPb* temp = _impl_.record_key_.vertex_record_key_;
    _impl_.record_key_.vertex_record_key_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DataRecordPb::unsafe_arena_set_allocated_vertex_record_key(::gs::rpc::groot::VertexRecordKeyPb* vertex_record_key) {
  clear_record_key();
  if (vertex_record_key) {
    set_has_vertex_record_key();
    _impl_.record_key_.vertex_record_key_ = vertex_record_key;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gs.rpc.groot.DataRecordPb.vertex_record_key)
}
inline ::gs::rpc::groot::VertexRecordKeyPb* DataRecordPb::_internal_mutable_vertex_record_key() {
  if (!_internal_has_vertex_record_key()) {
    clear_record_key();
    set_has_vertex_record_key();
    _impl_.record_key_.vertex_record_key_ = CreateMaybeMessage< ::gs::rpc::groot::VertexRecordKeyPb >(GetArenaForAllocation());
  }
  return _impl_.record_key_.vertex_record_key_;
}
inline ::gs::rpc::groot::VertexRecordKeyPb* DataRecordPb::mutable_vertex_record_key() {
  ::gs::rpc::groot::VertexRecordKeyPb* _msg = _internal_mutable_vertex_record_key();
  // @@protoc_insertion_point(field_mutable:gs.rpc.groot.DataRecordPb.vertex_record_key)
  return _msg;
}

// .gs.rpc.groot.EdgeRecordKeyPb edge_record_key = 2;
inline bool DataRecordPb::_internal_has_edge_record_key() const {
  return record_key_case() == kEdgeRecordKey;
}
inline bool DataRecordPb::has_edge_record_key() const {
  return _internal_has_edge_record_key();
}
inline void DataRecordPb::set_has_edge_record_key() {
  _impl_._oneof_case_[0] = kEdgeRecordKey;
}
inline void DataRecordPb::clear_edge_record_key() {
  if (_internal_has_edge_record_key()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.record_key_.edge_record_key_;
    }
    clear_has_record_key();
  }
}
inline ::gs::rpc::groot::EdgeRecordKeyPb* DataRecordPb::release_edge_record_key() {
  // @@protoc_insertion_point(field_release:gs.rpc.groot.DataRecordPb.edge_record_key)
  if (_internal_has_edge_record_key()) {
    clear_has_record_key();
    ::gs::rpc::groot::EdgeRecordKeyPb* temp = _impl_.record_key_.edge_record_key_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.record_key_.edge_record_key_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::gs::rpc::groot::EdgeRecordKeyPb& DataRecordPb::_internal_edge_record_key() const {
  return _internal_has_edge_record_key()
      ? *_impl_.record_key_.edge_record_key_
      : reinterpret_cast< ::gs::rpc::groot::EdgeRecordKeyPb&>(::gs::rpc::groot::_EdgeRecordKeyPb_default_instance_);
}
inline const ::gs::rpc::groot::EdgeRecordKeyPb& DataRecordPb::edge_record_key() const {
  // @@protoc_insertion_point(field_get:gs.rpc.groot.DataRecordPb.edge_record_key)
  return _internal_edge_record_key();
}
inline ::gs::rpc::groot::EdgeRecordKeyPb* DataRecordPb::unsafe_arena_release_edge_record_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:gs.rpc.groot.DataRecordPb.edge_record_key)
  if (_internal_has_edge_record_key()) {
    clear_has_record_key();
    ::gs::rpc::groot::EdgeRecordKeyPb* temp = _impl_.record_key_.edge_record_key_;
    _impl_.record_key_.edge_record_key_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DataRecordPb::unsafe_arena_set_allocated_edge_record_key(::gs::rpc::groot::EdgeRecordKeyPb* edge_record_key) {
  clear_record_key();
  if (edge_record_key) {
    set_has_edge_record_key();
    _impl_.record_key_.edge_record_key_ = edge_record_key;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gs.rpc.groot.DataRecordPb.edge_record_key)
}
inline ::gs::rpc::groot::EdgeRecordKeyPb* DataRecordPb::_internal_mutable_edge_record_key() {
  if (!_internal_has_edge_record_key()) {
    clear_record_key();
    set_has_edge_record_key();
    _impl_.record_key_.edge_record_key_ = CreateMaybeMessage< ::gs::rpc::groot::EdgeRecordKeyPb >(GetArenaForAllocation());
  }
  return _impl_.record_key_.edge_record_key_;
}
inline ::gs::rpc::groot::EdgeRecordKeyPb* DataRecordPb::mutable_edge_record_key() {
  ::gs::rpc::groot::EdgeRecordKeyPb* _msg = _internal_mutable_edge_record_key();
  // @@protoc_insertion_point(field_mutable:gs.rpc.groot.DataRecordPb.edge_record_key)
  return _msg;
}

// map<string, string> properties = 3;
inline int DataRecordPb::_internal_properties_size() const {
  return _impl_.properties_.size();
}
inline int DataRecordPb::properties_size() const {
  return _internal_properties_size();
}
inline void DataRecordPb::clear_properties() {
  _impl_.properties_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
DataRecordPb::_internal_properties() const {
  return _impl_.properties_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
DataRecordPb::properties() const {
  // @@protoc_insertion_point(field_map:gs.rpc.groot.DataRecordPb.properties)
  return _internal_properties();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
DataRecordPb::_internal_mutable_properties() {
  return _impl_.properties_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
DataRecordPb::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_map:gs.rpc.groot.DataRecordPb.properties)
  return _internal_mutable_properties();
}

inline bool DataRecordPb::has_record_key() const {
  return record_key_case() != RECORD_KEY_NOT_SET;
}
inline void DataRecordPb::clear_has_record_key() {
  _impl_._oneof_case_[0] = RECORD_KEY_NOT_SET;
}
inline DataRecordPb::RecordKeyCase DataRecordPb::record_key_case() const {
  return DataRecordPb::RecordKeyCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// VertexRecordKeyPb

// string label = 1;
inline void VertexRecordKeyPb::clear_label() {
  _impl_.label_.ClearToEmpty();
}
inline const std::string& VertexRecordKeyPb::label() const {
  // @@protoc_insertion_point(field_get:gs.rpc.groot.VertexRecordKeyPb.label)
  return _internal_label();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VertexRecordKeyPb::set_label(ArgT0&& arg0, ArgT... args) {
 
 _impl_.label_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gs.rpc.groot.VertexRecordKeyPb.label)
}
inline std::string* VertexRecordKeyPb::mutable_label() {
  std::string* _s = _internal_mutable_label();
  // @@protoc_insertion_point(field_mutable:gs.rpc.groot.VertexRecordKeyPb.label)
  return _s;
}
inline const std::string& VertexRecordKeyPb::_internal_label() const {
  return _impl_.label_.Get();
}
inline void VertexRecordKeyPb::_internal_set_label(const std::string& value) {
  
  _impl_.label_.Set(value, GetArenaForAllocation());
}
inline std::string* VertexRecordKeyPb::_internal_mutable_label() {
  
  return _impl_.label_.Mutable(GetArenaForAllocation());
}
inline std::string* VertexRecordKeyPb::release_label() {
  // @@protoc_insertion_point(field_release:gs.rpc.groot.VertexRecordKeyPb.label)
  return _impl_.label_.Release();
}
inline void VertexRecordKeyPb::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    
  } else {
    
  }
  _impl_.label_.SetAllocated(label, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.label_.IsDefault()) {
    _impl_.label_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.groot.VertexRecordKeyPb.label)
}

// map<string, string> pk_properties = 2;
inline int VertexRecordKeyPb::_internal_pk_properties_size() const {
  return _impl_.pk_properties_.size();
}
inline int VertexRecordKeyPb::pk_properties_size() const {
  return _internal_pk_properties_size();
}
inline void VertexRecordKeyPb::clear_pk_properties() {
  _impl_.pk_properties_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
VertexRecordKeyPb::_internal_pk_properties() const {
  return _impl_.pk_properties_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
VertexRecordKeyPb::pk_properties() const {
  // @@protoc_insertion_point(field_map:gs.rpc.groot.VertexRecordKeyPb.pk_properties)
  return _internal_pk_properties();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
VertexRecordKeyPb::_internal_mutable_pk_properties() {
  return _impl_.pk_properties_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
VertexRecordKeyPb::mutable_pk_properties() {
  // @@protoc_insertion_point(field_mutable_map:gs.rpc.groot.VertexRecordKeyPb.pk_properties)
  return _internal_mutable_pk_properties();
}

// -------------------------------------------------------------------

// EdgeRecordKeyPb

// string label = 1;
inline void EdgeRecordKeyPb::clear_label() {
  _impl_.label_.ClearToEmpty();
}
inline const std::string& EdgeRecordKeyPb::label() const {
  // @@protoc_insertion_point(field_get:gs.rpc.groot.EdgeRecordKeyPb.label)
  return _internal_label();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EdgeRecordKeyPb::set_label(ArgT0&& arg0, ArgT... args) {
 
 _impl_.label_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gs.rpc.groot.EdgeRecordKeyPb.label)
}
inline std::string* EdgeRecordKeyPb::mutable_label() {
  std::string* _s = _internal_mutable_label();
  // @@protoc_insertion_point(field_mutable:gs.rpc.groot.EdgeRecordKeyPb.label)
  return _s;
}
inline const std::string& EdgeRecordKeyPb::_internal_label() const {
  return _impl_.label_.Get();
}
inline void EdgeRecordKeyPb::_internal_set_label(const std::string& value) {
  
  _impl_.label_.Set(value, GetArenaForAllocation());
}
inline std::string* EdgeRecordKeyPb::_internal_mutable_label() {
  
  return _impl_.label_.Mutable(GetArenaForAllocation());
}
inline std::string* EdgeRecordKeyPb::release_label() {
  // @@protoc_insertion_point(field_release:gs.rpc.groot.EdgeRecordKeyPb.label)
  return _impl_.label_.Release();
}
inline void EdgeRecordKeyPb::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    
  } else {
    
  }
  _impl_.label_.SetAllocated(label, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.label_.IsDefault()) {
    _impl_.label_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.groot.EdgeRecordKeyPb.label)
}

// .gs.rpc.groot.VertexRecordKeyPb src_vertex_key = 2;
inline bool EdgeRecordKeyPb::_internal_has_src_vertex_key() const {
  return this != internal_default_instance() && _impl_.src_vertex_key_ != nullptr;
}
inline bool EdgeRecordKeyPb::has_src_vertex_key() const {
  return _internal_has_src_vertex_key();
}
inline void EdgeRecordKeyPb::clear_src_vertex_key() {
  if (GetArenaForAllocation() == nullptr && _impl_.src_vertex_key_ != nullptr) {
    delete _impl_.src_vertex_key_;
  }
  _impl_.src_vertex_key_ = nullptr;
}
inline const ::gs::rpc::groot::VertexRecordKeyPb& EdgeRecordKeyPb::_internal_src_vertex_key() const {
  const ::gs::rpc::groot::VertexRecordKeyPb* p = _impl_.src_vertex_key_;
  return p != nullptr ? *p : reinterpret_cast<const ::gs::rpc::groot::VertexRecordKeyPb&>(
      ::gs::rpc::groot::_VertexRecordKeyPb_default_instance_);
}
inline const ::gs::rpc::groot::VertexRecordKeyPb& EdgeRecordKeyPb::src_vertex_key() const {
  // @@protoc_insertion_point(field_get:gs.rpc.groot.EdgeRecordKeyPb.src_vertex_key)
  return _internal_src_vertex_key();
}
inline void EdgeRecordKeyPb::unsafe_arena_set_allocated_src_vertex_key(
    ::gs::rpc::groot::VertexRecordKeyPb* src_vertex_key) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.src_vertex_key_);
  }
  _impl_.src_vertex_key_ = src_vertex_key;
  if (src_vertex_key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gs.rpc.groot.EdgeRecordKeyPb.src_vertex_key)
}
inline ::gs::rpc::groot::VertexRecordKeyPb* EdgeRecordKeyPb::release_src_vertex_key() {
  
  ::gs::rpc::groot::VertexRecordKeyPb* temp = _impl_.src_vertex_key_;
  _impl_.src_vertex_key_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::gs::rpc::groot::VertexRecordKeyPb* EdgeRecordKeyPb::unsafe_arena_release_src_vertex_key() {
  // @@protoc_insertion_point(field_release:gs.rpc.groot.EdgeRecordKeyPb.src_vertex_key)
  
  ::gs::rpc::groot::VertexRecordKeyPb* temp = _impl_.src_vertex_key_;
  _impl_.src_vertex_key_ = nullptr;
  return temp;
}
inline ::gs::rpc::groot::VertexRecordKeyPb* EdgeRecordKeyPb::_internal_mutable_src_vertex_key() {
  
  if (_impl_.src_vertex_key_ == nullptr) {
    auto* p = CreateMaybeMessage<::gs::rpc::groot::VertexRecordKeyPb>(GetArenaForAllocation());
    _impl_.src_vertex_key_ = p;
  }
  return _impl_.src_vertex_key_;
}
inline ::gs::rpc::groot::VertexRecordKeyPb* EdgeRecordKeyPb::mutable_src_vertex_key() {
  ::gs::rpc::groot::VertexRecordKeyPb* _msg = _internal_mutable_src_vertex_key();
  // @@protoc_insertion_point(field_mutable:gs.rpc.groot.EdgeRecordKeyPb.src_vertex_key)
  return _msg;
}
inline void EdgeRecordKeyPb::set_allocated_src_vertex_key(::gs::rpc::groot::VertexRecordKeyPb* src_vertex_key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.src_vertex_key_;
  }
  if (src_vertex_key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(src_vertex_key);
    if (message_arena != submessage_arena) {
      src_vertex_key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, src_vertex_key, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.src_vertex_key_ = src_vertex_key;
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.groot.EdgeRecordKeyPb.src_vertex_key)
}

// .gs.rpc.groot.VertexRecordKeyPb dst_vertex_key = 3;
inline bool EdgeRecordKeyPb::_internal_has_dst_vertex_key() const {
  return this != internal_default_instance() && _impl_.dst_vertex_key_ != nullptr;
}
inline bool EdgeRecordKeyPb::has_dst_vertex_key() const {
  return _internal_has_dst_vertex_key();
}
inline void EdgeRecordKeyPb::clear_dst_vertex_key() {
  if (GetArenaForAllocation() == nullptr && _impl_.dst_vertex_key_ != nullptr) {
    delete _impl_.dst_vertex_key_;
  }
  _impl_.dst_vertex_key_ = nullptr;
}
inline const ::gs::rpc::groot::VertexRecordKeyPb& EdgeRecordKeyPb::_internal_dst_vertex_key() const {
  const ::gs::rpc::groot::VertexRecordKeyPb* p = _impl_.dst_vertex_key_;
  return p != nullptr ? *p : reinterpret_cast<const ::gs::rpc::groot::VertexRecordKeyPb&>(
      ::gs::rpc::groot::_VertexRecordKeyPb_default_instance_);
}
inline const ::gs::rpc::groot::VertexRecordKeyPb& EdgeRecordKeyPb::dst_vertex_key() const {
  // @@protoc_insertion_point(field_get:gs.rpc.groot.EdgeRecordKeyPb.dst_vertex_key)
  return _internal_dst_vertex_key();
}
inline void EdgeRecordKeyPb::unsafe_arena_set_allocated_dst_vertex_key(
    ::gs::rpc::groot::VertexRecordKeyPb* dst_vertex_key) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dst_vertex_key_);
  }
  _impl_.dst_vertex_key_ = dst_vertex_key;
  if (dst_vertex_key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gs.rpc.groot.EdgeRecordKeyPb.dst_vertex_key)
}
inline ::gs::rpc::groot::VertexRecordKeyPb* EdgeRecordKeyPb::release_dst_vertex_key() {
  
  ::gs::rpc::groot::VertexRecordKeyPb* temp = _impl_.dst_vertex_key_;
  _impl_.dst_vertex_key_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::gs::rpc::groot::VertexRecordKeyPb* EdgeRecordKeyPb::unsafe_arena_release_dst_vertex_key() {
  // @@protoc_insertion_point(field_release:gs.rpc.groot.EdgeRecordKeyPb.dst_vertex_key)
  
  ::gs::rpc::groot::VertexRecordKeyPb* temp = _impl_.dst_vertex_key_;
  _impl_.dst_vertex_key_ = nullptr;
  return temp;
}
inline ::gs::rpc::groot::VertexRecordKeyPb* EdgeRecordKeyPb::_internal_mutable_dst_vertex_key() {
  
  if (_impl_.dst_vertex_key_ == nullptr) {
    auto* p = CreateMaybeMessage<::gs::rpc::groot::VertexRecordKeyPb>(GetArenaForAllocation());
    _impl_.dst_vertex_key_ = p;
  }
  return _impl_.dst_vertex_key_;
}
inline ::gs::rpc::groot::VertexRecordKeyPb* EdgeRecordKeyPb::mutable_dst_vertex_key() {
  ::gs::rpc::groot::VertexRecordKeyPb* _msg = _internal_mutable_dst_vertex_key();
  // @@protoc_insertion_point(field_mutable:gs.rpc.groot.EdgeRecordKeyPb.dst_vertex_key)
  return _msg;
}
inline void EdgeRecordKeyPb::set_allocated_dst_vertex_key(::gs::rpc::groot::VertexRecordKeyPb* dst_vertex_key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.dst_vertex_key_;
  }
  if (dst_vertex_key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(dst_vertex_key);
    if (message_arena != submessage_arena) {
      dst_vertex_key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dst_vertex_key, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.dst_vertex_key_ = dst_vertex_key;
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.groot.EdgeRecordKeyPb.dst_vertex_key)
}

// int64 inner_id = 4;
inline void EdgeRecordKeyPb::clear_inner_id() {
  _impl_.inner_id_ = int64_t{0};
}
inline int64_t EdgeRecordKeyPb::_internal_inner_id() const {
  return _impl_.inner_id_;
}
inline int64_t EdgeRecordKeyPb::inner_id() const {
  // @@protoc_insertion_point(field_get:gs.rpc.groot.EdgeRecordKeyPb.inner_id)
  return _internal_inner_id();
}
inline void EdgeRecordKeyPb::_internal_set_inner_id(int64_t value) {
  
  _impl_.inner_id_ = value;
}
inline void EdgeRecordKeyPb::set_inner_id(int64_t value) {
  _internal_set_inner_id(value);
  // @@protoc_insertion_point(field_set:gs.rpc.groot.EdgeRecordKeyPb.inner_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace groot
}  // namespace rpc
}  // namespace gs

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::gs::rpc::groot::WriteTypePb> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gs::rpc::groot::WriteTypePb>() {
  return ::gs::rpc::groot::WriteTypePb_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_write_5fservice_2eproto
