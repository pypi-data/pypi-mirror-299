// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: request_option.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_request_5foption_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_request_5foption_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_request_5foption_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_request_5foption_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_request_5foption_2eproto;
namespace gs {
namespace rpc {
namespace groot {
class AttributeValue;
struct AttributeValueDefaultTypeInternal;
extern AttributeValueDefaultTypeInternal _AttributeValue_default_instance_;
class RequestOptionsPb;
struct RequestOptionsPbDefaultTypeInternal;
extern RequestOptionsPbDefaultTypeInternal _RequestOptionsPb_default_instance_;
class RequestOptionsPb_AttributesEntry_DoNotUse;
struct RequestOptionsPb_AttributesEntry_DoNotUseDefaultTypeInternal;
extern RequestOptionsPb_AttributesEntry_DoNotUseDefaultTypeInternal _RequestOptionsPb_AttributesEntry_DoNotUse_default_instance_;
}  // namespace groot
}  // namespace rpc
}  // namespace gs
PROTOBUF_NAMESPACE_OPEN
template<> ::gs::rpc::groot::AttributeValue* Arena::CreateMaybeMessage<::gs::rpc::groot::AttributeValue>(Arena*);
template<> ::gs::rpc::groot::RequestOptionsPb* Arena::CreateMaybeMessage<::gs::rpc::groot::RequestOptionsPb>(Arena*);
template<> ::gs::rpc::groot::RequestOptionsPb_AttributesEntry_DoNotUse* Arena::CreateMaybeMessage<::gs::rpc::groot::RequestOptionsPb_AttributesEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace gs {
namespace rpc {
namespace groot {

// ===================================================================

class RequestOptionsPb_AttributesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<RequestOptionsPb_AttributesEntry_DoNotUse, 
    std::string, ::gs::rpc::groot::AttributeValue,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<RequestOptionsPb_AttributesEntry_DoNotUse, 
    std::string, ::gs::rpc::groot::AttributeValue,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  RequestOptionsPb_AttributesEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR RequestOptionsPb_AttributesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit RequestOptionsPb_AttributesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const RequestOptionsPb_AttributesEntry_DoNotUse& other);
  static const RequestOptionsPb_AttributesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const RequestOptionsPb_AttributesEntry_DoNotUse*>(&_RequestOptionsPb_AttributesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "gs.rpc.groot.RequestOptionsPb.AttributesEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_request_5foption_2eproto;
};

// -------------------------------------------------------------------

class RequestOptionsPb final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gs.rpc.groot.RequestOptionsPb) */ {
 public:
  inline RequestOptionsPb() : RequestOptionsPb(nullptr) {}
  ~RequestOptionsPb() override;
  explicit PROTOBUF_CONSTEXPR RequestOptionsPb(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestOptionsPb(const RequestOptionsPb& from);
  RequestOptionsPb(RequestOptionsPb&& from) noexcept
    : RequestOptionsPb() {
    *this = ::std::move(from);
  }

  inline RequestOptionsPb& operator=(const RequestOptionsPb& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestOptionsPb& operator=(RequestOptionsPb&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestOptionsPb& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestOptionsPb* internal_default_instance() {
    return reinterpret_cast<const RequestOptionsPb*>(
               &_RequestOptionsPb_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RequestOptionsPb& a, RequestOptionsPb& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestOptionsPb* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestOptionsPb* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestOptionsPb* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestOptionsPb>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestOptionsPb& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RequestOptionsPb& from) {
    RequestOptionsPb::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestOptionsPb* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gs.rpc.groot.RequestOptionsPb";
  }
  protected:
  explicit RequestOptionsPb(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kAttributesFieldNumber = 1,
    kTraceIdFieldNumber = 2,
  };
  // map<string, .gs.rpc.groot.AttributeValue> attributes = 1;
  int attributes_size() const;
  private:
  int _internal_attributes_size() const;
  public:
  void clear_attributes();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::gs::rpc::groot::AttributeValue >&
      _internal_attributes() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::gs::rpc::groot::AttributeValue >*
      _internal_mutable_attributes();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::gs::rpc::groot::AttributeValue >&
      attributes() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::gs::rpc::groot::AttributeValue >*
      mutable_attributes();

  // string traceId = 2;
  void clear_traceid();
  const std::string& traceid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_traceid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_traceid();
  PROTOBUF_NODISCARD std::string* release_traceid();
  void set_allocated_traceid(std::string* traceid);
  private:
  const std::string& _internal_traceid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_traceid(const std::string& value);
  std::string* _internal_mutable_traceid();
  public:

  // @@protoc_insertion_point(class_scope:gs.rpc.groot.RequestOptionsPb)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        RequestOptionsPb_AttributesEntry_DoNotUse,
        std::string, ::gs::rpc::groot::AttributeValue,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> attributes_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr traceid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_request_5foption_2eproto;
};
// -------------------------------------------------------------------

class AttributeValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gs.rpc.groot.AttributeValue) */ {
 public:
  inline AttributeValue() : AttributeValue(nullptr) {}
  ~AttributeValue() override;
  explicit PROTOBUF_CONSTEXPR AttributeValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AttributeValue(const AttributeValue& from);
  AttributeValue(AttributeValue&& from) noexcept
    : AttributeValue() {
    *this = ::std::move(from);
  }

  inline AttributeValue& operator=(const AttributeValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline AttributeValue& operator=(AttributeValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AttributeValue& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kStringValue = 1,
    kIntValue = 2,
    kLongValue = 3,
    kDoubleValue = 4,
    VALUE_NOT_SET = 0,
  };

  static inline const AttributeValue* internal_default_instance() {
    return reinterpret_cast<const AttributeValue*>(
               &_AttributeValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AttributeValue& a, AttributeValue& b) {
    a.Swap(&b);
  }
  inline void Swap(AttributeValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AttributeValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AttributeValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AttributeValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AttributeValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AttributeValue& from) {
    AttributeValue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AttributeValue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gs.rpc.groot.AttributeValue";
  }
  protected:
  explicit AttributeValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStringValueFieldNumber = 1,
    kIntValueFieldNumber = 2,
    kLongValueFieldNumber = 3,
    kDoubleValueFieldNumber = 4,
  };
  // string string_value = 1;
  bool has_string_value() const;
  private:
  bool _internal_has_string_value() const;
  public:
  void clear_string_value();
  const std::string& string_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_string_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_string_value();
  PROTOBUF_NODISCARD std::string* release_string_value();
  void set_allocated_string_value(std::string* string_value);
  private:
  const std::string& _internal_string_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string_value(const std::string& value);
  std::string* _internal_mutable_string_value();
  public:

  // int32 int_value = 2;
  bool has_int_value() const;
  private:
  bool _internal_has_int_value() const;
  public:
  void clear_int_value();
  int32_t int_value() const;
  void set_int_value(int32_t value);
  private:
  int32_t _internal_int_value() const;
  void _internal_set_int_value(int32_t value);
  public:

  // int64 long_value = 3;
  bool has_long_value() const;
  private:
  bool _internal_has_long_value() const;
  public:
  void clear_long_value();
  int64_t long_value() const;
  void set_long_value(int64_t value);
  private:
  int64_t _internal_long_value() const;
  void _internal_set_long_value(int64_t value);
  public:

  // double double_value = 4;
  bool has_double_value() const;
  private:
  bool _internal_has_double_value() const;
  public:
  void clear_double_value();
  double double_value() const;
  void set_double_value(double value);
  private:
  double _internal_double_value() const;
  void _internal_set_double_value(double value);
  public:

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:gs.rpc.groot.AttributeValue)
 private:
  class _Internal;
  void set_has_string_value();
  void set_has_int_value();
  void set_has_long_value();
  void set_has_double_value();

  inline bool has_value() const;
  inline void clear_has_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union ValueUnion {
      constexpr ValueUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_value_;
      int32_t int_value_;
      int64_t long_value_;
      double double_value_;
    } value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_request_5foption_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// RequestOptionsPb

// map<string, .gs.rpc.groot.AttributeValue> attributes = 1;
inline int RequestOptionsPb::_internal_attributes_size() const {
  return _impl_.attributes_.size();
}
inline int RequestOptionsPb::attributes_size() const {
  return _internal_attributes_size();
}
inline void RequestOptionsPb::clear_attributes() {
  _impl_.attributes_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::gs::rpc::groot::AttributeValue >&
RequestOptionsPb::_internal_attributes() const {
  return _impl_.attributes_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::gs::rpc::groot::AttributeValue >&
RequestOptionsPb::attributes() const {
  // @@protoc_insertion_point(field_map:gs.rpc.groot.RequestOptionsPb.attributes)
  return _internal_attributes();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::gs::rpc::groot::AttributeValue >*
RequestOptionsPb::_internal_mutable_attributes() {
  return _impl_.attributes_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::gs::rpc::groot::AttributeValue >*
RequestOptionsPb::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_map:gs.rpc.groot.RequestOptionsPb.attributes)
  return _internal_mutable_attributes();
}

// string traceId = 2;
inline void RequestOptionsPb::clear_traceid() {
  _impl_.traceid_.ClearToEmpty();
}
inline const std::string& RequestOptionsPb::traceid() const {
  // @@protoc_insertion_point(field_get:gs.rpc.groot.RequestOptionsPb.traceId)
  return _internal_traceid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RequestOptionsPb::set_traceid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.traceid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gs.rpc.groot.RequestOptionsPb.traceId)
}
inline std::string* RequestOptionsPb::mutable_traceid() {
  std::string* _s = _internal_mutable_traceid();
  // @@protoc_insertion_point(field_mutable:gs.rpc.groot.RequestOptionsPb.traceId)
  return _s;
}
inline const std::string& RequestOptionsPb::_internal_traceid() const {
  return _impl_.traceid_.Get();
}
inline void RequestOptionsPb::_internal_set_traceid(const std::string& value) {
  
  _impl_.traceid_.Set(value, GetArenaForAllocation());
}
inline std::string* RequestOptionsPb::_internal_mutable_traceid() {
  
  return _impl_.traceid_.Mutable(GetArenaForAllocation());
}
inline std::string* RequestOptionsPb::release_traceid() {
  // @@protoc_insertion_point(field_release:gs.rpc.groot.RequestOptionsPb.traceId)
  return _impl_.traceid_.Release();
}
inline void RequestOptionsPb::set_allocated_traceid(std::string* traceid) {
  if (traceid != nullptr) {
    
  } else {
    
  }
  _impl_.traceid_.SetAllocated(traceid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.traceid_.IsDefault()) {
    _impl_.traceid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.groot.RequestOptionsPb.traceId)
}

// -------------------------------------------------------------------

// AttributeValue

// string string_value = 1;
inline bool AttributeValue::_internal_has_string_value() const {
  return value_case() == kStringValue;
}
inline bool AttributeValue::has_string_value() const {
  return _internal_has_string_value();
}
inline void AttributeValue::set_has_string_value() {
  _impl_._oneof_case_[0] = kStringValue;
}
inline void AttributeValue::clear_string_value() {
  if (_internal_has_string_value()) {
    _impl_.value_.string_value_.Destroy();
    clear_has_value();
  }
}
inline const std::string& AttributeValue::string_value() const {
  // @@protoc_insertion_point(field_get:gs.rpc.groot.AttributeValue.string_value)
  return _internal_string_value();
}
template <typename ArgT0, typename... ArgT>
inline void AttributeValue::set_string_value(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_string_value()) {
    clear_value();
    set_has_string_value();
    _impl_.value_.string_value_.InitDefault();
  }
  _impl_.value_.string_value_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gs.rpc.groot.AttributeValue.string_value)
}
inline std::string* AttributeValue::mutable_string_value() {
  std::string* _s = _internal_mutable_string_value();
  // @@protoc_insertion_point(field_mutable:gs.rpc.groot.AttributeValue.string_value)
  return _s;
}
inline const std::string& AttributeValue::_internal_string_value() const {
  if (_internal_has_string_value()) {
    return _impl_.value_.string_value_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void AttributeValue::_internal_set_string_value(const std::string& value) {
  if (!_internal_has_string_value()) {
    clear_value();
    set_has_string_value();
    _impl_.value_.string_value_.InitDefault();
  }
  _impl_.value_.string_value_.Set(value, GetArenaForAllocation());
}
inline std::string* AttributeValue::_internal_mutable_string_value() {
  if (!_internal_has_string_value()) {
    clear_value();
    set_has_string_value();
    _impl_.value_.string_value_.InitDefault();
  }
  return _impl_.value_.string_value_.Mutable(      GetArenaForAllocation());
}
inline std::string* AttributeValue::release_string_value() {
  // @@protoc_insertion_point(field_release:gs.rpc.groot.AttributeValue.string_value)
  if (_internal_has_string_value()) {
    clear_has_value();
    return _impl_.value_.string_value_.Release();
  } else {
    return nullptr;
  }
}
inline void AttributeValue::set_allocated_string_value(std::string* string_value) {
  if (has_value()) {
    clear_value();
  }
  if (string_value != nullptr) {
    set_has_string_value();
    _impl_.value_.string_value_.InitAllocated(string_value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.groot.AttributeValue.string_value)
}

// int32 int_value = 2;
inline bool AttributeValue::_internal_has_int_value() const {
  return value_case() == kIntValue;
}
inline bool AttributeValue::has_int_value() const {
  return _internal_has_int_value();
}
inline void AttributeValue::set_has_int_value() {
  _impl_._oneof_case_[0] = kIntValue;
}
inline void AttributeValue::clear_int_value() {
  if (_internal_has_int_value()) {
    _impl_.value_.int_value_ = 0;
    clear_has_value();
  }
}
inline int32_t AttributeValue::_internal_int_value() const {
  if (_internal_has_int_value()) {
    return _impl_.value_.int_value_;
  }
  return 0;
}
inline void AttributeValue::_internal_set_int_value(int32_t value) {
  if (!_internal_has_int_value()) {
    clear_value();
    set_has_int_value();
  }
  _impl_.value_.int_value_ = value;
}
inline int32_t AttributeValue::int_value() const {
  // @@protoc_insertion_point(field_get:gs.rpc.groot.AttributeValue.int_value)
  return _internal_int_value();
}
inline void AttributeValue::set_int_value(int32_t value) {
  _internal_set_int_value(value);
  // @@protoc_insertion_point(field_set:gs.rpc.groot.AttributeValue.int_value)
}

// int64 long_value = 3;
inline bool AttributeValue::_internal_has_long_value() const {
  return value_case() == kLongValue;
}
inline bool AttributeValue::has_long_value() const {
  return _internal_has_long_value();
}
inline void AttributeValue::set_has_long_value() {
  _impl_._oneof_case_[0] = kLongValue;
}
inline void AttributeValue::clear_long_value() {
  if (_internal_has_long_value()) {
    _impl_.value_.long_value_ = int64_t{0};
    clear_has_value();
  }
}
inline int64_t AttributeValue::_internal_long_value() const {
  if (_internal_has_long_value()) {
    return _impl_.value_.long_value_;
  }
  return int64_t{0};
}
inline void AttributeValue::_internal_set_long_value(int64_t value) {
  if (!_internal_has_long_value()) {
    clear_value();
    set_has_long_value();
  }
  _impl_.value_.long_value_ = value;
}
inline int64_t AttributeValue::long_value() const {
  // @@protoc_insertion_point(field_get:gs.rpc.groot.AttributeValue.long_value)
  return _internal_long_value();
}
inline void AttributeValue::set_long_value(int64_t value) {
  _internal_set_long_value(value);
  // @@protoc_insertion_point(field_set:gs.rpc.groot.AttributeValue.long_value)
}

// double double_value = 4;
inline bool AttributeValue::_internal_has_double_value() const {
  return value_case() == kDoubleValue;
}
inline bool AttributeValue::has_double_value() const {
  return _internal_has_double_value();
}
inline void AttributeValue::set_has_double_value() {
  _impl_._oneof_case_[0] = kDoubleValue;
}
inline void AttributeValue::clear_double_value() {
  if (_internal_has_double_value()) {
    _impl_.value_.double_value_ = 0;
    clear_has_value();
  }
}
inline double AttributeValue::_internal_double_value() const {
  if (_internal_has_double_value()) {
    return _impl_.value_.double_value_;
  }
  return 0;
}
inline void AttributeValue::_internal_set_double_value(double value) {
  if (!_internal_has_double_value()) {
    clear_value();
    set_has_double_value();
  }
  _impl_.value_.double_value_ = value;
}
inline double AttributeValue::double_value() const {
  // @@protoc_insertion_point(field_get:gs.rpc.groot.AttributeValue.double_value)
  return _internal_double_value();
}
inline void AttributeValue::set_double_value(double value) {
  _internal_set_double_value(value);
  // @@protoc_insertion_point(field_set:gs.rpc.groot.AttributeValue.double_value)
}

inline bool AttributeValue::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void AttributeValue::clear_has_value() {
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}
inline AttributeValue::ValueCase AttributeValue::value_case() const {
  return AttributeValue::ValueCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace groot
}  // namespace rpc
}  // namespace gs

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_request_5foption_2eproto
