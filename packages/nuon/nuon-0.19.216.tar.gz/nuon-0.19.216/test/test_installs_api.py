# coding: utf-8

"""
    Nuon

    API for managing nuon apps, components, and installs.

    The version of the OpenAPI document: 0.19.15
    Contact: support@nuon.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from nuon.api.installs_api import InstallsApi


class TestInstallsApi(unittest.TestCase):
    """InstallsApi unit test stubs"""

    def setUp(self) -> None:
        self.api = InstallsApi()

    def tearDown(self) -> None:
        pass

    def test_create_install(self) -> None:
        """Test case for create_install

        create an app install
        """
        pass

    def test_create_install_deploy(self) -> None:
        """Test case for create_install_deploy

        deploy a build to an install
        """
        pass

    def test_create_install_inputs(self) -> None:
        """Test case for create_install_inputs

        create install inputs
        """
        pass

    def test_delete_install(self) -> None:
        """Test case for delete_install

        delete an install
        """
        pass

    def test_get_app_installs(self) -> None:
        """Test case for get_app_installs

        get all installs for an app
        """
        pass

    def test_get_current_install_inputs(self) -> None:
        """Test case for get_current_install_inputs

        get an installs current inputs
        """
        pass

    def test_get_install(self) -> None:
        """Test case for get_install

        get an install
        """
        pass

    def test_get_install_component(self) -> None:
        """Test case for get_install_component

        get an install component
        """
        pass

    def test_get_install_component_deploys(self) -> None:
        """Test case for get_install_component_deploys

        get an install components deploys
        """
        pass

    def test_get_install_component_latest_deploy(self) -> None:
        """Test case for get_install_component_latest_deploy

        get the latest deploy for an install component
        """
        pass

    def test_get_install_components(self) -> None:
        """Test case for get_install_components

        get an installs components
        """
        pass

    def test_get_install_deploy(self) -> None:
        """Test case for get_install_deploy

        get an install deploy
        """
        pass

    def test_get_install_deploy_logs(self) -> None:
        """Test case for get_install_deploy_logs

        get install deploy logs
        """
        pass

    def test_get_install_deploy_plan(self) -> None:
        """Test case for get_install_deploy_plan

        get install deploy plan
        """
        pass

    def test_get_install_deploys(self) -> None:
        """Test case for get_install_deploys

        get all deploys to an install
        """
        pass

    def test_get_install_inputs(self) -> None:
        """Test case for get_install_inputs

        get an installs inputs
        """
        pass

    def test_get_install_latest_deploy(self) -> None:
        """Test case for get_install_latest_deploy

        get an install deploy
        """
        pass

    def test_get_install_sandbox_run_logs(self) -> None:
        """Test case for get_install_sandbox_run_logs

        get install sandbox run logs
        """
        pass

    def test_get_install_sandbox_runs(self) -> None:
        """Test case for get_install_sandbox_runs

        get an installs sandbox runs
        """
        pass

    def test_get_org_installs(self) -> None:
        """Test case for get_org_installs

        get all installs for an org
        """
        pass

    def test_installer_create_installer(self) -> None:
        """Test case for installer_create_installer

        create an app install from an installer
        """
        pass

    def test_installer_get_install(self) -> None:
        """Test case for installer_get_install

        get an installer install
        """
        pass

    def test_teardown_install_component(self) -> None:
        """Test case for teardown_install_component

        teardown an install component
        """
        pass

    def test_update_install(self) -> None:
        """Test case for update_install

        update an install
        """
        pass


if __name__ == '__main__':
    unittest.main()
