Metadata-Version: 2.1
Name: bluepyopt
Version: 1.14.16
Summary: Bluebrain Python Optimisation Library (bluepyopt)
Home-page: https://github.com/BlueBrain/BluePyOpt
Author: BlueBrain Project, EPFL
Author-email: werner.vangeit@epfl.ch
License: LGPLv3
Keywords: optimisation,neuroscience,BlueBrainProject
Classifier: Development Status :: 5 - Production/Stable
Classifier: Environment :: Console
Classifier: License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Operating System :: POSIX
Classifier: Topic :: Scientific/Engineering
Classifier: Topic :: Utilities
License-File: LICENSE.txt
License-File: COPYING
License-File: COPYING.lesser
License-File: AUTHORS.txt
Requires-Dist: numpy>=1.6
Requires-Dist: pandas>=0.18
Requires-Dist: deap>=1.3.3
Requires-Dist: efel>=2.13
Requires-Dist: ipyparallel
Requires-Dist: pickleshare>=0.7.3
Requires-Dist: Jinja2>=2.8
Requires-Dist: Pebble>=4.6.0
Requires-Dist: NEURON>=7.8
Provides-Extra: all
Requires-Dist: scoop>=0.7; extra == "all"
Requires-Dist: pyneuroml>=0.5.20; extra == "all"
Requires-Dist: libNeuroML>=0.3.1; extra == "all"
Requires-Dist: LFPy>=2.3; extra == "all"
Requires-Dist: arbor>=0.10; extra == "all"
Provides-Extra: arbor
Requires-Dist: arbor>=0.10; extra == "arbor"
Provides-Extra: lfpy
Requires-Dist: LFPy>=2.3; extra == "lfpy"
Provides-Extra: neuroml
Requires-Dist: pyneuroml>=0.5.20; extra == "neuroml"
Requires-Dist: libNeuroML>=0.3.1; extra == "neuroml"
Provides-Extra: scoop
Requires-Dist: scoop>=0.7; extra == "scoop"
Provides-Extra: tests
Requires-Dist: pyneuroml>=0.5.20; extra == "tests"
Requires-Dist: libNeuroML>=0.3.1; extra == "tests"
Requires-Dist: LFPy>=2.3; extra == "tests"
Requires-Dist: arbor>=0.10; extra == "tests"

The Blue Brain Python Optimisation Library (BluePyOpt) is an extensible framework for data-driven model parameter optimisation that wraps and standardises several existing open-source tools. It simplifies the task of creating and sharing these optimisations, and the associated techniques and knowledge. This is achieved by abstracting the optimisation and evaluation tasks into various reusable and flexible discrete elements according to established best-practices.
