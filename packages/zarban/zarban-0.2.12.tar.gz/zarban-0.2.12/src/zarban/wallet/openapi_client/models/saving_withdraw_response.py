# coding: utf-8

"""
    Zarban Wallet API

    API for Zarban wallet services.  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from zarban.wallet.openapi_client.configuration import Configuration


class SavingWithdrawResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'fee': 'str',
        'balance_after_withdraw': 'str',
        'principal': 'str',
        'interest': 'str',
        'time_created': 'Timestamp'
    }

    attribute_map = {
        'id': 'id',
        'fee': 'fee',
        'balance_after_withdraw': 'balanceAfterWithdraw',
        'principal': 'principal',
        'interest': 'interest',
        'time_created': 'timeCreated'
    }

    def __init__(self, id=None, fee=None, balance_after_withdraw=None, principal=None, interest=None, time_created=None, local_vars_configuration=None):  # noqa: E501
        """SavingWithdrawResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._fee = None
        self._balance_after_withdraw = None
        self._principal = None
        self._interest = None
        self._time_created = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.fee = fee
        self.balance_after_withdraw = balance_after_withdraw
        self.principal = principal
        self.interest = interest
        self.time_created = time_created

    @property
    def id(self):
        """Gets the id of this SavingWithdrawResponse.  # noqa: E501


        :return: The id of this SavingWithdrawResponse.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SavingWithdrawResponse.


        :param id: The id of this SavingWithdrawResponse.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def fee(self):
        """Gets the fee of this SavingWithdrawResponse.  # noqa: E501

        Operation fee  # noqa: E501

        :return: The fee of this SavingWithdrawResponse.  # noqa: E501
        :rtype: str
        """
        return self._fee

    @fee.setter
    def fee(self, fee):
        """Sets the fee of this SavingWithdrawResponse.

        Operation fee  # noqa: E501

        :param fee: The fee of this SavingWithdrawResponse.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and fee is None:  # noqa: E501
            raise ValueError("Invalid value for `fee`, must not be `None`")  # noqa: E501

        self._fee = fee

    @property
    def balance_after_withdraw(self):
        """Gets the balance_after_withdraw of this SavingWithdrawResponse.  # noqa: E501

        Balance after withdrawal  # noqa: E501

        :return: The balance_after_withdraw of this SavingWithdrawResponse.  # noqa: E501
        :rtype: str
        """
        return self._balance_after_withdraw

    @balance_after_withdraw.setter
    def balance_after_withdraw(self, balance_after_withdraw):
        """Sets the balance_after_withdraw of this SavingWithdrawResponse.

        Balance after withdrawal  # noqa: E501

        :param balance_after_withdraw: The balance_after_withdraw of this SavingWithdrawResponse.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and balance_after_withdraw is None:  # noqa: E501
            raise ValueError("Invalid value for `balance_after_withdraw`, must not be `None`")  # noqa: E501

        self._balance_after_withdraw = balance_after_withdraw

    @property
    def principal(self):
        """Gets the principal of this SavingWithdrawResponse.  # noqa: E501

        Principal amount  # noqa: E501

        :return: The principal of this SavingWithdrawResponse.  # noqa: E501
        :rtype: str
        """
        return self._principal

    @principal.setter
    def principal(self, principal):
        """Sets the principal of this SavingWithdrawResponse.

        Principal amount  # noqa: E501

        :param principal: The principal of this SavingWithdrawResponse.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and principal is None:  # noqa: E501
            raise ValueError("Invalid value for `principal`, must not be `None`")  # noqa: E501

        self._principal = principal

    @property
    def interest(self):
        """Gets the interest of this SavingWithdrawResponse.  # noqa: E501

        Interest amount  # noqa: E501

        :return: The interest of this SavingWithdrawResponse.  # noqa: E501
        :rtype: str
        """
        return self._interest

    @interest.setter
    def interest(self, interest):
        """Sets the interest of this SavingWithdrawResponse.

        Interest amount  # noqa: E501

        :param interest: The interest of this SavingWithdrawResponse.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and interest is None:  # noqa: E501
            raise ValueError("Invalid value for `interest`, must not be `None`")  # noqa: E501

        self._interest = interest

    @property
    def time_created(self):
        """Gets the time_created of this SavingWithdrawResponse.  # noqa: E501


        :return: The time_created of this SavingWithdrawResponse.  # noqa: E501
        :rtype: Timestamp
        """
        return self._time_created

    @time_created.setter
    def time_created(self, time_created):
        """Sets the time_created of this SavingWithdrawResponse.


        :param time_created: The time_created of this SavingWithdrawResponse.  # noqa: E501
        :type: Timestamp
        """
        if self.local_vars_configuration.client_side_validation and time_created is None:  # noqa: E501
            raise ValueError("Invalid value for `time_created`, must not be `None`")  # noqa: E501

        self._time_created = time_created

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SavingWithdrawResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SavingWithdrawResponse):
            return True

        return self.to_dict() != other.to_dict()
