# Copyright (c) Fixstars Amplify Corporation.
#
# This source code is licensed under the MIT license found in the
# LICENSE file in the root directory of this source tree.

from typing import Annotated

import pytest
from amplify_bbopt import (
    BinaryVariableList,
    BlackBoxFuncBase,
    BlackBoxFuncList,
    FlatSolutionDict,
    IntegerVariable,
    blackbox,
    equal_to,
)


def test_multiple_objectives_dependency_via_variable_unification():
    @blackbox
    def objective_1(
        x: list[bool] = BinaryVariableList(length=3),  # type: ignore[assignment]  # noqa: B008
    ):
        return sum(x)

    class Objective_2(BlackBoxFuncBase):
        def __init__(self):
            super().__init__()
            self.x = BinaryVariableList(length=3)
            self.a = IntegerVariable(bounds=(0, 3))
            self.name = "objective_2"

        def objective(self) -> float:
            return sum(self.x) + self.a  # type: ignore[return-value]

    objective_2 = Objective_2()  # type: ignore

    objective_multi = BlackBoxFuncList([objective_1, objective_2], unify_variables=True)

    assert objective_multi.objective_1 == objective_1
    assert len(objective_multi._objectives) == 2  # noqa: SLF001
    assert objective_multi._objectives[0] == objective_1  # noqa: SLF001

    for obj in objective_multi:
        assert obj.variables.poly_array is not None

    assert objective_multi.objective_1.variables.x.poly_array is not None
    assert objective_multi.objective_2.variables.x.poly_array is not None
    assert (
        objective_multi.objective_1.variables.x.poly_array == objective_multi.objective_2.variables.x.poly_array
    ).all()


def test_multiple_objectives_dependency_via_variable_no_unification():
    @blackbox
    def objective_1(
        x: list[bool] = BinaryVariableList(length=3),  # type: ignore[assignment]  # noqa: B008
    ):
        return sum(x)

    @blackbox
    def objective_2(
        x: Annotated[list[bool], BinaryVariableList(length=3)],
        a: Annotated[int, IntegerVariable(bounds=(0, 3))],
    ):
        return sum(x) + a

    objective_multi = BlackBoxFuncList([objective_1, objective_2], unify_variables=False)

    assert objective_multi.objective_1 == objective_1
    assert len(objective_multi._objectives) == 2  # noqa: SLF001
    assert objective_multi._objectives[0] == objective_1  # noqa: SLF001

    @blackbox
    def objective_3(
        y: Annotated[list[bool], BinaryVariableList(length=3)],
        b: Annotated[int, IntegerVariable(bounds=(0, 3))],
    ):
        return sum(y) + b

    objective_multi.append(objective_3)
    assert len(objective_multi) == 3
    assert objective_multi.objective_3 == objective_3

    x = objective_1.variables.x
    y = objective_3.variables.y

    assert isinstance(x, BinaryVariableList)
    assert isinstance(y, BinaryVariableList)
    constraints = [equal_to(x[i] - y[i], 0) for i in range(len(x))]
    objective_multi.add_constraint(constraints)

    assert objective_multi.constraints.is_satisfied(
        FlatSolutionDict({
            "x[0]": True,
            "x[1]": False,
            "x[2]": True,
            "a": 2,
            "y[0]": True,
            "y[1]": False,
            "y[2]": True,
            "b": 1,
        })
    )

    for obj in objective_multi:
        assert obj.variables.poly_array is not None

    assert objective_multi.objective_1.variables.x.poly_array is not None
    assert objective_multi.objective_2.variables.x.poly_array is not None
    with pytest.raises(ValueError) as _:
        # no unification of variables from different objectives is performed.
        # these two poly arraies are generated by different variable generators so the Amplify SDK spits an error.
        assert objective_multi.objective_1.variables.x.poly_array == objective_multi.objective_2.variables.x.poly_array


def test_single_objective():
    # method 1
    @blackbox
    def objective_1(
        x: list[bool] = BinaryVariableList(length=3),  # type: ignore[assignment]  # noqa: B008
    ):
        return sum(x)

    assert objective_1._call_objective(x=[True, False, True]) == 2  # noqa: SLF001

    objective_1.name = "obj_1"
    assert objective_1.name == "obj_1"

    # method 2
    @blackbox
    def objective_2(
        x: Annotated[list[bool], BinaryVariableList(length=3)],
    ):
        return sum(x)

    assert objective_2._call_objective(x=[True, False, True]) == 2  # noqa: SLF001

    # method 3
    class Objective(BlackBoxFuncBase):
        def __init__(self):
            super().__init__()
            self.x = BinaryVariableList(length=3)

        def objective(self) -> float:
            return sum(self.x)  # type: ignore

    objective_3 = Objective()  # type: ignore
    assert objective_3._call_objective(x=[True, False, True]) == 2  # noqa: SLF001

    class ObjectiveFail(BlackBoxFuncBase):
        def __init__(self):
            self.x = BinaryVariableList(length=3)

    # method 3 with no definition of @abstractmethod
    with pytest.raises(TypeError) as _:
        _ = ObjectiveFail()  # type: ignore

    # method 1 and 2 without variable definition
    with pytest.raises(ValueError) as _:

        @blackbox
        def objective_fail(x: list[bool]):
            return sum(x)
