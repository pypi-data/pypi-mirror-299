{"version":3,"file":"573.baf3a02bf68a48529a87.js","mappings":"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","sources":["webpack://@splunk/ucc_ui_lib/./src/components/CustomMenu.jsx","webpack://@splunk/ucc_ui_lib/./src/components/MenuInput/MenuInput.tsx","webpack://@splunk/ucc_ui_lib/./src/pages/Input/InputPage.tsx"],"sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { _ } from '@splunk/ui-utils/i18n';\nimport { getUnifiedConfigs } from '../util/util';\nimport { getBuildDirPath } from '../util/script';\n\nclass CustomMenu extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: true,\n        };\n        this.shouldRender = true;\n    }\n\n    componentDidMount() {\n        const unifiedConfigs = getUnifiedConfigs();\n        const { services, menu: customMenuField, groupsMenu } = unifiedConfigs.pages.inputs;\n        this.setState({ loading: true });\n        this.loadCustomMenu().then((Control) => {\n            const customControl = new Control(unifiedConfigs, this.el, this.setValue);\n            if (services && customMenuField && !groupsMenu) {\n                customControl.render();\n            }\n            this.setState({ loading: false });\n        });\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        if (!nextState.loading && this.shouldRender) {\n            this.shouldRender = false;\n            return true;\n        }\n        return false;\n    }\n\n    setValue = (newValue) => {\n        this.props.handleChange(newValue);\n    };\n\n    loadCustomMenu = () =>\n        new Promise((resolve) => {\n            if (this.props.type === 'external') {\n                import(\n                    /* webpackIgnore: true */ `${getBuildDirPath()}/custom/${\n                        this.props.fileName\n                    }.js`\n                ).then((external) => {\n                    const Control = external.default;\n                    resolve(Control);\n                });\n            } else {\n                const globalConfig = getUnifiedConfigs();\n                const appName = globalConfig.meta.name;\n                __non_webpack_require__(\n                    [`app/${appName}/js/build/custom/${this.props.fileName}`],\n                    (Control) => resolve(Control)\n                );\n            }\n        });\n\n    render() {\n        return (\n            <>\n                {this.state.loading && _('Loading...')}\n                <span\n                    ref={(el) => {\n                        this.el = el;\n                    }}\n                    style={{ visibility: this.state.loading ? 'hidden' : 'visible' }}\n                />\n            </>\n        );\n    }\n}\n\nCustomMenu.propTypes = {\n    fileName: PropTypes.string.isRequired,\n    type: PropTypes.string,\n    handleChange: PropTypes.func,\n};\n\nexport default CustomMenu;\n","import React, { useState, useEffect, useMemo } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Dropdown from '@splunk/react-ui/Dropdown';\nimport Menu from '@splunk/react-ui/Menu';\nimport SlidingPanels from '@splunk/react-ui/SlidingPanels';\nimport ChevronLeft from '@splunk/react-icons/ChevronLeft';\nimport { _ as i18n } from '@splunk/ui-utils/i18n';\nimport styled from 'styled-components';\nimport { variables } from '@splunk/themes';\nimport { getFormattedMessage } from '../../util/messageUtil';\nimport { getUnifiedConfigs } from '../../util/util';\nimport CustomMenu from '../CustomMenu';\nimport { StyledButton } from '../../pages/EntryPageStyle';\nimport { invariant } from '../../util/invariant';\n\nconst CustomSubTitle = styled.span`\n    color: ${variables.brandColorD20};\n    font-size: ${variables.fontSizeSmall};\n    font-weight: 500;\n`;\n\nexport const ROOT_GROUP_NAME = 'main_panel';\n\ninterface Group {\n    name: string;\n    hasSubmenu: boolean;\n    title: string;\n    subTitle?: string;\n}\n\ninterface CustomMenuType {\n    src: string;\n    type: string;\n}\n\ninterface MenuInputProps {\n    handleRequestOpen: (args: { serviceName: string; input?: string; groupName?: string }) => void;\n}\n\nfunction MenuInput({ handleRequestOpen }: MenuInputProps) {\n    const [activePanelId, setActivePanelId] = useState<string>(ROOT_GROUP_NAME);\n    const [slidingPanelsTransition, setSlidingPanelsTransition] = useState<'forward' | 'backward'>(\n        'forward'\n    );\n    const [openDropDown, setOpenDropDown] = useState(false);\n    const [isSubMenu, setIsSubMenu] = useState(true);\n\n    const { pages } = getUnifiedConfigs();\n\n    const { inputs } = pages;\n    invariant(inputs);\n    const groupsMenu = 'groupsMenu' in inputs ? inputs.groupsMenu : undefined;\n    const customMenuField = 'menu' in inputs ? inputs.menu : undefined;\n    const { services } = inputs;\n\n    const closeReasons = ['clickAway', 'escapeKey', 'offScreen', 'toggleClick'];\n    const toggle = (\n        <StyledButton\n            appearance=\"primary\"\n            id=\"addInputBtn\"\n            label={i18n('Create New Input')}\n            isMenu\n        />\n    );\n\n    useEffect(() => {\n        if (!isSubMenu) {\n            setOpenDropDown(false);\n            setIsSubMenu(true);\n        }\n    }, [isSubMenu]); // eslint-disable-line react-hooks/exhaustive-deps\n\n    const handleRequestDropDownClose = ({ reason }: { reason: string }) => {\n        setOpenDropDown(!closeReasons.includes(reason));\n    };\n\n    const handleRequestDropDownOpen = () => {\n        setOpenDropDown(true);\n    };\n\n    const handleChangeCustomMenu = (val: { service: string; input: string }) => {\n        const { service, input } = val;\n        handleRequestOpen({ serviceName: service, input });\n    };\n\n    const getMenuItems = (serviceItems: Group[], groupName: string) =>\n        serviceItems.map((service: Group) =>\n            service?.hasSubmenu ? (\n                <Menu.Item\n                    hasSubmenu\n                    key={service.name}\n                    onClick={() => {\n                        setActivePanelId(service.name);\n                        setSlidingPanelsTransition('forward');\n                    }}\n                >\n                    {service.title}\n                </Menu.Item>\n            ) : (\n                <Menu.Item\n                    key={service.name}\n                    onClick={() => {\n                        handleRequestOpen({ serviceName: service.name, groupName });\n                        setIsSubMenu(false);\n                    }}\n                >\n                    {service.title}\n                    <CustomSubTitle>&nbsp;{service.subTitle}</CustomSubTitle>\n                </Menu.Item>\n            )\n        );\n\n    const getBackButton = () => (\n        <>\n            <Menu.Item\n                icon={<ChevronLeft />}\n                onClick={() => {\n                    setActivePanelId(ROOT_GROUP_NAME);\n                    setSlidingPanelsTransition('backward');\n                }}\n            >\n                Back\n            </Menu.Item>\n            <Menu.Divider />\n        </>\n    );\n\n    const getSlidingsPanels = (servicesGroup: Record<string, Group[]>) =>\n        Object.keys(servicesGroup).map((groupsName) => (\n            <SlidingPanels.Panel key={groupsName} panelId={groupsName}>\n                <Menu>\n                    {groupsName !== ROOT_GROUP_NAME && getBackButton()}\n                    {getMenuItems(servicesGroup[groupsName], groupsName)}\n                </Menu>\n            </SlidingPanels.Panel>\n        ));\n\n    const getInputMenu = useMemo(() => {\n        const servicesGroup: Record<string, Group[]> = { [ROOT_GROUP_NAME]: [] };\n        if (groupsMenu) {\n            groupsMenu.forEach((group) => {\n                if (group?.groupServices) {\n                    servicesGroup[group.groupName] = [];\n                    group.groupServices.forEach((serviceName: string) => {\n                        servicesGroup[group.groupName].push({\n                            name: serviceName,\n                            hasSubmenu: false,\n                            title:\n                                services.find((service) => service.name === serviceName)?.title ||\n                                '', // what should be done when title empty\n                            subTitle: services.find((service) => service.name === serviceName)\n                                ?.subTitle,\n                        });\n                    });\n                    servicesGroup[ROOT_GROUP_NAME].push({\n                        name: group.groupName,\n                        title: group.groupTitle,\n                        hasSubmenu: true,\n                    });\n                } else {\n                    servicesGroup[ROOT_GROUP_NAME].push({\n                        name: group.groupName,\n                        title: group.groupTitle,\n                        subTitle: services.find((service) => service.name === group.groupName)\n                            ?.subTitle,\n                        hasSubmenu: false,\n                    });\n                }\n            });\n        } else {\n            servicesGroup[ROOT_GROUP_NAME] = services.map((service) => ({\n                name: service.name,\n                title: service.title,\n                subTitle: service.subTitle,\n                hasSubmenu: false,\n            }));\n        }\n        return getSlidingsPanels(servicesGroup);\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n    // Making a dropdown if we have more than one service\n    const makeSingleSelectDropDown = () => (\n        <Dropdown\n            toggle={toggle}\n            open={openDropDown}\n            onRequestClose={handleRequestDropDownClose}\n            onRequestOpen={handleRequestDropDownOpen}\n        >\n            <SlidingPanels\n                activePanelId={activePanelId}\n                transition={slidingPanelsTransition}\n                style={{ width: '210px' }}\n            >\n                {getInputMenu}\n            </SlidingPanels>\n        </Dropdown>\n    );\n\n    // Making a dropdown if we have one service\n    const makeInputButton = () => (\n        <StyledButton\n            label={getFormattedMessage(100)}\n            appearance=\"primary\"\n            id=\"addInputBtn\"\n            onClick={() => {\n                handleRequestOpen({ serviceName: services[0].name });\n            }}\n        />\n    );\n\n    // Making a custom menu\n    const makeCustomMenu = (menu: CustomMenuType) => (\n        <>\n            {React.createElement(CustomMenu, {\n                fileName: menu.src,\n                type: menu.type,\n                handleChange: handleChangeCustomMenu,\n            })}\n        </>\n    );\n\n    const getCustomMenuAndGroupsMenu = (menu: CustomMenuType) => (\n        <>\n            {React.createElement(CustomMenu, {\n                fileName: menu.src,\n                type: menu.type,\n                handleChange: handleChangeCustomMenu,\n            })}\n            {services.length === 1 ? makeInputButton() : makeSingleSelectDropDown()}\n        </>\n    );\n\n    if (services && !customMenuField?.src) {\n        return services.length === 1 ? makeInputButton() : makeSingleSelectDropDown();\n    }\n\n    // Introducing a condition to enable simultaneous support for custom menu src and Groups Menu.\n    // ADDON-62948\n    if (services && customMenuField?.src && groupsMenu) {\n        return getCustomMenuAndGroupsMenu(customMenuField);\n    }\n    invariant(customMenuField);\n    return makeCustomMenu(customMenuField);\n}\n\nMenuInput.propTypes = {\n    handleRequestOpen: PropTypes.func,\n};\n\nexport default MenuInput;\n","import React, { useState, useEffect, useCallback, ReactElement } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\n\nimport ColumnLayout from '@splunk/react-ui/ColumnLayout';\nimport styled from 'styled-components';\nimport ToastMessages from '@splunk/react-toast-notifications/ToastMessages';\nimport TabBar, { TabBarChangeHandler } from '@splunk/react-ui/TabBar';\nimport { _ } from '@splunk/ui-utils/i18n';\nimport { z } from 'zod';\nimport {\n    InputsPage,\n    InputsPageTable,\n    ITableConfig,\n    ServiceTable,\n    SubDescriptionType,\n    TableFullServiceSchema,\n} from '../../types/globalConfig/pages';\nimport { getUnifiedConfigs } from '../../util/util';\nimport { TitleComponent, SubTitleComponent } from './InputPageStyle';\nimport { RowDataFields, TableContextProvider } from '../../context/TableContext';\nimport { MODE_CREATE, MODE_CLONE, MODE_EDIT, Mode } from '../../constants/modes';\nimport { PAGE_INPUT } from '../../constants/pages';\nimport { STYLE_PAGE } from '../../constants/dialogStyles';\nimport MenuInput, { ROOT_GROUP_NAME } from '../../components/MenuInput/MenuInput';\nimport TableWrapper from '../../components/table/TableWrapper';\nimport EntityModal from '../../components/EntityModal/EntityModal';\nimport ErrorBoundary from '../../components/ErrorBoundary/ErrorBoundary';\nimport EntityPage from '../../components/EntityPage/EntityPage';\nimport SubDescription from '../../components/SubDescription/SubDescription';\nimport useQuery from '../../hooks/useQuery';\n\nconst Row = styled(ColumnLayout.Row)`\n    padding: 5px 0px;\n\n    .title_menu_column {\n        width: auto !important;\n    }\n\n    .page_subtitle {\n        min-height: 20px;\n    }\n\n    .dropdown {\n        text-align: right;\n    }\n`;\n\ninterface EntityState {\n    open: boolean;\n    isInputPageStyle?: boolean;\n    serviceName?: string;\n    mode?: Mode;\n    formLabel?: string;\n    groupName?: string;\n    stanzaName?: string;\n}\n\nfunction isTableFullServiceSchema(\n    service: ServiceTable | undefined\n): service is z.infer<typeof TableFullServiceSchema> {\n    return service !== undefined && 'description' in service;\n}\n\nfunction isTableSchema(inputs: InputsPage): inputs is InputsPageTable {\n    return inputs !== undefined && 'table' in inputs;\n}\n\nfunction InputPage(): ReactElement {\n    const [entity, setEntity] = useState<EntityState>({ open: false });\n    const unifiedConfigs = getUnifiedConfigs();\n    const inputsPage = unifiedConfigs.pages.inputs;\n\n    let services: ServiceTable[] = [];\n    let title: string | undefined;\n    let table: ITableConfig | undefined;\n    let description: string | undefined;\n    let subDescription: SubDescriptionType | undefined;\n\n    if (inputsPage) {\n        if (isTableSchema(inputsPage)) {\n            ({ services, title, table, description, subDescription } = inputsPage);\n        } else {\n            ({ services, title } = inputsPage);\n        }\n    }\n\n    // check if the tabs feature is enabled or not.\n    const isTabs = !table;\n\n    const [activeTabId, setActiveTabId] = useState<string>(services[0].name);\n    const selectedTab = services.find((x) => x.name === activeTabId);\n    const isTableFullSchema = isTableFullServiceSchema(selectedTab);\n\n    const PERMITTED_MODES = [MODE_CLONE, MODE_CREATE, MODE_EDIT];\n    const permittedTabNames = services.map((service) => service.name);\n\n    const navigate = useNavigate();\n    const query = useQuery();\n\n    useEffect(() => {\n        setServiceEntity();\n        setActiveTab();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [useLocation().search]);\n\n    const setServiceEntity = (): void => {\n        const service = services.find((x) => x.name === query.get('service'));\n        // Run only when service and action/mode is valid and modal/page is not open\n        if (\n            query &&\n            service &&\n            PERMITTED_MODES.includes(query.get('action') || '') &&\n            !entity.open\n        ) {\n            // run when mode is not create and previous state info is available\n            if (query.get('action') !== MODE_CREATE && entity.stanzaName) {\n                setEntity({\n                    ...entity,\n                    open: true,\n                    isInputPageStyle: true,\n                    serviceName: query.get('service') || '',\n                    mode: (query.get('action') as Mode) || '',\n                });\n            } else {\n                // If previous state information is unavailable, create mode will be used by default\n                setEntity({\n                    ...entity,\n                    open: true,\n                    isInputPageStyle: true,\n                    serviceName: query.get('service') || '',\n                    formLabel: `Create ${service?.title}`,\n                    mode: MODE_CREATE,\n                });\n            }\n        } else if (\n            (!query.get('service') || !query.get('action')) &&\n            entity.open &&\n            entity.isInputPageStyle\n        ) {\n            // Close page when any of the required query params are not provided\n            setEntity({ ...entity, open: false });\n        }\n    };\n\n    const setActiveTab = (): void => {\n        if (query && permittedTabNames.includes(query.get('service') || '')) {\n            setActiveTabId(query.get('service') || '');\n        }\n    };\n\n    // handle modal/page open request on create/add entity button\n    const handleRequestOpen = ({\n        serviceName,\n        groupName,\n        input,\n    }: {\n        serviceName: string;\n        groupName?: string;\n        input?: string;\n    }): void => {\n        const service = services.find((x) => x.name === serviceName);\n        const serviceTitle = service?.title;\n        const isInputPageStyle = service?.style === STYLE_PAGE;\n\n        setEntity({\n            ...entity,\n            open: true,\n            serviceName,\n            mode: MODE_CREATE,\n            formLabel: `Add ${serviceTitle}`,\n            isInputPageStyle,\n            groupName,\n        });\n        if (isInputPageStyle) {\n            // set query and push to navigate\n            query.set('service', serviceName);\n            query.set('action', MODE_CREATE);\n            const selectedGroup = groupName && groupName !== ROOT_GROUP_NAME ? groupName : null;\n            const inputQueryValue = input || selectedGroup || serviceName;\n            if (inputQueryValue) {\n                query.set('input', inputQueryValue);\n            } else {\n                query.delete('input');\n            }\n            navigate({ search: query.toString() });\n        }\n    };\n\n    // handle close/cancel/back request in add/create modal component\n    const handleModalDialogClose = (): void => {\n        setEntity({ ...entity, open: false });\n    };\n\n    // generate modal style dialog\n    const generateModalDialog = () =>\n        entity.serviceName && (\n            <EntityModal\n                page={PAGE_INPUT}\n                open={entity.open}\n                handleRequestClose={handleModalDialogClose}\n                serviceName={entity.serviceName}\n                mode={MODE_CREATE}\n                formLabel={entity.formLabel}\n                groupName={entity.groupName}\n            />\n        );\n\n    // handle clone/edit request per row from table for page style dialog\n    const handleOpenPageStyleDialog = (row: RowDataFields, mode: Mode): void => {\n        const label = services.find((x) => x.name === row.serviceName)?.title;\n        setEntity({\n            ...entity,\n            open: true,\n            isInputPageStyle: true,\n            serviceName: row.serviceName,\n            stanzaName: row.name,\n            formLabel: mode === MODE_CLONE ? `Clone ${label}` : `Update ${label}`,\n            mode,\n        });\n        // set query and push to history\n        query.set('service', row.serviceName);\n        query.set('action', mode);\n        navigate({ search: query.toString() });\n    };\n\n    // handle close request for page style dialog\n    const handlePageDialogClose = (): void => {\n        setEntity({ ...entity, open: false });\n        if (!isTabs) {\n            query.delete('service');\n        }\n        query.delete('action');\n        navigate({ search: query.toString() });\n    };\n\n    // generate page style dialog\n    const generatePageDialog = () =>\n        entity.serviceName && entity.mode ? (\n            <EntityPage\n                handleRequestClose={handlePageDialogClose}\n                serviceName={entity.serviceName}\n                stanzaName={entity.stanzaName}\n                mode={entity.mode}\n                formLabel={entity.formLabel}\n                page={PAGE_INPUT}\n                groupName={entity.groupName}\n            />\n        ) : null;\n\n    const onTabChange = useCallback<TabBarChangeHandler>(\n        (e, { selectedTabId }) => {\n            if (selectedTabId) {\n                setActiveTabId(selectedTabId);\n                query.delete('action');\n                query.set('service', selectedTabId);\n                navigate({ search: query.toString() });\n            }\n        },\n        [activeTabId] // eslint-disable-line react-hooks/exhaustive-deps\n    );\n\n    return (\n        <ErrorBoundary>\n            <TableContextProvider>\n                {entity.isInputPageStyle && entity.open ? generatePageDialog() : null}\n                <div\n                    style={\n                        entity.isInputPageStyle && entity.open\n                            ? { display: 'none' }\n                            : { display: 'block' }\n                    }\n                >\n                    <ColumnLayout gutter={8}>\n                        <Row>\n                            <ColumnLayout.Column\n                                className={isTabs ? 'title_menu_column' : ''}\n                                span={9}\n                            >\n                                <TitleComponent>\n                                    {isTabs ? _(selectedTab?.title || '') : _(title || '')}\n                                </TitleComponent>\n                                <SubTitleComponent className={isTabs ? 'pageSubtitle' : undefined}>\n                                    {isTabs\n                                        ? _(isTableFullSchema ? selectedTab?.description : '')\n                                        : _(description || '')}\n                                </SubTitleComponent>\n                                <SubDescription\n                                    text={subDescription?.text || ''}\n                                    links={subDescription?.links}\n                                />\n                            </ColumnLayout.Column>\n                            <ColumnLayout.Column\n                                className={isTabs ? 'title_menu_column' : 'dropdown'}\n                                span={3}\n                            >\n                                {!isTabs && <MenuInput handleRequestOpen={handleRequestOpen} />}\n                            </ColumnLayout.Column>\n                        </Row>\n                    </ColumnLayout>\n                    {isTabs ? (\n                        <>\n                            <TabBar activeTabId={activeTabId} onChange={onTabChange}>\n                                {services.map((service) => (\n                                    <TabBar.Tab\n                                        key={service.name}\n                                        label={_(service.title)}\n                                        tabId={service.name}\n                                    />\n                                ))}\n                            </TabBar>\n                            {services.map((service) => (\n                                <div\n                                    key={service.name}\n                                    style={\n                                        service.name !== activeTabId\n                                            ? { display: 'none' }\n                                            : { display: 'block' }\n                                    }\n                                    id={`${service.name}Tab`}\n                                >\n                                    <TableWrapper\n                                        page={PAGE_INPUT}\n                                        serviceName={service.name}\n                                        handleRequestModalOpen={() =>\n                                            handleRequestOpen({ serviceName: service.name })\n                                        }\n                                        handleOpenPageStyleDialog={handleOpenPageStyleDialog}\n                                    />\n                                </div>\n                            ))}\n                        </>\n                    ) : (\n                        <TableWrapper\n                            page={PAGE_INPUT}\n                            handleOpenPageStyleDialog={handleOpenPageStyleDialog}\n                            displayActionBtnAllRows\n                        />\n                    )}\n\n                    <ToastMessages position=\"top-right\" />\n                    {!entity.isInputPageStyle && entity.open ? generateModalDialog() : null}\n                </div>\n            </TableContextProvider>\n        </ErrorBoundary>\n    );\n}\n\nexport default InputPage;\n"],"names":["CustomMenu","_Component","props","_this","_classCallCheck","_defineProperty","_callSuper","newValue","handleChange","Promise","resolve","type","import","concat","getBuildDirPath","fileName","then","external","Control","appName","getUnifiedConfigs","meta","name","__non_webpack_require__","state","loading","shouldRender","_inherits","key","value","_this2","unifiedConfigs","_unifiedConfigs$pages","pages","inputs","services","customMenuField","menu","groupsMenu","this","setState","loadCustomMenu","customControl","el","setValue","render","nextProps","nextState","_this3","React","_","ref","style","visibility","Component","propTypes","PropTypes","isRequired","CustomSubTitle","styled","span","_templateObject","variables","brandColorD20","fontSizeSmall","ROOT_GROUP_NAME","MenuInput","_ref","handleRequestOpen","_useState2","_slicedToArray","useState","activePanelId","setActivePanelId","_useState4","slidingPanelsTransition","setSlidingPanelsTransition","_useState6","openDropDown","setOpenDropDown","_useState8","isSubMenu","setIsSubMenu","invariant","undefined","closeReasons","toggle","StyledButton","appearance","id","label","i18n","isMenu","useEffect","handleRequestDropDownClose","_ref2","reason","includes","handleRequestDropDownOpen","handleChangeCustomMenu","val","service","input","serviceName","getInputMenu","useMemo","servicesGroup","forEach","group","_services$find3","groupServices","groupName","_services$find","_services$find2","push","hasSubmenu","title","find","subTitle","groupTitle","map","Object","keys","groupsName","SlidingPanels","panelId","Menu","icon","ChevronLeft","onClick","serviceItems","getSlidingsPanels","makeSingleSelectDropDown","Dropdown","open","onRequestClose","onRequestOpen","transition","width","makeInputButton","getFormattedMessage","src","length","makeCustomMenu","Row","ColumnLayout","_taggedTemplateLiteral","_subDescription","_subDescription2","table","description","subDescription","entity","setEntity","inputsPage","isTabs","activeTabId","setActiveTabId","selectedTab","x","isTableFullSchema","PERMITTED_MODES","MODE_CLONE","MODE_CREATE","MODE_EDIT","permittedTabNames","navigate","useNavigate","query","useQuery","setServiceEntity","setActiveTab","useLocation","search","get","stanzaName","_objectSpread","isInputPageStyle","mode","formLabel","serviceTitle","STYLE_PAGE","set","inputQueryValue","toString","handleOpenPageStyleDialog","row","onTabChange","useCallback","e","selectedTabId","ErrorBoundary","TableContextProvider","EntityPage","handleRequestClose","page","PAGE_INPUT","display","gutter","className","TitleComponent","SubTitleComponent","SubDescription","text","links","TabBar","onChange","tabId","TableWrapper","handleRequestModalOpen","displayActionBtnAllRows","ToastMessages","position","EntityModal"],"sourceRoot":""}