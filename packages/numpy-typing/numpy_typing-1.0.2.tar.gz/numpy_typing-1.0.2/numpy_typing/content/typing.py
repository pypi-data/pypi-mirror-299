"""Numpy type hinting"""


# from t import Generic, TypeVar, overload
from typing import Generic, TypeVar, overload
from typing_extensions import Self
from numpy import ndarray

import numpy as nn



T  = TypeVar('T')
T1 = TypeVar('T1')
T2 = TypeVar('T2')
T3 = TypeVar('T3')
T4 = TypeVar('T4')


s_slice = slice|list


class array_1d(Generic[T, T1],ndarray):
    @overload
    def __getitem__(self, key:int) -> T:...
    @overload
    def __getitem__(self, key:s_slice) -> Self: ...


class array_2d(Generic[T, T1, T2], ndarray):
    @overload
    def __getitem__(self, key:"tuple[int, int]") -> T: ...
    @overload
    def __getitem__(self, key:"tuple[s_slice, int]") -> array_1d[T, T1]: ...
    @overload
    def __getitem__(self, key:"tuple[int, s_slice]|int") -> array_1d[T, T2]: ...
    @overload
    def __getitem__(self, key:tuple[s_slice, s_slice]|s_slice) -> Self: ...


class array_3d(Generic[T, T1, T2, T3], ndarray):
    @overload
    def __getitem__(self, key:tuple[int, int, int]) -> T: ...
    @overload
    def __getitem__(self, key:tuple[int, int, s_slice]|tuple[int, int]) -> array_1d[T, T3]: ...
    @overload
    def __getitem__(self, key:tuple[int, s_slice, int]) -> array_1d[T, T2]: ...
    @overload
    def __getitem__(self, key:tuple[int, s_slice, s_slice]|tuple[int, s_slice]|int) -> array_2d[T, T2, T3]: ...
    @overload
    def __getitem__(self, key:tuple[s_slice, int, int]) -> array_1d[T, T1]: ...
    @overload
    def __getitem__(self, key:tuple[s_slice, int, s_slice]|tuple[s_slice, int]) -> array_2d[T, T1, T3]: ...
    @overload
    def __getitem__(self, key:tuple[s_slice, s_slice, int]|int) -> array_2d[T, T2, T3]: ...
    @overload
    def __getitem__(self, key:tuple[s_slice, s_slice, s_slice]|tuple[s_slice, s_slice]|tuple[s_slice]) -> Self: ...



class array_4d(Generic[T, T1, T2, T3, T4], ndarray):
    @overload
    def __getitem__(self, key:tuple[int, int, int, int]) -> T: ...
    @overload
    def __getitem__(self, key:tuple[int, int, int, s_slice]|tuple[int, int, int]) -> array_1d[T, T4]: ...
    @overload
    def __getitem__(self, key:tuple[int, int, s_slice, int]) -> array_1d[T, T3]: ...
    @overload
    def __getitem__(self, key:tuple[int, int, s_slice, s_slice]
                             |tuple[int, int, s_slice]
                             |tuple[int, int]) -> array_2d[T, T3, T4]: ...
    @overload
    def __getitem__(self, key:tuple[int, s_slice, int, int]) -> array_1d[T, T2]: ...
    @overload
    def __getitem__(self, key:tuple[int, s_slice, int, s_slice]|tuple[int, s_slice, int]) -> array_2d[T, T2, T4]: ...
    @overload
    def __getitem__(self, key:tuple[int, s_slice, s_slice, int]) -> array_2d[T, T2, T3]: ...
    @overload
    def __getitem__(self, key:tuple[int, s_slice, s_slice, s_slice]
                             |tuple[int, s_slice, s_slice]
                             |tuple[int, s_slice]
                             |int) -> array_3d[T, T2, T3, T4]: ...
    @overload
    def __getitem__(self, key:tuple[s_slice, int, int, int]) -> array_1d[T, T1]: ...
    @overload
    def __getitem__(self, key:tuple[s_slice, int, int, s_slice]|tuple[s_slice, int, int]) -> array_2d[T, T1, T4]: ...
    @overload
    def __getitem__(self, key:tuple[s_slice, int, s_slice, int]) -> array_2d[T, T1, T3]: ...
    @overload
    def __getitem__(self, key:tuple[s_slice, int, s_slice, s_slice]
                             |tuple[s_slice, int, s_slice]
                             |tuple[s_slice, int]) -> array_3d[T, T1, T3, T4]: ...
    @overload
    def __getitem__(self, key:tuple[s_slice, s_slice, int, int]) -> array_2d[T, T1, T2]: ...
    @overload
    def __getitem__(self, key:tuple[s_slice, s_slice, int, s_slice]
                             |tuple[s_slice, s_slice, int]) -> array_3d[T, T1, T2, T4]: ...
    @overload
    def __getitem__(self, key:tuple[s_slice, s_slice, s_slice, int]) -> array_3d[T, T1, T2, T3]: ...
    @overload
    def __getitem__(self, key:tuple[s_slice, s_slice, s_slice, s_slice]
                             |tuple[s_slice, s_slice, s_slice]
                             |tuple[s_slice, s_slice]
                             |tuple[s_slice]) -> Self: ...

class float32_1d(array_1d[nn.float32, T1]): ...
class float64_1d(array_1d[nn.float64, T1]): ...
class int8_1d   (array_1d[nn.int8,    T1]): ...
class int32_1d  (array_1d[nn.int32,   T1]): ...
class int64_1d  (array_1d[nn.int64,   T1]): ...
class uint8_1d  (array_1d[nn.uint8,   T1]): ...
class uint32_1d (array_1d[nn.uint32,  T1]): ...
class uint64_1d (array_1d[nn.uint64,  T1]): ...
class bool_1d   (array_1d[bool,       T1]): ...
class str_1d    (array_1d[str,        T1]): ...

class float32_2d(array_2d[nn.float32, T1, T2]): ...
class float64_2d(array_2d[nn.float64, T1, T2]): ...
class int8_2d   (array_2d[nn.int8,    T1, T2]): ...
class int32_2d  (array_2d[nn.int32,   T1, T2]): ...
class int64_2d  (array_2d[nn.int64,   T1, T2]): ...
class uint8_2d  (array_2d[nn.uint8,   T1, T2]): ...
class uint32_2d (array_2d[nn.uint32,  T1, T2]): ...
class uint64_2d (array_2d[nn.uint64,  T1, T2]): ...
class bool_2d   (array_2d[bool,       T1, T2]): ...
class str_2d    (array_2d[str,        T1, T2]): ...

class float32_3d(array_3d[nn.float32, T1, T2, T3]): ...
class float64_3d(array_3d[nn.float64, T1, T2, T3]): ...
class int8_3d   (array_3d[nn.int8,    T1, T2, T3]): ...
class int32_3d  (array_3d[nn.int32,   T1, T2, T3]): ...
class int64_3d  (array_3d[nn.int64,   T1, T2, T3]): ...
class uint8_3d  (array_3d[nn.uint8,   T1, T2, T3]): ...
class uint32_3d (array_3d[nn.uint32,  T1, T2, T3]): ...
class uint64_3d (array_3d[nn.uint64,  T1, T2, T3]): ...
class bool_3d   (array_3d[bool,       T1, T2, T3]): ...
class str_3d    (array_3d[str,        T1, T2, T3]): ...

class float32_4d(array_4d[nn.float32, T1, T2, T3, T4]): ...
class float64_4d(array_4d[nn.float64, T1, T2, T3, T4]): ...
class int8_4d   (array_4d[nn.int8,    T1, T2, T3, T4]): ...
class int32_4d  (array_4d[nn.int32,   T1, T2, T3, T4]): ...
class int64_4d  (array_4d[nn.int64,   T1, T2, T3, T4]): ...
class uint8_4d  (array_4d[nn.uint8,   T1, T2, T3, T4]): ...
class uint32_4d (array_4d[nn.uint32,  T1, T2, T3, T4]): ...
class uint64_4d (array_4d[nn.uint64,  T1, T2, T3, T4]): ...
class bool_4d   (array_4d[bool,       T1, T2, T3, T4]): ...
class str_4d    (array_4d[str,        T1, T2, T3, T4]): ...


