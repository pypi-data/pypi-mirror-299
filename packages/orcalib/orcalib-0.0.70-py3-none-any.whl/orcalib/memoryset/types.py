from dataclasses import dataclass
from typing import Any

import numpy as np
from PIL import Image


@dataclass
class Memory:
    """
    A memory is a single item that can be stored in the database.
    """

    value: str | Image.Image
    """The value used to generate the embedding for looking up this memory."""

    metadata: dict[str, Any]
    """Metadata associated with the memory that is not used in the model."""

    embedding: np.ndarray
    """The embedding of the memory value, automatically generated by the Memoryset model."""

    memory_id: int
    """The ID of the memory in the table, automatically generated by the Memoryset."""

    memory_version: int
    """The version of the memory, automatically maintained by the Memoryset."""


@dataclass
class LabeledMemory(Memory):
    """
    A memory with a label.
    """

    label: int
    """The label of the memory."""

    label_name: str | None = None
    """The human-readable name of the label."""


class _LookupProperties:
    lookup_score: float
    """The similarity score between the query and the memory."""

    reranker_score: float
    """The similarity score assigned by the reranker."""

    reranker_embedding: np.ndarray | None
    """The reranker embedding for this memory value, if a reranker is attached to the Memoryset."""


@dataclass
class MemoryLookup(Memory, _LookupProperties):
    """
    Single memory lookup result.
    """

    pass


class LabeledMemoryLookup(LabeledMemory, _LookupProperties):
    """
    Single labeled memory lookup result.
    """

    pass
