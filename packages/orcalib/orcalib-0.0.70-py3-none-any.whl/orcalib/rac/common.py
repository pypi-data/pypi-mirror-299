"""Common type definitions and utility functions for the RAC module."""

from dataclasses import dataclass
from typing import Any, Callable

import numpy as np
import pandas as pd
import torch
from datasets import Dataset
from PIL import Image
from torch.utils.data import DataLoader as TorchDataLoader
from torch.utils.data import Dataset as TorchDataset

InputType = str | Image.Image


@dataclass
class Memory:
    """
    The base class for a labeled memory. This includes fields that are ALWAYS required.
    """

    value: InputType
    """The value used to generate the embedding for looking up this memory."""

    embedding: np.ndarray
    """The embedding of the memory value, automatically generated by the Memoryset model."""

    memory_id: int
    """The ID of the memory in the table, automatically generated by the Memoryset."""

    memory_version: int
    """The version of the memory, automatically maintained by the Memoryset."""


@dataclass
class _LabeledMemoryFields:
    label: int
    """The label of the memory."""

    label_name: str | None = None
    """The human-readable name of the label."""

    metadata: dict[str, Any] | None = None
    """Metadata associated with the memory that is not used in the model."""


@dataclass
class LabeledMemory(_LabeledMemoryFields, Memory):
    """
    A labeled memory is a single item that can be stored in the database and has a label.
    """


@dataclass
class _RequiredLookupProperties:
    lookup_score: float
    """The similarity score between the query and the memory."""


@dataclass
class _OptionalLookupProperties:
    attention_weight: float | None = None
    """The attention weight of the lookup."""

    reranker_score: float | None = None
    """The similarity score assigned by the reranker."""

    reranker_embedding: np.ndarray | None = None
    """The cached reranker embedding for this memory value, automatically generated if a reranker is attached to the Memoryset."""


@dataclass
class LabeledMemoryLookup(
    _OptionalLookupProperties,
    _LabeledMemoryFields,
    Memory,
    _RequiredLookupProperties,
):
    """
    Single labeled memory lookup result.
    """

    pass


@dataclass
class PredictionResult:
    label: int
    confidence: float
    memories: list[LabeledMemoryLookup]
    logits: torch.Tensor
    feedback: Callable[[int, int], float | int | bool] | None = None


DatasetLike = (
    list[tuple[InputType, int]]
    | pd.DataFrame
    | Dataset
    | TorchDataset
    | TorchDataLoader
    | LabeledMemory
    | list[LabeledMemory]
    | dict
    | list[dict]
)


@dataclass
class EvalResult:
    f1: float
    roc_auc: float | None
    accuracy: float
    loss: float


@dataclass
class LabeledMemoryLookupResult:
    correct: int
    incorrect: int
    label: int | None
    ratio: float | None
    total: int | None


@dataclass
class AnalyzePrediction:
    label: int
    logits: list[float]
    confidence: float


@dataclass
class AnalyzeResult:
    num_memories_accessed: int
    label_counts: dict[int, int]
    label_stats: list[dict]
    memory_stats: list[dict]
    mean_memory_lookup_score: float
    mean_memory_attention_weight: float
    prediction: AnalyzePrediction
