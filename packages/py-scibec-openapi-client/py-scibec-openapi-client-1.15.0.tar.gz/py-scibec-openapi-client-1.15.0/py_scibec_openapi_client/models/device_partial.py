# coding: utf-8

"""
    scibec

    scibec

    The version of the OpenAPI document: 1.14.2
    Contact: klaus.wakonig@psi.ch
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DevicePartial(BaseModel):
    """
    (tsType: Partial<Device>, schemaOptions: { partial: true })
    """ # noqa: E501
    id: Optional[StrictStr] = None
    read_acl: Optional[List[StrictStr]] = Field(default=None, alias="readACL")
    write_acl: Optional[List[StrictStr]] = Field(default=None, alias="writeACL")
    owner: Optional[List[StrictStr]] = None
    created_at: Optional[datetime] = Field(default=None, alias="createdAt")
    created_by: Optional[StrictStr] = Field(default=None, alias="createdBy")
    name: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    parent_id: Optional[StrictStr] = Field(default=None, alias="parentId")
    session_id: Optional[StrictStr] = Field(default=None, description="Session to which this device belongs.", alias="sessionId")
    enabled: Optional[StrictBool] = Field(default=None, description="True if the device should be enabled.")
    read_only: Optional[StrictBool] = Field(default=None, description="True if the device is read-only.", alias="readOnly")
    software_trigger: Optional[StrictBool] = Field(default=None, description="True if the device should receive a trigger call from BEC.", alias="softwareTrigger")
    device_class: Optional[StrictStr] = Field(default=None, description="Ophyd device class", alias="deviceClass")
    device_tags: Optional[List[StrictStr]] = Field(default=None, alias="deviceTags")
    device_config: Optional[Dict[str, Any]] = Field(default=None, description="Device config, including the ophyd init arguments. Must at least contain name and label.", alias="deviceConfig")
    readout_priority: Optional[StrictStr] = Field(default=None, description="Readout priority. \"on_request\" will only read the device when requested. \"baseline\" will read the device once at the beginning of the session. \"monitored\" will read the device at every trigger from BEC. \"async\" will read the device asynchronously. \"continuous\" will read the device at its self-defined frequency, beyond a single scan.", alias="readoutPriority")
    on_failure: Optional[StrictStr] = Field(default=None, description="Defines how device failures are handled. \"raise\" raises an error immediately. \"buffer\" will try fall back to old values, should this not be possible, an error will be raised. \"retry\" will retry once before raising an error.", alias="onFailure")
    user_parameter: Optional[Dict[str, Any]] = Field(default=None, description="Additional fields for user settings such as in and out positions.", alias="userParameter")
    __properties: ClassVar[List[str]] = ["id", "readACL", "writeACL", "owner", "createdAt", "createdBy", "name", "description", "parentId", "sessionId", "enabled", "readOnly", "softwareTrigger", "deviceClass", "deviceTags", "deviceConfig", "readoutPriority", "onFailure", "userParameter"]

    @field_validator('readout_priority')
    def readout_priority_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['on_request', 'baseline', 'monitored', 'async', 'continuous']):
            raise ValueError("must be one of enum values ('on_request', 'baseline', 'monitored', 'async', 'continuous')")
        return value

    @field_validator('on_failure')
    def on_failure_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['raise', 'retry', 'buffer']):
            raise ValueError("must be one of enum values ('raise', 'retry', 'buffer')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DevicePartial from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DevicePartial from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "readACL": obj.get("readACL"),
            "writeACL": obj.get("writeACL"),
            "owner": obj.get("owner"),
            "createdAt": obj.get("createdAt"),
            "createdBy": obj.get("createdBy"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "parentId": obj.get("parentId"),
            "sessionId": obj.get("sessionId"),
            "enabled": obj.get("enabled"),
            "readOnly": obj.get("readOnly"),
            "softwareTrigger": obj.get("softwareTrigger"),
            "deviceClass": obj.get("deviceClass"),
            "deviceTags": obj.get("deviceTags"),
            "deviceConfig": obj.get("deviceConfig"),
            "readoutPriority": obj.get("readoutPriority"),
            "onFailure": obj.get("onFailure"),
            "userParameter": obj.get("userParameter")
        })
        return _obj


