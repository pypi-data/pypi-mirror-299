# coding: utf-8

"""
    scibec

    scibec

    The version of the OpenAPI document: 1.14.2
    Contact: klaus.wakonig@psi.ch
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class ScanWithRelations(BaseModel):
    """
    (tsType: ScanWithRelations, schemaOptions: { includeRelations: true })
    """ # noqa: E501
    id: Optional[StrictStr] = None
    read_acl: Optional[List[StrictStr]] = Field(default=None, alias="readACL")
    write_acl: Optional[List[StrictStr]] = Field(default=None, alias="writeACL")
    owner: Optional[List[StrictStr]] = None
    created_at: Optional[datetime] = Field(default=None, alias="createdAt")
    created_by: Optional[StrictStr] = Field(default=None, alias="createdBy")
    scan_type: Optional[StrictStr] = Field(default=None, alias="scanType")
    scan_parameter: Optional[Dict[str, Any]] = Field(default=None, alias="scanParameter")
    user_parameter: Optional[Dict[str, Any]] = Field(default=None, alias="userParameter")
    scan_id: Optional[StrictStr] = Field(default=None, alias="scanId")
    request_id: Optional[StrictStr] = Field(default=None, alias="requestId")
    queue_id: Optional[StrictStr] = Field(default=None, alias="queueId")
    exit_status: Optional[StrictStr] = Field(default=None, alias="exitStatus")
    scan_number: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="scanNumber")
    metadata: Optional[Dict[str, Any]] = None
    files: Optional[Dict[str, Any]] = None
    session_id: Optional[StrictStr] = Field(default=None, alias="sessionId")
    dataset_id: Optional[StrictStr] = Field(default=None, alias="datasetId")
    experiment_id: Optional[StrictStr] = Field(default=None, alias="experimentId")
    session: Optional[SessionWithRelations] = None
    dataset: Optional[DatasetWithRelations] = None
    experiment: Optional[ExperimentWithRelations] = None
    scan_data: Optional[List[ScanDataWithRelations]] = Field(default=None, alias="scanData")
    __properties: ClassVar[List[str]] = ["id", "readACL", "writeACL", "owner", "createdAt", "createdBy", "scanType", "scanParameter", "userParameter", "scanId", "requestId", "queueId", "exitStatus", "scanNumber", "metadata", "files", "sessionId", "datasetId", "experimentId", "session", "dataset", "experiment", "scanData"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ScanWithRelations from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of session
        if self.session:
            _dict['session'] = self.session.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dataset
        if self.dataset:
            _dict['dataset'] = self.dataset.to_dict()
        # override the default output from pydantic by calling `to_dict()` of experiment
        if self.experiment:
            _dict['experiment'] = self.experiment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in scan_data (list)
        _items = []
        if self.scan_data:
            for _item in self.scan_data:
                if _item:
                    _items.append(_item.to_dict())
            _dict['scanData'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ScanWithRelations from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "readACL": obj.get("readACL"),
            "writeACL": obj.get("writeACL"),
            "owner": obj.get("owner"),
            "createdAt": obj.get("createdAt"),
            "createdBy": obj.get("createdBy"),
            "scanType": obj.get("scanType"),
            "scanParameter": obj.get("scanParameter"),
            "userParameter": obj.get("userParameter"),
            "scanId": obj.get("scanId"),
            "requestId": obj.get("requestId"),
            "queueId": obj.get("queueId"),
            "exitStatus": obj.get("exitStatus"),
            "scanNumber": obj.get("scanNumber"),
            "metadata": obj.get("metadata"),
            "files": obj.get("files"),
            "sessionId": obj.get("sessionId"),
            "datasetId": obj.get("datasetId"),
            "experimentId": obj.get("experimentId"),
            "session": SessionWithRelations.from_dict(obj["session"]) if obj.get("session") is not None else None,
            "dataset": DatasetWithRelations.from_dict(obj["dataset"]) if obj.get("dataset") is not None else None,
            "experiment": ExperimentWithRelations.from_dict(obj["experiment"]) if obj.get("experiment") is not None else None,
            "scanData": [ScanDataWithRelations.from_dict(_item) for _item in obj["scanData"]] if obj.get("scanData") is not None else None
        })
        return _obj

from py_scibec_openapi_client.models.dataset_with_relations import DatasetWithRelations
from py_scibec_openapi_client.models.experiment_with_relations import ExperimentWithRelations
from py_scibec_openapi_client.models.scan_data_with_relations import ScanDataWithRelations
from py_scibec_openapi_client.models.session_with_relations import SessionWithRelations
# TODO: Rewrite to not use raise_errors
ScanWithRelations.model_rebuild(raise_errors=False)

