# coding: utf-8

"""
    scibec

    scibec

    The version of the OpenAPI document: 1.14.2
    Contact: klaus.wakonig@psi.ch
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from py_scibec_openapi_client.models.access_account_filter_order import AccessAccountFilterOrder
from py_scibec_openapi_client.models.access_config_scope_filter_fields import AccessConfigScopeFilterFields
from typing import Optional, Set
from typing_extensions import Self

class DeviceScopeFilter(BaseModel):
    """
    DeviceScopeFilter
    """ # noqa: E501
    offset: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    limit: Optional[Annotated[int, Field(strict=True, ge=1)]] = None
    skip: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    order: Optional[AccessAccountFilterOrder] = None
    where: Optional[Dict[str, Any]] = None
    fields: Optional[AccessConfigScopeFilterFields] = None
    include: Optional[List[Dict[str, Any]]] = None
    __properties: ClassVar[List[str]] = ["offset", "limit", "skip", "order", "where", "fields", "include"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeviceScopeFilter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of order
        if self.order:
            _dict['order'] = self.order.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fields
        if self.fields:
            _dict['fields'] = self.fields.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeviceScopeFilter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "offset": obj.get("offset"),
            "limit": obj.get("limit"),
            "skip": obj.get("skip"),
            "order": AccessAccountFilterOrder.from_dict(obj["order"]) if obj.get("order") is not None else None,
            "where": obj.get("where"),
            "fields": AccessConfigScopeFilterFields.from_dict(obj["fields"]) if obj.get("fields") is not None else None,
            "include": obj.get("include")
        })
        return _obj


