# coding: utf-8

"""
    scibec

    scibec

    The version of the OpenAPI document: 1.14.2
    Contact: klaus.wakonig@psi.ch
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from py_scibec_openapi_client.models.scan_with_relations import ScanWithRelations
from typing import Optional, Set
from typing_extensions import Self

class NXEntityWithRelations(BaseModel):
    """
    (tsType: NXEntityWithRelations, schemaOptions: { includeRelations: true })
    """ # noqa: E501
    id: Optional[StrictStr] = None
    read_acl: Optional[List[StrictStr]] = Field(default=None, alias="readACL")
    write_acl: Optional[List[StrictStr]] = Field(default=None, alias="writeACL")
    owner: Optional[List[StrictStr]] = None
    created_at: Optional[datetime] = Field(default=None, alias="createdAt")
    created_by: Optional[StrictStr] = Field(default=None, alias="createdBy")
    name: Optional[StrictStr] = None
    type: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    data: Optional[Any] = None
    n_xclass: Optional[StrictStr] = Field(default=None, alias="NXclass")
    parent_id: Optional[StrictStr] = Field(default=None, alias="parentId")
    scan_id: Optional[StrictStr] = Field(default=None, description="The parent scan", alias="scanId")
    subentries: Optional[List[NXEntityWithRelations]] = None
    parent: Optional[NXEntityWithRelations] = None
    scan: Optional[ScanWithRelations] = None
    __properties: ClassVar[List[str]] = ["id", "readACL", "writeACL", "owner", "createdAt", "createdBy", "name", "type", "description", "data", "NXclass", "parentId", "scanId", "subentries", "parent", "scan"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['group', 'dataset', 'attribute']):
            raise ValueError("must be one of enum values ('group', 'dataset', 'attribute')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NXEntityWithRelations from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in subentries (list)
        _items = []
        if self.subentries:
            for _item in self.subentries:
                if _item:
                    _items.append(_item.to_dict())
            _dict['subentries'] = _items
        # override the default output from pydantic by calling `to_dict()` of parent
        if self.parent:
            _dict['parent'] = self.parent.to_dict()
        # override the default output from pydantic by calling `to_dict()` of scan
        if self.scan:
            _dict['scan'] = self.scan.to_dict()
        # set to None if data (nullable) is None
        # and model_fields_set contains the field
        if self.data is None and "data" in self.model_fields_set:
            _dict['data'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NXEntityWithRelations from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "readACL": obj.get("readACL"),
            "writeACL": obj.get("writeACL"),
            "owner": obj.get("owner"),
            "createdAt": obj.get("createdAt"),
            "createdBy": obj.get("createdBy"),
            "name": obj.get("name"),
            "type": obj.get("type"),
            "description": obj.get("description"),
            "data": obj.get("data"),
            "NXclass": obj.get("NXclass"),
            "parentId": obj.get("parentId"),
            "scanId": obj.get("scanId"),
            "subentries": [NXEntityWithRelations.from_dict(_item) for _item in obj["subentries"]] if obj.get("subentries") is not None else None,
            "parent": NXEntityWithRelations.from_dict(obj["parent"]) if obj.get("parent") is not None else None,
            "scan": ScanWithRelations.from_dict(obj["scan"]) if obj.get("scan") is not None else None
        })
        return _obj

# TODO: Rewrite to not use raise_errors
NXEntityWithRelations.model_rebuild(raise_errors=False)

