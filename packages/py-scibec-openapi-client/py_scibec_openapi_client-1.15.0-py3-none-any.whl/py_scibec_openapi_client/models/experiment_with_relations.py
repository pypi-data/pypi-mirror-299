# coding: utf-8

"""
    scibec

    scibec

    The version of the OpenAPI document: 1.14.2
    Contact: klaus.wakonig@psi.ch
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ExperimentWithRelations(BaseModel):
    """
    (tsType: ExperimentWithRelations, schemaOptions: { includeRelations: true })
    """ # noqa: E501
    id: Optional[StrictStr] = None
    read_acl: Optional[List[StrictStr]] = Field(default=None, alias="readACL")
    write_acl: Optional[List[StrictStr]] = Field(default=None, alias="writeACL")
    owner: Optional[List[StrictStr]] = None
    created_at: Optional[datetime] = Field(default=None, alias="createdAt")
    created_by: Optional[StrictStr] = Field(default=None, alias="createdBy")
    name: StrictStr
    beamline_id: StrictStr = Field(alias="beamlineId")
    write_account: Optional[StrictStr] = Field(default=None, alias="writeAccount")
    user_id: Optional[StrictStr] = Field(default=None, alias="userId")
    logbook: Optional[StrictStr] = None
    samples: Optional[List[StrictStr]] = None
    experiment_config: Optional[Dict[str, Any]] = Field(default=None, alias="experimentConfig")
    experiment_info: Optional[Dict[str, Any]] = Field(default=None, alias="experimentInfo")
    active_session: Optional[StrictStr] = Field(default=None, alias="activeSession")
    datasets: Optional[List[SessionWithRelations]] = None
    scans: Optional[List[ScanWithRelations]] = None
    experiment_accounts: Optional[List[ExperimentAccountWithRelations]] = Field(default=None, alias="experimentAccounts")
    sessions: Optional[List[SessionWithRelations]] = None
    __properties: ClassVar[List[str]] = ["id", "readACL", "writeACL", "owner", "createdAt", "createdBy", "name", "beamlineId", "writeAccount", "userId", "logbook", "samples", "experimentConfig", "experimentInfo", "activeSession", "datasets", "scans", "experimentAccounts", "sessions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExperimentWithRelations from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in datasets (list)
        _items = []
        if self.datasets:
            for _item in self.datasets:
                if _item:
                    _items.append(_item.to_dict())
            _dict['datasets'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in scans (list)
        _items = []
        if self.scans:
            for _item in self.scans:
                if _item:
                    _items.append(_item.to_dict())
            _dict['scans'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in experiment_accounts (list)
        _items = []
        if self.experiment_accounts:
            for _item in self.experiment_accounts:
                if _item:
                    _items.append(_item.to_dict())
            _dict['experimentAccounts'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in sessions (list)
        _items = []
        if self.sessions:
            for _item in self.sessions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['sessions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExperimentWithRelations from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "readACL": obj.get("readACL"),
            "writeACL": obj.get("writeACL"),
            "owner": obj.get("owner"),
            "createdAt": obj.get("createdAt"),
            "createdBy": obj.get("createdBy"),
            "name": obj.get("name"),
            "beamlineId": obj.get("beamlineId"),
            "writeAccount": obj.get("writeAccount"),
            "userId": obj.get("userId"),
            "logbook": obj.get("logbook"),
            "samples": obj.get("samples"),
            "experimentConfig": obj.get("experimentConfig"),
            "experimentInfo": obj.get("experimentInfo"),
            "activeSession": obj.get("activeSession"),
            "datasets": [SessionWithRelations.from_dict(_item) for _item in obj["datasets"]] if obj.get("datasets") is not None else None,
            "scans": [ScanWithRelations.from_dict(_item) for _item in obj["scans"]] if obj.get("scans") is not None else None,
            "experimentAccounts": [ExperimentAccountWithRelations.from_dict(_item) for _item in obj["experimentAccounts"]] if obj.get("experimentAccounts") is not None else None,
            "sessions": [SessionWithRelations.from_dict(_item) for _item in obj["sessions"]] if obj.get("sessions") is not None else None
        })
        return _obj

from py_scibec_openapi_client.models.experiment_account_with_relations import ExperimentAccountWithRelations
from py_scibec_openapi_client.models.scan_with_relations import ScanWithRelations
from py_scibec_openapi_client.models.session_with_relations import SessionWithRelations
# TODO: Rewrite to not use raise_errors
ExperimentWithRelations.model_rebuild(raise_errors=False)

