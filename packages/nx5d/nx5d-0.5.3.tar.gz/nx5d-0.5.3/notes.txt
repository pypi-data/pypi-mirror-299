Multi-byte data like word (unsigned 16 bit) or long int (signed 32bit) are always transmitted LSB first
(little-endian). The only exception to this is the CRC16 code that is transmitted MSB first (big-
endian).

Any one character in the message body (including header and checksum) that matches any of the
characters in the following table must be preceded with a SOE and the character itself must be masked by
adding the value 64 (Note that this excludes any character value above 255-64=191 from escaping)
Mnemonic 	Dec 	Hex 	Char 	Description
EOT			10		0A		‘\n’	End of transmission
SOT			13		0D		‘\r’	Start of transmission
X-ON		17		11		Ctrl+S	Used in software flow control as “transmission on” signal
X-OFF		19		13		Ctrl+Q 	Used in software flow control as “transmission off” signal
ECC			64		40
SOE			94		5E		Start of Escape Sequence


for every new command without received a replay the source number raises 00 01 02 03 ...
the replay to the sent command will hold that source number

the destination to send to the Menlo device seams FF
messages to the PC have destination 42

=========Enable PID==========
send: sot(0D)+destination(FF)+source(00)+command_write(05)+register_lockbox(01)_PID_on/off_(0301)_bool(01)+CRC_(85D2)+eot(0A)
0D FF 00 05 01 03 01 01 8A D2 0A

receive: sot(0D)+source(00)+destination(42)+command_ack(03)+cmd_write(05)+register_lockbox(01)+CRC_(3570)+eot(0A)
0D 00 42 03 05 01 35 70 0A
=============================

=======Enable Tracker========
send: sot(0D)+destination(FF)+source(03)+command_read(04)+register_lockbox(01)_PID_on/off_(0301)+CRC_(02DE)+eot(0A)
0D FF 03 04 01 03 01 02 DE 0A

receive: sot(0D)+source(03)+destination(42)+command_datagram(08)+register_lockbox(01)_PIDbool_on_(01)+CRC_(E797)+eot(0A)
0D 03 42 08 01 01 E7 97 0A 
=============================

========= Init send ==================
read PID integrator frequency
0D FF 00 04 01 03 08 02 AA 78 0A
read PID proportional gain 
0D FF 03 04 01 03 07 02 74 A6 0A
read PID on/off 
0D FF 04 04 01 03 01 65 5E 4A 0A
read PID Status 
0D FF 05 04 01 03 02 FF 38 0A
read tracker enable 
0D FF 06 04 02 01 D7 B5 0A 
read tracker state escaped 0x5e 0x4a --> 0A
0D FF 07 04 02 5E 4A 10 6A 0A 
read lockbox signal
0D FF 08 04 01 04 07 17 70 0A 
read PID differential frequency
0D FF 09 04 01 03 09 02 D1 AB 0A 
read lockbox offset_out
0D FF 0B 04 01 06 14 BD 92 0A 
============= Init receive ===============
0D 00 42 08 01 E8 03 00 00 42 65 0A				= [S32] 00 00 03 E8 (I freq) 1000
0D 03 42 08 01 88 5E 53 00 00 90 A1 0A 			= [S32] (53 escaped 13 {83-64=19}-->0x13) 00 00 13 88 (P gain) 5000
0D 04 42 08 01 00 90 62 0A 						= [bool] 0 pid off
0D 05 42 08 01 00 3A 33 0A 						= [U8] enum 0 pid status LB_STATE_OFF
0D 06 42 08 02 00 81 B2 0A 						= [bool] 0 tracker disabled
0D 07 42 08 02 00 2B E3 0A 						= [U8] enum tracker state OFF
0D 08 42 08 01 FB 9A 58 00 BD 7A 0A 			= [S32] 00 58 9A FB (sample output signal) 5806843 --> 5.806V
0D 09 42 08 01 A0 86 01 00 13 A8 0A 			= [S32] 00 01 86 A0 (I frequency) 100000 1000.0 Hz
0D 0B 42 08 01 E1 E3 3D 00 B4 45 0A 			= [S32] 00 3D E3 E1 (Offset_out Position) 4056033 µV
===========================================


===========Offset out==================
0D FF 07 04 01 06 14 36 B9 0A					= send read offset out
0D 07 42 08 01 09 A8 38 00 B6 72 0A				= [S32] replay offset out 0038a809 --> 3713033 µV
0D FF 01 05 01 06 14 F9 80 38 00 AD 19 0A		= [S32] send write offset out 3703033 (00 38 80 F9)
0D 01 42 03 05 01 9F 21 0A						= replay ack write register Lockbox (offset)
0D FF 02 04 01 06 14 15 EE 0A					= send read offset out
0D 02 42 08 01 F9 80 38 00 4E E6 0A				= [S32] replay offset out 003880f9 --> 3703033 µV
=======================================


================Gain=========================
0D FF 05 05 01 03 07 02 70 17 00 00 9B A2 0A	= [S32] send write P gain 6dB 6000 (00 00 17 70)
0D 05 42 03 05 01 16 27 0A						= replay ack write register Lockbox (P gain)
0D FF 09 04 01 03 07 02 F2 A4 0A				= read register Lockbox (P gain)
0D 09 42 08 01 70 17 00 00 C7 93 0A				= [S32] replay P gain 00 00 17 70 --> 6000 = 6dB
=============================================



