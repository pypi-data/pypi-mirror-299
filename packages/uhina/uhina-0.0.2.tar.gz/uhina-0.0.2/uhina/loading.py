"""Load data from spectral libraries."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_loading.ipynb.

# %% auto 0
__all__ = ['fname_ossl', 'fname_fuku', 'OSSLLoader', 'load_mir_ring_trial']

# %% ../nbs/00_loading.ipynb 2
import fastcore.all as fc
import pandas as pd
from pathlib import Path
from sklearn.preprocessing import LabelEncoder
import numpy as np
import re

# %% ../nbs/00_loading.ipynb 3
fname_ossl = Path.home() / '.lssm/data/ossl/ossl_all_L0_v1.2.csv.gz'

# %% ../nbs/00_loading.ipynb 4
class OSSLLoader:
    "Load OSSL data and filter it by spectra type and analytes of interest."
    CFGS = {
        'visnir': {'ref_col': 'scan_visnir.1500_ref', 'range': [400, 2500]},
        'mir': {'ref_col': 'scan_mir.1500_abs', 'range': [600, 4000]}
    }
    
    DTYPE_DICT = {
        'id.layer_local_c': 'object',
        'id.location_olc_txt': 'object',
        'id.dataset.site_ascii_txt': 'object',
        'id.scan_local_c': 'object',
        'layer.texture_usda_txt': 'object',
        'pedon.taxa_usda_txt': 'object',
        'horizon.designation_usda_txt': 'object',
        'location.country_iso.3166_txt': 'object',
        'surveyor.address_utf8_txt': 'object',
        'efferv_usda.a479_class': 'object',
        'scan.mir.date.begin_iso.8601_yyyy.mm.dd': 'object',
        'scan.mir.date.end_iso.8601_yyyy.mm.dd': 'object',
        'scan.mir.model.name_utf8_txt': 'object',
        'scan.mir.model.code_any_txt': 'object',
        'scan.mir.method.optics_any_txt': 'object',
        'scan.mir.method.preparation_any_txt': 'object',
        'scan.mir.license.title_ascii_txt': 'object',
        'scan.mir.license.address_idn_url': 'object',
        'scan.mir.doi_idf_url': 'object',
        'scan.mir.contact.name_utf8_txt': 'object',
        'scan.mir.contact.email_ietf_txt': 'object',
        'scan.visnir.date.begin_iso.8601_yyyy.mm.dd': 'object',
        'scan.visnir.date.end_iso.8601_yyyy.mm.dd': 'object',
        'scan.visnir.model.name_utf8_txt': 'object',
        'scan.visnir.model.code_any_txt': 'object',
        'scan.visnir.method.optics_any_txt': 'object',
        'scan.visnir.method.preparation_any_txt': 'object',
        'scan.visnir.license.title_ascii_txt': 'object',
        'scan.visnir.license.address_idn_url': 'object',
        'scan.visnir.doi_idf_url': 'object',
        'scan.visnir.contact.name_utf8_txt': 'object',
        'scan.visnir.contact.email_ietf_txt': 'object'
    }

    def __init__(self, fname: Path = Path.home() / '.lssm/data/ossl/ossl_all_L0_v1.2.csv.gz'):
        self.fname = fname
        self.df = None
        self.ds_name_encoder = LabelEncoder()

    def load_data(self, analytes: str|list, spectra_type: str = 'visnir', debug: bool = False):
        """Load OSSL data and filter it by spectra type and analytes of interest"""
        print(f'Loading data from {self.fname} ...')
        self.df = pd.read_csv(self.fname, dtype=self.DTYPE_DICT,
                              compression='infer', low_memory=True)

        if debug:
            return self.df

        analytes = [analytes] if isinstance(analytes, str) else analytes
        subset = analytes + [self.CFGS[spectra_type]['ref_col']]
        self.df = self.df.dropna(subset=subset, how='any')

        X = self._get_spectra(spectra_type)
        y = self.df[analytes].values
        smp_idx = self.df['id.layer_uuid_txt'].values
        ds_name = self._encode_dataset_names()
        X_names = self._get_wavelengths(spectra_type)

        return X, y, X_names, smp_idx, ds_name, self.ds_name_encoder.classes_

    def _get_spectra(self, spectra_type: str):
        cols_ref = [name for name in self.df.columns if f'scan_{spectra_type}.' in name]
        X = self.df[cols_ref].values
        lower_limit, upper_limit = self.CFGS[spectra_type]['range']
        X_names = self._get_wavelengths(spectra_type)
        idxs = np.where((X_names >= lower_limit) & (X_names <= upper_limit))[0]
        return X[:, idxs]

    def _encode_dataset_names(self):
        return self.ds_name_encoder.fit_transform(self.df['dataset.code_ascii_txt'])

    def _get_wavelengths(self, spectra_type: str):
        pattern = r"scan_{}\.(\d+)_".format(spectra_type)
        return np.array([int(re.search(pattern, name).group(1)) for name in self.df.columns
                         if re.search(pattern, name)])

# %% ../nbs/00_loading.ipynb 9
fname_fuku = '../_data/fk/Fukushimaall_Average.csv'

# %% ../nbs/00_loading.ipynb 14
def load_mir_ring_trial(fname): return pd.read_csv(fname)
