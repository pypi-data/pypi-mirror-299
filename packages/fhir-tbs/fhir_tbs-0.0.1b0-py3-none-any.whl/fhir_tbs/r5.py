from collections.abc import AsyncGenerator

import fhirpy_types_r5 as r5
from aiohttp import web
from fhirpy import AsyncFHIRClient

from .implementation import SubscriptionEvent, SubscriptionInfo, tbs_ctx_factory
from .types import SubscriptionDefinition


def r5_tbs_ctx_factory(
    app: web.Application,
    app_url: str,
    webhook_path_prefix: str,
    fhir_client: AsyncFHIRClient,
    subscriptions: list[SubscriptionDefinition],
) -> AsyncGenerator[None, None]:
    return tbs_ctx_factory(
        app,
        app_url,
        webhook_path_prefix,
        fhir_client,
        subscriptions,
        _fetch_subscription=r5_fetch_subscription,
        _fetch_subscription_events=r5_fetch_subscription_events,
        _build_subscription=r5_build_subscription,
        _extract_subscription_info=r5_extract_subscription_info,
        _extract_subscription_events_from_bundle=r5_extract_subscription_events_from_bundle,
    )


async def r5_fetch_subscription(
    fhir_client: AsyncFHIRClient, webhook_url: str
) -> r5.Subscription | None:
    return await fhir_client.resources(r5.Subscription).search(url=webhook_url).first()


async def r5_fetch_subscription_events(
    fhir_client: AsyncFHIRClient,
    subscription: r5.Subscription,
    since: int | None,
    until: int | None,
) -> list[SubscriptionEvent]:
    bundle_data = await fhir_client.execute(
        f"Subscription/{subscription.id}/$events",
        method="GET",
        params={"eventsSinceNumber": since, "eventsUntilNumber": until},
    )
    return r5_extract_subscription_events_from_bundle(bundle_data)


def r5_extract_subscription_info(subscription: r5.Subscription) -> SubscriptionInfo:
    token = None
    parameters = subscription.parameter or []
    for parameter in parameters:
        if parameter.name.lower() == "x-api-key":
            token = parameter.value

    return {"status": subscription.status, "token": token}


def r5_extract_subscription_events_from_bundle(
    bundle_data: dict,
) -> list[SubscriptionEvent]:
    notification_bundle = r5.Bundle(**bundle_data)
    assert notification_bundle.entry
    assert notification_bundle.entry[0]
    assert notification_bundle.entry[0].resource
    subscription_status = notification_bundle.entry[0].resource
    assert isinstance(subscription_status, r5.SubscriptionStatus)

    return [
        (event.focus.reference, event.timestamp, int(event.eventNumber))
        for event in (subscription_status.notificationEvent or [])
        if event.focus and event.focus.reference
    ]


def r5_build_subscription(
    name: str, webhook_url: str, token: str, subscription: SubscriptionDefinition
) -> r5.Subscription:
    return r5.Subscription(
        status="requested",
        reason=f"Autogenerated subscription for {name}",
        topic=subscription["topic"],
        channelType=r5.Coding(
            system="http://terminology.hl7.org/CodeSystem/subscription-channel-type",
            code="rest-hook",
        ),
        content="id-only",
        # maxCount must be 1
        maxCount=1,
        heartbeatPeriod=20,
        timeout=60,
        endpoint=webhook_url,
        parameter=[r5.SubscriptionParameter(name="X-Api-Key", value=token)],
    )
