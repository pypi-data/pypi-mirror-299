# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from ..core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from .gpu_type import GpuType
from .region import Region


class ConfigurationResponse(pydantic_v1.BaseModel):
    gpu_type: GpuType = pydantic_v1.Field()
    """
    The GPU type of the configuration.
    """

    gpu_counts: typing.List[int] = pydantic_v1.Field()
    """
    The number of GPUs in the configuration.
    """

    price_per_gpu_hr: str = pydantic_v1.Field()
    """
    The price per GPU hour of the configuration.
    """

    estimated_provisioning_time_minutes: typing.Optional[int] = None
    regions: typing.List[Region] = pydantic_v1.Field()
    """
    The regions the configuration is available in.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
