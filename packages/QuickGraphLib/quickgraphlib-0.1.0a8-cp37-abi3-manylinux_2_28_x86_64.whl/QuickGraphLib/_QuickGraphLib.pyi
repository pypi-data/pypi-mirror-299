# Copyright (C) 2022 The Qt Company Ltd.
# SPDX-License-Identifier: LicenseRef-Qt-Commercial OR LGPL-3.0-only OR GPL-2.0-only OR GPL-3.0-only
from __future__ import annotations

"""
This file contains the exact signatures for all functions in module
_QuickGraphLib, except for defaults which are replaced by "...".
"""

# Module `_QuickGraphLib`

import QuickGraphLib._QuickGraphLib
import numpy
import typing
import PySide6.QtCore
import PySide6.QtGui

from typing import List, Sequence, Union, overload
from shiboken6 import Shiboken


NoneType = type(None)


class QGLDoubleList(Shiboken.Object):

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, QGLDoubleList: Union[QuickGraphLib._QuickGraphLib.QGLDoubleList, typing.Sequence[float]]) -> None: ...
    @overload
    def __init__(self, v: Sequence[float]) -> None: ...

    def __add__(self, l: Sequence[float]) -> List[float]: ...
    @staticmethod
    def __copy__() -> None: ...
    def __iadd__(self, l: Sequence[float]) -> List[float]: ...
    def __lshift__(self, l: Sequence[float]) -> List[float]: ...
    @overload
    def append(self, arg__1: float) -> None: ...
    @overload
    def append(self, l: Sequence[float]) -> None: ...
    def at(self, i: int) -> float: ...
    def back(self) -> float: ...
    def capacity(self) -> int: ...
    def clear(self) -> None: ...
    def constFirst(self) -> float: ...
    def constLast(self) -> float: ...
    def count(self) -> int: ...
    def empty(self) -> bool: ...
    @overload
    def first(self) -> float: ...
    @overload
    def first(self, n: int) -> List[float]: ...
    @staticmethod
    def fromList(list: Sequence[float]) -> List[float]: ...
    @staticmethod
    def fromNDArray(data: numpy.ndarray) -> 'QuickGraphLib._QuickGraphLib.QGLDoubleList': ...
    @staticmethod
    def fromVector(vector: Sequence[float]) -> List[float]: ...
    def front(self) -> float: ...
    def insert(self, arg__1: int, arg__2: float) -> None: ...
    def isEmpty(self) -> bool: ...
    def isSharedWith(self, other: Sequence[float]) -> bool: ...
    @overload
    def last(self) -> float: ...
    @overload
    def last(self, n: int) -> List[float]: ...
    def length(self) -> int: ...
    def mid(self, pos: int, len: int = ...) -> List[float]: ...
    def move(self, from_: int, to: int) -> None: ...
    def pop_back(self) -> None: ...
    def pop_front(self) -> None: ...
    def prepend(self, arg__1: float) -> None: ...
    def push_back(self, arg__1: float) -> None: ...
    def push_front(self, arg__1: float) -> None: ...
    def remove(self, i: int, n: int = ...) -> None: ...
    def removeAll(self, arg__1: float) -> None: ...
    def removeAt(self, i: int) -> None: ...
    def removeFirst(self) -> None: ...
    def removeLast(self) -> None: ...
    def removeOne(self, arg__1: float) -> None: ...
    def reserve(self, size: int) -> None: ...
    def resize(self, size: int) -> None: ...
    def shrink_to_fit(self) -> None: ...
    def size(self) -> int: ...
    @overload
    def sliced(self, pos: int) -> List[float]: ...
    @overload
    def sliced(self, pos: int, n: int) -> List[float]: ...
    def squeeze(self) -> None: ...
    def swap(self, other: Union[QuickGraphLib._QuickGraphLib.QGLDoubleList, typing.Sequence[float]]) -> None: ...
    def swapItemsAt(self, i: int, j: int) -> None: ...
    def takeAt(self, i: int) -> float: ...
    def toList(self) -> List[float]: ...
    def toVector(self) -> List[float]: ...
    def value(self, i: int) -> float: ...


class QGLPolygonF(PySide6.QtGui.QPolygonF):

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, QGLPolygonF: Union[QuickGraphLib._QuickGraphLib.QGLPolygonF, typing.Sequence[PySide6.QtCore.QPointF], PySide6.QtGui.QPolygonF]) -> None: ...
    @overload
    def __init__(self, v: Sequence[PySide6.QtCore.QPointF]) -> None: ...
    @overload
    def __init__(self, v: Union[PySide6.QtGui.QPolygonF, Sequence[PySide6.QtCore.QPointF], PySide6.QtGui.QPolygon, PySide6.QtCore.QRectF]) -> None: ...

    @staticmethod
    def __copy__() -> None: ...
    @staticmethod
    def fromNDArray(data: numpy.ndarray) -> 'QuickGraphLib._QuickGraphLib.QGLPolygonF': ...
    def swap(self, other: Union[QuickGraphLib._QuickGraphLib.QGLPolygonF, typing.Sequence[PySide6.QtCore.QPointF], PySide6.QtGui.QPolygonF]) -> None: ...


class QIntList(object): ...


class QPointFList(object): ...


# eof
