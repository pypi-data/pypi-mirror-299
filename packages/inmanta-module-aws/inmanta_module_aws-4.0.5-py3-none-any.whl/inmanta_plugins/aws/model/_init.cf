"""
    Copyright 2018 Inmanta

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Contact: code@inmanta.com
"""
import ssh

entity Provider:
    """
        The configuration to access Amazon Web Services
    """
    string name
    string region
    string availability_zone
    string? access_key=null
    string? secret_key=null
    bool auto_agent=true
end

implement Provider using std::none
implement Provider using agentConfig when auto_agent

implementation agentConfig for Provider:
    std::AgentConfig(autostart=true, agentname=name, uri="local:", provides=self)
end

entity AWSResource extends std::PurgeableResource, std::ManagedResource:
end

AWSResource.provider [1] -- Provider

entity ELB extends AWSResource:
    """
        An ELB load balancer

        :attr purged The state of the loadbalancer
        :attr purge_on_delete Purge the loadbalancer when it is no longer included in the configuration model.
    """
    string name
    string security_group="default"
    std::port listen_port=80
    std::port dest_port=80
    string protocol="http"
end

implement ELB using std::none

entity VMAttributes:
    string flavor
    string image
    string user_data
    string? subnet_id=null
    bool source_dest_check=true
    bool ebs_optimized=false

    bool ignore_extra_volumes = false
    bool ignore_wrong_image = false

    int root_volume_size = 16
    string root_volume_type = "gp2"

end

entity VirtualMachine extends VMAttributes, AWSResource:
    """
        This entity represents a virtual machine that is hosted on an IaaS

        :attr flavor: An id representing the type of virtual machine
        :attr image: An id that represents the image that needs to be used to
                        boot the virtual machine.
        :attr user_data: A script that is booted on first boot
        :attr subnet_id: Boot the vm in the subnet with this id. Either use this attribute
                         or the subnet relation.
    """
    string name
    dict tags={}
end

index VirtualMachine(provider, name)

implement VirtualMachine using req

implementation req for VirtualMachine:
    self.requires = self.provider.requires
    for volume in volumes:
        self.requires = volume
    end
    if self.subnet is defined:
        self.requires = self.subnet
    end
    self.requires = self.security_groups
end

VirtualMachine.public_key [1] -- ssh::Key
VirtualMachine.subnet [0:1] -- Subnet
"""
    Boot the vm in this subnet. Either use this relation or provide a subnet id directly.
"""

VirtualMachine.security_groups [0:] -- SecurityGroup
"""
    The security groups that apply to this vm. If no group is supplied the default security group will
    be applied by EC2
"""

ELB.instances [0:] -- VirtualMachine

entity Volume extends AWSResource:
    string name
    string attachmentpoint="/dev/sdb"
    string availability_zone
    bool encrypted=false
    int size=10
    string volume_type="gp2"
    dict tags={}
end

index Volume(provider, name)
implement Volume using std::none

VirtualMachine.volumes [0:] -- Volume.vm [0:1]

typedef instance_tenancy as string matching /^(default|dedicated|host)$/

entity VPC extends AWSResource:
    """
        A VPC on Amazon

        :attr name: The name of the VPC. Inmanta uses this name to idenfiy the vpc. It is set as the name
                    tag on the vpc resource.
        :attr cidr_block: The IPv4 network range for the VPC, in CIDR notation. For example, 10.0.0.0/16.
        :attr instance_tenancy: The tenancy options for instances launched into the VPC. For default ,
                                instances are launched with shared tenancy by default. You can launch instances
                                with any tenancy into a shared tenancy VPC. For dedicated , instances are
                                launched as dedicated tenancy instances by default. You can only launch instances
                                with a tenancy of dedicated or host into a dedicated tenancy VPC.
    """
    string name
    std::ipv4_network cidr_block
    instance_tenancy instance_tenancy="default"
    bool enableDnsHostnames=false
    bool enableDnsSupport=false
end

index VPC(provider, name)

implement VPC using std::none

entity Subnet extends AWSResource:
    """
        A subnet in a vpc

        :attr name: The name of the subnet. Inmanta uses this name to idenfiy the subnet. It is set as the name
                    tag on the subnet resource.
        :attr availability_zone: The Availability Zone for the subnet.
        :attr cidr_block: The IPv4 network range for the VPC, in CIDR notation. For example, 10.0.0.0/24.
        :attr map_public_ip_on_launch: Specify true to indicate that network interfaces created in the specified subnet
                                       should be assigned a public IPv4 address. This includes a network interface that's
                                       created when launching an instance into the subnet (the instance therefore receives
                                       a public IPv4 address).
    """
    string name
    string? availability_zone=null
    std::ipv4_network cidr_block
    bool map_public_ip_on_launch=false
end

index Subnet(provider, name)

Subnet.vpc [1] -- VPC.subnets [0:]
"""
    The VPC the subnet is created in.
"""

implement Subnet using std::none

entity InternetGateway extends AWSResource:
    """
        An Internet gateway for use with a VPC.

    """
    string name
end

index InternetGateway(provider, name)

VPC.internet_gateway [0:1] -- InternetGateway.vpc [0:1]

implement InternetGateway using std::none

# Route entry
entity Route extends AWSResource:
    """
        A route entry in the main VPC routing table

        :attr destination: The destination route
        :attr nexthop: The private ip associated with a ENI in the VPC.
    """
    std::ipv4_network destination
    std::ipv4_address nexthop
end

VPC.routes [0:] -- Route.vpc [1]

implement Route using std::none

# Security group config
typedef direction as string matching self == "ingress" or self == "egress"

entity SecurityGroup extends AWSResource:
    """
        :param retries: A security group can only be deleted when it is no longer in use. The API confirms the delete of a virtual machine for example, but
                        it might still be in progress. This results in a failure to delete the security group. To speed up deployments, the handler can
                        retry this number of times before skipping the resource.
        :param wait: The number of seconds to wait between retries.
    """
    string description=""
    string name
    bool manage_all=true
    int retries=10
    int wait=5
end

index SecurityGroup(provider, name)

implement SecurityGroup using std::none

typedef protocol as string matching self in ["tcp", "udp", "icmp", "sctp", "all"]

entity SecurityRule:
    """
        A filter rule in the a security group

        :param ip_protocol The type of ip protocol to allow. Currently this support tcp/udp/icmp/sctp or all
    """
    protocol ip_protocol
    std::port port_min=0
    std::port port_max=0
    std::port port=0
    direction direction
end

entity IPrule extends SecurityRule:
    std::ipv4_network remote_prefix
end

entity GroupRule extends SecurityRule:
end

GroupRule.remote_group [1] -- SecurityGroup

implement IPrule using std::none
implement GroupRule using std::none

SecurityRule.group [1] -- SecurityGroup.rules [0:]

SecurityGroup.vpc [1] -- VPC
