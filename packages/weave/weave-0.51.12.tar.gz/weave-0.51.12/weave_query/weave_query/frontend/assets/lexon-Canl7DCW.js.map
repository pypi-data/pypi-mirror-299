{"version":3,"file":"lexon-Canl7DCW.js","sources":["../../node_modules/monaco-editor/esm/vs/basic-languages/lexon/lexon.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport var conf = {\n    comments: {\n        lineComment: 'COMMENT'\n        // blockComment: ['COMMENT', '.'],\n    },\n    brackets: [['(', ')']],\n    autoClosingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '\"', close: '\"' },\n        { open: ':', close: '.' }\n    ],\n    surroundingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '`', close: '`' },\n        { open: '\"', close: '\"' },\n        { open: \"'\", close: \"'\" },\n        { open: ':', close: '.' }\n    ],\n    folding: {\n        markers: {\n            start: new RegExp('^\\\\s*(::\\\\s*|COMMENT\\\\s+)#region'),\n            end: new RegExp('^\\\\s*(::\\\\s*|COMMENT\\\\s+)#endregion')\n        }\n    }\n};\nexport var language = {\n    // Set defaultToken to invalid to see what you do not tokenize yet\n    // defaultToken: 'invalid',\n    tokenPostfix: '.lexon',\n    ignoreCase: true,\n    keywords: [\n        'lexon',\n        'lex',\n        'clause',\n        'terms',\n        'contracts',\n        'may',\n        'pay',\n        'pays',\n        'appoints',\n        'into',\n        'to'\n    ],\n    typeKeywords: ['amount', 'person', 'key', 'time', 'date', 'asset', 'text'],\n    operators: [\n        'less',\n        'greater',\n        'equal',\n        'le',\n        'gt',\n        'or',\n        'and',\n        'add',\n        'added',\n        'subtract',\n        'subtracted',\n        'multiply',\n        'multiplied',\n        'times',\n        'divide',\n        'divided',\n        'is',\n        'be',\n        'certified'\n    ],\n    // we include these common regular expressions\n    symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n    // The main tokenizer for our languages\n    tokenizer: {\n        root: [\n            // comment\n            [/^(\\s*)(comment:?(?:\\s.*|))$/, ['', 'comment']],\n            // special identifier cases\n            [\n                /\"/,\n                {\n                    token: 'identifier.quote',\n                    bracket: '@open',\n                    next: '@quoted_identifier'\n                }\n            ],\n            [\n                'LEX$',\n                {\n                    token: 'keyword',\n                    bracket: '@open',\n                    next: '@identifier_until_period'\n                }\n            ],\n            ['LEXON', { token: 'keyword', bracket: '@open', next: '@semver' }],\n            [\n                ':',\n                {\n                    token: 'delimiter',\n                    bracket: '@open',\n                    next: '@identifier_until_period'\n                }\n            ],\n            // identifiers and keywords\n            [\n                /[a-z_$][\\w$]*/,\n                {\n                    cases: {\n                        '@operators': 'operator',\n                        '@typeKeywords': 'keyword.type',\n                        '@keywords': 'keyword',\n                        '@default': 'identifier'\n                    }\n                }\n            ],\n            // whitespace\n            { include: '@whitespace' },\n            // delimiters and operators\n            [/[{}()\\[\\]]/, '@brackets'],\n            [/[<>](?!@symbols)/, '@brackets'],\n            [/@symbols/, 'delimiter'],\n            // numbers\n            [/\\d*\\.\\d*\\.\\d*/, 'number.semver'],\n            [/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float'],\n            [/0[xX][0-9a-fA-F]+/, 'number.hex'],\n            [/\\d+/, 'number'],\n            // delimiter: after number because of .\\d floats\n            [/[;,.]/, 'delimiter']\n        ],\n        quoted_identifier: [\n            [/[^\\\\\"]+/, 'identifier'],\n            [/\"/, { token: 'identifier.quote', bracket: '@close', next: '@pop' }]\n        ],\n        space_identifier_until_period: [\n            [':', 'delimiter'],\n            [' ', { token: 'white', next: '@identifier_rest' }]\n        ],\n        identifier_until_period: [\n            { include: '@whitespace' },\n            [':', { token: 'delimiter', next: '@identifier_rest' }],\n            [/[^\\\\.]+/, 'identifier'],\n            [/\\./, { token: 'delimiter', bracket: '@close', next: '@pop' }]\n        ],\n        identifier_rest: [\n            [/[^\\\\.]+/, 'identifier'],\n            [/\\./, { token: 'delimiter', bracket: '@close', next: '@pop' }]\n        ],\n        semver: [\n            { include: '@whitespace' },\n            [':', 'delimiter'],\n            [/\\d*\\.\\d*\\.\\d*/, { token: 'number.semver', bracket: '@close', next: '@pop' }]\n        ],\n        whitespace: [[/[ \\t\\r\\n]+/, 'white']]\n    }\n};\n"],"names":["conf","language"],"mappings":"AAIU,IAACA,EAAO,CACd,SAAU,CACN,YAAa,SAEhB,EACD,SAAU,CAAC,CAAC,IAAK,GAAG,CAAC,EACrB,iBAAkB,CACd,CAAE,KAAM,IAAK,MAAO,GAAK,EACzB,CAAE,KAAM,IAAK,MAAO,GAAK,EACzB,CAAE,KAAM,IAAK,MAAO,GAAK,EACzB,CAAE,KAAM,IAAK,MAAO,GAAK,EACzB,CAAE,KAAM,IAAK,MAAO,GAAK,CAC5B,EACD,iBAAkB,CACd,CAAE,KAAM,IAAK,MAAO,GAAK,EACzB,CAAE,KAAM,IAAK,MAAO,GAAK,EACzB,CAAE,KAAM,IAAK,MAAO,GAAK,EACzB,CAAE,KAAM,IAAK,MAAO,GAAK,EACzB,CAAE,KAAM,IAAK,MAAO,GAAK,EACzB,CAAE,KAAM,IAAK,MAAO,GAAK,EACzB,CAAE,KAAM,IAAK,MAAO,GAAK,CAC5B,EACD,QAAS,CACL,QAAS,CACL,MAAO,IAAI,OAAO,kCAAkC,EACpD,IAAK,IAAI,OAAO,qCAAqC,CACxD,CACJ,CACL,EACWC,EAAW,CAGlB,aAAc,SACd,WAAY,GACZ,SAAU,CACN,QACA,MACA,SACA,QACA,YACA,MACA,MACA,OACA,WACA,OACA,IACH,EACD,aAAc,CAAC,SAAU,SAAU,MAAO,OAAQ,OAAQ,QAAS,MAAM,EACzE,UAAW,CACP,OACA,UACA,QACA,KACA,KACA,KACA,MACA,MACA,QACA,WACA,aACA,WACA,aACA,QACA,SACA,UACA,KACA,KACA,WACH,EAED,QAAS,wBAET,UAAW,CACP,KAAM,CAEF,CAAC,8BAA+B,CAAC,GAAI,SAAS,CAAC,EAE/C,CACI,IACA,CACI,MAAO,mBACP,QAAS,QACT,KAAM,oBACT,CACJ,EACD,CACI,OACA,CACI,MAAO,UACP,QAAS,QACT,KAAM,0BACT,CACJ,EACD,CAAC,QAAS,CAAE,MAAO,UAAW,QAAS,QAAS,KAAM,UAAW,EACjE,CACI,IACA,CACI,MAAO,YACP,QAAS,QACT,KAAM,0BACT,CACJ,EAED,CACI,gBACA,CACI,MAAO,CACH,aAAc,WACd,gBAAiB,eACjB,YAAa,UACb,WAAY,YACf,CACJ,CACJ,EAED,CAAE,QAAS,aAAe,EAE1B,CAAC,aAAc,WAAW,EAC1B,CAAC,mBAAoB,WAAW,EAChC,CAAC,WAAY,WAAW,EAExB,CAAC,gBAAiB,eAAe,EACjC,CAAC,2BAA4B,cAAc,EAC3C,CAAC,oBAAqB,YAAY,EAClC,CAAC,MAAO,QAAQ,EAEhB,CAAC,QAAS,WAAW,CACxB,EACD,kBAAmB,CACf,CAAC,UAAW,YAAY,EACxB,CAAC,IAAK,CAAE,MAAO,mBAAoB,QAAS,SAAU,KAAM,OAAQ,CACvE,EACD,8BAA+B,CAC3B,CAAC,IAAK,WAAW,EACjB,CAAC,IAAK,CAAE,MAAO,QAAS,KAAM,kBAAkB,CAAE,CACrD,EACD,wBAAyB,CACrB,CAAE,QAAS,aAAe,EAC1B,CAAC,IAAK,CAAE,MAAO,YAAa,KAAM,kBAAkB,CAAE,EACtD,CAAC,UAAW,YAAY,EACxB,CAAC,KAAM,CAAE,MAAO,YAAa,QAAS,SAAU,KAAM,OAAQ,CACjE,EACD,gBAAiB,CACb,CAAC,UAAW,YAAY,EACxB,CAAC,KAAM,CAAE,MAAO,YAAa,QAAS,SAAU,KAAM,OAAQ,CACjE,EACD,OAAQ,CACJ,CAAE,QAAS,aAAe,EAC1B,CAAC,IAAK,WAAW,EACjB,CAAC,gBAAiB,CAAE,MAAO,gBAAiB,QAAS,SAAU,KAAM,OAAQ,CAChF,EACD,WAAY,CAAC,CAAC,aAAc,OAAO,CAAC,CACvC,CACL","x_google_ignoreList":[0]}