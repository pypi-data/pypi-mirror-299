{"version":3,"file":"yaml-A89blxgn.js","sources":["../../node_modules/monaco-editor/esm/vs/basic-languages/yaml/yaml.js"],"sourcesContent":["export var conf = {\n    comments: {\n        lineComment: '#'\n    },\n    brackets: [\n        ['{', '}'],\n        ['[', ']'],\n        ['(', ')']\n    ],\n    autoClosingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '\"', close: '\"' },\n        { open: \"'\", close: \"'\" }\n    ],\n    surroundingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '\"', close: '\"' },\n        { open: \"'\", close: \"'\" }\n    ],\n    folding: {\n        offSide: true\n    }\n};\nexport var language = {\n    tokenPostfix: '.yaml',\n    brackets: [\n        { token: 'delimiter.bracket', open: '{', close: '}' },\n        { token: 'delimiter.square', open: '[', close: ']' }\n    ],\n    keywords: ['true', 'True', 'TRUE', 'false', 'False', 'FALSE', 'null', 'Null', 'Null', '~'],\n    numberInteger: /(?:0|[+-]?[0-9]+)/,\n    numberFloat: /(?:0|[+-]?[0-9]+)(?:\\.[0-9]+)?(?:e[-+][1-9][0-9]*)?/,\n    numberOctal: /0o[0-7]+/,\n    numberHex: /0x[0-9a-fA-F]+/,\n    numberInfinity: /[+-]?\\.(?:inf|Inf|INF)/,\n    numberNaN: /\\.(?:nan|Nan|NAN)/,\n    numberDate: /\\d{4}-\\d\\d-\\d\\d([Tt ]\\d\\d:\\d\\d:\\d\\d(\\.\\d+)?(( ?[+-]\\d\\d?(:\\d\\d)?)|Z)?)?/,\n    escapes: /\\\\(?:[btnfr\\\\\"']|[0-7][0-7]?|[0-3][0-7]{2})/,\n    tokenizer: {\n        root: [\n            { include: '@whitespace' },\n            { include: '@comment' },\n            // Directive\n            [/%[^ ]+.*$/, 'meta.directive'],\n            // Document Markers\n            [/---/, 'operators.directivesEnd'],\n            [/\\.{3}/, 'operators.documentEnd'],\n            // Block Structure Indicators\n            [/[-?:](?= )/, 'operators'],\n            { include: '@anchor' },\n            { include: '@tagHandle' },\n            { include: '@flowCollections' },\n            { include: '@blockStyle' },\n            // Numbers\n            [/@numberInteger(?![ \\t]*\\S+)/, 'number'],\n            [/@numberFloat(?![ \\t]*\\S+)/, 'number.float'],\n            [/@numberOctal(?![ \\t]*\\S+)/, 'number.octal'],\n            [/@numberHex(?![ \\t]*\\S+)/, 'number.hex'],\n            [/@numberInfinity(?![ \\t]*\\S+)/, 'number.infinity'],\n            [/@numberNaN(?![ \\t]*\\S+)/, 'number.nan'],\n            [/@numberDate(?![ \\t]*\\S+)/, 'number.date'],\n            // Key:Value pair\n            [/(\".*?\"|'.*?'|.*?)([ \\t]*)(:)( |$)/, ['type', 'white', 'operators', 'white']],\n            { include: '@flowScalars' },\n            // String nodes\n            [\n                /[^#]+/,\n                {\n                    cases: {\n                        '@keywords': 'keyword',\n                        '@default': 'string'\n                    }\n                }\n            ]\n        ],\n        // Flow Collection: Flow Mapping\n        object: [\n            { include: '@whitespace' },\n            { include: '@comment' },\n            // Flow Mapping termination\n            [/\\}/, '@brackets', '@pop'],\n            // Flow Mapping delimiter\n            [/,/, 'delimiter.comma'],\n            // Flow Mapping Key:Value delimiter\n            [/:(?= )/, 'operators'],\n            // Flow Mapping Key:Value key\n            [/(?:\".*?\"|'.*?'|[^,\\{\\[]+?)(?=: )/, 'type'],\n            // Start Flow Style\n            { include: '@flowCollections' },\n            { include: '@flowScalars' },\n            // Scalar Data types\n            { include: '@tagHandle' },\n            { include: '@anchor' },\n            { include: '@flowNumber' },\n            // Other value (keyword or string)\n            [\n                /[^\\},]+/,\n                {\n                    cases: {\n                        '@keywords': 'keyword',\n                        '@default': 'string'\n                    }\n                }\n            ]\n        ],\n        // Flow Collection: Flow Sequence\n        array: [\n            { include: '@whitespace' },\n            { include: '@comment' },\n            // Flow Sequence termination\n            [/\\]/, '@brackets', '@pop'],\n            // Flow Sequence delimiter\n            [/,/, 'delimiter.comma'],\n            // Start Flow Style\n            { include: '@flowCollections' },\n            { include: '@flowScalars' },\n            // Scalar Data types\n            { include: '@tagHandle' },\n            { include: '@anchor' },\n            { include: '@flowNumber' },\n            // Other value (keyword or string)\n            [\n                /[^\\],]+/,\n                {\n                    cases: {\n                        '@keywords': 'keyword',\n                        '@default': 'string'\n                    }\n                }\n            ]\n        ],\n        // First line of a Block Style\n        multiString: [[/^( +).+$/, 'string', '@multiStringContinued.$1']],\n        // Further lines of a Block Style\n        //   Workaround for indentation detection\n        multiStringContinued: [\n            [\n                /^( *).+$/,\n                {\n                    cases: {\n                        '$1==$S2': 'string',\n                        '@default': { token: '@rematch', next: '@popall' }\n                    }\n                }\n            ]\n        ],\n        whitespace: [[/[ \\t\\r\\n]+/, 'white']],\n        // Only line comments\n        comment: [[/#.*$/, 'comment']],\n        // Start Flow Collections\n        flowCollections: [\n            [/\\[/, '@brackets', '@array'],\n            [/\\{/, '@brackets', '@object']\n        ],\n        // Start Flow Scalars (quoted strings)\n        flowScalars: [\n            [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'],\n            [/'([^'\\\\]|\\\\.)*$/, 'string.invalid'],\n            [/'[^']*'/, 'string'],\n            [/\"/, 'string', '@doubleQuotedString']\n        ],\n        doubleQuotedString: [\n            [/[^\\\\\"]+/, 'string'],\n            [/@escapes/, 'string.escape'],\n            [/\\\\./, 'string.escape.invalid'],\n            [/\"/, 'string', '@pop']\n        ],\n        // Start Block Scalar\n        blockStyle: [[/[>|][0-9]*[+-]?$/, 'operators', '@multiString']],\n        // Numbers in Flow Collections (terminate with ,]})\n        flowNumber: [\n            [/@numberInteger(?=[ \\t]*[,\\]\\}])/, 'number'],\n            [/@numberFloat(?=[ \\t]*[,\\]\\}])/, 'number.float'],\n            [/@numberOctal(?=[ \\t]*[,\\]\\}])/, 'number.octal'],\n            [/@numberHex(?=[ \\t]*[,\\]\\}])/, 'number.hex'],\n            [/@numberInfinity(?=[ \\t]*[,\\]\\}])/, 'number.infinity'],\n            [/@numberNaN(?=[ \\t]*[,\\]\\}])/, 'number.nan'],\n            [/@numberDate(?=[ \\t]*[,\\]\\}])/, 'number.date']\n        ],\n        tagHandle: [[/\\![^ ]*/, 'tag']],\n        anchor: [[/[&*][^ ]+/, 'namespace']]\n    }\n};\n"],"names":["conf","language"],"mappings":"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","x_google_ignoreList":[0]}