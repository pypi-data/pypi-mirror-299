{"version":3,"file":"pca-C6P6MZmw.js","sources":["../../node_modules/pca-js/pca.js"],"sourcesContent":["var PCA = (function () {\n    /**\n     * The first step is to subtract the mean and center data\n     * \n     * @param {Array} matrix - data in an mXn matrix format\n     * @returns \n     */\n    function computeDeviationMatrix(matrix) {\n        var unit = unitSquareMatrix(matrix.length);\n        return subtract(matrix, scale(multiply(unit, matrix), 1 / matrix.length));\n    }\n    /**\n     * Computes variance from deviation\n     * \n     * @param {Array} deviation - data minus mean as calculated from computeDeviationMatrix\n     * @returns \n     */\n    function computeDeviationScores(deviation) {\n        var devSumOfSquares = multiply(transpose(deviation), deviation);\n        return devSumOfSquares;\n    }\n    /**\n     * Calculates the var covar square matrix using either population or sample\n     * \n     * @param {Array} devSumOfSquares \n     * @param {boolean} sample - true/false whether data is from sample or not\n     * @returns \n     */\n    function computeVarianceCovariance(devSumOfSquares, sample) {\n        var varianceCovariance;\n        if (sample)\n            varianceCovariance = scale(devSumOfSquares, 1 / (devSumOfSquares.length - 1));\n        else\n            varianceCovariance = scale(devSumOfSquares, 1 / (devSumOfSquares.length));\n        return varianceCovariance;\n    }\n    /**\n     * Matrix is the deviation sum of squares as computed earlier\n     * \n     * @param {Array} matrix - output of computeDeviationScores\n     * @returns \n     */\n    function computeSVD(matrix) {\n        var result = svd(matrix);\n        console.log(result)\n        var eigenvectors = result.U;\n        var eigenvalues = result.S;\n        var results = eigenvalues.map(function (value, i) {\n            var obj = {};\n            obj.eigenvalue = value;\n            obj.vector = eigenvectors.map(function (vector, j) {\n                return -1 * vector[i]; //HACK prevent completely negative vectors\n            });\n            return obj;\n        });\n        return results;\n    }\n    /**\n     * Get reduced dataset after removing some dimensions\n     * \n     * @param {Array} data - initial matrix started out with\n     * @param {rest} vectors - eigenvectors selected as part of process\n     * @returns \n     */\n    function computeAdjustedData(data, ...vectorObjs) {\n        //FIXME no need to transpose vectors since they're already in row normal form\n        var vectors = vectorObjs.map(function(v){return v.vector});\n        var matrixMinusMean = computeDeviationMatrix(data);\n        var adjustedData = multiply(vectors, transpose(matrixMinusMean));\n        var unit = unitSquareMatrix(data.length);\n        var avgData = scale(multiply(unit, data), -1 / data.length); //NOTE get the averages to add back\n\n        var formattedAdjustData = formatData(adjustedData, 2);\n        return {\n            adjustedData: adjustedData,\n            formattedAdjustedData: formattedAdjustData,\n            avgData: avgData,\n            selectedVectors: vectors\n        };\n    }\n\n    /**\n     * Get original data set from reduced data set (decompress)\n     * @param {*} adjustedData = formatted or unformatted adjusted data\n     * @param {*} vectors = selectedVectors\n     * @param {*} avgData = avgData\n     */\n    function computeOriginalData(adjustedData, vectors, avgData) {\n        var originalWithoutMean = transpose(multiply(transpose(vectors), adjustedData));\n        var originalWithMean = subtract(originalWithoutMean, avgData);\n        var formattedData = formatData(originalWithMean, 2);\n        return {\n            originalData: originalWithMean,\n            formattedOriginalData: formattedData\n        }\n    }\n\n    /**\n     * Get percentage explained, or loss\n     * @param {*} vectors \n     * @param {*} selected \n     */\n    function computePercentageExplained(vectors, ...selected) {\n        var total = vectors.map(function (v) {\n            return v.eigenvalue\n        }).reduce(function (a, b) {\n            return a + b;\n        });\n        var explained = selected.map(function (v) {\n            return v.eigenvalue\n        }).reduce(function (a, b) {\n            return a + b;\n        });\n        return (explained / total);\n    }\n\n    function getEigenVectors(data) {\n        return computeSVD(computeVarianceCovariance(computeDeviationScores(computeDeviationMatrix(data)), false));\n    }\n\n    function analyseTopResult(data) {\n        var eigenVectors = getEigenVectors(data);\n        var sorted = eigenVectors.sort(function (a, b) {\n            return b.eigenvalue - a.eigenvalue;\n        });\n        console.log('Sorted Vectors', sorted);\n        var selected = sorted[0].vector;\n        return computeAdjustedData(data, selected);\n    }\n\n    function formatData(data, precision) {\n        var TEN = Math.pow(10, precision || 2);\n        return data.map(function (d, i) {\n            return d.map(function (n) {\n                return Math.round(n * TEN) / TEN;\n            })\n        })\n    }\n    /**\n     * Multiplies AxB, where A and B are matrices of nXm and mXn dimensions\n     * @param {} a \n     * @param {*} b \n     */\n    function multiply(a, b) {\n        if (!a[0] || !b[0] || !a.length || !b.length) {\n            throw new Error('Both A and B should be matrices');\n        }\n\n        if (b.length !== a[0].length) {\n            throw new Error('Columns in A should be the same as the number of rows in B');\n        }\n        var product = [];\n\n        for (var i = 0; i < a.length; i++) {\n            product[i] = []; //initialize a new row\n            for (var j = 0; j < b[0].length; j++) {\n                for (var k = 0; k < a[0].length; k++) {\n                    (product[i])[j] = !!(product[i])[j] ? (product[i])[j] + (a[i])[k] * (b[k])[j] : (a[i])[k] * (b[k])[j];\n                }\n            }\n        }\n        return product;\n    }\n    /**\n     * Utility function to subtract matrix b from a\n     * \n     * @param {any} a \n     * @param {any} b \n     * @returns \n     */\n    function subtract(a, b) {\n        if (!(a.length === b.length && a[0].length === b[0].length))\n            throw new Error('Both A and B should have the same dimensions');\n        var result = [];\n        for (var i = 0; i < a.length; i++) {\n            result[i] = [];\n            for (var j = 0; j < b[0].length; j++) {\n                (result[i])[j] = (a[i])[j] - (b[i])[j];\n            }\n        }\n        return result;\n    }\n    /**\n     * Multiplies a matrix into a factor\n     * \n     * @param {any} matrix \n     * @param {any} factor \n     * @returns \n     */\n    function scale(matrix, factor) {\n        var result = [];\n        for (var i = 0; i < matrix.length; i++) {\n            result[i] = [];\n            for (var j = 0; j < matrix[0].length; j++) {\n                (result[i])[j] = (matrix[i])[j] * factor;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * Generates a unit square matrix\n     * @param {*} rows = number of rows to fill\n     */\n    function unitSquareMatrix(rows) {\n        var result = [];\n        for (var i = 0; i < rows; i++) {\n            result[i] = [];\n            for (var j = 0; j < rows; j++) {\n                (result[i])[j] = 1;\n            }\n        }\n        return result;\n    }\n    /**\n     * Transposes a matrix, converts rows to columns\n     * @param {*} matrix \n     */\n    function transpose(matrix) {\n        var operated = clone(matrix);\n        return operated[0].map(function (m, c) {\n            return matrix.map(function (r) {\n                return r[c];\n            });\n        });\n    }\n    /**\n     * Deep Clones a matrix\n     * @param {*} arr \n     */\n    function clone(arr) {\n        var string = JSON.stringify(arr);\n        var result = JSON.parse(string);\n        return result;\n    }\n\n    /**\n     * Compute the thin SVD from G. H. Golub and C. Reinsch, Numer. Math. 14, 403-420 (1970)\n     * From the Numeric JS Implementation Copyright (C) 2011 by SÃ©bastien Loisel\n     * The C implementation from which this has been taken may be found here: http://www.public.iastate.edu/~dicook/JSS/paper/code/svd.c\n     * @param {*} A = m*n matrix\n     */\n    function svd(A) {\n        var temp;\n        var prec = Math.pow(2, -52) // assumes double prec\n        var tolerance = 1.e-64 / prec;\n        var itmax = 50;\n        var c = 0;\n        var i = 0;\n        var j = 0;\n        var k = 0;\n        var l = 0;\n        var u = clone(A);\n        var m = u.length;\n        var n = u[0].length;\n\n        if (m < n) throw \"Need more rows than columns\"\n\n        var e = new Array(n); //vector1\n        var q = new Array(n); //vector2\n        for (i = 0; i < n; i++) e[i] = q[i] = 0.0;\n        var v = rep([n, n], 0);\n\n        function pythag(a, b) {\n            a = Math.abs(a)\n            b = Math.abs(b)\n            if (a > b)\n                return a * Math.sqrt(1.0 + (b * b / a / a))\n            else if (b == 0.0)\n                return a\n            return b * Math.sqrt(1.0 + (a * a / b / b))\n        }\n\n        //rep function\n        function rep(s, v, k) {\n            if (typeof k === \"undefined\") {\n                k = 0;\n            }\n            var n = s[k],\n                ret = Array(n),\n                i;\n            if (k === s.length - 1) {\n                for (i = n - 2; i >= 0; i -= 2) {\n                    ret[i + 1] = v;\n                    ret[i] = v;\n                }\n                if (i === -1) {\n                    ret[0] = v;\n                }\n                return ret;\n            }\n            for (i = n - 1; i >= 0; i--) {\n                ret[i] = rep(s, v, k + 1);\n            }\n            return ret;\n        }\n\n        //Householder's reduction to bidiagonal form\n\n        var f = 0.0;\n        var g = 0.0;\n        var h = 0.0;\n        var x = 0.0;\n        var y = 0.0;\n        var z = 0.0;\n        var s = 0.0;\n\n        for (i = 0; i < n; i++) {\n            e[i] = g; //vector\n            s = 0.0; //sum\n            l = i + 1; //stays i+1\n            for (j = i; j < m; j++)\n                s += (u[j][i] * u[j][i]);\n            if (s <= tolerance)\n                g = 0.0;\n            else {\n                f = u[i][i];\n                g = Math.sqrt(s);\n                if (f >= 0.0) g = -g;\n                h = f * g - s\n                u[i][i] = f - g;\n                for (j = l; j < n; j++) {\n                    s = 0.0\n                    for (k = i; k < m; k++)\n                        s += u[k][i] * u[k][j]\n                    f = s / h\n                    for (k = i; k < m; k++)\n                        u[k][j] += f * u[k][i]\n                }\n            }\n            q[i] = g\n            s = 0.0\n            for (j = l; j < n; j++)\n                s = s + u[i][j] * u[i][j]\n            if (s <= tolerance)\n                g = 0.0\n            else {\n                f = u[i][i + 1]\n                g = Math.sqrt(s)\n                if (f >= 0.0) g = -g\n                h = f * g - s\n                u[i][i + 1] = f - g;\n                for (j = l; j < n; j++) e[j] = u[i][j] / h\n                for (j = l; j < m; j++) {\n                    s = 0.0\n                    for (k = l; k < n; k++)\n                        s += (u[j][k] * u[i][k])\n                    for (k = l; k < n; k++)\n                        u[j][k] += s * e[k]\n                }\n            }\n            y = Math.abs(q[i]) + Math.abs(e[i])\n            if (y > x)\n                x = y\n        }\n\n        // accumulation of right hand transformations\n        for (i = n - 1; i != -1; i += -1) {\n            if (g != 0.0) {\n                h = g * u[i][i + 1]\n                for (j = l; j < n; j++)\n                    v[j][i] = u[i][j] / h //u is array, v is square of columns\n                for (j = l; j < n; j++) {\n                    s = 0.0\n                    for (k = l; k < n; k++)\n                        s += u[i][k] * v[k][j]\n                    for (k = l; k < n; k++)\n                        v[k][j] += (s * v[k][i])\n                }\n            }\n            for (j = l; j < n; j++) {\n                v[i][j] = 0;\n                v[j][i] = 0;\n            }\n            v[i][i] = 1;\n            g = e[i]\n            l = i\n        }\n\n        // accumulation of left hand transformations\n        for (i = n - 1; i != -1; i += -1) {\n            l = i + 1\n            g = q[i]\n            for (j = l; j < n; j++)\n                u[i][j] = 0;\n            if (g != 0.0) {\n                h = u[i][i] * g\n                for (j = l; j < n; j++) {\n                    s = 0.0\n                    for (k = l; k < m; k++) s += u[k][i] * u[k][j];\n                    f = s / h\n                    for (k = i; k < m; k++) u[k][j] += f * u[k][i];\n                }\n                for (j = i; j < m; j++) u[j][i] = u[j][i] / g;\n            } else\n                for (j = i; j < m; j++) u[j][i] = 0;\n            u[i][i] += 1;\n        }\n\n        // diagonalization of the bidiagonal form\n        prec = prec * x\n        for (k = n - 1; k != -1; k += -1) {\n            for (var iteration = 0; iteration < itmax; iteration++) { // test f splitting\n                var test_convergence = false\n                for (l = k; l != -1; l += -1) {\n                    if (Math.abs(e[l]) <= prec) {\n                        test_convergence = true\n                        break\n                    }\n                    if (Math.abs(q[l - 1]) <= prec)\n                        break\n                }\n                if (!test_convergence) { // cancellation of e[l] if l>0\n                    c = 0.0\n                    s = 1.0\n                    var l1 = l - 1\n                    for (i = l; i < k + 1; i++) {\n                        f = s * e[i]\n                        e[i] = c * e[i]\n                        if (Math.abs(f) <= prec)\n                            break\n                        g = q[i]\n                        h = pythag(f, g)\n                        q[i] = h\n                        c = g / h\n                        s = -f / h\n                        for (j = 0; j < m; j++) {\n                            y = u[j][l1]\n                            z = u[j][i]\n                            u[j][l1] = y * c + (z * s)\n                            u[j][i] = -y * s + (z * c)\n                        }\n                    }\n                }\n                // test f convergence\n                z = q[k]\n                if (l == k) { //convergence\n                    if (z < 0.0) { //q[k] is made non-negative\n                        q[k] = -z\n                        for (j = 0; j < n; j++)\n                            v[j][k] = -v[j][k]\n                    }\n                    break //break out of iteration loop and move on to next k value\n                }\n                if (iteration >= itmax - 1)\n                    throw 'Error: no convergence.'\n                // shift from bottom 2x2 minor\n                x = q[l]\n                y = q[k - 1]\n                g = e[k - 1]\n                h = e[k]\n                f = ((y - z) * (y + z) + (g - h) * (g + h)) / (2.0 * h * y)\n                g = pythag(f, 1.0)\n                if (f < 0.0)\n                    f = ((x - z) * (x + z) + h * (y / (f - g) - h)) / x\n                else\n                    f = ((x - z) * (x + z) + h * (y / (f + g) - h)) / x\n                // next QR transformation\n                c = 1.0\n                s = 1.0\n                for (i = l + 1; i < k + 1; i++) {\n                    g = e[i]\n                    y = q[i]\n                    h = s * g\n                    g = c * g\n                    z = pythag(f, h)\n                    e[i - 1] = z\n                    c = f / z\n                    s = h / z\n                    f = x * c + g * s\n                    g = -x * s + g * c\n                    h = y * s\n                    y = y * c\n                    for (j = 0; j < n; j++) {\n                        x = v[j][i - 1]\n                        z = v[j][i]\n                        v[j][i - 1] = x * c + z * s\n                        v[j][i] = -x * s + z * c\n                    }\n                    z = pythag(f, h)\n                    q[i - 1] = z\n                    c = f / z\n                    s = h / z\n                    f = c * g + s * y\n                    x = -s * g + c * y\n                    for (j = 0; j < m; j++) {\n                        y = u[j][i - 1]\n                        z = u[j][i]\n                        u[j][i - 1] = y * c + z * s\n                        u[j][i] = -y * s + z * c\n                    }\n                }\n                e[l] = 0.0\n                e[k] = f\n                q[k] = x\n            }\n        }\n\n        for (i = 0; i < q.length; i++)\n            if (q[i] < prec) q[i] = 0\n\n        //sort eigenvalues\t\n        for (i = 0; i < n; i++) {\n            for (j = i - 1; j >= 0; j--) {\n                if (q[j] < q[i]) {\n                    c = q[j]\n                    q[j] = q[i]\n                    q[i] = c\n                    for (k = 0; k < u.length; k++) {\n                        temp = u[k][i];\n                        u[k][i] = u[k][j];\n                        u[k][j] = temp;\n                    }\n                    for (k = 0; k < v.length; k++) {\n                        temp = v[k][i];\n                        v[k][i] = v[k][j];\n                        v[k][j] = temp;\n                    }\n                    i = j\n                }\n            }\n        }\n\n        return {\n            U: u,\n            S: q,\n            V: v\n        }\n    }\n\n    return {\n        computeDeviationScores: computeDeviationScores,\n        computeDeviationMatrix: computeDeviationMatrix,\n        computeSVD: computeSVD,\n        computePercentageExplained: computePercentageExplained,\n        computeOriginalData: computeOriginalData,\n        computeVarianceCovariance: computeVarianceCovariance,\n        computeAdjustedData: computeAdjustedData,\n        getEigenVectors: getEigenVectors,\n        analyseTopResult: analyseTopResult,\n        transpose: transpose,\n        multiply: multiply,\n        clone: clone,\n        scale: scale\n    }\n})();\n\nif(typeof module !== 'undefined')\nmodule.exports = PCA;"],"names":["PCA","computeDeviationMatrix","matrix","unit","unitSquareMatrix","subtract","scale","multiply","computeDeviationScores","deviation","devSumOfSquares","transpose","computeVarianceCovariance","sample","varianceCovariance","computeSVD","result","svd","eigenvectors","eigenvalues","results","value","i","obj","vector","j","computeAdjustedData","data","vectorObjs","vectors","v","matrixMinusMean","adjustedData","avgData","formattedAdjustData","formatData","computeOriginalData","originalWithoutMean","originalWithMean","formattedData","computePercentageExplained","selected","total","a","b","explained","getEigenVectors","analyseTopResult","eigenVectors","sorted","precision","TEN","d","n","product","k","factor","rows","operated","clone","m","c","r","arr","string","A","temp","prec","tolerance","itmax","l","u","e","q","rep","pythag","s","ret","f","g","x","y","z","iteration","test_convergence","l1","module"],"mappings":"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","x_google_ignoreList":[0]}