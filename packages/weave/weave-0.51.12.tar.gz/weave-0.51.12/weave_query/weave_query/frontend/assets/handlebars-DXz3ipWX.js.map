{"version":3,"file":"handlebars-DXz3ipWX.js","sources":["../../node_modules/monaco-editor/esm/vs/basic-languages/handlebars/handlebars.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { languages } from '../fillers/monaco-editor-core.js';\nvar EMPTY_ELEMENTS = [\n    'area',\n    'base',\n    'br',\n    'col',\n    'embed',\n    'hr',\n    'img',\n    'input',\n    'keygen',\n    'link',\n    'menuitem',\n    'meta',\n    'param',\n    'source',\n    'track',\n    'wbr'\n];\nexport var conf = {\n    wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\@\\$\\^\\&\\*\\(\\)\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\s]+)/g,\n    comments: {\n        blockComment: ['{{!--', '--}}']\n    },\n    brackets: [\n        ['<!--', '-->'],\n        ['<', '>'],\n        ['{{', '}}'],\n        ['{', '}'],\n        ['(', ')']\n    ],\n    autoClosingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '\"', close: '\"' },\n        { open: \"'\", close: \"'\" }\n    ],\n    surroundingPairs: [\n        { open: '<', close: '>' },\n        { open: '\"', close: '\"' },\n        { open: \"'\", close: \"'\" }\n    ],\n    onEnterRules: [\n        {\n            beforeText: new RegExp(\"<(?!(?:\" + EMPTY_ELEMENTS.join('|') + \"))(\\\\w[\\\\w\\\\d]*)([^/>]*(?!/)>)[^<]*$\", 'i'),\n            afterText: /^<\\/(\\w[\\w\\d]*)\\s*>$/i,\n            action: {\n                indentAction: languages.IndentAction.IndentOutdent\n            }\n        },\n        {\n            beforeText: new RegExp(\"<(?!(?:\" + EMPTY_ELEMENTS.join('|') + \"))(\\\\w[\\\\w\\\\d]*)([^/>]*(?!/)>)[^<]*$\", 'i'),\n            action: { indentAction: languages.IndentAction.Indent }\n        }\n    ]\n};\nexport var language = {\n    defaultToken: '',\n    tokenPostfix: '',\n    // ignoreCase: true,\n    // The main tokenizer for our languages\n    tokenizer: {\n        root: [\n            [/\\{\\{!--/, 'comment.block.start.handlebars', '@commentBlock'],\n            [/\\{\\{!/, 'comment.start.handlebars', '@comment'],\n            [/\\{\\{/, { token: '@rematch', switchTo: '@handlebarsInSimpleState.root' }],\n            [/<!DOCTYPE/, 'metatag.html', '@doctype'],\n            [/<!--/, 'comment.html', '@commentHtml'],\n            [/(<)(\\w+)(\\/>)/, ['delimiter.html', 'tag.html', 'delimiter.html']],\n            [/(<)(script)/, ['delimiter.html', { token: 'tag.html', next: '@script' }]],\n            [/(<)(style)/, ['delimiter.html', { token: 'tag.html', next: '@style' }]],\n            [/(<)([:\\w]+)/, ['delimiter.html', { token: 'tag.html', next: '@otherTag' }]],\n            [/(<\\/)(\\w+)/, ['delimiter.html', { token: 'tag.html', next: '@otherTag' }]],\n            [/</, 'delimiter.html'],\n            [/\\{/, 'delimiter.html'],\n            [/[^<{]+/] // text\n        ],\n        doctype: [\n            [\n                /\\{\\{/,\n                {\n                    token: '@rematch',\n                    switchTo: '@handlebarsInSimpleState.comment'\n                }\n            ],\n            [/[^>]+/, 'metatag.content.html'],\n            [/>/, 'metatag.html', '@pop']\n        ],\n        comment: [\n            [/\\}\\}/, 'comment.end.handlebars', '@pop'],\n            [/./, 'comment.content.handlebars']\n        ],\n        commentBlock: [\n            [/--\\}\\}/, 'comment.block.end.handlebars', '@pop'],\n            [/./, 'comment.content.handlebars']\n        ],\n        commentHtml: [\n            [\n                /\\{\\{/,\n                {\n                    token: '@rematch',\n                    switchTo: '@handlebarsInSimpleState.comment'\n                }\n            ],\n            [/-->/, 'comment.html', '@pop'],\n            [/[^-]+/, 'comment.content.html'],\n            [/./, 'comment.content.html']\n        ],\n        otherTag: [\n            [\n                /\\{\\{/,\n                {\n                    token: '@rematch',\n                    switchTo: '@handlebarsInSimpleState.otherTag'\n                }\n            ],\n            [/\\/?>/, 'delimiter.html', '@pop'],\n            [/\"([^\"]*)\"/, 'attribute.value'],\n            [/'([^']*)'/, 'attribute.value'],\n            [/[\\w\\-]+/, 'attribute.name'],\n            [/=/, 'delimiter'],\n            [/[ \\t\\r\\n]+/] // whitespace\n        ],\n        // -- BEGIN <script> tags handling\n        // After <script\n        script: [\n            [\n                /\\{\\{/,\n                {\n                    token: '@rematch',\n                    switchTo: '@handlebarsInSimpleState.script'\n                }\n            ],\n            [/type/, 'attribute.name', '@scriptAfterType'],\n            [/\"([^\"]*)\"/, 'attribute.value'],\n            [/'([^']*)'/, 'attribute.value'],\n            [/[\\w\\-]+/, 'attribute.name'],\n            [/=/, 'delimiter'],\n            [\n                />/,\n                {\n                    token: 'delimiter.html',\n                    next: '@scriptEmbedded.text/javascript',\n                    nextEmbedded: 'text/javascript'\n                }\n            ],\n            [/[ \\t\\r\\n]+/],\n            [\n                /(<\\/)(script\\s*)(>)/,\n                ['delimiter.html', 'tag.html', { token: 'delimiter.html', next: '@pop' }]\n            ]\n        ],\n        // After <script ... type\n        scriptAfterType: [\n            [\n                /\\{\\{/,\n                {\n                    token: '@rematch',\n                    switchTo: '@handlebarsInSimpleState.scriptAfterType'\n                }\n            ],\n            [/=/, 'delimiter', '@scriptAfterTypeEquals'],\n            [\n                />/,\n                {\n                    token: 'delimiter.html',\n                    next: '@scriptEmbedded.text/javascript',\n                    nextEmbedded: 'text/javascript'\n                }\n            ],\n            [/[ \\t\\r\\n]+/],\n            [/<\\/script\\s*>/, { token: '@rematch', next: '@pop' }]\n        ],\n        // After <script ... type =\n        scriptAfterTypeEquals: [\n            [\n                /\\{\\{/,\n                {\n                    token: '@rematch',\n                    switchTo: '@handlebarsInSimpleState.scriptAfterTypeEquals'\n                }\n            ],\n            [\n                /\"([^\"]*)\"/,\n                {\n                    token: 'attribute.value',\n                    switchTo: '@scriptWithCustomType.$1'\n                }\n            ],\n            [\n                /'([^']*)'/,\n                {\n                    token: 'attribute.value',\n                    switchTo: '@scriptWithCustomType.$1'\n                }\n            ],\n            [\n                />/,\n                {\n                    token: 'delimiter.html',\n                    next: '@scriptEmbedded.text/javascript',\n                    nextEmbedded: 'text/javascript'\n                }\n            ],\n            [/[ \\t\\r\\n]+/],\n            [/<\\/script\\s*>/, { token: '@rematch', next: '@pop' }]\n        ],\n        // After <script ... type = $S2\n        scriptWithCustomType: [\n            [\n                /\\{\\{/,\n                {\n                    token: '@rematch',\n                    switchTo: '@handlebarsInSimpleState.scriptWithCustomType.$S2'\n                }\n            ],\n            [\n                />/,\n                {\n                    token: 'delimiter.html',\n                    next: '@scriptEmbedded.$S2',\n                    nextEmbedded: '$S2'\n                }\n            ],\n            [/\"([^\"]*)\"/, 'attribute.value'],\n            [/'([^']*)'/, 'attribute.value'],\n            [/[\\w\\-]+/, 'attribute.name'],\n            [/=/, 'delimiter'],\n            [/[ \\t\\r\\n]+/],\n            [/<\\/script\\s*>/, { token: '@rematch', next: '@pop' }]\n        ],\n        scriptEmbedded: [\n            [\n                /\\{\\{/,\n                {\n                    token: '@rematch',\n                    switchTo: '@handlebarsInEmbeddedState.scriptEmbedded.$S2',\n                    nextEmbedded: '@pop'\n                }\n            ],\n            [/<\\/script/, { token: '@rematch', next: '@pop', nextEmbedded: '@pop' }]\n        ],\n        // -- END <script> tags handling\n        // -- BEGIN <style> tags handling\n        // After <style\n        style: [\n            [\n                /\\{\\{/,\n                {\n                    token: '@rematch',\n                    switchTo: '@handlebarsInSimpleState.style'\n                }\n            ],\n            [/type/, 'attribute.name', '@styleAfterType'],\n            [/\"([^\"]*)\"/, 'attribute.value'],\n            [/'([^']*)'/, 'attribute.value'],\n            [/[\\w\\-]+/, 'attribute.name'],\n            [/=/, 'delimiter'],\n            [\n                />/,\n                {\n                    token: 'delimiter.html',\n                    next: '@styleEmbedded.text/css',\n                    nextEmbedded: 'text/css'\n                }\n            ],\n            [/[ \\t\\r\\n]+/],\n            [\n                /(<\\/)(style\\s*)(>)/,\n                ['delimiter.html', 'tag.html', { token: 'delimiter.html', next: '@pop' }]\n            ]\n        ],\n        // After <style ... type\n        styleAfterType: [\n            [\n                /\\{\\{/,\n                {\n                    token: '@rematch',\n                    switchTo: '@handlebarsInSimpleState.styleAfterType'\n                }\n            ],\n            [/=/, 'delimiter', '@styleAfterTypeEquals'],\n            [\n                />/,\n                {\n                    token: 'delimiter.html',\n                    next: '@styleEmbedded.text/css',\n                    nextEmbedded: 'text/css'\n                }\n            ],\n            [/[ \\t\\r\\n]+/],\n            [/<\\/style\\s*>/, { token: '@rematch', next: '@pop' }]\n        ],\n        // After <style ... type =\n        styleAfterTypeEquals: [\n            [\n                /\\{\\{/,\n                {\n                    token: '@rematch',\n                    switchTo: '@handlebarsInSimpleState.styleAfterTypeEquals'\n                }\n            ],\n            [\n                /\"([^\"]*)\"/,\n                {\n                    token: 'attribute.value',\n                    switchTo: '@styleWithCustomType.$1'\n                }\n            ],\n            [\n                /'([^']*)'/,\n                {\n                    token: 'attribute.value',\n                    switchTo: '@styleWithCustomType.$1'\n                }\n            ],\n            [\n                />/,\n                {\n                    token: 'delimiter.html',\n                    next: '@styleEmbedded.text/css',\n                    nextEmbedded: 'text/css'\n                }\n            ],\n            [/[ \\t\\r\\n]+/],\n            [/<\\/style\\s*>/, { token: '@rematch', next: '@pop' }]\n        ],\n        // After <style ... type = $S2\n        styleWithCustomType: [\n            [\n                /\\{\\{/,\n                {\n                    token: '@rematch',\n                    switchTo: '@handlebarsInSimpleState.styleWithCustomType.$S2'\n                }\n            ],\n            [\n                />/,\n                {\n                    token: 'delimiter.html',\n                    next: '@styleEmbedded.$S2',\n                    nextEmbedded: '$S2'\n                }\n            ],\n            [/\"([^\"]*)\"/, 'attribute.value'],\n            [/'([^']*)'/, 'attribute.value'],\n            [/[\\w\\-]+/, 'attribute.name'],\n            [/=/, 'delimiter'],\n            [/[ \\t\\r\\n]+/],\n            [/<\\/style\\s*>/, { token: '@rematch', next: '@pop' }]\n        ],\n        styleEmbedded: [\n            [\n                /\\{\\{/,\n                {\n                    token: '@rematch',\n                    switchTo: '@handlebarsInEmbeddedState.styleEmbedded.$S2',\n                    nextEmbedded: '@pop'\n                }\n            ],\n            [/<\\/style/, { token: '@rematch', next: '@pop', nextEmbedded: '@pop' }]\n        ],\n        // -- END <style> tags handling\n        handlebarsInSimpleState: [\n            [/\\{\\{\\{?/, 'delimiter.handlebars'],\n            [/\\}\\}\\}?/, { token: 'delimiter.handlebars', switchTo: '@$S2.$S3' }],\n            { include: 'handlebarsRoot' }\n        ],\n        handlebarsInEmbeddedState: [\n            [/\\{\\{\\{?/, 'delimiter.handlebars'],\n            [\n                /\\}\\}\\}?/,\n                {\n                    token: 'delimiter.handlebars',\n                    switchTo: '@$S2.$S3',\n                    nextEmbedded: '$S3'\n                }\n            ],\n            { include: 'handlebarsRoot' }\n        ],\n        handlebarsRoot: [\n            [/\"[^\"]*\"/, 'string.handlebars'],\n            [/[#/][^\\s}]+/, 'keyword.helper.handlebars'],\n            [/else\\b/, 'keyword.helper.handlebars'],\n            [/[\\s]+/],\n            [/[^}]/, 'variable.parameter.handlebars']\n        ]\n    }\n};\n"],"names":["EMPTY_ELEMENTS","conf","languages","language"],"mappings":"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","x_google_ignoreList":[0]}