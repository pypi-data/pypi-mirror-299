{"version":3,"file":"protobuf-UZVfc1EA.js","sources":["../../node_modules/monaco-editor/esm/vs/basic-languages/protobuf/protobuf.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nvar namedLiterals = ['true', 'false'];\nexport var conf = {\n    comments: {\n        lineComment: '//',\n        blockComment: ['/*', '*/']\n    },\n    brackets: [\n        ['{', '}'],\n        ['[', ']'],\n        ['(', ')'],\n        ['<', '>']\n    ],\n    surroundingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '<', close: '>' },\n        { open: '\"', close: '\"' },\n        { open: \"'\", close: \"'\" }\n    ],\n    autoClosingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '<', close: '>' },\n        { open: '\"', close: '\"', notIn: ['string'] },\n        { open: \"'\", close: \"'\", notIn: ['string'] }\n    ],\n    autoCloseBefore: \".,=}])>' \\n\\t\",\n    indentationRules: {\n        increaseIndentPattern: new RegExp('^((?!\\\\/\\\\/).)*(\\\\{[^}\"\\'`]*|\\\\([^)\"\\'`]*|\\\\[[^\\\\]\"\\'`]*)$'),\n        decreaseIndentPattern: new RegExp('^((?!.*?\\\\/\\\\*).*\\\\*/)?\\\\s*[\\\\}\\\\]].*$')\n    }\n};\nexport var language = {\n    defaultToken: '',\n    tokenPostfix: '.proto',\n    brackets: [\n        { open: '{', close: '}', token: 'delimiter.curly' },\n        { open: '[', close: ']', token: 'delimiter.square' },\n        { open: '(', close: ')', token: 'delimiter.parenthesis' },\n        { open: '<', close: '>', token: 'delimiter.angle' }\n    ],\n    symbols: /[=><!~?:&|+\\-*/^%]+/,\n    keywords: [\n        'syntax',\n        'import',\n        'weak',\n        'public',\n        'package',\n        'option',\n        'repeated',\n        'oneof',\n        'map',\n        'reserved',\n        'to',\n        'max',\n        'enum',\n        'message',\n        'service',\n        'rpc',\n        'stream',\n        'returns',\n        'package',\n        'optional',\n        'true',\n        'false'\n    ],\n    builtinTypes: [\n        'double',\n        'float',\n        'int32',\n        'int64',\n        'uint32',\n        'uint64',\n        'sint32',\n        'sint64',\n        'fixed32',\n        'fixed64',\n        'sfixed32',\n        'sfixed64',\n        'bool',\n        'string',\n        'bytes'\n    ],\n    operators: ['=', '+', '-'],\n    namedLiterals: namedLiterals,\n    escapes: \"\\\\\\\\(u{[0-9A-Fa-f]+}|n|r|t|\\\\\\\\|'|\\\\${)\",\n    identifier: /[a-zA-Z]\\w*/,\n    fullIdentifier: /@identifier(?:\\s*\\.\\s*@identifier)*/,\n    optionName: /(?:@identifier|\\(\\s*@fullIdentifier\\s*\\))(?:\\s*\\.\\s*@identifier)*/,\n    messageName: /@identifier/,\n    enumName: /@identifier/,\n    messageType: /\\.?\\s*(?:@identifier\\s*\\.\\s*)*@messageName/,\n    enumType: /\\.?\\s*(?:@identifier\\s*\\.\\s*)*@enumName/,\n    floatLit: /[0-9]+\\s*\\.\\s*[0-9]*(?:@exponent)?|[0-9]+@exponent|\\.[0-9]+(?:@exponent)?/,\n    exponent: /[eE]\\s*[+-]?\\s*[0-9]+/,\n    boolLit: /true\\b|false\\b/,\n    decimalLit: /[1-9][0-9]*/,\n    octalLit: /0[0-7]*/,\n    hexLit: /0[xX][0-9a-fA-F]+/,\n    type: /double|float|int32|int64|uint32|uint64|sint32|sint64|fixed32|fixed64|sfixed32|sfixed64|bool|string|bytes|@messageType|@enumType/,\n    keyType: /int32|int64|uint32|uint64|sint32|sint64|fixed32|fixed64|sfixed32|sfixed64|bool|string/,\n    tokenizer: {\n        root: [\n            { include: '@whitespace' },\n            [/syntax/, 'keyword'],\n            [/=/, 'operators'],\n            [/;/, 'delimiter'],\n            [\n                /(\")(proto3)(\")/,\n                ['string.quote', 'string', { token: 'string.quote', switchTo: '@topLevel.proto3' }]\n            ],\n            [\n                /(\")(proto2)(\")/,\n                ['string.quote', 'string', { token: 'string.quote', switchTo: '@topLevel.proto2' }]\n            ]\n        ],\n        topLevel: [\n            // whitespace\n            { include: '@whitespace' },\n            { include: '@constant' },\n            [/=/, 'operators'],\n            [/[;.]/, 'delimiter'],\n            [\n                /@fullIdentifier/,\n                {\n                    cases: {\n                        option: { token: 'keyword', next: '@option.$S2' },\n                        enum: { token: 'keyword', next: '@enumDecl.$S2' },\n                        message: { token: 'keyword', next: '@messageDecl.$S2' },\n                        service: { token: 'keyword', next: '@serviceDecl.$S2' },\n                        extend: {\n                            cases: {\n                                '$S2==proto2': { token: 'keyword', next: '@extendDecl.$S2' }\n                            }\n                        },\n                        '@keywords': 'keyword',\n                        '@default': 'identifier'\n                    }\n                }\n            ]\n        ],\n        enumDecl: [\n            { include: '@whitespace' },\n            [/@identifier/, 'type.identifier'],\n            [/{/, { token: '@brackets', bracket: '@open', switchTo: '@enumBody.$S2' }]\n        ],\n        enumBody: [\n            { include: '@whitespace' },\n            { include: '@constant' },\n            [/=/, 'operators'],\n            [/;/, 'delimiter'],\n            [/option\\b/, 'keyword', '@option.$S2'],\n            [/@identifier/, 'identifier'],\n            [/\\[/, { token: '@brackets', bracket: '@open', next: '@options.$S2' }],\n            [/}/, { token: '@brackets', bracket: '@close', next: '@pop' }]\n        ],\n        messageDecl: [\n            { include: '@whitespace' },\n            [/@identifier/, 'type.identifier'],\n            [/{/, { token: '@brackets', bracket: '@open', switchTo: '@messageBody.$S2' }]\n        ],\n        messageBody: [\n            { include: '@whitespace' },\n            { include: '@constant' },\n            [/=/, 'operators'],\n            [/;/, 'delimiter'],\n            [\n                '(map)(s*)(<)',\n                ['keyword', 'white', { token: '@brackets', bracket: '@open', next: '@map.$S2' }]\n            ],\n            [\n                /@identifier/,\n                {\n                    cases: {\n                        option: { token: 'keyword', next: '@option.$S2' },\n                        enum: { token: 'keyword', next: '@enumDecl.$S2' },\n                        message: { token: 'keyword', next: '@messageDecl.$S2' },\n                        oneof: { token: 'keyword', next: '@oneofDecl.$S2' },\n                        extensions: {\n                            cases: {\n                                '$S2==proto2': { token: 'keyword', next: '@reserved.$S2' }\n                            }\n                        },\n                        reserved: { token: 'keyword', next: '@reserved.$S2' },\n                        '(?:repeated|optional)': { token: 'keyword', next: '@field.$S2' },\n                        required: {\n                            cases: {\n                                '$S2==proto2': { token: 'keyword', next: '@field.$S2' }\n                            }\n                        },\n                        '$S2==proto3': { token: '@rematch', next: '@field.$S2' }\n                    }\n                }\n            ],\n            [/\\[/, { token: '@brackets', bracket: '@open', next: '@options.$S2' }],\n            [/}/, { token: '@brackets', bracket: '@close', next: '@pop' }]\n        ],\n        extendDecl: [\n            { include: '@whitespace' },\n            [/@identifier/, 'type.identifier'],\n            [/{/, { token: '@brackets', bracket: '@open', switchTo: '@extendBody.$S2' }]\n        ],\n        extendBody: [\n            { include: '@whitespace' },\n            { include: '@constant' },\n            [/;/, 'delimiter'],\n            [/(?:repeated|optional|required)/, 'keyword', '@field.$S2'],\n            [/\\[/, { token: '@brackets', bracket: '@open', next: '@options.$S2' }],\n            [/}/, { token: '@brackets', bracket: '@close', next: '@pop' }]\n        ],\n        options: [\n            { include: '@whitespace' },\n            { include: '@constant' },\n            [/;/, 'delimiter'],\n            [/@optionName/, 'annotation'],\n            [/[()]/, 'annotation.brackets'],\n            [/=/, 'operator'],\n            [/\\]/, { token: '@brackets', bracket: '@close', next: '@pop' }]\n        ],\n        option: [\n            { include: '@whitespace' },\n            [/@optionName/, 'annotation'],\n            [/[()]/, 'annotation.brackets'],\n            [/=/, 'operator', '@pop']\n        ],\n        oneofDecl: [\n            { include: '@whitespace' },\n            [/@identifier/, 'identifier'],\n            [/{/, { token: '@brackets', bracket: '@open', switchTo: '@oneofBody.$S2' }]\n        ],\n        oneofBody: [\n            { include: '@whitespace' },\n            { include: '@constant' },\n            [/;/, 'delimiter'],\n            [/(@identifier)(\\s*)(=)/, ['identifier', 'white', 'delimiter']],\n            [\n                /@fullIdentifier|\\./,\n                {\n                    cases: {\n                        '@builtinTypes': 'keyword',\n                        '@default': 'type.identifier'\n                    }\n                }\n            ],\n            [/\\[/, { token: '@brackets', bracket: '@open', next: '@options.$S2' }],\n            [/}/, { token: '@brackets', bracket: '@close', next: '@pop' }]\n        ],\n        reserved: [\n            { include: '@whitespace' },\n            [/,/, 'delimiter'],\n            [/;/, 'delimiter', '@pop'],\n            { include: '@constant' },\n            [/to\\b|max\\b/, 'keyword']\n        ],\n        map: [\n            { include: '@whitespace' },\n            [\n                /@fullIdentifier|\\./,\n                {\n                    cases: {\n                        '@builtinTypes': 'keyword',\n                        '@default': 'type.identifier'\n                    }\n                }\n            ],\n            [/,/, 'delimiter'],\n            [/>/, { token: '@brackets', bracket: '@close', switchTo: 'identifier' }]\n        ],\n        field: [\n            { include: '@whitespace' },\n            [\n                'group',\n                {\n                    cases: {\n                        '$S2==proto2': { token: 'keyword', switchTo: '@groupDecl.$S2' }\n                    }\n                }\n            ],\n            [\n                /(@identifier)(\\s*)(=)/,\n                ['identifier', 'white', { token: 'delimiter', next: '@pop' }]\n            ],\n            [\n                /@fullIdentifier|\\./,\n                {\n                    cases: {\n                        '@builtinTypes': 'keyword',\n                        '@default': 'type.identifier'\n                    }\n                }\n            ]\n        ],\n        groupDecl: [\n            { include: '@whitespace' },\n            [/@identifier/, 'identifier'],\n            ['=', 'operator'],\n            [/{/, { token: '@brackets', bracket: '@open', switchTo: '@messageBody.$S2' }],\n            { include: '@constant' }\n        ],\n        type: [\n            { include: '@whitespace' },\n            [/@identifier/, 'type.identifier', '@pop'],\n            [/./, 'delimiter']\n        ],\n        identifier: [{ include: '@whitespace' }, [/@identifier/, 'identifier', '@pop']],\n        serviceDecl: [\n            { include: '@whitespace' },\n            [/@identifier/, 'identifier'],\n            [/{/, { token: '@brackets', bracket: '@open', switchTo: '@serviceBody.$S2' }]\n        ],\n        serviceBody: [\n            { include: '@whitespace' },\n            { include: '@constant' },\n            [/;/, 'delimiter'],\n            [/option\\b/, 'keyword', '@option.$S2'],\n            [/rpc\\b/, 'keyword', '@rpc.$S2'],\n            [/\\[/, { token: '@brackets', bracket: '@open', next: '@options.$S2' }],\n            [/}/, { token: '@brackets', bracket: '@close', next: '@pop' }]\n        ],\n        rpc: [\n            { include: '@whitespace' },\n            [/@identifier/, 'identifier'],\n            [/\\(/, { token: '@brackets', bracket: '@open', switchTo: '@request.$S2' }],\n            [/{/, { token: '@brackets', bracket: '@open', next: '@methodOptions.$S2' }],\n            [/;/, 'delimiter', '@pop']\n        ],\n        request: [\n            { include: '@whitespace' },\n            [\n                /@messageType/,\n                {\n                    cases: {\n                        stream: { token: 'keyword', next: '@type.$S2' },\n                        '@default': 'type.identifier'\n                    }\n                }\n            ],\n            [/\\)/, { token: '@brackets', bracket: '@close', switchTo: '@returns.$S2' }]\n        ],\n        returns: [\n            { include: '@whitespace' },\n            [/returns\\b/, 'keyword'],\n            [/\\(/, { token: '@brackets', bracket: '@open', switchTo: '@response.$S2' }]\n        ],\n        response: [\n            { include: '@whitespace' },\n            [\n                /@messageType/,\n                {\n                    cases: {\n                        stream: { token: 'keyword', next: '@type.$S2' },\n                        '@default': 'type.identifier'\n                    }\n                }\n            ],\n            [/\\)/, { token: '@brackets', bracket: '@close', switchTo: '@rpc.$S2' }]\n        ],\n        methodOptions: [\n            { include: '@whitespace' },\n            { include: '@constant' },\n            [/;/, 'delimiter'],\n            ['option', 'keyword'],\n            [/@optionName/, 'annotation'],\n            [/[()]/, 'annotation.brackets'],\n            [/=/, 'operator'],\n            [/}/, { token: '@brackets', bracket: '@close', next: '@pop' }]\n        ],\n        comment: [\n            [/[^\\/*]+/, 'comment'],\n            [/\\/\\*/, 'comment', '@push'],\n            ['\\\\*/', 'comment', '@pop'],\n            [/[\\/*]/, 'comment']\n        ],\n        string: [\n            [/[^\\\\\"]+/, 'string'],\n            [/@escapes/, 'string.escape'],\n            [/\\\\./, 'string.escape.invalid'],\n            [/\"/, { token: 'string.quote', bracket: '@close', next: '@pop' }]\n        ],\n        stringSingle: [\n            [/[^\\\\']+/, 'string'],\n            [/@escapes/, 'string.escape'],\n            [/\\\\./, 'string.escape.invalid'],\n            [/'/, { token: 'string.quote', bracket: '@close', next: '@pop' }]\n        ],\n        constant: [\n            ['@boolLit', 'keyword.constant'],\n            ['@hexLit', 'number.hex'],\n            ['@octalLit', 'number.octal'],\n            ['@decimalLit', 'number'],\n            ['@floatLit', 'number.float'],\n            [/(\"([^\"\\\\]|\\\\.)*|'([^'\\\\]|\\\\.)*)$/, 'string.invalid'],\n            [/\"/, { token: 'string.quote', bracket: '@open', next: '@string' }],\n            [/'/, { token: 'string.quote', bracket: '@open', next: '@stringSingle' }],\n            [/{/, { token: '@brackets', bracket: '@open', next: '@prototext' }],\n            [/identifier/, 'identifier']\n        ],\n        whitespace: [\n            [/[ \\t\\r\\n]+/, 'white'],\n            [/\\/\\*/, 'comment', '@comment'],\n            [/\\/\\/.*$/, 'comment']\n        ],\n        prototext: [\n            { include: '@whitespace' },\n            { include: '@constant' },\n            [/@identifier/, 'identifier'],\n            [/[:;]/, 'delimiter'],\n            [/}/, { token: '@brackets', bracket: '@close', next: '@pop' }]\n        ]\n    }\n};\n"],"names":["namedLiterals","conf","language"],"mappings":"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","x_google_ignoreList":[0]}