{"version":3,"file":"Component-D596_KP8.js","sources":["../../src/components/Panel2/PanelFileText/Component.tsx"],"sourcesContent":["import * as Op from '@wandb/weave/core';\nimport {isFile, taggableValue} from '@wandb/weave/core';\nimport numeral from 'numeral';\nimport Prism from 'prismjs';\nimport React, {useEffect, useMemo, useRef} from 'react';\nimport {Segment} from 'semantic-ui-react';\n\nimport * as CGReact from '../../../react';\nimport * as Panel2 from '../panel';\nimport {EXTENSION_INFO, inputType, processTextForDisplay} from './common';\n\ntype PanelFileTextProps = Panel2.PanelProps<typeof inputType>;\n\nconst FILE_SIZE_LIMIT = 25 * 1024 * 1024;\nconst LINE_LENGTH_LIMIT = 1000;\nconst TOTAL_LINES_LIMIT = 10000;\n\nconst PanelFileTextRenderInner: React.FC<PanelFileTextProps> = props => {\n  const ref = useRef<HTMLDivElement>(null);\n  useEffect(() => {\n    if (ref.current != null) {\n      Prism.highlightElement(ref.current);\n    }\n  });\n\n  const fileNode = props.input;\n  const unwrappedType = taggableValue(fileNode.type);\n  const fileExtension =\n    isFile(unwrappedType) && unwrappedType.extension\n      ? unwrappedType.extension\n      : '';\n\n  const contentsNode = useMemo(\n    () => Op.opFileContents({file: props.input}),\n    [props.input]\n  );\n  const contentsValueQuery = CGReact.useNodeValue(contentsNode);\n  const loading = contentsValueQuery.loading;\n\n  const processedResults = useMemo(() => {\n    if (loading) {\n      return null;\n    }\n    return processTextForDisplay(\n      fileExtension,\n      contentsValueQuery.result,\n      LINE_LENGTH_LIMIT,\n      TOTAL_LINES_LIMIT\n    );\n  }, [loading, fileExtension, contentsValueQuery.result]);\n\n  if (loading) {\n    return <div></div>;\n  }\n\n  const truncatedTotalLines = processedResults?.truncatedTotalLines;\n  const truncatedLineLength = processedResults?.truncatedLineLength;\n  const text = processedResults?.text;\n  const language = languageFromFileName(fileExtension);\n\n  return (\n    <div style={{height: '100%', display: 'flex', flexDirection: 'column'}}>\n      {truncatedLineLength && (\n        <Segment textAlign=\"center\">\n          Warning: some lines truncated to {LINE_LENGTH_LIMIT} characters for\n          display\n        </Segment>\n      )}\n      {truncatedTotalLines && (\n        <Segment textAlign=\"center\">\n          Warning: truncated to {TOTAL_LINES_LIMIT} lines for display\n        </Segment>\n      )}\n      <div\n        style={{\n          background: 'white',\n          border: '1px solid #eee',\n          padding: 16,\n          flexGrow: 1,\n          overflow: 'auto',\n        }}>\n        <pre\n          style={{\n            maxWidth: '100%',\n            overflowX: 'hidden',\n            textOverflow: 'ellipsis',\n          }}>\n          <code\n            ref={ref}\n            className={language != null ? `language-${language}` : undefined}>\n            {text}\n          </code>\n        </pre>\n      </div>\n    </div>\n  );\n};\n\nconst PanelFileText: React.FC<PanelFileTextProps> = props => {\n  const fileNode = props.input;\n  const fileSizeNode = Op.opFileSize({file: fileNode});\n  const fileSizeQuery = CGReact.useNodeValue(fileSizeNode);\n  if (fileSizeQuery.loading) {\n    return <div></div>;\n  }\n\n  if ((fileSizeQuery.result ?? 0) > FILE_SIZE_LIMIT) {\n    return (\n      <Segment textAlign=\"center\">\n        Text view limited to files less than{' '}\n        {numeral(FILE_SIZE_LIMIT).format('0.0b')}\n      </Segment>\n    );\n  }\n\n  return <PanelFileTextRenderInner {...props} />;\n};\n\nexport default PanelFileText;\n\n// TODO: we can have better types here\nfunction languageFromFileName(fileExtension: string): string | null {\n  return EXTENSION_INFO[fileExtension] ?? null;\n}\n"],"names":["FILE_SIZE_LIMIT","LINE_LENGTH_LIMIT","TOTAL_LINES_LIMIT","PanelFileTextRenderInner","props","ref","useRef","useEffect","Prism","fileNode","unwrappedType","taggableValue","fileExtension","isFile","contentsNode","useMemo","Op.opFileContents","contentsValueQuery","CGReact.useNodeValue","loading","processedResults","processTextForDisplay","truncatedTotalLines","truncatedLineLength","text","language","languageFromFileName","React","Segment","PanelFileText","fileSizeNode","Op.opFileSize","fileSizeQuery","numeral","EXTENSION_INFO"],"mappings":"8HAaA,MAAMA,EAAkB,GAAK,KAAO,KAC9BC,EAAoB,IACpBC,EAAoB,IAEpBC,EAAkEC,GAAA,CAChE,MAAAC,EAAMC,SAAuB,IAAI,EACvCC,EAAAA,UAAU,IAAM,CACVF,EAAI,SAAW,MACXG,EAAA,iBAAiBH,EAAI,OAAO,CACpC,CACD,EAED,MAAMI,EAAWL,EAAM,MACjBM,EAAgBC,EAAcF,EAAS,IAAI,EAC3CG,EACJC,EAAOH,CAAa,GAAKA,EAAc,UACnCA,EAAc,UACd,GAEAI,EAAeC,EAAA,QACnB,IAAMC,EAAkB,CAAC,KAAMZ,EAAM,MAAM,EAC3C,CAACA,EAAM,KAAK,CAAA,EAERa,EAAqBC,EAAqBJ,CAAY,EACtDK,EAAUF,EAAmB,QAE7BG,EAAmBL,EAAAA,QAAQ,IAC3BI,EACK,KAEFE,EACLT,EACAK,EAAmB,OACnBhB,EACAC,CAAA,EAED,CAACiB,EAASP,EAAeK,EAAmB,MAAM,CAAC,EAEtD,GAAIE,EACF,uBAAQ,MAAI,IAAA,EAGd,MAAMG,EAAsBF,GAAkB,oBACxCG,EAAsBH,GAAkB,oBACxCI,EAAOJ,GAAkB,KACzBK,EAAWC,EAAqBd,CAAa,EAEnD,OACGe,EAAA,cAAA,MAAA,CAAI,MAAO,CAAC,OAAQ,OAAQ,QAAS,OAAQ,cAAe,SAC1D,EAAAJ,GACEI,EAAA,cAAAC,EAAA,CAAQ,UAAU,QAAA,EAAS,oCACQ3B,EAAkB,yBAEtD,EAEDqB,GACCK,EAAA,cAACC,EAAQ,CAAA,UAAU,UAAS,yBACH1B,EAAkB,oBAC3C,EAEFyB,EAAA,cAAC,MAAA,CACC,MAAO,CACL,WAAY,QACZ,OAAQ,iBACR,QAAS,GACT,SAAU,EACV,SAAU,MACZ,CAAA,EACAA,EAAA,cAAC,MAAA,CACC,MAAO,CACL,SAAU,OACV,UAAW,SACX,aAAc,UAChB,CAAA,EACAA,EAAA,cAAC,OAAA,CACC,IAAAtB,EACA,UAAWoB,GAAY,KAAO,YAAYA,CAAQ,GAAK,MAAA,EACtDD,CACH,CACF,CAAA,CAEJ,CAEJ,EAEMK,EAAuDzB,GAAA,CAC3D,MAAMK,EAAWL,EAAM,MACjB0B,EAAeC,EAAc,CAAC,KAAMtB,CAAS,CAAA,EAC7CuB,EAAgBd,EAAqBY,CAAY,EACvD,OAAIE,EAAc,wBACR,MAAI,IAAA,GAGTA,EAAc,QAAU,GAAKhC,EAE9B2B,EAAA,cAACC,EAAQ,CAAA,UAAU,QAAS,EAAA,uCACW,IACpCK,EAAQjC,CAAe,EAAE,OAAO,MAAM,CACzC,EAIG2B,EAAA,cAACxB,EAA0B,CAAA,GAAGC,CAAO,CAAA,CAC9C,EAKA,SAASsB,EAAqBd,EAAsC,CAC3D,OAAAsB,EAAetB,CAAa,GAAK,IAC1C"}