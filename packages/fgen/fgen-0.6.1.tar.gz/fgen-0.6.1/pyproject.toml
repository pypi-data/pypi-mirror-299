[tool.poetry]
name = "fgen"
version = "0.6.1"
description = "Automatically generate wrapper to integrate Fortran and Python"
authors = [
    "Zebedee Nicholls <zebedee.nicholls@climate-energy-college.org>",
    "Jared Lewis <jared.lewis@climate-energy-college.org>",
]
readme = "README.md"
packages = [
    {include = "fgen", from = "src"},
    {include = "fgen_runtime", from = "src"},
]
keywords = ["fortran"]
license = "BSD-3-Clause"
classifiers = [
    "Development Status :: 4 - Beta",
    "License :: OSI Approved :: BSD License",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Intended Audience :: Science/Research",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering"
]
homepage = "https://gitlab.com/magicc/fgen"
include = ["LICENCE"]  # poetry uses US English so assumes it will be spelt LICENSE

[tool.poetry.dependencies]
python = "^3.9"
cattrs = "^23.0.0"
attrs = "^23.0.0"
click = "^8.0.0"
pyyaml = "^6.0"
black = {version = "^23.3.0", optional = true}
jinja2 = {version = "^3.1.2", optional = true}
loguru = "^0.7.2"
typing-extensions = "^4.9.0"  # Can drop once we remove Python 3.9 support
pint = "*"
numpy = ">1.23"

[tool.poetry.group.tests.dependencies]
pytest = "^7.3.1"
pytest-xdist = "^3.3.1"
pytest-regressions = "^2.4.2"

[tool.poetry.group.docs.dependencies]
myst-nb = "^0.17.0"
sphinx-book-theme = "^1.1.0"
sphinx-autodoc-typehints = "^1.23.0"
sphinx-autodocgen = "^1.3"
jupytext = "^1.14.5"
sphinx-copybutton = "^0.5.2"
matplotlib = "^3.8.2"
scipy = "^1.12.0"
sphinx-click = "^6.0.0"

[tool.poetry.group.dev.dependencies]
pytest-cov = "^4.0.0"
coverage = "^7.2.0"
mypy = "^1.2.0"
ruff = "^0.1.8"
pre-commit = "^3.3.1"
towncrier = "^23.6.0"
cmake = "^3.26.4"
# Temporary fix until next towncrier release
importlib-resources = {"version" = "<6", python = "<=3.9" }
fprettify = "^0.3.7"
notebook = "^7.0.7"
liccheck = "^0.9.1"
cmakelang = "^0.6.13"

[tool.poetry.extras]
templates = ["black", "jinja2"]

[tool.poetry.scripts]
fgen = 'fgen.main:cli'

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.coverage.run]
source = ["src/fgen"]
omit = [
    "src/fgen/f2py.py"
]
branch = true

[tool.coverage.report]
fail_under = 95
skip_empty = true
show_missing = true
# Regexes for lines to exclude from consideration in addition to the defaults
exclude_also = [
    # Don't complain about missing type checking code:
    "if TYPE_CHECKING",
    "@overload",
    "\\.\\.\\.",
]

[tool.mypy]
strict = true
# prevent unimported libraries silently being treated as Any
disallow_any_unimported = true
# show error codes on failure with context
show_error_codes = true
show_error_context = true
# warn if code can't be reached
warn_unreachable = true
# importing following uses default settings
follow_imports = "normal"

[tool.jupytext]
formats = "ipynb,py:percent"

[tool.pytest.ini_options]
addopts = [
    "--import-mode=importlib",
    "--ignore=tests/test-data"
]


[tool.ruff]
src = ["src"]
target-version = "py39"
select = [
    "E",  # pycodestyle error
    "W",  # pycodestyle warning
    "F",  # pyflakes
    "I",  # isort
    "D",  # pydocstyle
    "PL",  # pylint
    "TRY",  # tryceratops
    "NPY",  # numpy rules
    "RUF",  # ruff specifics
    "UP",  # pyupgrade
    "S",  # flake8-bandit
    # pandas support via pandas-vet. In some cases we will want to disable
    # this because it can lead to too many false positives.
    "PD",
]
unfixable = [
    "PD002",  # Disable autofix for inplace as this often introduces bugs
]
ignore = [
    "D200",  # One-line docstring should fit on one line with quotes
    "D400",  # First line should end with a period
    "D105",  # Missing docstring in magic method
    "UP007",
    "PD011",  # Ruff confused about APIs
]
# Provide some leeway for long docstring, this is otherwise handled by black
line-length = 88

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.per-file-ignores]
"test*.py" = [
    "D",  # Documentation not needed in tests
    "S101",  # S101 Use of `assert` detected
    "PLR2004" # Magic value used in comparison
]
"docs/source/notebooks/*" = [
    "D100",  # Missing docstring at the top of file
    "E402",  # Module level import not at top of file
    "S101",  # Use of `assert` detected
]
"scripts/*" = [
    "S101",  # S101 Use of `assert` detected
]
"tests/integration/test_compilation.py" = [
    "S603",  # `subprocess` call: check for execution of untrusted input
]
"tests/test-data/*" = [
    "I001",  # different first-party in generated files
]

[tool.ruff.isort]
known-first-party = ["src"]

[tool.ruff.pydocstyle]
convention = "numpy"

[tool.towncrier]
package = "fgen"
package_dir = "src"
filename = "docs/source/changelog.md"
directory = "changelog/"
title_format = "## fgen {version} ({project_date})"
underlines = ["", "", ""]
issue_format = "[#{issue}](https://gitlab.com/magicc/fgen/-/merge_requests/{issue})"

  [[tool.towncrier.type]]
  directory = "breaking"
  name = "Breaking Changes"
  showcontent = true

  [[tool.towncrier.type]]
  directory = "deprecation"
  name = "Deprecations"
  showcontent = true

  [[tool.towncrier.type]]
  directory = "feature"
  name = "Features"
  showcontent = true

  [[tool.towncrier.type]]
  directory = "improvement"
  name = "Improvements"
  showcontent = true

  [[tool.towncrier.type]]
  directory = "fix"
  name = "Bug Fixes"
  showcontent = true

  [[tool.towncrier.type]]
  directory = "docs"
  name = "Improved Documentation"
  showcontent = true

  [[tool.towncrier.type]]
  directory = "trivial"
  name = "Trivial/Internal Changes"
  showcontent = false

[tool.liccheck]
authorized_licenses = [
    "bsd",
    "bsd license",
    "BSD 3-Clause",
    "CC0",
    "apache",
    "apache 2.0",
    "apache software",
    "apache software license",
    "Apache License, Version 2.0",
    "Historical Permission Notice and Disclaimer (HPND)",
    "isc license",
    "isc license (iscl)",
    "gnu lgpl",
    "lgpl with exceptions or zpl",
    "LGPLv2+",
    "GNU Lesser General Public License v2 (LGPLv2)",
    "GNU Lesser General Public License v2 or later (LGPLv2+)",
    "mit",
    "mit license",
    "Mozilla Public License 2.0 (MPL 2.0)",
    "python software foundation",
    "python software foundation license",
    "zpl 2.1",
]
# This starting list is relatively conservative. Depending on the project, it
# may make sense to move some of these into the authorized list
unauthorized_licenses = [
    "agpl",
    "gnu agpl",
    "gpl v3",
    "gplv3",
    "gpl v2",
    "gplv2",
    "gpl v1",
    "gplv1",
]
