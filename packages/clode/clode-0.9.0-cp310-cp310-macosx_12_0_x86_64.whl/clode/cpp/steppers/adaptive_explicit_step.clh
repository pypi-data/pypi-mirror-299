#include "clODE_struct_defs.cl" //for SolverParams struct definition
#include "realtype.cl"

#define SAFETY_FACTOR RCONST(0.8)
// #define EXPON RCONST(1.0)/LOCAL_ERROR_ORDER  //controls error per step -> local error only; err~tol
#define EXPON RCONST(1.0)/(LOCAL_ERROR_ORDER+RCONST(1.0))  //controls error per unit step (err/dt~tol) -> global error proportional to tol (tolerance proportional) 

//Wrapper to handle step-size adaptation.  note: wi should be zeros
static inline int stepper(realtype *ti, realtype xi[], realtype k1[], const realtype pars[], 
__constant struct SolverParams *sp, realtype *dt, __constant realtype *tspan, 
realtype aux[], realtype wi[], __private struct rngData *rd)
{
    realtype tNew, normErr, relErr, err[N_VAR], newxi[N_VAR], newk1[N_VAR];

    realtype newDt = *dt;
    realtype threshold = sp->abstol / sp->reltol;
    realtype hmin = RCONST(16.0) * fabs(fabs(nextafter(*ti, RCONST(1.1)*tspan[1])) - *ti); //matches Matlab: hmin=16*eps(t)

    bool noFailedSteps = true;
    while (true)
    {
        tNew = *ti;
        for (int j = 0; j < N_VAR; j++)
        {
            newxi[j] = xi[j];
            newk1[j] = k1[j];
        }

        newDt = clamp(newDt, hmin, sp->dtmax); //limiters
        newDt = do_step(&tNew, newxi, newk1, pars, newDt, aux, err, wi); //returns purified dt: roundoff reduces accuracy of ti+dt, so use the portion of dt that had an effect...

        //Error estimation - elementwise
        for (int j = 0; j < N_VAR; j++)
            err[j] /= fmax( fmax( fabs(xi[j]), fabs(newxi[j]) ) , threshold);
        
        normErr = norm_inf(err, N_VAR); //largest relative error among variables (most conservative)

        //shrink dt if too much error
        if (normErr > sp->reltol)
        {
            if (newDt <= hmin)
            {
                *dt = hmin;
                return -1;
            } //pass error signal back to main loop..

            //matches matlab (double precision):
            if (noFailedSteps)
            { //first failure: shrink proportional to error
                noFailedSteps = false;
                newDt *= fmax(ADAPTIVE_STEP_MAX_SHRINK, SAFETY_FACTOR*pow(sp->reltol / normErr, EXPON)); 
            }
            else
            { //repeated failed step: cut stepsize in half
                newDt *= RCONST(0.5) ; 
            }
        }
        else
        {
            break;
        }
    }

    //no failure this step => attempt to increase dt for next timestep
    if (noFailedSteps)
        newDt *= fmin(ADAPTIVE_STEP_MAX_GROW,  SAFETY_FACTOR*pow(sp->reltol / normErr, EXPON)); //matches matlab (double precision)

    newDt = fmin(newDt, tspan[1] - tNew); //hit the final time exactly
    newDt = clamp(newDt, hmin, sp->dtmax); //limiters

    //update the solution and dt
    *dt = newDt; //new step size to attempt on next step
    *ti = tNew;
    for (int j = 0; j < N_VAR; j++)
    {
        xi[j] = newxi[j];
        k1[j] = newk1[j];
    }

    return 0;
}