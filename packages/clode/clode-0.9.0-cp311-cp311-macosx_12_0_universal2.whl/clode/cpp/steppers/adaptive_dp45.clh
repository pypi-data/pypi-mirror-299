#include "realtype.cl"

//this is ode45 in matlab
#define ADAPTIVE_STEPSIZE_EXPLICIT
#define FSAL_STEP_PROPERTY
#define LOCAL_ERROR_ORDER RCONST(4.0)
#define ADAPTIVE_STEP_MAX_SHRINK RCONST(0.1)
#define ADAPTIVE_STEP_MAX_GROW RCONST(5.0)

#define A2 RCONST(1.0)/RCONST(5.0)
#define A3 RCONST(3.0)/RCONST(10.0)
#define A4 RCONST(4.0)/RCONST(5.0)
#define A5 RCONST(8.0)/RCONST(9.0)

#define B21 RCONST(1.0)/RCONST(5.0)

#define B31 RCONST(3.0)/RCONST(40.0)
#define B32 RCONST(9.0)/RCONST(40.0)

#define B41 RCONST(44.0)/RCONST(45.0)
#define B42 RCONST(-56.0)/RCONST(15.0)
#define B43 RCONST(32.0)/RCONST(9.0)

#define B51 RCONST(19372.0)/RCONST(6561.0)
#define B52 RCONST(-25360.0)/RCONST(2187.0)
#define B53 RCONST(64448.0)/RCONST(6561.0)
#define B54 RCONST(-212.0)/RCONST(729.0)

#define B61 RCONST(9017.0)/RCONST(3168.0)
#define B62 RCONST(-355.0)/RCONST(33.0)
#define B63 RCONST(46732.0)/RCONST(5247.0)
#define B64 RCONST(49.0)/RCONST(176.0)
#define B65 RCONST(-5103.0)/RCONST(18656.0)

#define C1 RCONST(35.0)/RCONST(384.0)
#define C3 RCONST(500.0)/RCONST(1113.0)
#define C4 RCONST(125.0)/RCONST(192.0)
#define C5 RCONST(-2187.0)/RCONST(6784.0)
#define C6 RCONST(11.0)/RCONST(84.0)

/*
#define _C1 RCONST(5179.0)/RCONST(57600.0)
#define _C3 RCONST(7571.0)/RCONST(16695.0)
#define _C4 RCONST(393.0)/RCONST(640.0)
#define _C5 RCONST(-92097.0)/RCONST(339200.0)
#define _C6 RCONST(187.0)/RCONST(2100.0)
#define _C7 RCONST(1.0)/RCONST(40.0)
*/

//Use E1=B1-_C1 directly in error estimate
#define E1 RCONST(71.0)/RCONST(57600.0)
#define E3 RCONST(-71.0)/RCONST(16695.0)
#define E4 RCONST(71.0)/RCONST(1920.0)
#define E5 RCONST(-17253.0)/RCONST(339200.0)
#define E6 RCONST(22.0)/RCONST(525.0)
#define E7 RCONST(-1.0)/RCONST(40.0)

static inline realtype do_step(realtype *ti, realtype xi[], realtype k1[], const realtype pars[], const realtype dt, realtype aux[], realtype err[], const realtype wi[])
{
    realtype tNew = *ti + dt;
    realtype newDt = tNew - *ti; //use the effective part of dt
    realtype xtmp[N_VAR], k2[N_VAR], k3[N_VAR], k4[N_VAR], k5[N_VAR], k6[N_VAR], k7[N_VAR];
    //matlab: k <-> f, x <-> y, 

    //expects k1 to be precomputed (FSAL)

    //compute k2
    for (int k = 0; k < N_VAR; k++)
        xtmp[k] = xi[k] + newDt * (B21 * k1[k]);
    getRHS(*ti + A2 * newDt, xtmp, pars, k2, aux, wi);

    //compute k3
    for (int k = 0; k < N_VAR; k++)
        xtmp[k] = xi[k] + newDt * (B31 * k1[k] + B32 * k2[k]);
    getRHS(*ti + A3 * newDt, xtmp, pars, k3, aux, wi);

    //compute k4
    for (int k = 0; k < N_VAR; k++)
        xtmp[k] = xi[k] + newDt * (B41 * k1[k] + B42 * k2[k] + B43 * k3[k]);
    getRHS(*ti + A4 * newDt, xtmp, pars, k4, aux, wi);

    //compute k5
    for (int k = 0; k < N_VAR; k++)
        xtmp[k] = xi[k] + newDt * (B51 * k1[k] + B52 * k2[k] + B53 * k3[k] + B54 * k4[k]);
    getRHS(*ti + A5 * newDt, xtmp, pars, k5, aux, wi);

    //compute k6
    for (int k = 0; k < N_VAR; k++)
        xtmp[k] = xi[k] + newDt * (B61 * k1[k] + B62 * k2[k] + B63 * k3[k] + B64 * k4[k] + B65 * k5[k]);
    getRHS(*ti + newDt, xtmp, pars, k6, aux, wi);

    //update xi
    for (int k = 0; k < N_VAR; k++)
        xi[k] = xi[k] + newDt * (C1 * k1[k] + C3 * k3[k] + C4 * k4[k] + C5 * k5[k] + C6 * k6[k]); //fifth order

    //compute k7
    getRHS(tNew, xi, pars, k7, aux, wi);

    //update error estimate
    for (int k = 0; k < N_VAR; k++)
    {
        //~ xtmp[k]=xi[k]+newDt*(_C1*k1[k] +_C3*k3[k] +_C4*k4[k] +_C5*k5[k] +_C6*k6[k] +_C7*k7[k]); //fourth order
        //~ err[k]=xi[k]-xtmp[k];
        err[k] = newDt * (E1 * k1[k] + E3 * k3[k] + E4 * k4[k] + E5 * k5[k] + E6 * k6[k] + E7 * k7[k]); //fourth order
        k1[k] = k7[k];                                                                                 //first same as last (FSAL) property
    }

    *ti=tNew;
    return newDt;

}