// template to show function sigs, structure required for include into C++ (for baking in feature names, observer data size)

#ifndef OBSERVER_TEMPLATE_H
#define OBSERVER_TEMPLATE_H


//typedef to select the correct observer struct from the header
#ifdef __cplusplus
template <typename realtype>
#endif
struct ObserverData_template
{
    unsigned int eventcount;
    unsigned int stepcount;
}

#ifdef __cplusplus
static struct ObserverInfo getFeatureInfo_template(const ProblemInfo pi, const unsigned int fVarIx, const unsigned int eVarIx, const unsigned int nStoredEvents) {
    struct ObserverInfo oi;
    oi.define="USE_OBSERVER_TEMPLATE";
    oi.observerDataSizeFloat=sizeof(ObserverData_basic<float>);
    oi.observerDataSizeDouble=sizeof(ObserverData_basic<double>);

    //feature names. Could depend on problem info; nVar, varNames, etc. make sure this matches number of features actually returned
    oi.featureNames={}; 

    return oi;
}
#endif

#ifdef USE_OBSERVER_TEMPLATE //should only be defined for OpenCL preprocessor, thus not included by C++ clODE codes

typedef struct ObserverData_template ObserverData;

//set initial values to relevant fields in ObserverData
static inline void initializeObserverData(realtype *ti, realtype xi[], realtype dxi[], realtype auxi[], ObserverData *od, __constant struct ObserverParams *op) {
    od->eventcount = 0;
    od->stepcount = 0;
}

//restricted per-timestep update of observer data for initializing event detector
static inline void warmupObserverData(realtype *ti, realtype xi[], realtype dxi[], realtype auxi[], ObserverData *od, __constant struct ObserverParams *op) {
}

//process warmup data to compute relevant event detector quantities (e.g. thresholds)
static inline void initializeEventDetector(realtype *ti, realtype xi[], realtype dxi[], realtype auxi[], ObserverData *od, __constant struct ObserverParams *op) {
}

//per-timestep check for an event.  Option: refine event (t,x,dx,aux) within the timestep with interpolation
static inline bool eventFunction(realtype *ti, realtype xi[], realtype dxi[], realtype auxi[], ObserverData *od, __constant struct ObserverParams *op) {
    return false;
}

//When an event is detected, computes desired event-based features. returns true if a terminal event was reached
static inline bool computeEventFeatures(realtype *ti, realtype xi[], realtype dxi[], realtype auxi[], ObserverData *od, __constant struct ObserverParams *op) {
    ++od->eventcount;
    if (od->eventcount > op->maxEventCount){
        return true;
    }
    return false;
}

//full per-timestep update of observer data. If an event occurred this timestep, event-based observer data is reset. Per-timestep features are computed here.
static inline void updateObserverData(realtype *ti, realtype xi[], realtype dxi[], realtype auxi[], ObserverData *od, __constant struct ObserverParams *op) {
    ++od->stepcount;
}

//Perform and post-integration cleanup and write desired features into the global array F
static inline void finalizeFeatures(realtype *ti, realtype xi[], realtype dxi[], realtype auxi[], ObserverData *od, __constant struct ObserverParams *op, __global realtype *F, int i, int nPts) { 
}

//Perform and post-integration cleanup of observer data to ensure it is ready for continuation if needed
static inline void finalizeObserverData(realtype *ti, realtype xi[], realtype dxi[], realtype auxi[], ObserverData *od, __constant struct ObserverParams *op, __constant realtype *tspan) {//eg. times of last events need to be shifted left of t0
}

#endif

#endif // OBSERVER_TEMPLATE_H
