from copy import deepcopy
import pytest
import json

from testing_utils import testing_utils
from atscale.data_model import DataModel
from atscale.utils import *
from atscale.base import config, private_enums
from atscale.errors import atscale_errors


pytestmark = pytest.mark.tryfirst


def test_user_permissions(atclient):
    cfg = config.Config()
    secret = cfg._get_secret_json("AL/atscale", "test")
    ATSCALE_USER = secret["TEST_USER"]

    # get the user's id first
    user_id_url = (
        f"{atclient._atconn.design_center_url}/api/1.0/org/"
        f"{atclient._atconn.organization}/username/{ATSCALE_USER}"
    )

    response = atclient._atconn._submit_request(
        request_type=private_enums.RequestType.GET, url=user_id_url
    )
    resp = json.loads(response.text)
    user_id = resp.get("response", {}).get("user", {}).get("user_id", None)

    assert user_id is not None

    # now get the permissions
    user_perm_url = (
        f"{atclient._atconn.design_center_url}/api/1.0/org/"
        f"{atclient._atconn.organization}/users/{user_id}"
    )

    user_perm_response = atclient._atconn._submit_request(
        request_type=private_enums.RequestType.GET, url=user_perm_url
    )
    user_perm = json.loads(user_perm_response.text)
    user_perm_dict = user_perm.get("response", {}).get("user", None)

    assert user_perm_dict is not None

    assert not user_perm_dict["super_user"]
    assert not user_perm_dict["api_super_user"]

    assert len(user_perm_dict["roles"]) == 1
    assert user_perm_dict["roles"][0]["title"] == "Design Center User"


class JsonSameTests:
    def test_json_same_align_ids(self, draft_project_dict):
        assert (
            testing_utils.json_same_align_ids(this=draft_project_dict, other=draft_project_dict)
            == []
        )

    def test_json_same_align_ids_empty_project(self, empty_project_not_published):
        assert (
            testing_utils.json_same_align_ids(
                this=empty_project_not_published, other=empty_project_not_published
            )
            == []
        )

    def test_json_same_align_ids_change_ids(
        self, draft_project_dict, draft_project_dict_scramble_ids
    ):
        assert (
            testing_utils.json_same_align_ids(
                this=draft_project_dict, other=draft_project_dict_scramble_ids
            )
            == []
        )

    def test_json_same_align_ids_remove_ds(
        self, draft_project_dict, walmart_pred_ds_dict, predictions_ds_dict, predictions_ds_ref_dict
    ):
        assert testing_utils.json_same_align_ids(
            this=walmart_pred_ds_dict, other=draft_project_dict
        ) == [
            f"->datasets->data-set ---- {predictions_ds_dict}",
            f"->cubes->cube->0->data-sets->data-set-ref ---- {predictions_ds_ref_dict}",
        ]

    def test_json_same_align_ids_add_ds(
        self, draft_project_dict, walmart_pred_ds_dict, predictions_ds_dict, predictions_ds_ref_dict
    ):
        assert testing_utils.json_same_align_ids(
            this=draft_project_dict, other=walmart_pred_ds_dict
        ) == [
            f"->datasets->data-set ++++ {predictions_ds_dict}",
            f"->cubes->cube->0->data-sets->data-set-ref ++++ {predictions_ds_ref_dict}",
        ]

    # autogenerated
    def test_json_same_align_ids_change_v(self, draft_project_dict):
        """Change version"""
        dict_copy = deepcopy(self, draft_project_dict)
        old_value = dict_copy["version"]
        dict_copy["version"] = old_value + 1
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == []

    def test_json_same_align_ids_change_a_a_4_v(self, draft_project_dict):
        """ " Change publishDate"""
        dict_copy = deepcopy(self, draft_project_dict)
        to_prepend = "QUANDALEDINGLE"
        changed_value = to_prepend + dict_copy["annotations"]["annotation"][4]["value"]
        dict_copy["annotations"]["annotation"][4]["value"] = changed_value
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == []

    def test_json_same_align_ids_remove_item_a_a(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["annotations"]["annotation"]
        missing_value = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        dict_copy["annotations"]["annotation"] = dict_copy["annotations"]["annotation"][:-1]
        changes = testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict)
        assert len(changes) == 1
        assert changes[0][:53] == "->annotations->annotation ++++ {'name': 'publishDate'"

    def test_json_same_align_ids_add_item_a_a(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["annotations"]["annotation"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list.append(to_add)
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->annotations->annotation ---- " + str(to_add)
        ]

    def test_json_same_align_ids_add_multiple_a_a(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["annotations"]["annotation"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy["annotations"]["annotation"] = dict_copy_list
        assert testing_utils.json_same_align_ids(this=draft_project_dict, other=dict_copy) == [
            "->annotations->annotation ++++ " + str(to_add),
            "->annotations->annotation ++++ " + str(to_add),
            "->annotations->annotation ++++ " + str(to_add),
        ]

    def test_json_same_align_ids_remove_multiple_a_a(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["annotations"]["annotation"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy["annotations"]["annotation"] = dict_copy_list
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->annotations->annotation ---- " + str(to_add),
            "->annotations->annotation ---- " + str(to_add),
            "->annotations->annotation ---- " + str(to_add),
        ]

    def test_json_same_align_ids_change_p_c(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        to_prepend = "QUANDALEDINGLE"
        changed_value = to_prepend + dict_copy["properties"]["caption"]
        dict_copy["properties"]["caption"] = changed_value
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->properties->caption",
            "actual:\n " + changed_value + ", \nexpected:\n " + changed_value[len(to_prepend) :],
        ]

    def test_json_same_align_ids_change_p_v(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        old_value = dict_copy["properties"]["visible"]
        dict_copy["properties"]["visible"] = not old_value
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->properties->visible",
            "actual:\n " + str(not old_value) + ", \nexpected:\n " + str(old_value),
        ]

    def test_json_same_align_ids_change_p_a(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        old_value = dict_copy["properties"]["aggressive_aggregate_promotion"]
        dict_copy["properties"]["aggressive_aggregate_promotion"] = not old_value
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->properties->aggressive_aggregate_promotion",
            "actual:\n " + str(not old_value) + ", \nexpected:\n " + str(old_value),
        ]

    def test_json_same_align_ids_change_p_ap_sa(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        old_value = dict_copy["properties"]["aggregate-prediction"]["speculative-aggregates"]
        dict_copy["properties"]["aggregate-prediction"]["speculative-aggregates"] = not old_value
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->properties->aggregate-prediction->speculative-aggregates",
            "actual:\n " + str(not old_value) + ", \nexpected:\n " + str(old_value),
        ]

    def test_json_same_align_ids_change_a_ak_1_p_v(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        old_value = dict_copy["attributes"]["attribute-key"][18]["properties"]["visible"]
        dict_copy["attributes"]["attribute-key"][18]["properties"]["visible"] = not old_value
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->attributes->attribute-key->18->properties->visible",
            "actual:\n " + str(not old_value) + ", \nexpected:\n " + str(old_value),
        ]

    def test_json_same_align_ids_change_a_ak_1_p_c(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        old_value = dict_copy["attributes"]["attribute-key"][18]["properties"]["columns"]
        dict_copy["attributes"]["attribute-key"][18]["properties"]["columns"] = old_value + 1
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->attributes->attribute-key->18->properties->columns",
            "actual:\n " + str(old_value + 1) + ", \nexpected:\n " + str(old_value),
        ]

    def test_json_same_align_ids_remove_item_a_ak(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["attributes"]["attribute-key"]
        missing_value = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        dict_copy["attributes"]["attribute-key"] = dict_copy["attributes"]["attribute-key"][:-1]
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->attributes->attribute-key ++++ " + str(missing_value)
        ]

    def test_json_same_align_ids_add_item_a_ak(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["attributes"]["attribute-key"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list.append(to_add)
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->attributes->attribute-key ---- " + str(to_add)
        ]

    def test_json_same_align_ids_add_multiple_a_ak(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["attributes"]["attribute-key"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy["attributes"]["attribute-key"] = dict_copy_list
        assert testing_utils.json_same_align_ids(this=draft_project_dict, other=dict_copy) == [
            "->attributes->attribute-key ++++ " + str(to_add),
            "->attributes->attribute-key ++++ " + str(to_add),
            "->attributes->attribute-key ++++ " + str(to_add),
        ]

    def test_json_same_align_ids_remove_multiple_a_ak(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["attributes"]["attribute-key"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy["attributes"]["attribute-key"] = dict_copy_list
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->attributes->attribute-key ---- " + str(to_add),
            "->attributes->attribute-key ---- " + str(to_add),
            "->attributes->attribute-key ---- " + str(to_add),
        ]

    def test_json_same_align_ids_change_a_ka_1_p_c(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        to_prepend = "QUANDALEDINGLE"
        changed_value = (
            to_prepend + dict_copy["attributes"]["keyed-attribute"][12]["properties"]["caption"]
        )
        dict_copy["attributes"]["keyed-attribute"][12]["properties"]["caption"] = changed_value
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->attributes->keyed-attribute->12->properties->caption",
            "actual:\n " + changed_value + ", \nexpected:\n " + changed_value[len(to_prepend) :],
        ]

    def test_json_same_align_ids_change_a_ka_1_p_v(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        old_value = dict_copy["attributes"]["keyed-attribute"][12]["properties"]["visible"]
        dict_copy["attributes"]["keyed-attribute"][12]["properties"]["visible"] = not old_value
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->attributes->keyed-attribute->12->properties->visible",
            "actual:\n " + str(not old_value) + ", \nexpected:\n " + str(old_value),
        ]

    def test_json_same_align_ids_change_a_ka_1_p_o_sk_o(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        to_prepend = "QUANDALEDINGLE"
        changed_value = (
            to_prepend
            + dict_copy["attributes"]["keyed-attribute"][12]["properties"]["ordering"]["sort-key"][
                "order"
            ]
        )
        dict_copy["attributes"]["keyed-attribute"][12]["properties"]["ordering"]["sort-key"][
            "order"
        ] = changed_value
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->attributes->keyed-attribute->12->properties->ordering->sort-key->order",
            "actual:\n " + changed_value + ", \nexpected:\n " + changed_value[len(to_prepend) :],
        ]

    def test_json_same_align_ids_remove_item_a_ka(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["attributes"]["keyed-attribute"]
        missing_value = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        dict_copy["attributes"]["keyed-attribute"] = dict_copy["attributes"]["keyed-attribute"][:-1]
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->attributes->keyed-attribute ++++ " + str(missing_value)
        ]

    def test_json_same_align_ids_add_item_a_ka(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["attributes"]["keyed-attribute"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list.append(to_add)
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->attributes->keyed-attribute ---- " + str(to_add)
        ]

    def test_json_same_align_ids_add_multiple_a_ka(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["attributes"]["keyed-attribute"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy["attributes"]["keyed-attribute"] = dict_copy_list
        assert testing_utils.json_same_align_ids(this=draft_project_dict, other=dict_copy) == [
            "->attributes->keyed-attribute ++++ " + str(to_add),
            "->attributes->keyed-attribute ++++ " + str(to_add),
            "->attributes->keyed-attribute ++++ " + str(to_add),
        ]

    def test_json_same_align_ids_remove_multiple_a_ka(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["attributes"]["keyed-attribute"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy["attributes"]["keyed-attribute"] = dict_copy_list
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->attributes->keyed-attribute ---- " + str(to_add),
            "->attributes->keyed-attribute ---- " + str(to_add),
            "->attributes->keyed-attribute ---- " + str(to_add),
        ]

    def test_json_same_align_ids_change_d_d_1_p_v(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        old_value = dict_copy["dimensions"]["dimension"][1]["properties"]["visible"]
        dict_copy["dimensions"]["dimension"][1]["properties"]["visible"] = not old_value
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->dimensions->dimension->1->properties->visible",
            "actual:\n " + str(not old_value) + ", \nexpected:\n " + str(old_value),
        ]

    def test_json_same_align_ids_change_d_d_1_p_dt(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        to_prepend = "QUANDALEDINGLE"
        changed_value = (
            to_prepend + dict_copy["dimensions"]["dimension"][1]["properties"]["dimension-type"]
        )
        dict_copy["dimensions"]["dimension"][1]["properties"]["dimension-type"] = changed_value
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->dimensions->dimension->1->properties->dimension-type",
            "actual:\n " + changed_value + ", \nexpected:\n " + changed_value[len(to_prepend) :],
        ]

    def test_json_same_align_ids_change_d_d_1_h_0_p_c(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        to_prepend = "QUANDALEDINGLE"
        changed_value = (
            to_prepend
            + dict_copy["dimensions"]["dimension"][1]["hierarchy"][0]["properties"]["caption"]
        )
        dict_copy["dimensions"]["dimension"][1]["hierarchy"][0]["properties"][
            "caption"
        ] = changed_value
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->dimensions->dimension->1->hierarchy->0->properties->caption",
            "actual:\n " + changed_value + ", \nexpected:\n " + changed_value[len(to_prepend) :],
        ]

    def test_json_same_align_ids_change_d_d_1_h_0_p_v(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        old_value = dict_copy["dimensions"]["dimension"][1]["hierarchy"][0]["properties"]["visible"]
        dict_copy["dimensions"]["dimension"][1]["hierarchy"][0]["properties"][
            "visible"
        ] = not old_value
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->dimensions->dimension->1->hierarchy->0->properties->visible",
            "actual:\n " + str(not old_value) + ", \nexpected:\n " + str(old_value),
        ]

    def test_json_same_align_ids_change_d_d_1_h_0_p_f(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        to_prepend = "QUANDALEDINGLE"
        changed_value = (
            to_prepend
            + dict_copy["dimensions"]["dimension"][1]["hierarchy"][0]["properties"]["folder"]
        )
        dict_copy["dimensions"]["dimension"][1]["hierarchy"][0]["properties"][
            "folder"
        ] = changed_value
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->dimensions->dimension->1->hierarchy->0->properties->folder",
            "actual:\n " + changed_value + ", \nexpected:\n " + changed_value[len(to_prepend) :],
        ]

    def test_json_same_align_ids_change_d_d_1_h_0_p_fe(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        to_prepend = "QUANDALEDINGLE"
        changed_value = (
            to_prepend
            + dict_copy["dimensions"]["dimension"][1]["hierarchy"][0]["properties"]["filter-empty"]
        )
        dict_copy["dimensions"]["dimension"][1]["hierarchy"][0]["properties"][
            "filter-empty"
        ] = changed_value
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->dimensions->dimension->1->hierarchy->0->properties->filter-empty",
            "actual:\n " + changed_value + ", \nexpected:\n " + changed_value[len(to_prepend) :],
        ]

    def test_json_same_align_ids_change_d_d_1_h_0_l_2_p_uip(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        old_value = dict_copy["dimensions"]["dimension"][1]["hierarchy"][0]["level"][2][
            "properties"
        ]["unique-in-parent"]
        dict_copy["dimensions"]["dimension"][1]["hierarchy"][0]["level"][2]["properties"][
            "unique-in-parent"
        ] = not old_value
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->dimensions->dimension->1->hierarchy->0->level->2->properties->unique-in-parent",
            "actual:\n " + str(not old_value) + ", \nexpected:\n " + str(old_value),
        ]

    def test_json_same_align_ids_change_d_d_1_h_0_l_2_p_v(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        old_value = dict_copy["dimensions"]["dimension"][1]["hierarchy"][0]["level"][2][
            "properties"
        ]["visible"]
        dict_copy["dimensions"]["dimension"][1]["hierarchy"][0]["level"][2]["properties"][
            "visible"
        ] = not old_value
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->dimensions->dimension->1->hierarchy->0->level->2->properties->visible",
            "actual:\n " + str(not old_value) + ", \nexpected:\n " + str(old_value),
        ]

    def test_json_same_align_ids_remove_item_d_d_1_h_0_l(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["dimensions"]["dimension"][1]["hierarchy"][0]["level"]
        missing_value = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        dict_copy["dimensions"]["dimension"][1]["hierarchy"][0]["level"] = dict_copy["dimensions"][
            "dimension"
        ][1]["hierarchy"][0]["level"][:-1]
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->dimensions->dimension->1->hierarchy->0->level ++++ " + str(missing_value)
        ]

    def test_json_same_align_ids_add_item_d_d_1_h_0_l(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["dimensions"]["dimension"][1]["hierarchy"][0]["level"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list.append(to_add)
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->dimensions->dimension->1->hierarchy->0->level ---- " + str(to_add)
        ]

    def test_json_same_align_ids_add_multiple_d_d_1_h_0_l(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["dimensions"]["dimension"][1]["hierarchy"][0]["level"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name", "primary-attribute"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy["dimensions"]["dimension"][1]["hierarchy"][0]["level"] = dict_copy_list
        assert testing_utils.json_same_align_ids(this=draft_project_dict, other=dict_copy) == [
            "->dimensions->dimension->1->hierarchy->0->level ++++ " + str(to_add),
            "->dimensions->dimension->1->hierarchy->0->level ++++ " + str(to_add),
            "->dimensions->dimension->1->hierarchy->0->level ++++ " + str(to_add),
        ]

    def test_json_same_align_ids_remove_multiple_d_d_1_h_0_l(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["dimensions"]["dimension"][1]["hierarchy"][0]["level"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in [
                "id",
                "expression",
                "name",
                "primary-attribute",
            ]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy["dimensions"]["dimension"][1]["hierarchy"][0]["level"] = dict_copy_list
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->dimensions->dimension->1->hierarchy->0->level ---- " + str(to_add),
            "->dimensions->dimension->1->hierarchy->0->level ---- " + str(to_add),
            "->dimensions->dimension->1->hierarchy->0->level ---- " + str(to_add),
        ]

    def test_json_same_align_ids_remove_item_d_d_1_h(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["dimensions"]["dimension"][1]["hierarchy"]
        missing_value = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        dict_copy["dimensions"]["dimension"][1]["hierarchy"] = dict_copy["dimensions"]["dimension"][
            1
        ]["hierarchy"][:-1]
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->dimensions->dimension->1->hierarchy ++++ " + str(missing_value)
        ]

    def test_json_same_align_ids_add_item_d_d_1_h(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["dimensions"]["dimension"][1]["hierarchy"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list.append(to_add)
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->dimensions->dimension->1->hierarchy ---- " + str(to_add)
        ]

    def test_json_same_align_ids_add_multiple_d_d_1_h(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["dimensions"]["dimension"][1]["hierarchy"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy["dimensions"]["dimension"][1]["hierarchy"] = dict_copy_list
        assert testing_utils.json_same_align_ids(this=draft_project_dict, other=dict_copy) == [
            "->dimensions->dimension->1->hierarchy ++++ " + str(to_add),
            "->dimensions->dimension->1->hierarchy ++++ " + str(to_add),
            "->dimensions->dimension->1->hierarchy ++++ " + str(to_add),
        ]

    def test_json_same_align_ids_remove_multiple_d_d_1_h(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["dimensions"]["dimension"][1]["hierarchy"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy["dimensions"]["dimension"][1]["hierarchy"] = dict_copy_list
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->dimensions->dimension->1->hierarchy ---- " + str(to_add),
            "->dimensions->dimension->1->hierarchy ---- " + str(to_add),
            "->dimensions->dimension->1->hierarchy ---- " + str(to_add),
        ]

    def test_json_same_align_ids_change_d_d_1_pd_0(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        to_prepend = "QUANDALEDINGLE"
        changed_value = (
            to_prepend + dict_copy["dimensions"]["dimension"][1]["participating-datasets"][0]
        )
        dict_copy["dimensions"]["dimension"][1]["participating-datasets"][0] = changed_value
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->dimensions->dimension->1->participating-datasets->0",
            "actual:\n " + changed_value + ", \nexpected:\n " + changed_value[len(to_prepend) :],
        ]

    def test_json_same_align_ids_remove_item_d_d_1_pd(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["dimensions"]["dimension"][1]["participating-datasets"]
        missing_value = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        dict_copy["dimensions"]["dimension"][1]["participating-datasets"] = dict_copy["dimensions"][
            "dimension"
        ][1]["participating-datasets"][:-1]
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->dimensions->dimension->1->participating-datasets ++++ " + str(missing_value)
        ]

    def test_json_same_align_ids_add_item_d_d_1_pd(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["dimensions"]["dimension"][1]["participating-datasets"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list.append(to_add)
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->dimensions->dimension->1->participating-datasets ---- " + str(to_add)
        ]

    def test_json_same_align_ids_add_multiple_d_d_1_pd(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["dimensions"]["dimension"][1]["participating-datasets"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy["dimensions"]["dimension"][1]["participating-datasets"] = dict_copy_list
        assert testing_utils.json_same_align_ids(this=draft_project_dict, other=dict_copy) == [
            "->dimensions->dimension->1->participating-datasets ++++ " + str(to_add),
            "->dimensions->dimension->1->participating-datasets ++++ " + str(to_add),
            "->dimensions->dimension->1->participating-datasets ++++ " + str(to_add),
        ]

    def test_json_same_align_ids_remove_multiple_d_d_1_pd(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["dimensions"]["dimension"][1]["participating-datasets"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy["dimensions"]["dimension"][1]["participating-datasets"] = dict_copy_list
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->dimensions->dimension->1->participating-datasets ---- " + str(to_add),
            "->dimensions->dimension->1->participating-datasets ---- " + str(to_add),
            "->dimensions->dimension->1->participating-datasets ---- " + str(to_add),
        ]

    def test_json_same_align_ids_remove_item_d_d(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["dimensions"]["dimension"]
        missing_value = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        dict_copy["dimensions"]["dimension"] = dict_copy["dimensions"]["dimension"][:-1]
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->dimensions->dimension ++++ " + str(missing_value)
        ]

    def test_json_same_align_ids_add_item_d_d(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["dimensions"]["dimension"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list.append(to_add)
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->dimensions->dimension ---- " + str(to_add)
        ]

    def test_json_same_align_ids_add_multiple_d_d(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["dimensions"]["dimension"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy["dimensions"]["dimension"] = dict_copy_list
        assert testing_utils.json_same_align_ids(this=draft_project_dict, other=dict_copy) == [
            "->dimensions->dimension ++++ " + str(to_add),
            "->dimensions->dimension ++++ " + str(to_add),
            "->dimensions->dimension ++++ " + str(to_add),
        ]

    def test_json_same_align_ids_remove_multiple_d_d(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["dimensions"]["dimension"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy["dimensions"]["dimension"] = dict_copy_list
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->dimensions->dimension ---- " + str(to_add),
            "->dimensions->dimension ---- " + str(to_add),
            "->dimensions->dimension ---- " + str(to_add),
        ]

    def test_json_same_align_ids_change_d_ds_3_p_aa(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        old_value = dict_copy["datasets"]["data-set"][3]["properties"]["allow-aggregates"]
        dict_copy["datasets"]["data-set"][3]["properties"]["allow-aggregates"] = not old_value
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->datasets->data-set->3->properties->allow-aggregates",
            "actual:\n " + str(not old_value) + ", \nexpected:\n " + str(old_value),
        ]

    def test_json_same_align_ids_change_d_ds_3_p_q_0_s_0_e(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        to_prepend = "QUANDALEDINGLE"
        changed_value = (
            to_prepend
            + dict_copy["datasets"]["data-set"][3]["physical"]["queries"][0]["sqls"][0][
                "expression"
            ]
        )
        dict_copy["datasets"]["data-set"][3]["physical"]["queries"][0]["sqls"][0][
            "expression"
        ] = changed_value
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->datasets->data-set->3->physical->queries->0->sqls->0->expression",
            "actual:\n " + changed_value + ", \nexpected:\n " + changed_value[len(to_prepend) :],
        ]

    def test_json_same_align_ids_remove_item_d_ds_3_p_q_0_s(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["datasets"]["data-set"][3]["physical"]["queries"][0]["sqls"]
        missing_value = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        dict_copy["datasets"]["data-set"][3]["physical"]["queries"][0]["sqls"] = dict_copy[
            "datasets"
        ]["data-set"][3]["physical"]["queries"][0]["sqls"][:-1]
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->datasets->data-set->3->physical->queries->0->sqls ++++ " + str(missing_value)
        ]

    def test_json_same_align_ids_remove_item_d_ds_3_p_q(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["datasets"]["data-set"][3]["physical"]["queries"]
        missing_value = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        dict_copy["datasets"]["data-set"][3]["physical"]["queries"] = dict_copy["datasets"][
            "data-set"
        ][3]["physical"]["queries"][:-1]
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->datasets->data-set->3->physical->queries ++++ " + str(missing_value)
        ]

    #  not accounting for multiple queries in a qds, if that is actually possible (almost positive it isn't) we should

    def test_json_same_align_ids_change_d_ds_3_p_i(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        old_value = dict_copy["datasets"]["data-set"][3]["physical"]["immutable"]
        dict_copy["datasets"]["data-set"][3]["physical"]["immutable"] = not old_value
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->datasets->data-set->3->physical->immutable",
            "actual:\n " + str(not old_value) + ", \nexpected:\n " + str(old_value),
        ]

    def test_json_same_align_ids_change_d_ds_3_p_c_3_t_dt(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        to_prepend = "QUANDALEDINGLE"
        changed_value = (
            to_prepend
            + dict_copy["datasets"]["data-set"][3]["physical"]["columns"][3]["type"]["data-type"]
        )
        dict_copy["datasets"]["data-set"][3]["physical"]["columns"][3]["type"][
            "data-type"
        ] = changed_value
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->datasets->data-set->3->physical->columns->3->type->data-type",
            "actual:\n " + changed_value + ", \nexpected:\n " + changed_value[len(to_prepend) :],
        ]

    def test_json_same_align_ids_remove_item_d_ds_3_p_c(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["datasets"]["data-set"][3]["physical"]["columns"]
        missing_value = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        dict_copy["datasets"]["data-set"][3]["physical"]["columns"] = dict_copy["datasets"][
            "data-set"
        ][3]["physical"]["columns"][:-1]
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->datasets->data-set->3->physical->columns ++++ " + str(missing_value)
        ]

    def test_json_same_align_ids_add_item_d_ds_3_p_c(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["datasets"]["data-set"][3]["physical"]["columns"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list.append(to_add)
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->datasets->data-set->3->physical->columns ---- " + str(to_add)
        ]

    def test_json_same_align_ids_add_multiple_d_ds_3_p_c(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["datasets"]["data-set"][3]["physical"]["columns"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy["datasets"]["data-set"][3]["physical"]["columns"] = dict_copy_list
        assert testing_utils.json_same_align_ids(this=draft_project_dict, other=dict_copy) == [
            "->datasets->data-set->3->physical->columns ++++ " + str(to_add),
            "->datasets->data-set->3->physical->columns ++++ " + str(to_add),
            "->datasets->data-set->3->physical->columns ++++ " + str(to_add),
        ]

    def test_json_same_align_ids_remove_multiple_d_ds_3_p_c(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["datasets"]["data-set"][3]["physical"]["columns"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy["datasets"]["data-set"][3]["physical"]["columns"] = dict_copy_list
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->datasets->data-set->3->physical->columns ---- " + str(to_add),
            "->datasets->data-set->3->physical->columns ---- " + str(to_add),
            "->datasets->data-set->3->physical->columns ---- " + str(to_add),
        ]

    def test_json_same_align_ids_change_d_ds_3_l_ar_0_c(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        to_prepend = "QUANDALEDINGLE"
        changed_value = (
            to_prepend
            + dict_copy["datasets"]["data-set"][3]["logical"]["attribute-ref"][0]["complete"]
        )
        dict_copy["datasets"]["data-set"][3]["logical"]["attribute-ref"][0][
            "complete"
        ] = changed_value
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->datasets->data-set->3->logical->attribute-ref->0->complete",
            "actual:\n " + changed_value + ", \nexpected:\n " + changed_value[len(to_prepend) :],
        ]

    def test_json_same_align_ids_change_d_ds_3_l_ar_0_c_0(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        to_prepend = "QUANDALEDINGLE"
        changed_value = (
            to_prepend
            + dict_copy["datasets"]["data-set"][3]["logical"]["attribute-ref"][0]["column"][0]
        )
        dict_copy["datasets"]["data-set"][3]["logical"]["attribute-ref"][0]["column"][
            0
        ] = changed_value
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->datasets->data-set->3->logical->attribute-ref->0->column->0",
            "actual:\n " + changed_value + ", \nexpected:\n " + changed_value[len(to_prepend) :],
        ]

    def test_json_same_align_ids_remove_item_d_ds_3_l_ar_0_c(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["datasets"]["data-set"][3]["logical"]["attribute-ref"][0][
            "column"
        ]
        missing_value = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        dict_copy["datasets"]["data-set"][3]["logical"]["attribute-ref"][0]["column"] = dict_copy[
            "datasets"
        ]["data-set"][3]["logical"]["attribute-ref"][0]["column"][:-1]
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->datasets->data-set->3->logical->attribute-ref->0->column ++++ " + str(missing_value)
        ]

    def test_json_same_align_ids_add_item_d_ds_3_l_ar_0_c(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["datasets"]["data-set"][3]["logical"]["attribute-ref"][0][
            "column"
        ]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list.append(to_add)
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->datasets->data-set->3->logical->attribute-ref->0->column ---- " + str(to_add)
        ]

    def test_json_same_align_ids_add_multiple_d_ds_3_l_ar_0_c(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["datasets"]["data-set"][3]["logical"]["attribute-ref"][0][
            "column"
        ]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy["datasets"]["data-set"][3]["logical"]["attribute-ref"][0][
            "column"
        ] = dict_copy_list
        assert testing_utils.json_same_align_ids(this=draft_project_dict, other=dict_copy) == [
            "->datasets->data-set->3->logical->attribute-ref->0->column ++++ " + str(to_add),
            "->datasets->data-set->3->logical->attribute-ref->0->column ++++ " + str(to_add),
            "->datasets->data-set->3->logical->attribute-ref->0->column ++++ " + str(to_add),
        ]

    def test_json_same_align_ids_remove_multiple_d_ds_3_l_ar_0_c(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["datasets"]["data-set"][3]["logical"]["attribute-ref"][0][
            "column"
        ]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy["datasets"]["data-set"][3]["logical"]["attribute-ref"][0][
            "column"
        ] = dict_copy_list
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->datasets->data-set->3->logical->attribute-ref->0->column ---- " + str(to_add),
            "->datasets->data-set->3->logical->attribute-ref->0->column ---- " + str(to_add),
            "->datasets->data-set->3->logical->attribute-ref->0->column ---- " + str(to_add),
        ]

    def test_json_same_align_ids_remove_item_d_ds_3_l_ar(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["datasets"]["data-set"][3]["logical"]["attribute-ref"]
        missing_value = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        dict_copy["datasets"]["data-set"][3]["logical"]["attribute-ref"] = dict_copy["datasets"][
            "data-set"
        ][3]["logical"]["attribute-ref"][:-1]
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->datasets->data-set->3->logical->attribute-ref ++++ " + str(missing_value)
        ]

    def test_json_same_align_ids_add_item_d_ds_3_l_ar(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["datasets"]["data-set"][3]["logical"]["attribute-ref"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list.append(to_add)
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->datasets->data-set->3->logical->attribute-ref ---- " + str(to_add)
        ]

    def test_json_same_align_ids_add_multiple_d_ds_3_l_ar(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["datasets"]["data-set"][3]["logical"]["attribute-ref"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy["datasets"]["data-set"][3]["logical"]["attribute-ref"] = dict_copy_list
        assert testing_utils.json_same_align_ids(this=draft_project_dict, other=dict_copy) == [
            "->datasets->data-set->3->logical->attribute-ref ++++ " + str(to_add),
            "->datasets->data-set->3->logical->attribute-ref ++++ " + str(to_add),
            "->datasets->data-set->3->logical->attribute-ref ++++ " + str(to_add),
        ]

    def test_json_same_align_ids_remove_multiple_d_ds_3_l_ar(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["datasets"]["data-set"][3]["logical"]["attribute-ref"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy["datasets"]["data-set"][3]["logical"]["attribute-ref"] = dict_copy_list
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->datasets->data-set->3->logical->attribute-ref ---- " + str(to_add),
            "->datasets->data-set->3->logical->attribute-ref ---- " + str(to_add),
            "->datasets->data-set->3->logical->attribute-ref ---- " + str(to_add),
        ]

    def test_json_same_align_ids_remove_item_d_ds(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["datasets"]["data-set"]
        missing_value = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        dict_copy["datasets"]["data-set"] = dict_copy["datasets"]["data-set"][:-1]
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->datasets->data-set ++++ " + str(missing_value)
        ]

    def test_json_same_align_ids_add_item_d_ds(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["datasets"]["data-set"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list.append(to_add)
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->datasets->data-set ---- " + str(to_add)
        ]

    def test_json_same_align_ids_add_multiple_d_ds(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["datasets"]["data-set"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy["datasets"]["data-set"] = dict_copy_list
        assert testing_utils.json_same_align_ids(this=draft_project_dict, other=dict_copy) == [
            "->datasets->data-set ++++ " + str(to_add),
            "->datasets->data-set ++++ " + str(to_add),
            "->datasets->data-set ++++ " + str(to_add),
        ]

    def test_json_same_align_ids_remove_multiple_d_ds(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["datasets"]["data-set"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy["datasets"]["data-set"] = dict_copy_list
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->datasets->data-set ---- " + str(to_add),
            "->datasets->data-set ---- " + str(to_add),
            "->datasets->data-set ---- " + str(to_add),
        ]

    def test_json_same_align_ids_change_cm_cm_1_p_c(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        to_prepend = "QUANDALEDINGLE"
        changed_value = (
            to_prepend
            + dict_copy["calculated-members"]["calculated-member"][5]["properties"]["caption"]
        )
        dict_copy["calculated-members"]["calculated-member"][5]["properties"][
            "caption"
        ] = changed_value
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->calculated-members->calculated-member->5->properties->caption",
            "actual:\n " + changed_value + ", \nexpected:\n " + changed_value[len(to_prepend) :],
        ]

    def test_json_same_align_ids_change_cm_cm_1_p_v(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        old_value = dict_copy["calculated-members"]["calculated-member"][5]["properties"]["visible"]
        dict_copy["calculated-members"]["calculated-member"][5]["properties"][
            "visible"
        ] = not old_value
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->calculated-members->calculated-member->5->properties->visible",
            "actual:\n " + str(not old_value) + ", \nexpected:\n " + str(old_value),
        ]

    def test_json_same_align_ids_change_cm_cm_1_p_f(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        to_prepend = "QUANDALEDINGLE"
        changed_value = (
            to_prepend
            + dict_copy["calculated-members"]["calculated-member"][5]["properties"]["folder"]
        )
        dict_copy["calculated-members"]["calculated-member"][5]["properties"][
            "folder"
        ] = changed_value
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->calculated-members->calculated-member->5->properties->folder",
            "actual:\n " + changed_value + ", \nexpected:\n " + changed_value[len(to_prepend) :],
        ]

    def test_json_same_align_ids_change_cm_cm_1_e(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        to_prepend = "QUANDALEDINGLE"
        changed_value = (
            to_prepend + dict_copy["calculated-members"]["calculated-member"][5]["expression"]
        )
        dict_copy["calculated-members"]["calculated-member"][5]["expression"] = changed_value
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->calculated-members->calculated-member->5->expression",
            "actual:\n " + changed_value + ", \nexpected:\n " + changed_value[len(to_prepend) :],
        ]

    def test_json_same_align_ids_remove_item_cm_cm(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["calculated-members"]["calculated-member"]
        missing_value = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        dict_copy["calculated-members"]["calculated-member"] = dict_copy["calculated-members"][
            "calculated-member"
        ][:-1]
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict)[:1] == [
            "->calculated-members->calculated-member ++++ " + str(missing_value)
        ]

    def test_json_same_align_ids_add_item_cm_cm(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["calculated-members"]["calculated-member"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list.append(to_add)
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->calculated-members->calculated-member ---- " + str(to_add)
        ]

    def test_json_same_align_ids_add_multiple_cm_cm(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["calculated-members"]["calculated-member"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy["calculated-members"]["calculated-member"] = dict_copy_list
        assert testing_utils.json_same_align_ids(this=draft_project_dict, other=dict_copy) == [
            "->calculated-members->calculated-member ++++ " + str(to_add),
            "->calculated-members->calculated-member ++++ " + str(to_add),
            "->calculated-members->calculated-member ++++ " + str(to_add),
        ]

    def test_json_same_align_ids_remove_multiple_cm_cm(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["calculated-members"]["calculated-member"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy["calculated-members"]["calculated-member"] = dict_copy_list
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->calculated-members->calculated-member ---- " + str(to_add),
            "->calculated-members->calculated-member ---- " + str(to_add),
            "->calculated-members->calculated-member ---- " + str(to_add),
        ]

    def test_json_same_align_ids_change_c_c_0_p_v(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        old_value = dict_copy["cubes"]["cube"][0]["properties"]["visible"]
        dict_copy["cubes"]["cube"][0]["properties"]["visible"] = not old_value
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->cubes->cube->0->properties->visible",
            "actual:\n " + str(not old_value) + ", \nexpected:\n " + str(old_value),
        ]

    def test_json_same_align_ids_change_c_c_0_a_ak_7_p_v(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        old_value = dict_copy["cubes"]["cube"][0]["attributes"]["attribute-key"][7]["properties"][
            "visible"
        ]
        dict_copy["cubes"]["cube"][0]["attributes"]["attribute-key"][7]["properties"][
            "visible"
        ] = not old_value
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->cubes->cube->0->attributes->attribute-key->7->properties->visible",
            "actual:\n " + str(not old_value) + ", \nexpected:\n " + str(old_value),
        ]

    def test_json_same_align_ids_change_c_c_0_a_ak_7_p_c(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        old_value = dict_copy["cubes"]["cube"][0]["attributes"]["attribute-key"][7]["properties"][
            "columns"
        ]
        dict_copy["cubes"]["cube"][0]["attributes"]["attribute-key"][7]["properties"]["columns"] = (
            old_value + 1
        )
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->cubes->cube->0->attributes->attribute-key->7->properties->columns",
            "actual:\n " + str(old_value + 1) + ", \nexpected:\n " + str(old_value),
        ]

    def test_json_same_align_ids_remove_item_c_c_0_a_ak(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["cubes"]["cube"][0]["attributes"]["attribute-key"]
        missing_value = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        dict_copy["cubes"]["cube"][0]["attributes"]["attribute-key"] = dict_copy["cubes"]["cube"][
            0
        ]["attributes"]["attribute-key"][:-1]
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->cubes->cube->0->attributes->attribute-key ++++ " + str(missing_value)
        ]

    def test_json_same_align_ids_add_item_c_c_0_a_ak(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["cubes"]["cube"][0]["attributes"]["attribute-key"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list.append(to_add)
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->cubes->cube->0->attributes->attribute-key ---- " + str(to_add)
        ]

    def test_json_same_align_ids_add_multiple_c_c_0_a_ak(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["cubes"]["cube"][0]["attributes"]["attribute-key"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy["cubes"]["cube"][0]["attributes"]["attribute-key"] = dict_copy_list
        assert testing_utils.json_same_align_ids(this=draft_project_dict, other=dict_copy) == [
            "->cubes->cube->0->attributes->attribute-key ++++ " + str(to_add),
            "->cubes->cube->0->attributes->attribute-key ++++ " + str(to_add),
            "->cubes->cube->0->attributes->attribute-key ++++ " + str(to_add),
        ]

    def test_json_same_align_ids_remove_multiple_c_c_0_a_ak(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["cubes"]["cube"][0]["attributes"]["attribute-key"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy["cubes"]["cube"][0]["attributes"]["attribute-key"] = dict_copy_list
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->cubes->cube->0->attributes->attribute-key ---- " + str(to_add),
            "->cubes->cube->0->attributes->attribute-key ---- " + str(to_add),
            "->cubes->cube->0->attributes->attribute-key ---- " + str(to_add),
        ]

    def test_json_same_align_ids_change_c_c_0_a_ka_1_p_c(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        to_prepend = "QUANDALEDINGLE"
        changed_value = (
            to_prepend
            + dict_copy["cubes"]["cube"][0]["attributes"]["keyed-attribute"][1]["properties"][
                "caption"
            ]
        )
        dict_copy["cubes"]["cube"][0]["attributes"]["keyed-attribute"][1]["properties"][
            "caption"
        ] = changed_value
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->cubes->cube->0->attributes->keyed-attribute->1->properties->caption",
            "actual:\n " + changed_value + ", \nexpected:\n " + changed_value[len(to_prepend) :],
        ]

    def test_json_same_align_ids_change_c_c_0_a_ka_1_p_v(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        old_value = dict_copy["cubes"]["cube"][0]["attributes"]["keyed-attribute"][1]["properties"][
            "visible"
        ]
        dict_copy["cubes"]["cube"][0]["attributes"]["keyed-attribute"][1]["properties"][
            "visible"
        ] = not old_value
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->cubes->cube->0->attributes->keyed-attribute->1->properties->visible",
            "actual:\n " + str(not old_value) + ", \nexpected:\n " + str(old_value),
        ]

    def test_json_same_align_ids_change_c_c_0_a_ka_1_p_o_sk_o(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        to_prepend = "QUANDALEDINGLE"
        changed_value = (
            to_prepend
            + dict_copy["cubes"]["cube"][0]["attributes"]["keyed-attribute"][1]["properties"][
                "ordering"
            ]["sort-key"]["order"]
        )
        dict_copy["cubes"]["cube"][0]["attributes"]["keyed-attribute"][1]["properties"]["ordering"][
            "sort-key"
        ]["order"] = changed_value
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->cubes->cube->0->attributes->keyed-attribute->1->properties->ordering->sort-key->order",
            "actual:\n " + changed_value + ", \nexpected:\n " + changed_value[len(to_prepend) :],
        ]

    def test_json_same_align_ids_remove_item_c_c_0_a_ka(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["cubes"]["cube"][0]["attributes"]["keyed-attribute"]
        missing_value = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        dict_copy["cubes"]["cube"][0]["attributes"]["keyed-attribute"] = dict_copy["cubes"]["cube"][
            0
        ]["attributes"]["keyed-attribute"][:-1]
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->cubes->cube->0->attributes->keyed-attribute ++++ " + str(missing_value)
        ]

    def test_json_same_align_ids_add_item_c_c_0_a_ka(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["cubes"]["cube"][0]["attributes"]["keyed-attribute"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list.append(to_add)
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->cubes->cube->0->attributes->keyed-attribute ---- " + str(to_add)
        ]

    def test_json_same_align_ids_add_multiple_c_c_0_a_ka(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["cubes"]["cube"][0]["attributes"]["keyed-attribute"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy["cubes"]["cube"][0]["attributes"]["keyed-attribute"] = dict_copy_list
        assert testing_utils.json_same_align_ids(this=draft_project_dict, other=dict_copy) == [
            "->cubes->cube->0->attributes->keyed-attribute ++++ " + str(to_add),
            "->cubes->cube->0->attributes->keyed-attribute ++++ " + str(to_add),
            "->cubes->cube->0->attributes->keyed-attribute ++++ " + str(to_add),
        ]

    def test_json_same_align_ids_remove_multiple_c_c_0_a_ka(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["cubes"]["cube"][0]["attributes"]["keyed-attribute"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy["cubes"]["cube"][0]["attributes"]["keyed-attribute"] = dict_copy_list
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->cubes->cube->0->attributes->keyed-attribute ---- " + str(to_add),
            "->cubes->cube->0->attributes->keyed-attribute ---- " + str(to_add),
            "->cubes->cube->0->attributes->keyed-attribute ---- " + str(to_add),
        ]

    def test_json_same_align_ids_change_c_c_0_a_a_1_p_c(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        to_prepend = "QUANDALEDINGLE"
        changed_value = (
            to_prepend
            + dict_copy["cubes"]["cube"][0]["attributes"]["attribute"][16]["properties"]["caption"]
        )
        dict_copy["cubes"]["cube"][0]["attributes"]["attribute"][16]["properties"][
            "caption"
        ] = changed_value
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->cubes->cube->0->attributes->attribute->16->properties->caption",
            "actual:\n " + changed_value + ", \nexpected:\n " + changed_value[len(to_prepend) :],
        ]

    def test_json_same_align_ids_change_c_c_0_a_a_1_p_v(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        old_value = dict_copy["cubes"]["cube"][0]["attributes"]["attribute"][16]["properties"][
            "visible"
        ]
        dict_copy["cubes"]["cube"][0]["attributes"]["attribute"][16]["properties"][
            "visible"
        ] = not old_value
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->cubes->cube->0->attributes->attribute->16->properties->visible",
            "actual:\n " + str(not old_value) + ", \nexpected:\n " + str(old_value),
        ]

    def test_json_same_align_ids_change_c_c_0_a_a_1_p_f(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        to_prepend = "QUANDALEDINGLE"
        changed_value = (
            to_prepend
            + dict_copy["cubes"]["cube"][0]["attributes"]["attribute"][16]["properties"]["folder"]
        )
        dict_copy["cubes"]["cube"][0]["attributes"]["attribute"][16]["properties"][
            "folder"
        ] = changed_value
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->cubes->cube->0->attributes->attribute->16->properties->folder",
            "actual:\n " + changed_value + ", \nexpected:\n " + changed_value[len(to_prepend) :],
        ]

    def test_json_same_align_ids_change_c_c_0_a_a_1_p_t_m_da(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        to_prepend = "QUANDALEDINGLE"
        changed_value = (
            to_prepend
            + dict_copy["cubes"]["cube"][0]["attributes"]["attribute"][16]["properties"]["type"][
                "measure"
            ]["default-aggregation"]
        )
        dict_copy["cubes"]["cube"][0]["attributes"]["attribute"][16]["properties"]["type"][
            "measure"
        ]["default-aggregation"] = changed_value
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->cubes->cube->0->attributes->attribute->16->properties->type->measure->default-aggregation",
            "actual:\n " + changed_value + ", \nexpected:\n " + changed_value[len(to_prepend) :],
        ]

    def test_json_same_align_ids_remove_item_c_c_0_a_a(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["cubes"]["cube"][0]["attributes"]["attribute"]
        missing_value = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        dict_copy["cubes"]["cube"][0]["attributes"]["attribute"] = dict_copy["cubes"]["cube"][0][
            "attributes"
        ]["attribute"][:-1]
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->cubes->cube->0->attributes->attribute ++++ " + str(missing_value)
        ]

    def test_json_same_align_ids_add_item_c_c_0_a_a(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["cubes"]["cube"][0]["attributes"]["attribute"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list.append(to_add)
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->cubes->cube->0->attributes->attribute ---- " + str(to_add)
        ]

    def test_json_same_align_ids_add_multiple_c_c_0_a_a(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["cubes"]["cube"][0]["attributes"]["attribute"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy["cubes"]["cube"][0]["attributes"]["attribute"] = dict_copy_list
        assert testing_utils.json_same_align_ids(this=draft_project_dict, other=dict_copy) == [
            "->cubes->cube->0->attributes->attribute ++++ " + str(to_add),
            "->cubes->cube->0->attributes->attribute ++++ " + str(to_add),
            "->cubes->cube->0->attributes->attribute ++++ " + str(to_add),
        ]

    def test_json_same_align_ids_remove_multiple_c_c_0_a_a(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["cubes"]["cube"][0]["attributes"]["attribute"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy["cubes"]["cube"][0]["attributes"]["attribute"] = dict_copy_list
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->cubes->cube->0->attributes->attribute ---- " + str(to_add),
            "->cubes->cube->0->attributes->attribute ---- " + str(to_add),
            "->cubes->cube->0->attributes->attribute ---- " + str(to_add),
        ]

    def test_json_same_align_ids_change_c_c_0_d_d_0_p_v(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        old_value = dict_copy["cubes"]["cube"][0]["dimensions"]["dimension"][0]["properties"][
            "visible"
        ]
        dict_copy["cubes"]["cube"][0]["dimensions"]["dimension"][0]["properties"][
            "visible"
        ] = not old_value
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->cubes->cube->0->dimensions->dimension->0->properties->visible",
            "actual:\n " + str(not old_value) + ", \nexpected:\n " + str(old_value),
        ]

    def test_json_same_align_ids_change_c_c_0_d_d_0_h_0_p_c(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        to_prepend = "QUANDALEDINGLE"
        changed_value = (
            to_prepend
            + dict_copy["cubes"]["cube"][0]["dimensions"]["dimension"][0]["hierarchy"][0][
                "properties"
            ]["caption"]
        )
        dict_copy["cubes"]["cube"][0]["dimensions"]["dimension"][0]["hierarchy"][0]["properties"][
            "caption"
        ] = changed_value
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->cubes->cube->0->dimensions->dimension->0->hierarchy->0->properties->caption",
            "actual:\n " + changed_value + ", \nexpected:\n " + changed_value[len(to_prepend) :],
        ]

    def test_json_same_align_ids_change_c_c_0_d_d_0_h_0_p_v(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        old_value = dict_copy["cubes"]["cube"][0]["dimensions"]["dimension"][0]["hierarchy"][0][
            "properties"
        ]["visible"]
        dict_copy["cubes"]["cube"][0]["dimensions"]["dimension"][0]["hierarchy"][0]["properties"][
            "visible"
        ] = not old_value
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->cubes->cube->0->dimensions->dimension->0->hierarchy->0->properties->visible",
            "actual:\n " + str(not old_value) + ", \nexpected:\n " + str(old_value),
        ]

    def test_json_same_align_ids_change_c_c_0_d_d_0_h_0_p_f(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        to_prepend = "QUANDALEDINGLE"
        changed_value = (
            to_prepend
            + dict_copy["cubes"]["cube"][0]["dimensions"]["dimension"][0]["hierarchy"][0][
                "properties"
            ]["folder"]
        )
        dict_copy["cubes"]["cube"][0]["dimensions"]["dimension"][0]["hierarchy"][0]["properties"][
            "folder"
        ] = changed_value
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->cubes->cube->0->dimensions->dimension->0->hierarchy->0->properties->folder",
            "actual:\n " + changed_value + ", \nexpected:\n " + changed_value[len(to_prepend) :],
        ]

    def test_json_same_align_ids_change_c_c_0_d_d_0_h_0_p_fe(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        to_prepend = "QUANDALEDINGLE"
        changed_value = (
            to_prepend
            + dict_copy["cubes"]["cube"][0]["dimensions"]["dimension"][0]["hierarchy"][0][
                "properties"
            ]["filter-empty"]
        )
        dict_copy["cubes"]["cube"][0]["dimensions"]["dimension"][0]["hierarchy"][0]["properties"][
            "filter-empty"
        ] = changed_value
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->cubes->cube->0->dimensions->dimension->0->hierarchy->0->properties->filter-empty",
            "actual:\n " + changed_value + ", \nexpected:\n " + changed_value[len(to_prepend) :],
        ]

    def test_json_same_align_ids_change_c_c_0_d_d_0_h_0_l_1_p_uip(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        old_value = dict_copy["cubes"]["cube"][0]["dimensions"]["dimension"][0]["hierarchy"][0][
            "level"
        ][1]["properties"]["unique-in-parent"]
        dict_copy["cubes"]["cube"][0]["dimensions"]["dimension"][0]["hierarchy"][0]["level"][1][
            "properties"
        ]["unique-in-parent"] = not old_value
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->cubes->cube->0->dimensions->dimension->0->hierarchy->0->level->1->properties->unique-in-parent",
            "actual:\n " + str(not old_value) + ", \nexpected:\n " + str(old_value),
        ]

    def test_json_same_align_ids_change_c_c_0_d_d_0_h_0_l_1_p_v(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        old_value = dict_copy["cubes"]["cube"][0]["dimensions"]["dimension"][0]["hierarchy"][0][
            "level"
        ][1]["properties"]["visible"]
        dict_copy["cubes"]["cube"][0]["dimensions"]["dimension"][0]["hierarchy"][0]["level"][1][
            "properties"
        ]["visible"] = not old_value
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->cubes->cube->0->dimensions->dimension->0->hierarchy->0->level->1->properties->visible",
            "actual:\n " + str(not old_value) + ", \nexpected:\n " + str(old_value),
        ]

    def test_json_same_align_ids_remove_item_c_c_0_d_d_0_h_0_l(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["cubes"]["cube"][0]["dimensions"]["dimension"][0]["hierarchy"][
            0
        ]["level"]
        missing_value = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        dict_copy["cubes"]["cube"][0]["dimensions"]["dimension"][0]["hierarchy"][0]["level"] = (
            dict_copy["cubes"]["cube"][0]["dimensions"]["dimension"][0]["hierarchy"][0]["level"][
                :-1
            ]
        )
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->cubes->cube->0->dimensions->dimension->0->hierarchy->0->level ++++ "
            + str(missing_value)
        ]

    def test_json_same_align_ids_add_item_c_c_0_d_d_0_h_0_l(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["cubes"]["cube"][0]["dimensions"]["dimension"][0]["hierarchy"][
            0
        ]["level"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list.append(to_add)
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->cubes->cube->0->dimensions->dimension->0->hierarchy->0->level ---- " + str(to_add)
        ]

    def test_json_same_align_ids_add_multiple_c_c_0_d_d_0_h_0_l(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["cubes"]["cube"][0]["dimensions"]["dimension"][0]["hierarchy"][
            0
        ]["level"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name", "primary-attribute"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy["cubes"]["cube"][0]["dimensions"]["dimension"][0]["hierarchy"][0][
            "level"
        ] = dict_copy_list
        assert testing_utils.json_same_align_ids(this=draft_project_dict, other=dict_copy) == [
            "->cubes->cube->0->dimensions->dimension->0->hierarchy->0->level ++++ " + str(to_add),
            "->cubes->cube->0->dimensions->dimension->0->hierarchy->0->level ++++ " + str(to_add),
            "->cubes->cube->0->dimensions->dimension->0->hierarchy->0->level ++++ " + str(to_add),
        ]

    def test_json_same_align_ids_remove_multiple_c_c_0_d_d_0_h_0_l(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["cubes"]["cube"][0]["dimensions"]["dimension"][0]["hierarchy"][
            0
        ]["level"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name", "primary-attribute"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy["cubes"]["cube"][0]["dimensions"]["dimension"][0]["hierarchy"][0][
            "level"
        ] = dict_copy_list
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->cubes->cube->0->dimensions->dimension->0->hierarchy->0->level ---- " + str(to_add),
            "->cubes->cube->0->dimensions->dimension->0->hierarchy->0->level ---- " + str(to_add),
            "->cubes->cube->0->dimensions->dimension->0->hierarchy->0->level ---- " + str(to_add),
        ]

    def test_json_same_align_ids_remove_item_c_c_0_d_d_0_h(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["cubes"]["cube"][0]["dimensions"]["dimension"][0]["hierarchy"]
        missing_value = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        dict_copy["cubes"]["cube"][0]["dimensions"]["dimension"][0]["hierarchy"] = dict_copy[
            "cubes"
        ]["cube"][0]["dimensions"]["dimension"][0]["hierarchy"][:-1]
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->cubes->cube->0->dimensions->dimension->0->hierarchy ++++ " + str(missing_value)
        ]

    def test_json_same_align_ids_add_item_c_c_0_d_d_0_h(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["cubes"]["cube"][0]["dimensions"]["dimension"][0]["hierarchy"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list.append(to_add)
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->cubes->cube->0->dimensions->dimension->0->hierarchy ---- " + str(to_add)
        ]

    def test_json_same_align_ids_add_multiple_c_c_0_d_d_0_h(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["cubes"]["cube"][0]["dimensions"]["dimension"][0]["hierarchy"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy["cubes"]["cube"][0]["dimensions"]["dimension"][0]["hierarchy"] = dict_copy_list
        assert testing_utils.json_same_align_ids(this=draft_project_dict, other=dict_copy) == [
            "->cubes->cube->0->dimensions->dimension->0->hierarchy ++++ " + str(to_add),
            "->cubes->cube->0->dimensions->dimension->0->hierarchy ++++ " + str(to_add),
            "->cubes->cube->0->dimensions->dimension->0->hierarchy ++++ " + str(to_add),
        ]

    def test_json_same_align_ids_remove_multiple_c_c_0_d_d_0_h(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["cubes"]["cube"][0]["dimensions"]["dimension"][0]["hierarchy"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy["cubes"]["cube"][0]["dimensions"]["dimension"][0]["hierarchy"] = dict_copy_list
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->cubes->cube->0->dimensions->dimension->0->hierarchy ---- " + str(to_add),
            "->cubes->cube->0->dimensions->dimension->0->hierarchy ---- " + str(to_add),
            "->cubes->cube->0->dimensions->dimension->0->hierarchy ---- " + str(to_add),
        ]

    def test_json_same_align_ids_remove_item_c_c_0_d_d(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["cubes"]["cube"][0]["dimensions"]["dimension"]
        missing_value = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        dict_copy["cubes"]["cube"][0]["dimensions"]["dimension"] = dict_copy["cubes"]["cube"][0][
            "dimensions"
        ]["dimension"][:-1]
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->cubes->cube->0->dimensions->dimension ++++ " + str(missing_value)
        ]

    def test_json_same_align_ids_add_item_c_c_0_d_d(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["cubes"]["cube"][0]["dimensions"]["dimension"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list.append(to_add)
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->cubes->cube->0->dimensions->dimension ---- " + str(to_add)
        ]

    def test_json_same_align_ids_add_multiple_c_c_0_d_d(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["cubes"]["cube"][0]["dimensions"]["dimension"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy["cubes"]["cube"][0]["dimensions"]["dimension"] = dict_copy_list
        assert testing_utils.json_same_align_ids(this=draft_project_dict, other=dict_copy) == [
            "->cubes->cube->0->dimensions->dimension ++++ " + str(to_add),
            "->cubes->cube->0->dimensions->dimension ++++ " + str(to_add),
            "->cubes->cube->0->dimensions->dimension ++++ " + str(to_add),
        ]

    def test_json_same_align_ids_remove_multiple_c_c_0_d_d(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["cubes"]["cube"][0]["dimensions"]["dimension"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy["cubes"]["cube"][0]["dimensions"]["dimension"] = dict_copy_list
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->cubes->cube->0->dimensions->dimension ---- " + str(to_add),
            "->cubes->cube->0->dimensions->dimension ---- " + str(to_add),
            "->cubes->cube->0->dimensions->dimension ---- " + str(to_add),
        ]

    def test_json_same_align_ids_change_c_c_0_a_p_iddt(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        old_value = dict_copy["cubes"]["cube"][0]["actions"]["properties"][
            "include-default-drill-through"
        ]
        dict_copy["cubes"]["cube"][0]["actions"]["properties"][
            "include-default-drill-through"
        ] = not old_value
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->cubes->cube->0->actions->properties->include-default-drill-through",
            "actual:\n " + str(not old_value) + ", \nexpected:\n " + str(old_value),
        ]

    def test_json_same_align_ids_change_c_c_0_ds_dsr_0_p_aa(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        old_value = dict_copy["cubes"]["cube"][0]["data-sets"]["data-set-ref"][0]["properties"][
            "allow-aggregates"
        ]
        dict_copy["cubes"]["cube"][0]["data-sets"]["data-set-ref"][0]["properties"][
            "allow-aggregates"
        ] = not old_value
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->cubes->cube->0->data-sets->data-set-ref->0->properties->allow-aggregates",
            "actual:\n " + str(not old_value) + ", \nexpected:\n " + str(old_value),
        ]

    def test_json_same_align_ids_change_c_c_0_ds_dsr_0_p_cha(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        old_value = dict_copy["cubes"]["cube"][0]["data-sets"]["data-set-ref"][0]["properties"][
            "create-hinted-aggregate"
        ]
        dict_copy["cubes"]["cube"][0]["data-sets"]["data-set-ref"][0]["properties"][
            "create-hinted-aggregate"
        ] = not old_value
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->cubes->cube->0->data-sets->data-set-ref->0->properties->create-hinted-aggregate",
            "actual:\n " + str(not old_value) + ", \nexpected:\n " + str(old_value),
        ]

    def test_json_same_align_ids_change_c_c_0_ds_dsr_0_l_ar_1_c(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        to_prepend = "QUANDALEDINGLE"
        changed_value = (
            to_prepend
            + dict_copy["cubes"]["cube"][0]["data-sets"]["data-set-ref"][0]["logical"][
                "attribute-ref"
            ][12]["complete"]
        )
        dict_copy["cubes"]["cube"][0]["data-sets"]["data-set-ref"][0]["logical"]["attribute-ref"][
            12
        ]["complete"] = changed_value
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->cubes->cube->0->data-sets->data-set-ref->0->logical->attribute-ref->12->complete",
            "actual:\n " + changed_value + ", \nexpected:\n " + changed_value[len(to_prepend) :],
        ]

    def test_json_same_align_ids_change_c_c_0_ds_dsr_0_l_ar_1_c_0(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        to_prepend = "QUANDALEDINGLE"
        changed_value = (
            to_prepend
            + dict_copy["cubes"]["cube"][0]["data-sets"]["data-set-ref"][0]["logical"][
                "attribute-ref"
            ][12]["column"][0]
        )
        dict_copy["cubes"]["cube"][0]["data-sets"]["data-set-ref"][0]["logical"]["attribute-ref"][
            12
        ]["column"][0] = changed_value
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->cubes->cube->0->data-sets->data-set-ref->0->logical->attribute-ref->12->column->0",
            "actual:\n " + changed_value + ", \nexpected:\n " + changed_value[len(to_prepend) :],
        ]

    def test_json_same_align_ids_remove_item_c_c_0_ds_dsr_0_l_ar_1_c(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["cubes"]["cube"][0]["data-sets"]["data-set-ref"][0]["logical"][
            "attribute-ref"
        ][12]["column"]
        missing_value = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        dict_copy["cubes"]["cube"][0]["data-sets"]["data-set-ref"][0]["logical"]["attribute-ref"][
            12
        ]["column"] = dict_copy["cubes"]["cube"][0]["data-sets"]["data-set-ref"][0]["logical"][
            "attribute-ref"
        ][
            12
        ][
            "column"
        ][
            :-1
        ]
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->cubes->cube->0->data-sets->data-set-ref->0->logical->attribute-ref->12->column ++++ "
            + str(missing_value)
        ]

    def test_json_same_align_ids_add_item_c_c_0_ds_dsr_0_l_ar_1_c(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["cubes"]["cube"][0]["data-sets"]["data-set-ref"][0]["logical"][
            "attribute-ref"
        ][12]["column"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list.append(to_add)
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->cubes->cube->0->data-sets->data-set-ref->0->logical->attribute-ref->12->column ---- "
            + str(to_add)
        ]

    def test_json_same_align_ids_add_multiple_c_c_0_ds_dsr_0_l_ar_1_c(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["cubes"]["cube"][0]["data-sets"]["data-set-ref"][0]["logical"][
            "attribute-ref"
        ][12]["column"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy["cubes"]["cube"][0]["data-sets"]["data-set-ref"][0]["logical"]["attribute-ref"][
            12
        ]["column"] = dict_copy_list
        assert testing_utils.json_same_align_ids(this=draft_project_dict, other=dict_copy) == [
            "->cubes->cube->0->data-sets->data-set-ref->0->logical->attribute-ref->12->column ++++ "
            + str(to_add),
            "->cubes->cube->0->data-sets->data-set-ref->0->logical->attribute-ref->12->column ++++ "
            + str(to_add),
            "->cubes->cube->0->data-sets->data-set-ref->0->logical->attribute-ref->12->column ++++ "
            + str(to_add),
        ]

    def test_json_same_align_ids_remove_multiple_c_c_0_ds_dsr_0_l_ar_1_c(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["cubes"]["cube"][0]["data-sets"]["data-set-ref"][0]["logical"][
            "attribute-ref"
        ][12]["column"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy["cubes"]["cube"][0]["data-sets"]["data-set-ref"][0]["logical"]["attribute-ref"][
            12
        ]["column"] = dict_copy_list
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->cubes->cube->0->data-sets->data-set-ref->0->logical->attribute-ref->12->column ---- "
            + str(to_add),
            "->cubes->cube->0->data-sets->data-set-ref->0->logical->attribute-ref->12->column ---- "
            + str(to_add),
            "->cubes->cube->0->data-sets->data-set-ref->0->logical->attribute-ref->12->column ---- "
            + str(to_add),
        ]

    def test_json_same_align_ids_remove_item_c_c_0_ds_dsr_0_l_ar(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["cubes"]["cube"][0]["data-sets"]["data-set-ref"][0]["logical"][
            "attribute-ref"
        ]
        missing_value = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        dict_copy["cubes"]["cube"][0]["data-sets"]["data-set-ref"][0]["logical"][
            "attribute-ref"
        ] = dict_copy["cubes"]["cube"][0]["data-sets"]["data-set-ref"][0]["logical"][
            "attribute-ref"
        ][
            :-1
        ]
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->cubes->cube->0->data-sets->data-set-ref->0->logical->attribute-ref ++++ "
            + str(missing_value)
        ]

    def test_json_same_align_ids_add_item_c_c_0_ds_dsr_0_l_ar(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["cubes"]["cube"][0]["data-sets"]["data-set-ref"][0]["logical"][
            "attribute-ref"
        ]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list.append(to_add)
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->cubes->cube->0->data-sets->data-set-ref->0->logical->attribute-ref ---- "
            + str(to_add)
        ]

    def test_json_same_align_ids_add_multiple_c_c_0_ds_dsr_0_l_ar(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["cubes"]["cube"][0]["data-sets"]["data-set-ref"][0]["logical"][
            "attribute-ref"
        ]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy["cubes"]["cube"][0]["data-sets"]["data-set-ref"][0]["logical"][
            "attribute-ref"
        ] = dict_copy_list
        assert testing_utils.json_same_align_ids(this=draft_project_dict, other=dict_copy) == [
            "->cubes->cube->0->data-sets->data-set-ref->0->logical->attribute-ref ++++ "
            + str(to_add),
            "->cubes->cube->0->data-sets->data-set-ref->0->logical->attribute-ref ++++ "
            + str(to_add),
            "->cubes->cube->0->data-sets->data-set-ref->0->logical->attribute-ref ++++ "
            + str(to_add),
        ]

    def test_json_same_align_ids_remove_multiple_c_c_0_ds_dsr_0_l_ar(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["cubes"]["cube"][0]["data-sets"]["data-set-ref"][0]["logical"][
            "attribute-ref"
        ]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy["cubes"]["cube"][0]["data-sets"]["data-set-ref"][0]["logical"][
            "attribute-ref"
        ] = dict_copy_list
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->cubes->cube->0->data-sets->data-set-ref->0->logical->attribute-ref ---- "
            + str(to_add),
            "->cubes->cube->0->data-sets->data-set-ref->0->logical->attribute-ref ---- "
            + str(to_add),
            "->cubes->cube->0->data-sets->data-set-ref->0->logical->attribute-ref ---- "
            + str(to_add),
        ]

    def test_json_same_align_ids_remove_item_c_c_0_ds_dsr(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["cubes"]["cube"][0]["data-sets"]["data-set-ref"]
        missing_value = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        dict_copy["cubes"]["cube"][0]["data-sets"]["data-set-ref"] = dict_copy["cubes"]["cube"][0][
            "data-sets"
        ]["data-set-ref"][:-1]
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->cubes->cube->0->data-sets->data-set-ref ++++ " + str(missing_value)
        ]

    def test_json_same_align_ids_add_item_c_c_0_ds_dsr(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["cubes"]["cube"][0]["data-sets"]["data-set-ref"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list.append(to_add)
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->cubes->cube->0->data-sets->data-set-ref ---- " + str(to_add)
        ]

    def test_json_same_align_ids_add_multiple_c_c_0_ds_dsr(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["cubes"]["cube"][0]["data-sets"]["data-set-ref"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy["cubes"]["cube"][0]["data-sets"]["data-set-ref"] = dict_copy_list
        assert testing_utils.json_same_align_ids(this=draft_project_dict, other=dict_copy) == [
            "->cubes->cube->0->data-sets->data-set-ref ++++ " + str(to_add),
            "->cubes->cube->0->data-sets->data-set-ref ++++ " + str(to_add),
            "->cubes->cube->0->data-sets->data-set-ref ++++ " + str(to_add),
        ]

    def test_json_same_align_ids_remove_multiple_c_c_0_ds_dsr(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["cubes"]["cube"][0]["data-sets"]["data-set-ref"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy["cubes"]["cube"][0]["data-sets"]["data-set-ref"] = dict_copy_list
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->cubes->cube->0->data-sets->data-set-ref ---- " + str(to_add),
            "->cubes->cube->0->data-sets->data-set-ref ---- " + str(to_add),
            "->cubes->cube->0->data-sets->data-set-ref ---- " + str(to_add),
        ]

    def test_json_same_align_ids_change_c_c_0_cm_cmr_6_X_S(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        to_prepend = "QUANDALEDINGLE"
        changed_value = (
            to_prepend
            + dict_copy["cubes"]["cube"][0]["calculated-members"]["calculated-member-ref"][5][
                "XMLName"
            ]["Space"]
        )
        dict_copy["cubes"]["cube"][0]["calculated-members"]["calculated-member-ref"][5]["XMLName"][
            "Space"
        ] = changed_value
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->cubes->cube->0->calculated-members->calculated-member-ref->5->XMLName->Space",
            "actual:\n " + changed_value + ", \nexpected:\n " + changed_value[len(to_prepend) :],
        ]

    def test_json_same_align_ids_change_c_c_0_cm_cmr_6_X_L(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        to_prepend = "QUANDALEDINGLE"
        changed_value = (
            to_prepend
            + dict_copy["cubes"]["cube"][0]["calculated-members"]["calculated-member-ref"][5][
                "XMLName"
            ]["Local"]
        )
        dict_copy["cubes"]["cube"][0]["calculated-members"]["calculated-member-ref"][5]["XMLName"][
            "Local"
        ] = changed_value
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->cubes->cube->0->calculated-members->calculated-member-ref->5->XMLName->Local",
            "actual:\n " + changed_value + ", \nexpected:\n " + changed_value[len(to_prepend) :],
        ]

    def test_json_same_align_ids_remove_item_c_c_0_cm_cmr(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["cubes"]["cube"][0]["calculated-members"][
            "calculated-member-ref"
        ]
        missing_value = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        dict_copy["cubes"]["cube"][0]["calculated-members"]["calculated-member-ref"] = dict_copy[
            "cubes"
        ]["cube"][0]["calculated-members"]["calculated-member-ref"][:-1]
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->cubes->cube->0->calculated-members->calculated-member-ref ++++ " + str(missing_value)
        ]

    def test_json_same_align_ids_add_item_c_c_0_cm_cmr(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["cubes"]["cube"][0]["calculated-members"][
            "calculated-member-ref"
        ]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list.append(to_add)
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->cubes->cube->0->calculated-members->calculated-member-ref ---- " + str(to_add)
        ]

    def test_json_same_align_ids_add_multiple_c_c_0_cm_cmr(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["cubes"]["cube"][0]["calculated-members"][
            "calculated-member-ref"
        ]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy["cubes"]["cube"][0]["calculated-members"][
            "calculated-member-ref"
        ] = dict_copy_list
        assert testing_utils.json_same_align_ids(this=draft_project_dict, other=dict_copy) == [
            "->cubes->cube->0->calculated-members->calculated-member-ref ++++ " + str(to_add),
            "->cubes->cube->0->calculated-members->calculated-member-ref ++++ " + str(to_add),
            "->cubes->cube->0->calculated-members->calculated-member-ref ++++ " + str(to_add),
        ]

    def test_json_same_align_ids_remove_multiple_c_c_0_cm_cmr(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["cubes"]["cube"][0]["calculated-members"][
            "calculated-member-ref"
        ]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy["cubes"]["cube"][0]["calculated-members"][
            "calculated-member-ref"
        ] = dict_copy_list
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->cubes->cube->0->calculated-members->calculated-member-ref ---- " + str(to_add),
            "->cubes->cube->0->calculated-members->calculated-member-ref ---- " + str(to_add),
            "->cubes->cube->0->calculated-members->calculated-member-ref ---- " + str(to_add),
        ]

    def test_json_same_align_ids_remove_item_c_c(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["cubes"]["cube"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list.append(to_add)
        assert testing_utils.json_same_align_ids(this=draft_project_dict, other=dict_copy) == [
            "->cubes->cube ++++ " + str(to_add)
        ]

    def test_json_same_align_ids_add_item_c_c(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["cubes"]["cube"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list.append(to_add)
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->cubes->cube ---- " + str(to_add)
        ]

    def test_json_same_align_ids_add_multiple_c_c(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["cubes"]["cube"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy["cubes"]["cube"] = dict_copy_list
        assert testing_utils.json_same_align_ids(this=draft_project_dict, other=dict_copy) == [
            "->cubes->cube ++++ " + str(to_add),
            "->cubes->cube ++++ " + str(to_add),
            "->cubes->cube ++++ " + str(to_add),
        ]

    def test_json_same_align_ids_remove_multiple_c_c(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["cubes"]["cube"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy["cubes"]["cube"] = dict_copy_list
        assert testing_utils.json_same_align_ids(this=dict_copy, other=draft_project_dict) == [
            "->cubes->cube ---- " + str(to_add),
            "->cubes->cube ---- " + str(to_add),
            "->cubes->cube ---- " + str(to_add),
        ]

    # JSON_SAME TESTS

    def test_json_same_draft_projects_list_change_1_version(draft_projects_list):
        dict_copy = deepcopy(draft_projects_list)
        old_value = dict_copy[1]["version"]
        dict_copy[1]["version"] = old_value + 1
        assert testing_utils.json_same(expected=dict_copy, actual=draft_projects_list)

    def test_json_same_draft_projects_list_change_1_a_a_0_migration_version(draft_projects_list):
        dict_copy = deepcopy(draft_projects_list)
        to_prepend = "QUANDALEDINGLE"
        changed_value = to_prepend + dict_copy[1]["annotations"]["annotation"][0]["value"]
        dict_copy[1]["annotations"]["annotation"][0]["value"] = changed_value
        assert testing_utils.json_same(expected=dict_copy, actual=draft_projects_list)

    def test_json_same_draft_projects_list_remove_item_1_a_annotation(draft_projects_list):
        dict_copy = deepcopy(draft_projects_list)
        dict_copy_list = dict_copy[1]["annotations"]["annotation"]
        missing_value = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        dict_copy[1]["annotations"]["annotation"] = dict_copy[1]["annotations"]["annotation"][:-1]
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_projects_list)

    def test_json_same_draft_projects_list_add_item_1_a_annotation(draft_projects_list):
        dict_copy = deepcopy(draft_projects_list)
        dict_copy_list = dict_copy[1]["annotations"]["annotation"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name", "primary-attribute"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list.append(to_add)
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_projects_list)

    def test_json_same_add_multiple_1_a_annotation(draft_projects_list):
        dict_copy = deepcopy(draft_projects_list)
        dict_copy_list = dict_copy[1]["annotations"]["annotation"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name", "primary-attribute"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy[1]["annotations"]["annotation"] = dict_copy_list
        assert not testing_utils.json_same(expected=draft_projects_list, actual=dict_copy)

    def test_json_same_remove_multiple_1_a_annotation(draft_projects_list):
        dict_copy = deepcopy(draft_projects_list)
        dict_copy_list = dict_copy[1]["annotations"]["annotation"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name", "primary-attribute"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy[1]["annotations"]["annotation"] = dict_copy_list
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_projects_list)

    def test_json_same_draft_projects_list_change_1_p_caption(draft_projects_list):
        dict_copy = deepcopy(draft_projects_list)
        to_prepend = "QUANDALEDINGLE"
        changed_value = to_prepend + dict_copy[1]["properties"]["caption"]
        dict_copy[1]["properties"]["caption"] = changed_value
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_projects_list)

    def test_json_same_draft_projects_list_change_1_p_visible(draft_projects_list):
        dict_copy = deepcopy(draft_projects_list)
        old_value = dict_copy[1]["properties"]["visible"]
        dict_copy[1]["properties"]["visible"] = not old_value
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_projects_list)

    def test_json_same_draft_projects_list_change_1_p_aggressive_aggregate_promotion(
        draft_projects_list,
    ):
        dict_copy = deepcopy(draft_projects_list)
        old_value = dict_copy[1]["properties"]["aggressive_aggregate_promotion"]
        dict_copy[1]["properties"]["aggressive_aggregate_promotion"] = not old_value
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_projects_list)

    def test_json_same_draft_projects_list_change_1_p_ap_speculative_aggregates(
        draft_projects_list,
    ):
        dict_copy = deepcopy(draft_projects_list)
        old_value = dict_copy[1]["properties"]["aggregate-prediction"]["speculative-aggregates"]
        dict_copy[1]["properties"]["aggregate-prediction"]["speculative-aggregates"] = not old_value
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_projects_list)

    def test_json_same_draft_projects_list_remove_item_1_c_cube(draft_projects_list):
        dict_copy = deepcopy(draft_projects_list)
        dict_copy_list = dict_copy[1]["cubes"]["cube"]
        missing_value = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        dict_copy[1]["cubes"]["cube"] = dict_copy[1]["cubes"]["cube"][:-1]
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_projects_list)

    def test_json_same_draft_projects_list_add_item_1_c_cube(draft_projects_list):
        dict_copy = deepcopy(draft_projects_list)
        dict_copy_list = dict_copy[1]["cubes"]["cube"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name", "primary-attribute"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list.append(to_add)
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_projects_list)

    def test_json_same_add_multiple_1_c_cube(draft_projects_list):
        dict_copy = deepcopy(draft_projects_list)
        dict_copy_list = dict_copy[1]["cubes"]["cube"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name", "primary-attribute"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy[1]["cubes"]["cube"] = dict_copy_list
        assert not testing_utils.json_same(expected=draft_projects_list, actual=dict_copy)

    def test_json_same_remove_multiple_1_c_cube(draft_projects_list):
        dict_copy = deepcopy(draft_projects_list)
        dict_copy_list = dict_copy[1]["cubes"]["cube"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name", "primary-attribute"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy[1]["cubes"]["cube"] = dict_copy_list
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_projects_list)

    def test_json_same_draft_projects_list_change_1_createdBy(empty_project_not_published_source):
        dict_copy = deepcopy(empty_project_not_published_source)
        to_prepend = "QUANDALEDINGLE"
        changed_value = to_prepend + dict_copy["createdBy"]
        dict_copy["createdBy"] = changed_value
        assert not testing_utils.json_same(
            expected=dict_copy, actual=empty_project_not_published_source
        )

    def test_json_same_draft_project_dict_change_version(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        old_value = dict_copy["version"]
        dict_copy["version"] = old_value + 1
        assert testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_change_a_a_4_publishDate(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        to_prepend = "QUANDALEDINGLE"
        changed_value = to_prepend + dict_copy["annotations"]["annotation"][4]["value"]
        dict_copy["annotations"]["annotation"][4]["value"] = changed_value
        assert testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_remove_item_a_annotation(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["annotations"]["annotation"]
        missing_value = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        dict_copy["annotations"]["annotation"] = dict_copy["annotations"]["annotation"][:-1]
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_add_item_a_annotation(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["annotations"]["annotation"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name", "primary-attribute"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list.append(to_add)
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_add_multiple_a_annotation(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["annotations"]["annotation"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name", "primary-attribute"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy["annotations"]["annotation"] = dict_copy_list
        assert not testing_utils.json_same(expected=draft_project_dict, actual=dict_copy)

    def test_json_same_remove_multiple_a_annotation(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["annotations"]["annotation"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name", "primary-attribute"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy["annotations"]["annotation"] = dict_copy_list
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_change_p_caption(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        to_prepend = "QUANDALEDINGLE"
        changed_value = to_prepend + dict_copy["properties"]["caption"]
        dict_copy["properties"]["caption"] = changed_value
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_change_p_visible(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        old_value = dict_copy["properties"]["visible"]
        dict_copy["properties"]["visible"] = not old_value
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_change_p_aggressive_aggregate_promotion(
        self, draft_project_dict
    ):
        dict_copy = deepcopy(self, draft_project_dict)
        old_value = dict_copy["properties"]["aggressive_aggregate_promotion"]
        dict_copy["properties"]["aggressive_aggregate_promotion"] = not old_value
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_change_p_ap_speculative_aggregates(
        self, draft_project_dict
    ):
        dict_copy = deepcopy(self, draft_project_dict)
        old_value = dict_copy["properties"]["aggregate-prediction"]["speculative-aggregates"]
        dict_copy["properties"]["aggregate-prediction"]["speculative-aggregates"] = not old_value
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_change_a_ak_1_p_visible(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        old_value = dict_copy["attributes"]["attribute-key"][18]["properties"]["visible"]
        dict_copy["attributes"]["attribute-key"][18]["properties"]["visible"] = not old_value
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_change_a_ak_1_p_columns(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        old_value = dict_copy["attributes"]["attribute-key"][18]["properties"]["columns"]
        dict_copy["attributes"]["attribute-key"][18]["properties"]["columns"] = old_value + 1
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_remove_item_a_attribute_key(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["attributes"]["attribute-key"]
        missing_value = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        dict_copy["attributes"]["attribute-key"] = dict_copy["attributes"]["attribute-key"][:-1]
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_add_item_a_attribute_key(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["attributes"]["attribute-key"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name", "primary-attribute"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list.append(to_add)
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_add_multiple_a_attribute_key(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["attributes"]["attribute-key"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name", "primary-attribute"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy["attributes"]["attribute-key"] = dict_copy_list
        assert not testing_utils.json_same(expected=draft_project_dict, actual=dict_copy)

    def test_json_same_remove_multiple_a_attribute_key(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["attributes"]["attribute-key"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name", "primary-attribute"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy["attributes"]["attribute-key"] = dict_copy_list
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_change_a_ka_1_p_caption(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        to_prepend = "QUANDALEDINGLE"
        changed_value = (
            to_prepend + dict_copy["attributes"]["keyed-attribute"][12]["properties"]["caption"]
        )
        dict_copy["attributes"]["keyed-attribute"][12]["properties"]["caption"] = changed_value
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_change_a_ka_1_p_visible(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        old_value = dict_copy["attributes"]["keyed-attribute"][12]["properties"]["visible"]
        dict_copy["attributes"]["keyed-attribute"][12]["properties"]["visible"] = not old_value
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_change_a_ka_1_p_o_sk_order(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        to_prepend = "QUANDALEDINGLE"
        changed_value = (
            to_prepend
            + dict_copy["attributes"]["keyed-attribute"][12]["properties"]["ordering"]["sort-key"][
                "order"
            ]
        )
        dict_copy["attributes"]["keyed-attribute"][12]["properties"]["ordering"]["sort-key"][
            "order"
        ] = changed_value
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_remove_item_a_keyed_attribute(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["attributes"]["keyed-attribute"]
        missing_value = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        dict_copy["attributes"]["keyed-attribute"] = dict_copy["attributes"]["keyed-attribute"][:-1]
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_add_item_a_keyed_attribute(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["attributes"]["keyed-attribute"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name", "primary-attribute"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list.append(to_add)
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_add_multiple_a_keyed_attribute(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["attributes"]["keyed-attribute"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name", "primary-attribute"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy["attributes"]["keyed-attribute"] = dict_copy_list
        assert not testing_utils.json_same(expected=draft_project_dict, actual=dict_copy)

    def test_json_same_remove_multiple_a_keyed_attribute(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["attributes"]["keyed-attribute"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name", "primary-attribute"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy["attributes"]["keyed-attribute"] = dict_copy_list
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_change_d_d_1_p_visible(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        old_value = dict_copy["dimensions"]["dimension"][1]["properties"]["visible"]
        dict_copy["dimensions"]["dimension"][1]["properties"]["visible"] = not old_value
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_change_d_d_1_p_dimension_type(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        to_prepend = "QUANDALEDINGLE"
        changed_value = (
            to_prepend + dict_copy["dimensions"]["dimension"][1]["properties"]["dimension-type"]
        )
        dict_copy["dimensions"]["dimension"][1]["properties"]["dimension-type"] = changed_value
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_change_d_d_1_h_0_p_caption(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        to_prepend = "QUANDALEDINGLE"
        changed_value = (
            to_prepend
            + dict_copy["dimensions"]["dimension"][1]["hierarchy"][0]["properties"]["caption"]
        )
        dict_copy["dimensions"]["dimension"][1]["hierarchy"][0]["properties"][
            "caption"
        ] = changed_value
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_change_d_d_1_h_0_p_visible(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        old_value = dict_copy["dimensions"]["dimension"][1]["hierarchy"][0]["properties"]["visible"]
        dict_copy["dimensions"]["dimension"][1]["hierarchy"][0]["properties"][
            "visible"
        ] = not old_value
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_change_d_d_1_h_0_p_folder(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        to_prepend = "QUANDALEDINGLE"
        changed_value = (
            to_prepend
            + dict_copy["dimensions"]["dimension"][1]["hierarchy"][0]["properties"]["folder"]
        )
        dict_copy["dimensions"]["dimension"][1]["hierarchy"][0]["properties"][
            "folder"
        ] = changed_value
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_change_d_d_1_h_0_p_filter_empty(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        to_prepend = "QUANDALEDINGLE"
        changed_value = (
            to_prepend
            + dict_copy["dimensions"]["dimension"][1]["hierarchy"][0]["properties"]["filter-empty"]
        )
        dict_copy["dimensions"]["dimension"][1]["hierarchy"][0]["properties"][
            "filter-empty"
        ] = changed_value
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_change_d_d_1_h_0_l_2_p_unique_in_parent(
        self, draft_project_dict
    ):
        dict_copy = deepcopy(self, draft_project_dict)
        old_value = dict_copy["dimensions"]["dimension"][1]["hierarchy"][0]["level"][2][
            "properties"
        ]["unique-in-parent"]
        dict_copy["dimensions"]["dimension"][1]["hierarchy"][0]["level"][2]["properties"][
            "unique-in-parent"
        ] = not old_value
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_change_d_d_1_h_0_l_2_p_visible(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        old_value = dict_copy["dimensions"]["dimension"][1]["hierarchy"][0]["level"][2][
            "properties"
        ]["visible"]
        dict_copy["dimensions"]["dimension"][1]["hierarchy"][0]["level"][2]["properties"][
            "visible"
        ] = not old_value
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_remove_item_d_d_1_h_0_level(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["dimensions"]["dimension"][1]["hierarchy"][0]["level"]
        missing_value = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        dict_copy["dimensions"]["dimension"][1]["hierarchy"][0]["level"] = dict_copy["dimensions"][
            "dimension"
        ][1]["hierarchy"][0]["level"][:-1]
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_add_item_d_d_1_h_0_level(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["dimensions"]["dimension"][1]["hierarchy"][0]["level"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name", "primary-attribute"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list.append(to_add)
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_add_multiple_d_d_1_h_0_level(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["dimensions"]["dimension"][1]["hierarchy"][0]["level"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name", "primary-attribute"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy["dimensions"]["dimension"][1]["hierarchy"][0]["level"] = dict_copy_list
        assert not testing_utils.json_same(expected=draft_project_dict, actual=dict_copy)

    def test_json_same_remove_multiple_d_d_1_h_0_level(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["dimensions"]["dimension"][1]["hierarchy"][0]["level"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name", "primary-attribute"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy["dimensions"]["dimension"][1]["hierarchy"][0]["level"] = dict_copy_list
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_remove_item_d_d_1_hierarchy(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["dimensions"]["dimension"][1]["hierarchy"]
        missing_value = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        dict_copy["dimensions"]["dimension"][1]["hierarchy"] = dict_copy["dimensions"]["dimension"][
            1
        ]["hierarchy"][:-1]
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_add_item_d_d_1_hierarchy(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["dimensions"]["dimension"][1]["hierarchy"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name", "primary-attribute"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list.append(to_add)
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_add_multiple_d_d_1_hierarchy(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["dimensions"]["dimension"][1]["hierarchy"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name", "primary-attribute"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy["dimensions"]["dimension"][1]["hierarchy"] = dict_copy_list
        assert not testing_utils.json_same(expected=draft_project_dict, actual=dict_copy)

    def test_json_same_remove_multiple_d_d_1_hierarchy(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["dimensions"]["dimension"][1]["hierarchy"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name", "primary-attribute"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy["dimensions"]["dimension"][1]["hierarchy"] = dict_copy_list
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_change_d_d_1_pd_0(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        to_prepend = "QUANDALEDINGLE"
        changed_value = (
            to_prepend + dict_copy["dimensions"]["dimension"][1]["participating-datasets"][0]
        )
        dict_copy["dimensions"]["dimension"][1]["participating-datasets"][0] = changed_value
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_remove_item_d_d_1_participating_datasets(
        self, draft_project_dict
    ):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["dimensions"]["dimension"][1]["participating-datasets"]
        missing_value = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        dict_copy["dimensions"]["dimension"][1]["participating-datasets"] = dict_copy["dimensions"][
            "dimension"
        ][1]["participating-datasets"][:-1]
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_add_item_d_d_1_participating_datasets(
        self, draft_project_dict
    ):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["dimensions"]["dimension"][1]["participating-datasets"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name", "primary-attribute"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list.append(to_add)
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_add_multiple_d_d_1_participating_datasets(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["dimensions"]["dimension"][1]["participating-datasets"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name", "primary-attribute"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy["dimensions"]["dimension"][1]["participating-datasets"] = dict_copy_list
        assert not testing_utils.json_same(expected=draft_project_dict, actual=dict_copy)

    def test_json_same_remove_multiple_d_d_1_participating_datasets(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["dimensions"]["dimension"][1]["participating-datasets"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name", "primary-attribute"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy["dimensions"]["dimension"][1]["participating-datasets"] = dict_copy_list
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_remove_item_d_dimension(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["dimensions"]["dimension"]
        missing_value = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        dict_copy["dimensions"]["dimension"] = dict_copy["dimensions"]["dimension"][:-1]
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_add_item_d_dimension(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["dimensions"]["dimension"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name", "primary-attribute"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list.append(to_add)
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_add_multiple_d_dimension(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["dimensions"]["dimension"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name", "primary-attribute"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy["dimensions"]["dimension"] = dict_copy_list
        assert not testing_utils.json_same(expected=draft_project_dict, actual=dict_copy)

    def test_json_same_remove_multiple_d_dimension(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["dimensions"]["dimension"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name", "primary-attribute"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy["dimensions"]["dimension"] = dict_copy_list
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_change_d_ds_3_p_allow_aggregates(
        self, draft_project_dict
    ):
        dict_copy = deepcopy(self, draft_project_dict)
        old_value = dict_copy["datasets"]["data-set"][3]["properties"]["allow-aggregates"]
        dict_copy["datasets"]["data-set"][3]["properties"]["allow-aggregates"] = not old_value
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_change_d_ds_3_p_q_0_s_0_expression(
        self, draft_project_dict
    ):
        dict_copy = deepcopy(self, draft_project_dict)
        to_prepend = "QUANDALEDINGLE"
        changed_value = (
            to_prepend
            + dict_copy["datasets"]["data-set"][3]["physical"]["queries"][0]["sqls"][0][
                "expression"
            ]
        )
        dict_copy["datasets"]["data-set"][3]["physical"]["queries"][0]["sqls"][0][
            "expression"
        ] = changed_value
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_change_d_ds_3_p_immutable(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        old_value = dict_copy["datasets"]["data-set"][3]["physical"]["immutable"]
        dict_copy["datasets"]["data-set"][3]["physical"]["immutable"] = not old_value
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_change_d_ds_3_p_c_3_t_data_type(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        to_prepend = "QUANDALEDINGLE"
        changed_value = (
            to_prepend
            + dict_copy["datasets"]["data-set"][3]["physical"]["columns"][3]["type"]["data-type"]
        )
        dict_copy["datasets"]["data-set"][3]["physical"]["columns"][3]["type"][
            "data-type"
        ] = changed_value
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_remove_item_d_ds_3_p_columns(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["datasets"]["data-set"][3]["physical"]["columns"]
        missing_value = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        dict_copy["datasets"]["data-set"][3]["physical"]["columns"] = dict_copy["datasets"][
            "data-set"
        ][3]["physical"]["columns"][:-1]
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_add_item_d_ds_3_p_columns(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["datasets"]["data-set"][3]["physical"]["columns"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name", "primary-attribute"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list.append(to_add)
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_add_multiple_d_ds_3_p_columns(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["datasets"]["data-set"][3]["physical"]["columns"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name", "primary-attribute"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy["datasets"]["data-set"][3]["physical"]["columns"] = dict_copy_list
        assert not testing_utils.json_same(expected=draft_project_dict, actual=dict_copy)

    def test_json_same_remove_multiple_d_ds_3_p_columns(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["datasets"]["data-set"][3]["physical"]["columns"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name", "primary-attribute"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy["datasets"]["data-set"][3]["physical"]["columns"] = dict_copy_list
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_change_d_ds_3_l_ar_0_complete(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        to_prepend = "QUANDALEDINGLE"
        changed_value = (
            to_prepend
            + dict_copy["datasets"]["data-set"][3]["logical"]["attribute-ref"][0]["complete"]
        )
        dict_copy["datasets"]["data-set"][3]["logical"]["attribute-ref"][0][
            "complete"
        ] = changed_value
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_change_d_ds_3_l_ar_0_c_0(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        to_prepend = "QUANDALEDINGLE"
        changed_value = (
            to_prepend
            + dict_copy["datasets"]["data-set"][3]["logical"]["attribute-ref"][0]["column"][0]
        )
        dict_copy["datasets"]["data-set"][3]["logical"]["attribute-ref"][0]["column"][
            0
        ] = changed_value
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_remove_item_d_ds_3_l_ar_0_column(
        self, draft_project_dict
    ):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["datasets"]["data-set"][3]["logical"]["attribute-ref"][0][
            "column"
        ]
        missing_value = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        dict_copy["datasets"]["data-set"][3]["logical"]["attribute-ref"][0]["column"] = dict_copy[
            "datasets"
        ]["data-set"][3]["logical"]["attribute-ref"][0]["column"][:-1]
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_add_item_d_ds_3_l_ar_0_column(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["datasets"]["data-set"][3]["logical"]["attribute-ref"][0][
            "column"
        ]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name", "primary-attribute"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list.append(to_add)
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_add_multiple_d_ds_3_l_ar_0_column(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["datasets"]["data-set"][3]["logical"]["attribute-ref"][0][
            "column"
        ]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name", "primary-attribute"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy["datasets"]["data-set"][3]["logical"]["attribute-ref"][0][
            "column"
        ] = dict_copy_list
        assert not testing_utils.json_same(expected=draft_project_dict, actual=dict_copy)

    def test_json_same_remove_multiple_d_ds_3_l_ar_0_column(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["datasets"]["data-set"][3]["logical"]["attribute-ref"][0][
            "column"
        ]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name", "primary-attribute"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy["datasets"]["data-set"][3]["logical"]["attribute-ref"][0][
            "column"
        ] = dict_copy_list
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_remove_item_d_ds_3_l_attribute_ref(
        self, draft_project_dict
    ):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["datasets"]["data-set"][3]["logical"]["attribute-ref"]
        missing_value = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        dict_copy["datasets"]["data-set"][3]["logical"]["attribute-ref"] = dict_copy["datasets"][
            "data-set"
        ][3]["logical"]["attribute-ref"][:-1]
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_add_item_d_ds_3_l_attribute_ref(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["datasets"]["data-set"][3]["logical"]["attribute-ref"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name", "primary-attribute"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list.append(to_add)
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_add_multiple_d_ds_3_l_attribute_ref(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["datasets"]["data-set"][3]["logical"]["attribute-ref"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name", "primary-attribute"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy["datasets"]["data-set"][3]["logical"]["attribute-ref"] = dict_copy_list
        assert not testing_utils.json_same(expected=draft_project_dict, actual=dict_copy)

    def test_json_same_remove_multiple_d_ds_3_l_attribute_ref(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["datasets"]["data-set"][3]["logical"]["attribute-ref"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name", "primary-attribute"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy["datasets"]["data-set"][3]["logical"]["attribute-ref"] = dict_copy_list
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_remove_item_d_data_set(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["datasets"]["data-set"]
        missing_value = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        dict_copy["datasets"]["data-set"] = dict_copy["datasets"]["data-set"][:-1]
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_add_item_d_data_set(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["datasets"]["data-set"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name", "primary-attribute"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list.append(to_add)
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_add_multiple_d_data_set(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["datasets"]["data-set"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name", "primary-attribute"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy["datasets"]["data-set"] = dict_copy_list
        assert not testing_utils.json_same(expected=draft_project_dict, actual=dict_copy)

    def test_json_same_remove_multiple_d_data_set(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["datasets"]["data-set"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name", "primary-attribute"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy["datasets"]["data-set"] = dict_copy_list
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_change_cm_cm_1_p_caption(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        to_prepend = "QUANDALEDINGLE"
        changed_value = (
            to_prepend
            + dict_copy["calculated-members"]["calculated-member"][5]["properties"]["caption"]
        )
        dict_copy["calculated-members"]["calculated-member"][5]["properties"][
            "caption"
        ] = changed_value
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_change_cm_cm_1_p_visible(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        old_value = dict_copy["calculated-members"]["calculated-member"][5]["properties"]["visible"]
        dict_copy["calculated-members"]["calculated-member"][5]["properties"][
            "visible"
        ] = not old_value
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_change_cm_cm_1_p_folder(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        to_prepend = "QUANDALEDINGLE"
        changed_value = (
            to_prepend
            + dict_copy["calculated-members"]["calculated-member"][5]["properties"]["folder"]
        )
        dict_copy["calculated-members"]["calculated-member"][5]["properties"][
            "folder"
        ] = changed_value
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_change_cm_cm_1_expression(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        to_prepend = "QUANDALEDINGLE"
        changed_value = (
            to_prepend + dict_copy["calculated-members"]["calculated-member"][5]["expression"]
        )
        dict_copy["calculated-members"]["calculated-member"][5]["expression"] = changed_value
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_remove_item_cm_calculated_member(
        self, draft_project_dict
    ):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["calculated-members"]["calculated-member"]
        missing_value = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        dict_copy["calculated-members"]["calculated-member"] = dict_copy["calculated-members"][
            "calculated-member"
        ][:-1]
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_add_item_cm_calculated_member(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["calculated-members"]["calculated-member"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name", "primary-attribute"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list.append(to_add)
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_add_multiple_cm_calculated_member(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["calculated-members"]["calculated-member"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name", "primary-attribute"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy["calculated-members"]["calculated-member"] = dict_copy_list
        assert not testing_utils.json_same(expected=draft_project_dict, actual=dict_copy)

    def test_json_same_remove_multiple_cm_calculated_member(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["calculated-members"]["calculated-member"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name", "primary-attribute"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy["calculated-members"]["calculated-member"] = dict_copy_list
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_change_c_c_0_p_visible(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        old_value = dict_copy["cubes"]["cube"][0]["properties"]["visible"]
        dict_copy["cubes"]["cube"][0]["properties"]["visible"] = not old_value
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_change_c_c_0_a_ak_7_p_visible(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        old_value = dict_copy["cubes"]["cube"][0]["attributes"]["attribute-key"][7]["properties"][
            "visible"
        ]
        dict_copy["cubes"]["cube"][0]["attributes"]["attribute-key"][7]["properties"][
            "visible"
        ] = not old_value
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_change_c_c_0_a_ak_7_p_columns(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        old_value = dict_copy["cubes"]["cube"][0]["attributes"]["attribute-key"][7]["properties"][
            "columns"
        ]
        dict_copy["cubes"]["cube"][0]["attributes"]["attribute-key"][7]["properties"]["columns"] = (
            old_value + 1
        )
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_remove_item_c_c_0_a_attribute_key(
        self, draft_project_dict
    ):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["cubes"]["cube"][0]["attributes"]["attribute-key"]
        missing_value = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        dict_copy["cubes"]["cube"][0]["attributes"]["attribute-key"] = dict_copy["cubes"]["cube"][
            0
        ]["attributes"]["attribute-key"][:-1]
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_add_item_c_c_0_a_attribute_key(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["cubes"]["cube"][0]["attributes"]["attribute-key"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name", "primary-attribute"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list.append(to_add)
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_add_multiple_c_c_0_a_attribute_key(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["cubes"]["cube"][0]["attributes"]["attribute-key"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name", "primary-attribute"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy["cubes"]["cube"][0]["attributes"]["attribute-key"] = dict_copy_list
        assert not testing_utils.json_same(expected=draft_project_dict, actual=dict_copy)

    def test_json_same_remove_multiple_c_c_0_a_attribute_key(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["cubes"]["cube"][0]["attributes"]["attribute-key"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name", "primary-attribute"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy["cubes"]["cube"][0]["attributes"]["attribute-key"] = dict_copy_list
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_change_c_c_0_a_ka_1_p_caption(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        to_prepend = "QUANDALEDINGLE"
        changed_value = (
            to_prepend
            + dict_copy["cubes"]["cube"][0]["attributes"]["keyed-attribute"][1]["properties"][
                "caption"
            ]
        )
        dict_copy["cubes"]["cube"][0]["attributes"]["keyed-attribute"][1]["properties"][
            "caption"
        ] = changed_value
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_change_c_c_0_a_ka_1_p_visible(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        old_value = dict_copy["cubes"]["cube"][0]["attributes"]["keyed-attribute"][1]["properties"][
            "visible"
        ]
        dict_copy["cubes"]["cube"][0]["attributes"]["keyed-attribute"][1]["properties"][
            "visible"
        ] = not old_value
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_change_c_c_0_a_ka_1_p_o_sk_order(
        self, draft_project_dict
    ):
        dict_copy = deepcopy(self, draft_project_dict)
        to_prepend = "QUANDALEDINGLE"
        changed_value = (
            to_prepend
            + dict_copy["cubes"]["cube"][0]["attributes"]["keyed-attribute"][1]["properties"][
                "ordering"
            ]["sort-key"]["order"]
        )
        dict_copy["cubes"]["cube"][0]["attributes"]["keyed-attribute"][1]["properties"]["ordering"][
            "sort-key"
        ]["order"] = changed_value
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_remove_item_c_c_0_a_keyed_attribute(
        self, draft_project_dict
    ):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["cubes"]["cube"][0]["attributes"]["keyed-attribute"]
        missing_value = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        dict_copy["cubes"]["cube"][0]["attributes"]["keyed-attribute"] = dict_copy["cubes"]["cube"][
            0
        ]["attributes"]["keyed-attribute"][:-1]
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_add_item_c_c_0_a_keyed_attribute(
        self, draft_project_dict
    ):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["cubes"]["cube"][0]["attributes"]["keyed-attribute"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name", "primary-attribute"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list.append(to_add)
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_add_multiple_c_c_0_a_keyed_attribute(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["cubes"]["cube"][0]["attributes"]["keyed-attribute"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name", "primary-attribute"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy["cubes"]["cube"][0]["attributes"]["keyed-attribute"] = dict_copy_list
        assert not testing_utils.json_same(expected=draft_project_dict, actual=dict_copy)

    def test_json_same_remove_multiple_c_c_0_a_keyed_attribute(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["cubes"]["cube"][0]["attributes"]["keyed-attribute"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name", "primary-attribute"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy["cubes"]["cube"][0]["attributes"]["keyed-attribute"] = dict_copy_list
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_change_c_c_0_a_a_1_p_caption(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        to_prepend = "QUANDALEDINGLE"
        changed_value = (
            to_prepend
            + dict_copy["cubes"]["cube"][0]["attributes"]["attribute"][16]["properties"]["caption"]
        )
        dict_copy["cubes"]["cube"][0]["attributes"]["attribute"][16]["properties"][
            "caption"
        ] = changed_value
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_change_c_c_0_a_a_1_p_visible(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        old_value = dict_copy["cubes"]["cube"][0]["attributes"]["attribute"][16]["properties"][
            "visible"
        ]
        dict_copy["cubes"]["cube"][0]["attributes"]["attribute"][16]["properties"][
            "visible"
        ] = not old_value
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_change_c_c_0_a_a_1_p_folder(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        to_prepend = "QUANDALEDINGLE"
        changed_value = (
            to_prepend
            + dict_copy["cubes"]["cube"][0]["attributes"]["attribute"][16]["properties"]["folder"]
        )
        dict_copy["cubes"]["cube"][0]["attributes"]["attribute"][16]["properties"][
            "folder"
        ] = changed_value
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_change_c_c_0_a_a_1_p_t_m_default_aggregation(
        self,
        draft_project_dict,
    ):
        dict_copy = deepcopy(draft_project_dict)
        to_prepend = "QUANDALEDINGLE"
        changed_value = (
            to_prepend
            + dict_copy["cubes"]["cube"][0]["attributes"]["attribute"][16]["properties"]["type"][
                "measure"
            ]["default-aggregation"]
        )
        dict_copy["cubes"]["cube"][0]["attributes"]["attribute"][16]["properties"]["type"][
            "measure"
        ]["default-aggregation"] = changed_value
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_remove_item_c_c_0_a_attribute(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["cubes"]["cube"][0]["attributes"]["attribute"]
        missing_value = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        dict_copy["cubes"]["cube"][0]["attributes"]["attribute"] = dict_copy["cubes"]["cube"][0][
            "attributes"
        ]["attribute"][:-1]
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_add_item_c_c_0_a_attribute(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["cubes"]["cube"][0]["attributes"]["attribute"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name", "primary-attribute"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list.append(to_add)
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_add_multiple_c_c_0_a_attribute(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["cubes"]["cube"][0]["attributes"]["attribute"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name", "primary-attribute"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy["cubes"]["cube"][0]["attributes"]["attribute"] = dict_copy_list
        assert not testing_utils.json_same(expected=draft_project_dict, actual=dict_copy)

    def test_json_same_remove_multiple_c_c_0_a_attribute(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["cubes"]["cube"][0]["attributes"]["attribute"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name", "primary-attribute"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy["cubes"]["cube"][0]["attributes"]["attribute"] = dict_copy_list
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_change_c_c_0_d_d_0_p_visible(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        old_value = dict_copy["cubes"]["cube"][0]["dimensions"]["dimension"][0]["properties"][
            "visible"
        ]
        dict_copy["cubes"]["cube"][0]["dimensions"]["dimension"][0]["properties"][
            "visible"
        ] = not old_value
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_change_c_c_0_d_d_0_h_0_p_caption(
        self, draft_project_dict
    ):
        dict_copy = deepcopy(self, draft_project_dict)
        to_prepend = "QUANDALEDINGLE"
        changed_value = (
            to_prepend
            + dict_copy["cubes"]["cube"][0]["dimensions"]["dimension"][0]["hierarchy"][0][
                "properties"
            ]["caption"]
        )
        dict_copy["cubes"]["cube"][0]["dimensions"]["dimension"][0]["hierarchy"][0]["properties"][
            "caption"
        ] = changed_value
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_change_c_c_0_d_d_0_h_0_p_visible(
        self, draft_project_dict
    ):
        dict_copy = deepcopy(self, draft_project_dict)
        old_value = dict_copy["cubes"]["cube"][0]["dimensions"]["dimension"][0]["hierarchy"][0][
            "properties"
        ]["visible"]
        dict_copy["cubes"]["cube"][0]["dimensions"]["dimension"][0]["hierarchy"][0]["properties"][
            "visible"
        ] = not old_value
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_change_c_c_0_d_d_0_h_0_p_folder(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        to_prepend = "QUANDALEDINGLE"
        changed_value = (
            to_prepend
            + dict_copy["cubes"]["cube"][0]["dimensions"]["dimension"][0]["hierarchy"][0][
                "properties"
            ]["folder"]
        )
        dict_copy["cubes"]["cube"][0]["dimensions"]["dimension"][0]["hierarchy"][0]["properties"][
            "folder"
        ] = changed_value
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_change_c_c_0_d_d_0_h_0_p_filter_empty(
        self, draft_project_dict
    ):
        dict_copy = deepcopy(self, draft_project_dict)
        to_prepend = "QUANDALEDINGLE"
        changed_value = (
            to_prepend
            + dict_copy["cubes"]["cube"][0]["dimensions"]["dimension"][0]["hierarchy"][0][
                "properties"
            ]["filter-empty"]
        )
        dict_copy["cubes"]["cube"][0]["dimensions"]["dimension"][0]["hierarchy"][0]["properties"][
            "filter-empty"
        ] = changed_value
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_change_c_c_0_d_d_0_h_0_l_1_p_unique_in_parent(
        self,
        draft_project_dict,
    ):
        dict_copy = deepcopy(draft_project_dict)
        old_value = dict_copy["cubes"]["cube"][0]["dimensions"]["dimension"][0]["hierarchy"][0][
            "level"
        ][1]["properties"]["unique-in-parent"]
        dict_copy["cubes"]["cube"][0]["dimensions"]["dimension"][0]["hierarchy"][0]["level"][1][
            "properties"
        ]["unique-in-parent"] = not old_value
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_change_c_c_0_d_d_0_h_0_l_1_p_visible(
        self, draft_project_dict
    ):
        dict_copy = deepcopy(self, draft_project_dict)
        old_value = dict_copy["cubes"]["cube"][0]["dimensions"]["dimension"][0]["hierarchy"][0][
            "level"
        ][1]["properties"]["visible"]
        dict_copy["cubes"]["cube"][0]["dimensions"]["dimension"][0]["hierarchy"][0]["level"][1][
            "properties"
        ]["visible"] = not old_value
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_remove_item_c_c_0_d_d_0_h_0_level(
        self, draft_project_dict
    ):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["cubes"]["cube"][0]["dimensions"]["dimension"][0]["hierarchy"][
            0
        ]["level"]
        missing_value = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        dict_copy["cubes"]["cube"][0]["dimensions"]["dimension"][0]["hierarchy"][0]["level"] = (
            dict_copy["cubes"]["cube"][0]["dimensions"]["dimension"][0]["hierarchy"][0]["level"][
                :-1
            ]
        )
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_add_item_c_c_0_d_d_0_h_0_level(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["cubes"]["cube"][0]["dimensions"]["dimension"][0]["hierarchy"][
            0
        ]["level"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name", "primary-attribute"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list.append(to_add)
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_add_multiple_c_c_0_d_d_0_h_0_level(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["cubes"]["cube"][0]["dimensions"]["dimension"][0]["hierarchy"][
            0
        ]["level"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name", "primary-attribute"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy["cubes"]["cube"][0]["dimensions"]["dimension"][0]["hierarchy"][0][
            "level"
        ] = dict_copy_list
        assert not testing_utils.json_same(expected=draft_project_dict, actual=dict_copy)

    def test_json_same_remove_multiple_c_c_0_d_d_0_h_0_level(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["cubes"]["cube"][0]["dimensions"]["dimension"][0]["hierarchy"][
            0
        ]["level"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name", "primary-attribute"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy["cubes"]["cube"][0]["dimensions"]["dimension"][0]["hierarchy"][0][
            "level"
        ] = dict_copy_list
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_remove_item_c_c_0_d_d_0_hierarchy(
        self, draft_project_dict
    ):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["cubes"]["cube"][0]["dimensions"]["dimension"][0]["hierarchy"]
        missing_value = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        dict_copy["cubes"]["cube"][0]["dimensions"]["dimension"][0]["hierarchy"] = dict_copy[
            "cubes"
        ]["cube"][0]["dimensions"]["dimension"][0]["hierarchy"][:-1]
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_add_item_c_c_0_d_d_0_hierarchy(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["cubes"]["cube"][0]["dimensions"]["dimension"][0]["hierarchy"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name", "primary-attribute"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list.append(to_add)
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_add_multiple_c_c_0_d_d_0_hierarchy(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["cubes"]["cube"][0]["dimensions"]["dimension"][0]["hierarchy"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name", "primary-attribute"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy["cubes"]["cube"][0]["dimensions"]["dimension"][0]["hierarchy"] = dict_copy_list
        assert not testing_utils.json_same(expected=draft_project_dict, actual=dict_copy)

    def test_json_same_remove_multiple_c_c_0_d_d_0_hierarchy(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["cubes"]["cube"][0]["dimensions"]["dimension"][0]["hierarchy"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name", "primary-attribute"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy["cubes"]["cube"][0]["dimensions"]["dimension"][0]["hierarchy"] = dict_copy_list
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_remove_item_c_c_0_d_dimension(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["cubes"]["cube"][0]["dimensions"]["dimension"]
        missing_value = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        dict_copy["cubes"]["cube"][0]["dimensions"]["dimension"] = dict_copy["cubes"]["cube"][0][
            "dimensions"
        ]["dimension"][:-1]
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_add_item_c_c_0_d_dimension(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["cubes"]["cube"][0]["dimensions"]["dimension"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name", "primary-attribute"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list.append(to_add)
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_add_multiple_c_c_0_d_dimension(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["cubes"]["cube"][0]["dimensions"]["dimension"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name", "primary-attribute"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy["cubes"]["cube"][0]["dimensions"]["dimension"] = dict_copy_list
        assert not testing_utils.json_same(expected=draft_project_dict, actual=dict_copy)

    def test_json_same_remove_multiple_c_c_0_d_dimension(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["cubes"]["cube"][0]["dimensions"]["dimension"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name", "primary-attribute"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy["cubes"]["cube"][0]["dimensions"]["dimension"] = dict_copy_list
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_change_c_c_0_a_p_include_default_drill_through(
        self,
        draft_project_dict,
    ):
        dict_copy = deepcopy(draft_project_dict)
        old_value = dict_copy["cubes"]["cube"][0]["actions"]["properties"][
            "include-default-drill-through"
        ]
        dict_copy["cubes"]["cube"][0]["actions"]["properties"][
            "include-default-drill-through"
        ] = not old_value
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_change_c_c_0_ds_dsr_0_p_allow_aggregates(
        self, draft_project_dict
    ):
        dict_copy = deepcopy(self, draft_project_dict)
        old_value = dict_copy["cubes"]["cube"][0]["data-sets"]["data-set-ref"][0]["properties"][
            "allow-aggregates"
        ]
        dict_copy["cubes"]["cube"][0]["data-sets"]["data-set-ref"][0]["properties"][
            "allow-aggregates"
        ] = not old_value
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_change_c_c_0_ds_dsr_0_p_create_hinted_aggregate(
        self,
        draft_project_dict,
    ):
        dict_copy = deepcopy(draft_project_dict)
        old_value = dict_copy["cubes"]["cube"][0]["data-sets"]["data-set-ref"][0]["properties"][
            "create-hinted-aggregate"
        ]
        dict_copy["cubes"]["cube"][0]["data-sets"]["data-set-ref"][0]["properties"][
            "create-hinted-aggregate"
        ] = not old_value
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_change_c_c_0_ds_dsr_0_l_ar_1_complete(
        self, draft_project_dict
    ):
        dict_copy = deepcopy(self, draft_project_dict)
        to_prepend = "QUANDALEDINGLE"
        changed_value = (
            to_prepend
            + dict_copy["cubes"]["cube"][0]["data-sets"]["data-set-ref"][0]["logical"][
                "attribute-ref"
            ][12]["complete"]
        )
        dict_copy["cubes"]["cube"][0]["data-sets"]["data-set-ref"][0]["logical"]["attribute-ref"][
            12
        ]["complete"] = changed_value
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_change_c_c_0_ds_dsr_0_l_ar_1_c_0(
        self, draft_project_dict
    ):
        dict_copy = deepcopy(self, draft_project_dict)
        to_prepend = "QUANDALEDINGLE"
        changed_value = (
            to_prepend
            + dict_copy["cubes"]["cube"][0]["data-sets"]["data-set-ref"][0]["logical"][
                "attribute-ref"
            ][12]["column"][0]
        )
        dict_copy["cubes"]["cube"][0]["data-sets"]["data-set-ref"][0]["logical"]["attribute-ref"][
            12
        ]["column"][0] = changed_value
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_remove_item_c_c_0_ds_dsr_0_l_ar_1_column(
        self, draft_project_dict
    ):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["cubes"]["cube"][0]["data-sets"]["data-set-ref"][0]["logical"][
            "attribute-ref"
        ][12]["column"]
        missing_value = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        dict_copy["cubes"]["cube"][0]["data-sets"]["data-set-ref"][0]["logical"]["attribute-ref"][
            12
        ]["column"] = dict_copy["cubes"]["cube"][0]["data-sets"]["data-set-ref"][0]["logical"][
            "attribute-ref"
        ][
            12
        ][
            "column"
        ][
            :-1
        ]
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_add_item_c_c_0_ds_dsr_0_l_ar_1_column(
        self, draft_project_dict
    ):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["cubes"]["cube"][0]["data-sets"]["data-set-ref"][0]["logical"][
            "attribute-ref"
        ][12]["column"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name", "primary-attribute"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list.append(to_add)
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_add_multiple_c_c_0_ds_dsr_0_l_ar_1_column(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["cubes"]["cube"][0]["data-sets"]["data-set-ref"][0]["logical"][
            "attribute-ref"
        ][12]["column"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name", "primary-attribute"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy["cubes"]["cube"][0]["data-sets"]["data-set-ref"][0]["logical"]["attribute-ref"][
            12
        ]["column"] = dict_copy_list
        assert not testing_utils.json_same(expected=draft_project_dict, actual=dict_copy)

    def test_json_same_remove_multiple_c_c_0_ds_dsr_0_l_ar_1_column(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["cubes"]["cube"][0]["data-sets"]["data-set-ref"][0]["logical"][
            "attribute-ref"
        ][12]["column"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name", "primary-attribute"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy["cubes"]["cube"][0]["data-sets"]["data-set-ref"][0]["logical"]["attribute-ref"][
            12
        ]["column"] = dict_copy_list
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_remove_item_c_c_0_ds_dsr_0_l_attribute_ref(
        self,
        draft_project_dict,
    ):
        dict_copy = deepcopy(draft_project_dict)
        dict_copy_list = dict_copy["cubes"]["cube"][0]["data-sets"]["data-set-ref"][0]["logical"][
            "attribute-ref"
        ]
        missing_value = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        dict_copy["cubes"]["cube"][0]["data-sets"]["data-set-ref"][0]["logical"][
            "attribute-ref"
        ] = dict_copy["cubes"]["cube"][0]["data-sets"]["data-set-ref"][0]["logical"][
            "attribute-ref"
        ][
            :-1
        ]
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_add_item_c_c_0_ds_dsr_0_l_attribute_ref(
        self, draft_project_dict
    ):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["cubes"]["cube"][0]["data-sets"]["data-set-ref"][0]["logical"][
            "attribute-ref"
        ]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name", "primary-attribute"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list.append(to_add)
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_add_multiple_c_c_0_ds_dsr_0_l_attribute_ref(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["cubes"]["cube"][0]["data-sets"]["data-set-ref"][0]["logical"][
            "attribute-ref"
        ]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name", "primary-attribute"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy["cubes"]["cube"][0]["data-sets"]["data-set-ref"][0]["logical"][
            "attribute-ref"
        ] = dict_copy_list
        assert not testing_utils.json_same(expected=draft_project_dict, actual=dict_copy)

    def test_json_same_remove_multiple_c_c_0_ds_dsr_0_l_attribute_ref(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["cubes"]["cube"][0]["data-sets"]["data-set-ref"][0]["logical"][
            "attribute-ref"
        ]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name", "primary-attribute"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy["cubes"]["cube"][0]["data-sets"]["data-set-ref"][0]["logical"][
            "attribute-ref"
        ] = dict_copy_list
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_remove_item_c_c_0_ds_data_set_ref(
        self, draft_project_dict
    ):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["cubes"]["cube"][0]["data-sets"]["data-set-ref"]
        missing_value = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        dict_copy["cubes"]["cube"][0]["data-sets"]["data-set-ref"] = dict_copy["cubes"]["cube"][0][
            "data-sets"
        ]["data-set-ref"][:-1]
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_add_item_c_c_0_ds_data_set_ref(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["cubes"]["cube"][0]["data-sets"]["data-set-ref"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name", "primary-attribute"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list.append(to_add)
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_add_multiple_c_c_0_ds_data_set_ref(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["cubes"]["cube"][0]["data-sets"]["data-set-ref"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name", "primary-attribute"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy["cubes"]["cube"][0]["data-sets"]["data-set-ref"] = dict_copy_list
        assert not testing_utils.json_same(expected=draft_project_dict, actual=dict_copy)

    def test_json_same_remove_multiple_c_c_0_ds_data_set_ref(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["cubes"]["cube"][0]["data-sets"]["data-set-ref"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name", "primary-attribute"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy["cubes"]["cube"][0]["data-sets"]["data-set-ref"] = dict_copy_list
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_change_c_c_0_cm_cmr_6_X_Space(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        to_prepend = "QUANDALEDINGLE"
        changed_value = (
            to_prepend
            + dict_copy["cubes"]["cube"][0]["calculated-members"]["calculated-member-ref"][5][
                "XMLName"
            ]["Space"]
        )
        dict_copy["cubes"]["cube"][0]["calculated-members"]["calculated-member-ref"][5]["XMLName"][
            "Space"
        ] = changed_value
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_change_c_c_0_cm_cmr_6_X_Local(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        to_prepend = "QUANDALEDINGLE"
        changed_value = (
            to_prepend
            + dict_copy["cubes"]["cube"][0]["calculated-members"]["calculated-member-ref"][5][
                "XMLName"
            ]["Local"]
        )
        dict_copy["cubes"]["cube"][0]["calculated-members"]["calculated-member-ref"][5]["XMLName"][
            "Local"
        ] = changed_value
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_remove_item_c_c_0_cm_calculated_member_ref(
        self,
        draft_project_dict,
    ):
        dict_copy = deepcopy(draft_project_dict)
        dict_copy_list = dict_copy["cubes"]["cube"][0]["calculated-members"][
            "calculated-member-ref"
        ]
        missing_value = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        dict_copy["cubes"]["cube"][0]["calculated-members"]["calculated-member-ref"] = dict_copy[
            "cubes"
        ]["cube"][0]["calculated-members"]["calculated-member-ref"][:-1]
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_add_item_c_c_0_cm_calculated_member_ref(
        self, draft_project_dict
    ):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["cubes"]["cube"][0]["calculated-members"][
            "calculated-member-ref"
        ]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name", "primary-attribute"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list.append(to_add)
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_add_multiple_c_c_0_cm_calculated_member_ref(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["cubes"]["cube"][0]["calculated-members"][
            "calculated-member-ref"
        ]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name", "primary-attribute"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy["cubes"]["cube"][0]["calculated-members"][
            "calculated-member-ref"
        ] = dict_copy_list
        assert not testing_utils.json_same(expected=draft_project_dict, actual=dict_copy)

    def test_json_same_remove_multiple_c_c_0_cm_calculated_member_ref(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["cubes"]["cube"][0]["calculated-members"][
            "calculated-member-ref"
        ]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name", "primary-attribute"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy["cubes"]["cube"][0]["calculated-members"][
            "calculated-member-ref"
        ] = dict_copy_list
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_remove_item_c_cube(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["cubes"]["cube"]
        missing_value = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        dict_copy["cubes"]["cube"] = dict_copy["cubes"]["cube"][:-1]
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_draft_project_dict_add_item_c_cube(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["cubes"]["cube"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name", "primary-attribute"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list.append(to_add)
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_add_multiple_c_cube(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["cubes"]["cube"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name", "primary-attribute"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy["cubes"]["cube"] = dict_copy_list
        assert not testing_utils.json_same(expected=draft_project_dict, actual=dict_copy)

    def test_json_same_remove_multiple_c_cube(self, draft_project_dict):
        dict_copy = deepcopy(self, draft_project_dict)
        dict_copy_list = dict_copy["cubes"]["cube"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name", "primary-attribute"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy["cubes"]["cube"] = dict_copy_list
        assert not testing_utils.json_same(expected=dict_copy, actual=draft_project_dict)

    def test_json_same_published_projects_list_change_0_caption(published_projects_list):
        dict_copy = deepcopy(published_projects_list)
        to_prepend = "QUANDALEDINGLE"
        changed_value = to_prepend + dict_copy[0]["caption"]
        dict_copy[0]["caption"] = changed_value
        assert not testing_utils.json_same(expected=dict_copy, actual=published_projects_list)

    def test_json_same_published_projects_list_change_0_version(published_projects_list):
        dict_copy = deepcopy(published_projects_list)
        to_prepend = "QUANDALEDINGLE"
        changed_value = to_prepend + dict_copy[0]["version"]
        dict_copy[0]["version"] = changed_value
        assert testing_utils.json_same(expected=dict_copy, actual=published_projects_list)

    def test_json_same_published_projects_list_change_0_versionTag(published_projects_list):
        dict_copy = deepcopy(published_projects_list)
        to_prepend = "QUANDALEDINGLE"
        changed_value = to_prepend + dict_copy[0]["versionTag"]
        dict_copy[0]["versionTag"] = changed_value
        assert testing_utils.json_same(expected=dict_copy, actual=published_projects_list)

    def test_json_same_published_projects_list_change_0_c_0_type(published_projects_list):
        dict_copy = deepcopy(published_projects_list)
        to_prepend = "QUANDALEDINGLE"
        changed_value = to_prepend + dict_copy[0]["cubes"][0]["type"]
        dict_copy[0]["cubes"][0]["type"] = changed_value
        assert not testing_utils.json_same(expected=dict_copy, actual=published_projects_list)

    def test_json_same_published_projects_list_change_0_c_0_caption(published_projects_list):
        dict_copy = deepcopy(published_projects_list)
        to_prepend = "QUANDALEDINGLE"
        changed_value = to_prepend + dict_copy[0]["cubes"][0]["caption"]
        dict_copy[0]["cubes"][0]["caption"] = changed_value
        assert not testing_utils.json_same(expected=dict_copy, actual=published_projects_list)

    def test_json_same_published_projects_list_remove_item_0_cubes(published_projects_list):
        dict_copy = deepcopy(published_projects_list)
        dict_copy_list = dict_copy[0]["cubes"]
        missing_value = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        dict_copy[0]["cubes"] = dict_copy[0]["cubes"][:-1]
        assert not testing_utils.json_same(expected=dict_copy, actual=published_projects_list)

    def test_json_same_published_projects_list_add_item_0_cubes(published_projects_list):
        dict_copy = deepcopy(published_projects_list)
        dict_copy_list = dict_copy[0]["cubes"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name", "primary-attribute"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list.append(to_add)
        assert not testing_utils.json_same(expected=dict_copy, actual=published_projects_list)

    def test_json_same_add_multiple_0_cubes(published_projects_list):
        dict_copy = deepcopy(published_projects_list)
        dict_copy_list = dict_copy[0]["cubes"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name", "primary-attribute"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy[0]["cubes"] = dict_copy_list
        assert not testing_utils.json_same(expected=published_projects_list, actual=dict_copy)

    def test_json_same_remove_multiple_0_cubes(published_projects_list):
        dict_copy = deepcopy(published_projects_list)
        dict_copy_list = dict_copy[0]["cubes"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name", "primary-attribute"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy[0]["cubes"] = dict_copy_list
        assert not testing_utils.json_same(expected=dict_copy, actual=published_projects_list)

    def test_json_same_published_projects_list_change_0_publishType(published_projects_list):
        dict_copy = deepcopy(published_projects_list)
        to_prepend = "QUANDALEDINGLE"
        changed_value = to_prepend + dict_copy[0]["publishType"]
        dict_copy[0]["publishType"] = changed_value
        assert not testing_utils.json_same(expected=dict_copy, actual=published_projects_list)

    def test_json_same_published_projects_list_change_0_publishedAt(published_projects_list):
        dict_copy = deepcopy(published_projects_list)
        to_prepend = "QUANDALEDINGLE"
        changed_value = to_prepend + dict_copy[0]["publishedAt"]
        dict_copy[0]["publishedAt"] = changed_value
        assert testing_utils.json_same(expected=dict_copy, actual=published_projects_list)

    def test_json_same_published_projects_list_change_0_publishedBy(published_projects_list):
        dict_copy = deepcopy(published_projects_list)
        to_prepend = "QUANDALEDINGLE"
        changed_value = to_prepend + dict_copy[0]["publishedBy"]
        dict_copy[0]["publishedBy"] = changed_value
        assert testing_utils.json_same(expected=dict_copy, actual=published_projects_list)

    def test_json_same_published_projects_list_change_0_linkedProjectId(published_projects_list):
        dict_copy = deepcopy(published_projects_list)
        to_prepend = "QUANDALEDINGLE"
        changed_value = to_prepend + dict_copy[0]["linkedProjectId"]
        dict_copy[0]["linkedProjectId"] = changed_value
        assert not testing_utils.json_same(expected=dict_copy, actual=published_projects_list)

    def test_json_same_published_project_dict_change_caption(published_project_dict):
        dict_copy = deepcopy(published_project_dict)
        to_prepend = "QUANDALEDINGLE"
        changed_value = to_prepend + dict_copy["caption"]
        dict_copy["caption"] = changed_value
        assert not testing_utils.json_same(expected=dict_copy, actual=published_project_dict)

    def test_json_same_published_project_dict_change_version(published_project_dict):
        dict_copy = deepcopy(published_project_dict)
        to_prepend = "QUANDALEDINGLE"
        changed_value = to_prepend + dict_copy["version"]
        dict_copy["version"] = changed_value
        assert testing_utils.json_same(expected=dict_copy, actual=published_project_dict)

    def test_json_same_published_project_dict_change_versionTag(published_project_dict):
        dict_copy = deepcopy(published_project_dict)
        to_prepend = "QUANDALEDINGLE"
        changed_value = to_prepend + dict_copy["versionTag"]
        dict_copy["versionTag"] = changed_value
        assert testing_utils.json_same(expected=dict_copy, actual=published_project_dict)

    def test_json_same_published_project_dict_change_c_0_type(published_project_dict):
        dict_copy = deepcopy(published_project_dict)
        to_prepend = "QUANDALEDINGLE"
        changed_value = to_prepend + dict_copy["cubes"][0]["type"]
        dict_copy["cubes"][0]["type"] = changed_value
        assert not testing_utils.json_same(expected=dict_copy, actual=published_project_dict)

    def test_json_same_published_project_dict_change_c_0_caption(published_project_dict):
        dict_copy = deepcopy(published_project_dict)
        to_prepend = "QUANDALEDINGLE"
        changed_value = to_prepend + dict_copy["cubes"][0]["caption"]
        dict_copy["cubes"][0]["caption"] = changed_value
        assert not testing_utils.json_same(expected=dict_copy, actual=published_project_dict)

    def test_json_same_published_project_dict_remove_item_cubes(published_project_dict):
        dict_copy = deepcopy(published_project_dict)
        dict_copy_list = dict_copy["cubes"]
        missing_value = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        dict_copy["cubes"] = dict_copy["cubes"][:-1]
        assert not testing_utils.json_same(expected=dict_copy, actual=published_project_dict)

    def test_json_same_published_project_dict_add_item_cubes(published_project_dict):
        dict_copy = deepcopy(published_project_dict)
        dict_copy_list = dict_copy["cubes"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name", "primary-attribute"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list.append(to_add)
        assert not testing_utils.json_same(expected=dict_copy, actual=published_project_dict)

    def test_json_same_add_multiple_cubes(published_project_dict):
        dict_copy = deepcopy(published_project_dict)
        dict_copy_list = dict_copy["cubes"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name", "primary-attribute"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy["cubes"] = dict_copy_list
        assert not testing_utils.json_same(expected=published_project_dict, actual=dict_copy)

    def test_json_same_remove_multiple_cubes(published_project_dict):
        dict_copy = deepcopy(published_project_dict)
        dict_copy_list = dict_copy["cubes"]
        to_add = deepcopy(dict_copy_list[len(dict_copy_list) - 1])
        if type(to_add) is str:
            to_add += "QUANDALEDINGLEHERE"
        else:
            for key in ["id", "expression", "name", "primary-attribute"]:
                if key in to_add:
                    to_add[key] = "QUANDALEDINGLEHERE"
        dict_copy_list = [to_add] + dict_copy_list + [to_add, to_add]
        dict_copy["cubes"] = dict_copy_list
        assert not testing_utils.json_same(expected=dict_copy, actual=published_project_dict)

    def test_json_same_published_project_dict_change_publishType(published_project_dict):
        dict_copy = deepcopy(published_project_dict)
        to_prepend = "QUANDALEDINGLE"
        changed_value = to_prepend + dict_copy["publishType"]
        dict_copy["publishType"] = changed_value
        assert not testing_utils.json_same(expected=dict_copy, actual=published_project_dict)

    def test_json_same_published_project_dict_change_publishedAt(published_project_dict):
        dict_copy = deepcopy(published_project_dict)
        to_prepend = "QUANDALEDINGLE"
        changed_value = to_prepend + dict_copy["publishedAt"]
        dict_copy["publishedAt"] = changed_value
        assert testing_utils.json_same(expected=dict_copy, actual=published_project_dict)

    def test_json_same_published_project_dict_change_publishedBy(published_project_dict):
        dict_copy = deepcopy(published_project_dict)
        to_prepend = "QUANDALEDINGLE"
        changed_value = to_prepend + dict_copy["publishedBy"]
        dict_copy["publishedBy"] = changed_value
        assert testing_utils.json_same(expected=dict_copy, actual=published_project_dict)

    def test_json_same_published_project_dict_change_linkedProjectId(published_project_dict):
        dict_copy = deepcopy(published_project_dict)
        to_prepend = "QUANDALEDINGLE"
        changed_value = to_prepend + dict_copy["linkedProjectId"]
        dict_copy["linkedProjectId"] = changed_value
        assert not testing_utils.json_same(expected=dict_copy, actual=published_project_dict)


def test_dupe_cube(data_model_bp):
    dupe: DataModel = testing_utils.dupe_cube(data_model=data_model_bp, new_name="dupe_cube")
    assert isinstance(dupe, DataModel)
    assert dupe.get_features(use_published=False) == data_model_bp.get_features(use_published=False)


def test_perspective_checks_for_all(
    data_model_edit_functions, data_model_bp_perspective_module_scoped
):
    null_parameters = {func_name: None for func_name in data_model_edit_functions["arg_names"]}

    if data_model_edit_functions["parent_class_name"] == "DataModel":
        null_parameters["self"] = data_model_bp_perspective_module_scoped
    else:
        null_parameters["data_model"] = data_model_bp_perspective_module_scoped

    # we basically want to make sure these raise the
    with pytest.raises(atscale_errors.WorkFlowError) as ue:
        data_model_edit_functions["function_itself"](**null_parameters)
    assert "perspectives" in str(ue.value).lower()


@pytest.mark.skip
def test_run_weekly_cleanup():
    from testing_utils import weekly_cleanup

    weekly_cleanup.delete_all_projects()
    weekly_cleanup.delete_temp_tables()
