def mysum(n):
    n, x, r0, i :: int
    r1 :: native_int
    r2 :: bit
    r3 :: native_int
    r4, r5, r6 :: bit
    r7, r8 :: int
L0:
    x = 0
    r0 = 0
    inc_ref r0 :: int
    i = r0
L1:
    r1 = r0 & 1
    r2 = r1 != 0
    if r2 goto L3 else goto L2 :: bool
L2:
    r3 = n & 1
    r4 = r3 != 0
    if r4 goto L3 else goto L4 :: bool
L3:
    r5 = CPyTagged_IsLt_(r0, n)
    if r5 goto L5 else goto L8 :: bool
L4:
    r6 = r0 < n :: signed
    if r6 goto L5 else goto L8 :: bool
L5:
    r7 = CPyTagged_Add(x, i)
    dec_ref x :: int
    dec_ref i :: int
    x = r7
L6:
    r8 = CPyTagged_Add(r0, 2)
    dec_ref r0 :: int
    inc_ref r8 :: int
    r0 = r8
    i = r8
    goto L1
L7:
    return x
L8:
    dec_ref r0 :: int
    dec_ref i :: int
    goto L7

def __top_level__():
    r0, r1 :: object
    r2 :: bit
    r3 :: str
    r4 :: object
    r5 :: None
L0:
    r0 = builtins :: module
    r1 = load_address _Py_NoneStruct
    r2 = r0 != r1
    if r2 goto L3 else goto L1 :: bool
L1:
    r3 = 'builtins'
    r4 = PyImport_Import(r3)
    if is_error(r4) goto L4 (error at <module>:-1) else goto L2
L2:
    builtins = r4 :: module
    dec_ref r4
L3:
    return 1
L4:
    r5 = <error> :: None
    return r5
