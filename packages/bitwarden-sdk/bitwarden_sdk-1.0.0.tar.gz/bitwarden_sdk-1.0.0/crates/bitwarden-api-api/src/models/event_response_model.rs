/*
 * Bitwarden Internal API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest
 *
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserialize, Serialize};

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct EventResponseModel {
    #[serde(rename = "object", skip_serializing_if = "Option::is_none")]
    pub object: Option<String>,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<models::EventType>,
    #[serde(rename = "userId", skip_serializing_if = "Option::is_none")]
    pub user_id: Option<uuid::Uuid>,
    #[serde(rename = "organizationId", skip_serializing_if = "Option::is_none")]
    pub organization_id: Option<uuid::Uuid>,
    #[serde(rename = "providerId", skip_serializing_if = "Option::is_none")]
    pub provider_id: Option<uuid::Uuid>,
    #[serde(rename = "cipherId", skip_serializing_if = "Option::is_none")]
    pub cipher_id: Option<uuid::Uuid>,
    #[serde(rename = "collectionId", skip_serializing_if = "Option::is_none")]
    pub collection_id: Option<uuid::Uuid>,
    #[serde(rename = "groupId", skip_serializing_if = "Option::is_none")]
    pub group_id: Option<uuid::Uuid>,
    #[serde(rename = "policyId", skip_serializing_if = "Option::is_none")]
    pub policy_id: Option<uuid::Uuid>,
    #[serde(rename = "organizationUserId", skip_serializing_if = "Option::is_none")]
    pub organization_user_id: Option<uuid::Uuid>,
    #[serde(rename = "providerUserId", skip_serializing_if = "Option::is_none")]
    pub provider_user_id: Option<uuid::Uuid>,
    #[serde(
        rename = "providerOrganizationId",
        skip_serializing_if = "Option::is_none"
    )]
    pub provider_organization_id: Option<uuid::Uuid>,
    #[serde(rename = "actingUserId", skip_serializing_if = "Option::is_none")]
    pub acting_user_id: Option<uuid::Uuid>,
    #[serde(rename = "installationId", skip_serializing_if = "Option::is_none")]
    pub installation_id: Option<uuid::Uuid>,
    #[serde(rename = "date", skip_serializing_if = "Option::is_none")]
    pub date: Option<String>,
    #[serde(rename = "deviceType", skip_serializing_if = "Option::is_none")]
    pub device_type: Option<models::DeviceType>,
    #[serde(rename = "ipAddress", skip_serializing_if = "Option::is_none")]
    pub ip_address: Option<String>,
    #[serde(rename = "systemUser", skip_serializing_if = "Option::is_none")]
    pub system_user: Option<models::EventSystemUser>,
    #[serde(rename = "domainName", skip_serializing_if = "Option::is_none")]
    pub domain_name: Option<String>,
    #[serde(rename = "secretId", skip_serializing_if = "Option::is_none")]
    pub secret_id: Option<uuid::Uuid>,
    #[serde(rename = "serviceAccountId", skip_serializing_if = "Option::is_none")]
    pub service_account_id: Option<uuid::Uuid>,
}

impl EventResponseModel {
    pub fn new() -> EventResponseModel {
        EventResponseModel {
            object: None,
            r#type: None,
            user_id: None,
            organization_id: None,
            provider_id: None,
            cipher_id: None,
            collection_id: None,
            group_id: None,
            policy_id: None,
            organization_user_id: None,
            provider_user_id: None,
            provider_organization_id: None,
            acting_user_id: None,
            installation_id: None,
            date: None,
            device_type: None,
            ip_address: None,
            system_user: None,
            domain_name: None,
            secret_id: None,
            service_account_id: None,
        }
    }
}
