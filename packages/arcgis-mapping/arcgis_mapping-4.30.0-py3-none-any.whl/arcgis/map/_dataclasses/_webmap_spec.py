# generated by datamodel-codegen:
#   filename:  webmap_schema.json

from __future__ import annotations

from enum import Enum
from typing import Any, Literal
from pydantic import BaseModel as PydanticBaseModel
from pydantic import (
    ConfigDict,
    Field,
    confloat,
    conint,
    constr,
    field_validator,
    model_validator,
)
import dataclasses

common_config = ConfigDict(
    extra="ignore",
    populate_by_name=True,
    use_enum_values=True,
)


class BaseModel(PydanticBaseModel):
    @field_validator("id", mode="before", check_fields=False)
    @classmethod
    def check_id(cls, v):
        # ensure that the id is a string, else make it a str
        if not isinstance(v, str):
            return str(v)
        return v

    @field_validator("item_id", mode="before", check_fields=False)
    @classmethod
    def check_item_id(cls, v):
        # ensure that the id is a string, else make it a str
        if not isinstance(v, str):
            return str(v)
        return v

    @field_validator("style", mode="before", check_fields=False)
    @classmethod
    def check_style(cls, v):
        # ensure that for renderers the style is a string and not Enum instance
        if not isinstance(v, str):
            return v.value
        return v

    def _handle_enums(self, data):
        for key, value in data.items():
            if isinstance(value, Enum):
                data[key] = value.value
            elif isinstance(value, dict):
                data[key] = self._handle_enums(value)
        return data

    def dict(
        self,
        *,
        mode: str = "python",
        include=None,
        exclude=None,
        by_alias: bool = True,
        exclude_unset: bool = False,
        exclude_defaults: bool = False,
        exclude_none: bool = True,
        round_trip: bool = False,
        warnings: bool = False,
    ) -> dict[str, Any]:
        d = super().model_dump(
            mode=mode,
            include=include,
            exclude=exclude,
            by_alias=by_alias,
            exclude_unset=exclude_unset,
            exclude_defaults=exclude_defaults,
            exclude_none=exclude_none,
            round_trip=round_trip,
            warnings=warnings,
        )

        return self._handle_enums(d)


class SymbolValidatorMixin(BaseModel):
    model_config = common_config

    # Mapping dictionary for symbol types to classes

    @model_validator(mode="before")
    def validate_symbol_type(cls, values):
        # if dataclass, we can skip whole thing
        if isinstance(values, BaseModel):
            return values

        symbol_mapping = {
            "esriSFS": SimpleFillSymbolEsriSFS,
            "esriSLS": SimpleLineSymbolEsriSLS,
            "esriSMS": SimpleMarkerSymbolEsriSMS,
            "esriPMS": PictureMarkerSymbolEsriPMS,
            "esriTS": TextSymbolEsriTS,
            "esriPFS": PictureFillSymbolsEsriPFS,
        }
        symbol_data = values.get("symbol")
        if symbol_data and isinstance(symbol_data, dict):
            symbol_type = symbol_data.get("type")
            symbol_class = symbol_mapping.get(symbol_type)
            if symbol_class:
                values["symbol"] = symbol_class(**symbol_data)
        return values

    @model_validator(mode="before")
    def validate_default_symbol_type(cls, values):
        # If dataclass, we can skip whole thing
        if isinstance(values, BaseModel):
            return values
        symbol_mapping = {
            "esriSFS": SimpleFillSymbolEsriSFS,
            "esriSLS": SimpleLineSymbolEsriSLS,
            "esriSMS": SimpleMarkerSymbolEsriSMS,
            "esriPMS": PictureMarkerSymbolEsriPMS,
            "esriTS": TextSymbolEsriTS,
            "esriPFS": PictureFillSymbolsEsriPFS,
        }
        # Handle both instance and dict cases
        symbol_data = None
        if not isinstance(values, dict) and hasattr(values, "default_symbol"):
            symbol_data = values.default_symbol
        if isinstance(values, dict):
            symbol_data = values.get("default_symbol")

        if symbol_data and isinstance(symbol_data, dict):
            symbol_type = symbol_data.get("type")
            symbol_class = symbol_mapping.get(symbol_type)
            if symbol_class:
                values["default_symbol"] = symbol_class(**symbol_data)
        return values


class MapRangeInformation(BaseModel):
    """
    Map range information
    """

    model_config = common_config
    active_range_name: str = Field(
        ...,
        alias="activeRangeName",
        description="Active range ID that slider/picker acts upon.",
    )
    current_range_extent: list[float] | None = Field(
        None,
        alias="currentRangeExtent",
        description="Current range for the active range.",
        max_length=2,
        min_length=2,
    )
    full_range_extent: list[float] | None = Field(
        None,
        alias="fullRangeExtent",
        description="Full range extent for the active range to be presented in the UI.",
        max_length=2,
        min_length=2,
    )


class ParcelFabric(BaseModel):
    """
    Identifies the central object for parcel fabric schema information to access parcel fabric-related functionality, such as managing parcel records.
    """

    model_config = common_config
    id: str | None = Field(
        None,
        description="A unique identifying string for the parcel fabric.",
    )
    title: str = Field(
        ...,
        description="A user-friendly string title for the parcel fabric layer that can be used in a table of contents.",
    )
    url: str = Field(
        ...,
        description="A string value indicating the URL to the parcel fabric layer.",
    )


class SpatialReference(BaseModel):
    """
    The spatialReference object is located at the top level of the web map JSON hierarchy. In addition to this, it is also available within the operationalLayer and basemap objects.

    Many predefined spatial references have already been defined and are available for use. A spatial reference can be defined using a well-known ID (WKID) or well-known text (WKT). The default tolerance and resolution values for the associated coordinate system are used. It is required to have this property saved within the web map.
    """

    model_config = common_config
    latest_wkid: int | None = Field(
        None,
        alias="latestWkid",
        description="(Optional) Identifies the current wkid value associated with the same spatial reference. For example a WKID of '102100' (Web Mercator) has a latestWKid of '3857'.",
    )
    wkid: int = Field(
        None,
        description="The well-known ID (WKID) of the coordinate system.",
    )
    wkt: str | None = Field(
        None,
        description="The well-known text (WKT) of the coordinate system.",
    )
    wkt2: str | None = Field(
        None,
        description="The well-known text of the coordinate system as defined by OGC standard for well-known text strings.",
    )


class Extent(BaseModel):
    """
    This object defines the bounding geometry given the lower-left and upper-right corners of the bounding box. A [spatial reference](spatialReference.md) is also required.
    """

    model_config = common_config
    spatial_reference: SpatialReference | None = Field(
        SpatialReference(wkid=102100, latestWkid=3857),
        alias="spatialReference",
        description="An object used to specify the spatial reference of the given geometry.",
        title="spatialReference",
    )
    xmax: float | None = Field(
        None,
        description="A numeric value indicating the top-right X-coordinate of an extent envelope.",
    )
    xmin: float | Literal["NaN"] | None = Field(
        None,
        description="A numeric value indicating the bottom-left X-coordinate of an extent envelope.",
    )
    ymax: float | None = Field(
        None,
        description="A numeric value indicating the top-right Y-coordinate of an extent envelope.",
    )
    ymin: float | None = Field(
        None,
        description="A numeric value indicating the bottom-left Y-coordinate of an extent envelope.",
    )


class Thumbnail(BaseModel):
    """
    Object containing a thumbnail image.
    """

    model_config = common_config
    url: str = Field(
        ...,
        description="The URI pointing to the thumbnail image. Can be a URL or a base64-encoded image.",
    )


class Viewpoint(BaseModel):
    """
    Represents the location displayed on the map. When multiple properties are defined, the `targetGeometry` is applied first, then the `scale`, then the `rotation`.
    """

    model_config = common_config
    rotation: confloat(ge=0.0, le=360.0) | None = Field(
        0,
        description="The clockwise rotation of due north in relation to the top of the view in degrees. Default is `0`.",
    )
    scale: float | None = Field(
        None,
        description="The scale of the viewpoint. If scale is not defined, it will be automatically calculated such that it is just small enough to fit the entire targetGeometry within the view.",
    )
    target_geometry: Extent | dict = Field(
        ...,
        alias="targetGeometry",
        description="[Required] The target extent framed by the viewpoint.",
    )


class FacilityLayer(BaseModel):
    """
    Defines the layer and field properties for the Facility layer used for floor filtering.
    """

    model_config = common_config
    facility_id_field: str = Field(
        ...,
        alias="facilityIdField",
        description="The name of the attribute field that contains a facility feature's unique identifier.",
    )
    layer_id: str = Field(
        ...,
        alias="layerId",
        description="A layer ID that refers to an operational layer in the map. The layer provides access to Facility features to use for floor filtering.",
    )
    name_field: str = Field(
        ...,
        alias="nameField",
        description="The name of the attribute field that contains a facility feature's name.",
    )
    site_id_field: str | None = Field(
        None,
        alias="siteIdField",
        description="The name of the attribute field that contains a facility feature's site identifier (a foreign key to the Site layer).",
    )
    sub_layer_id: int | None = Field(
        None,
        alias="subLayerId",
        description="The numeric ID of a map service sublayer. This is required only when the layerId property refers to a map service layer.",
    )


class LevelLayer(BaseModel):
    """
    Defines the layer and field properties for the Level layer used for floor filtering.
    """

    model_config = common_config
    facility_id_field: str = Field(
        ...,
        alias="facilityIdField",
        description="The name of the attribute field that contains a level feature's facility identifier (a foreign key to the Facility layer).",
    )
    layer_id: str = Field(
        ...,
        alias="layerId",
        description="A layer ID that refers to an operational layer in the map. The layer provides access to Level features to use for floor filtering.",
    )
    level_id_field: str = Field(
        ...,
        alias="levelIdField",
        description="The name of the attribute field that contains a level feature's unique identifier.",
    )
    level_number_field: str = Field(
        ...,
        alias="levelNumberField",
        description="The name of the attribute field that contains a level feature's level number specific to its facility.",
    )
    long_name_field: str = Field(
        ...,
        alias="longNameField",
        description="The name of the attribute field that contains a level feature's long name.",
    )
    short_name_field: str = Field(
        ...,
        alias="shortNameField",
        description="The name of the attribute field that contains a level feature's short name.",
    )
    sub_layer_id: int | None = Field(
        None,
        alias="subLayerId",
        description="The numeric ID of a map service sublayer. This is required only when the layerId property refers to a map service layer.",
    )
    vertical_order_field: str = Field(
        ...,
        alias="verticalOrderField",
        description="The name of the attribute field that contains a level feature's vertical order. The vertical order defines the order of display in the floor filter widget, and it also references the floor levels of an Indoor Positioning System.",
    )


class SiteLayer(BaseModel):
    """
    Defines the layer and field properties for the Site layer used for floor filtering.
    """

    model_config = common_config
    layer_id: str = Field(
        ...,
        alias="layerId",
        description="A layer ID that refers to an operational layer in the map. The layer provides access to Site features to use for floor filtering.",
    )
    name_field: str = Field(
        ...,
        alias="nameField",
        description="The name of the attribute field that contains a site feature's name.",
    )
    site_id_field: str = Field(
        ...,
        alias="siteIdField",
        description="The name of the attribute field that contains a site feature's unique identifier.",
    )
    sub_layer_id: int | None = Field(
        None,
        alias="subLayerId",
        description="The numeric ID of a map service sublayer. This is required only when the layerId property refers to a map service layer.",
    )


class PositioningService(BaseModel):
    """
    An object containing indoor positioning data service information.
    """

    model_config = common_config
    item_id: str = Field(
        ...,
        alias="itemId",
        description="Feature Service item representing indoor positioning data service.",
    )


class ColumnDelimiter(Enum):
    """
    A string defining the character used to separate columns in a CSV file.
    """

    field_ = "\t"
    field__1 = " "
    field__2 = ","
    field__3 = ";"
    field__4 = "|"


class FeatureCollectionType(Enum):
    """
    Indicates the type of features in the feature collection. If `featureCollectionType` is missing, it means the feature collection is a regular single-layer or multi-layer feature collection.
    """

    markup = "markup"
    notes = "notes"
    route = "route"


class VisibilityMode(Enum):
    """
    Defines how visibility of sub layers is affected. If set to 'exclusive', clients should ensure only one sublayer is visible at a time. If set to 'independent', clients should allow visibility to be set independently for each sublayer. 'independent' is default.'
    """

    exclusive = "exclusive"
    independent = "independent"


class Interpolation(Enum):
    """
    The algorithm used for interpolation.
    """

    rsp_bilinear_interpolation = "RSP_BilinearInterpolation"
    rsp_cubic_convolution = "RSP_CubicConvolution"
    rsp_majority = "RSP_Majority"
    rsp_nearest_neighbor = "RSP_NearestNeighbor"


class NoDataInterpretation(Enum):
    """
    A string value of interpretation of noData setting. Default is 'esriNoDataMatchAny' when noData is a number, and 'esriNoDataMatchAll' when noData is an array.
    """

    esri_no_data_match_all = "esriNoDataMatchAll"
    esri_no_data_match_any = "esriNoDataMatchAny"


class PixelType(Enum):
    """
    Pertains to the type of values stored in the raster, such as signed integer, unsigned integer, or floating point.
    """

    c128 = "C128"
    c64 = "C64"
    f32 = "F32"
    f64 = "F64"
    s16 = "S16"
    s32 = "S32"
    s8 = "S8"
    u1 = "U1"
    u16 = "U16"
    u2 = "U2"
    u32 = "U32"
    u4 = "U4"
    u8 = "U8"
    unknown = "UNKNOWN"


class TraceConfiguration(BaseModel):
    """
    Identifies a set of utility network parameters that define elements of a trace or of a subnetwork.
    """

    model_config = common_config

    id: str = Field(
        ...,
        description="A unique identifying string for the trace configuration.",
    )
    title: str = Field(
        ...,
        description=" A user-friendly string title for the trace configuration that can be used in a table of contents.",
    )


class FloorFilter(BaseModel):
    """
    Configurable properties used by the floor filter widget.
    """

    model_config = common_config
    enabled: bool | None = Field(
        False,
        description="Indicates whether the floor filter is actively filtering the displayed content according to the floor filter selection.",
    )
    facility: str | None = Field(
        None,
        description="Contains a facility identifier for the initially selected facility in the floor filter.",
    )
    level: str | None = Field(
        None,
        description="Contains a level identifier for the initially selected floor, which is used when filtering floor-aware layers.",
    )
    long_names: bool | None = Field(
        False,
        alias="longNames",
        description="Indicates whether the floor filter is showing long names instead of short names for floor levels.",
    )
    minimized: bool | None = Field(
        False,
        description="Indicates whether the floor filter has been minimized to show only the levels list instead of showing the full set of breadcrumbs.",
    )
    pinned_levels: bool | None = Field(
        False,
        alias="pinnedLevels",
        description="Indicates whether the floor filter has been pinned to show the floor levels list, instead of including the levels as a breadcrumb dropdown.",
    )
    site: str | None = Field(
        None,
        description="Contains a site identifier for the initially selected site in the floor filter.",
    )


class InteractionMode(Enum):
    """
    Indicates the mode in which the active range should be presented to the user.
    """

    picker = "picker"
    slider = "slider"


class Range(BaseModel):
    """
    Range object.
    """

    model_config = common_config
    interaction_mode: InteractionMode = Field(
        ...,
        alias="interactionMode",
        description="Indicates the mode in which the active range should be presented to the user.",
    )
    number_of_stops: int | None = Field(
        None,
        alias="numberOfStops",
        description="This is used to generate the activeRangeValues if activeRangeValues are not specified.",
    )
    stop_interval: float | None = Field(
        None,
        alias="stopInterval",
        description="Interval in which stops should be generated.",
    )


class ConnectedOnlineLayer(BaseModel):
    """
    This object indicates that the referenced layer should be included in an offline map using a connection to the original online service. Note that the resulting Mobile Map Package will require a network connection and may need to handle authentication
    """

    model_config = common_config

    id: str | None = Field(
        None,
        description="Identifies which layer or table in the web map is to remain online by specifying the value of its unique id property.",
    )


class Download(Enum):
    """
    When editing layers, the edits are always sent to the server. This string value indicates which data is retrieved. For example, `none` indicates that only the schema is written since neither the features nor attachments are retrieved. For a full sync without downloading attachments, indicate `features`. Lastly, the default behavior is to have a full sync using `featuresAndAttachments` where both features and attachments are retrieved.
    """

    features = "features"
    features_and_attachments = "featuresAndAttachments"
    none = "none"


class Sync(Enum):
    """
    This string value indicates how the data is synced.
    """

    sync_features_and_attachments = "syncFeaturesAndAttachments"
    sync_features_upload_attachments = "syncFeaturesUploadAttachments"
    upload_features_and_attachments = "uploadFeaturesAndAttachments"


class EditableLayers(BaseModel):
    """
    Object detailing the available offline editing options.
    """

    model_config = common_config
    download: Download | None = Field(
        Download.features_and_attachments,
        validate_default=True,
        description="When editing layers, the edits are always sent to the server. This string value indicates which data is retrieved. For example, `none` indicates that only the schema is written since neither the features nor attachments are retrieved. For a full sync without downloading attachments, indicate `features`. Lastly, the default behavior is to have a full sync using `featuresAndAttachments` where both features and attachments are retrieved.",
    )
    sync: Sync | None = Field(
        Sync.sync_features_and_attachments,
        validate_default=True,
        description="This string value indicates how the data is synced.",
    )


class Offlinebasemap(BaseModel):
    """
    Object detailing offline basemap options.
    """

    model_config = common_config
    reference_basemap_name: str | None = Field(
        None,
        alias="referenceBasemapName",
        description="The filename of a basemap that has been copied to a mobile device. This can be used instead of the default basemap for the map to reduce downloads.",
    )


class ReadonlyLayers(BaseModel):
    """
    Read-only layers as the features are always retrieved from the server.
    """

    model_config = common_config
    download_attachments: bool | None = Field(
        True,
        alias="downloadAttachments",
        description="Indicates whether to include attachments with the read-only data.",
    )


class BasemapGallery(BaseModel):
    """
    This object displays a collection of basemaps. The basemaps are derived from the organization's basemap group.
    """

    model_config = common_config
    enabled: bool | None = Field(
        None, description="Indicates whether to display the basemapGallery."
    )


class Measure(BaseModel):
    """
    Measure tool setting for the application properties.
    """

    model_config = common_config
    enabled: bool | None = Field(
        None, description="Indicates if the measuring tool is enabled."
    )


class Routing(BaseModel):
    """
    The routing setting for the applicationProperties that will leverage the route service configured for your Portal.
    """

    model_config = common_config

    enabled: bool | None = Field(
        None, description="Indicates whether to set the route service."
    )


class LayerType(Enum):
    """
    String indicating the layer type.
    """

    bing_maps_aerial = "BingMapsAerial"
    bing_maps_hybrid = "BingMapsHybrid"
    bing_maps_road = "BingMapsRoad"


class EnterExitRule(Enum):
    """
    The rule that determines whether a fence polygon has been entered or exited by the geometry from a feed. If this value is 'enterIntersectsAndExitDoesNotIntersect', a fence polygon is entered when it intersects a feed geometry and exited when it no longer intersects. If this value is 'enterContainsAndExitDoesNotContain', a fence polygon is entered when it contains a feed geometry and exited when it is no longer contained. If this value is 'enterContainsAndExitDoesNotIntersect' a fence polygon is entered when it contains a feed geometry and exited when it no longer intersects. If not set, the default behavior is `enterContainsAndExitDoesNotIntersect`. The 'feedAccuracyMode' must be set to 'useGeometryWithAccuracy' for this property to have an effect.
    """

    enter_contains_and_exit_does_not_contain = "enterContainsAndExitDoesNotContain"
    enter_contains_and_exit_does_not_intersect = "enterContainsAndExitDoesNotIntersect"
    enter_intersects_and_exit_does_not_intersect = (
        "enterIntersectsAndExitDoesNotIntersect"
    )


class FeedAccuracyMode(Enum):
    """
    Indicates how the geotrigger will use accuracy information from a feed. If this value is 'useGeometry', the reported geometry from a feed will be used. If this value is 'useGeometryWithAccuracy' the feed geometry will be used in conjunction with accuracy information. If not set, the default behavior is `useGeometry`.
    """

    use_geometry = "useGeometry"
    use_geometry_with_accuracy = "useGeometryWithAccuracy"


class FenceNotificationRule(Enum):
    """
    Indicates the type of event that will trigger notifications for the Fence Geotrigger. For example, a value of 'enter' will result in notifications when the geometry of the feed enters a fence polygon.
    """

    enter = "enter"
    enter_or_exit = "enterOrExit"
    exit = "exit"


class BlendMode(Enum):
    """
    Blend modes are used to create various effects by blending colors of top and background layers. `normal` blend mode is the default.
    """

    average = "average"
    color = "color"
    color_burn = "color-burn"
    color_dodge = "color-dodge"
    darken = "darken"
    destination_atop = "destination-atop"
    destination_in = "destination-in"
    destination_out = "destination-out"
    destination_over = "destination-over"
    difference = "difference"
    exclusion = "exclusion"
    hard_light = "hard-light"
    hue = "hue"
    invert = "invert"
    lighten = "lighten"
    lighter = "lighter"
    luminosity = "luminosity"
    minus = "minus"
    multiply = "multiply"
    normal = "normal"
    overlay = "overlay"
    plus = "plus"
    reflect = "reflect"
    saturation = "saturation"
    screen = "screen"
    soft_light = "soft-light"
    source_atop = "source-atop"
    source_in = "source-in"
    source_out = "source-out"
    vivid_light = "vivid-light"
    xor = "xor"


class BarrierWeight(Enum):
    """
    Optional weight of features in AnnotationLayers and DimensionLayers when considered as barriers to labeling. If not set but required, the default value is assumed to be High.
    """

    high = "High"
    low = "Low"
    medium = "Medium"
    none = "None"


class HtmlPopupType(Enum):
    """
    String value indicating the HTML popup type.
    """

    esri_server_html_popup_type_as_html_text = "esriServerHTMLPopupTypeAsHTMLText"
    esri_server_html_popup_type_as_url = "esriServerHTMLPopupTypeAsURL"
    esri_server_html_popup_type_none = "esriServerHTMLPopupTypeNone"


class LayerDefinitionType(Enum):
    """
    Indicates whether the layerDefinition applies to a Feature Layer or a Table.
    """

    feature_layer = "Feature Layer"
    table = "Table"


class LocationInfo(BaseModel):
    """
    Defines how location information will be retrieved from a [CSV](csvLayer.md) file referenced through the web, ie. referenced by URL.
    """

    model_config = common_config
    latitude_field_name: str = Field(
        ...,
        alias="latitudeFieldName",
        description="A string defining the field name that holds the latitude (Y) coordinate.",
    )
    location_type: Literal["coordinates"] = Field(
        "coordinates",
        alias="locationType",
        description="String value indicating location type.",
    )
    longitude_field_name: str = Field(
        ...,
        alias="longitudeFieldName",
        description="A string defining the field name that holds the longitude (X) coordinate.",
    )


class SimpleLineSymbolStyle(Enum):
    """
    String value representing the simple line symbol type.
    """

    esri_sls_dash = "esriSLSDash"
    esri_sls_dash_dot = "esriSLSDashDot"
    esri_sls_dash_dot_dot = "esriSLSDashDotDot"
    esri_sls_dot = "esriSLSDot"
    esri_sls_long_dash = "esriSLSLongDash"
    esri_sls_long_dash_dot = "esriSLSLongDashDot"
    esri_sls_null = "esriSLSNull"
    esri_sls_short_dash = "esriSLSShortDash"
    esri_sls_short_dash_dot = "esriSLSShortDashDot"
    esri_sls_short_dash_dot_dot = "esriSLSShortDashDotDot"
    esri_sls_short_dot = "esriSLSShortDot"
    esri_sls_solid = "esriSLSSolid"


class PictureMarkerSymbolEsriPMS(BaseModel):
    """
    Picture marker symbols can be used to symbolize point geometries.
    """

    model_config = common_config
    angle: confloat(ge=0.0, le=360.0) | None = Field(
        None,
        description="Numeric value that defines the number of degrees ranging from 0-360, that a marker symbol is rotated. The rotation is from East in a counter-clockwise direction where East is the 0� axis.",
    )
    content_type: str | None = Field(
        None,
        alias="contentType",
        description="String value indicating the content type for the image.",
    )
    height: float | None = Field(
        None,
        description="Numeric value used if needing to resize the symbol. Specify a value in points. If images are to be displayed in their original size, leave this blank.",
    )
    image_data: str | None = Field(
        None,
        alias="imageData",
        description="String value indicating the base64 encoded data.",
    )
    type: Literal["esriPMS"] = Field(
        "esriPMS", description="Specifies the type of symbol used."
    )
    url: str | None = Field(
        None,
        description="String value indicating the URL of the image. The URL should be relative if working with static layers. A full URL should be used for map service dynamic layers. A relative URL can be dereferenced by accessing the map layer image resource or the feature layer image resource.",
    )
    width: float | None = Field(
        None,
        description="Numeric value used if needing to resize the symbol. Specify a value in points. If images are to be displayed in their original size, leave this blank.",
    )
    xoffset: float | None = Field(
        None,
        description="Numeric value indicating the offset on the x-axis in points.",
    )
    yoffset: float | None = Field(
        None,
        description="Numeric value indicating the offset on the y-axis in points.",
    )


class SimpleFillSymbolStyle(Enum):
    """
    String value representing the simple fill symbol type.
    """

    esri_sfs_backward_diagonal = "esriSFSBackwardDiagonal"
    esri_sfs_cross = "esriSFSCross"
    esri_sfs_diagonal_cross = "esriSFSDiagonalCross"
    esri_sfs_forward_diagonal = "esriSFSForwardDiagonal"
    esri_sfs_horizontal = "esriSFSHorizontal"
    esri_sfs_null = "esriSFSNull"
    esri_sfs_solid = "esriSFSSolid"
    esri_sfs_vertical = "esriSFSVertical"


class MosaicMethod(Enum):
    """
    A string value that determines how the selected rasters are ordered.
    """

    esri_mosaic_attribute = "esriMosaicAttribute"
    esri_mosaic_center = "esriMosaicCenter"
    esri_mosaic_lock_raster = "esriMosaicLockRaster"
    esri_mosaic_nadir = "esriMosaicNadir"
    esri_mosaic_none = "esriMosaicNone"
    esri_mosaic_northwest = "esriMosaicNorthwest"
    esri_mosaic_seamline = "esriMosaicSeamline"
    esri_mosaic_viewpoint = "esriMosaicViewpoint"


class MosaicOperation(Enum):
    """
    Use the mosaic operation to resolve overlap pixel values: from first or last raster, use the min, max or mean of the pixel values, or blend them.
    """

    mt_blend = "MT_BLEND"
    mt_first = "MT_FIRST"
    mt_last = "MT_LAST"
    mt_max = "MT_MAX"
    mt_mean = "MT_MEAN"
    mt_min = "MT_MIN"
    mt_sum = "MT_SUM"


class GraphType(Enum):
    """
    Indicates the type of graph object.
    """

    entity = "entity"
    relationship = "relationship"


class ThematicGroup(BaseModel):
    """
    ThematicGroup is specifically for working with [ArcGISMapServiceLayer layer types](mapServiceLayer.md) that reference Esri's [demographic services](http://doc.arcgis.com/en/esri-demographics/). Since these services have multiple fields and layers, the `thematicGroup` provides a subset to use.
    """

    model_config = common_config

    field_names: list[str] | None = Field(
        None,
        alias="fieldNames",
        description="An array of string values indicating all the fields used within the webmap. All other fields can be disregarded and should not display in any field selection list.",
    )
    layer_ids: list[int] | None = Field(
        None,
        alias="layerIds",
        description="A zero-based array of integers indicating the layers to be used in the webmap. NOTE: All other layers should not be added to the TOC and may or may not be visible on the map as reference layers.",
    )
    name: str | None = Field(
        None,
        description="String property indicating the name for the thematic grouping of layers.",
    )


class OrientedImageryType(Enum):
    """
    String that defines the imagery type used in the particular Oriented Imagery Layer.
    """

    field_360 = "360"
    horizontal = "horizontal"
    inspection = "inspection"
    nadir = "nadir"
    oblique = "oblique"


class TimeUnit(Enum):
    """
    Defines the unit of time used in the viewer's time selector tool. Images will be filtered in the viewer based on the Time Unit value defined here.
    """

    days = "days"
    hours = "hours"
    minutes = "minutes"
    months = "months"
    weeks = "weeks"
    years = "years"


class VerticalMeasurementUnit(Enum):
    """
    Defines the primary unit to be used for all vertical measurements.
    """

    feet = "feet"
    meter = "meter"


class DimensionalDefinition(BaseModel):
    """
    The dimensional definition defines a display filter based on one variable and one dimension. It is typically used when filtering data based on slices or ranges in one or more dimensions with [mosaicRule.description](mosaicRule.md). If the [multidimensionalSubset](multidimensionalSubset.md) is defined on the [TiledImageServiceLayer](tiledImageServiceLayer_schema.md) or the [mosaicRule](mosaicRule.md) then the multidimensionalDefinition must be within the defined multidimensionalSubset, otherwise nothing will be displayed.
    """

    model_config = common_config
    dimension_name: str | None = Field(
        None,
        alias="dimensionName",
        description="Type of dimension being used (ex. StdTime).",
    )
    is_slice: bool | None = Field(None, alias="isSlice", description="Is slice?")
    values: list[float] | None = Field(
        None, description="Numerical array of associated values."
    )
    variable_name: str | None = Field(
        None, alias="variableName", description="Name of the variable."
    )


class Format(Enum):
    """
    Image format of the cached tiles.
    """

    bmp = "bmp"
    emf = "emf"
    gif = "gif"
    jpg = "jpg"
    lerc = "lerc"
    mixed = "mixed"
    pdf = "pdf"
    png = "png"
    png24 = "png24"
    png32 = "png32"
    png8 = "png8"
    ps = "ps"
    svg = "svg"
    svgz = "svgz"


class WebMapTileServiceInfo(BaseModel):
    """
    Object defines and provides information about layers in a [WMTSLayer](webTiledLayer.md) service.
    """

    model_config = common_config
    custom_layer_parameters: dict[constr(pattern=r".*"), str] | None = Field(
        None,
        alias="customLayerParameters",
        description="A sequence of parameters used to append different custom parameters to a WMTS tile request. These parameters are applied to `GetTile`. The `customLayerParameters` property takes precedence if `customParameters` is also present.",
    )
    custom_parameters: dict[constr(pattern=r".*"), str] | None = Field(
        None,
        alias="customParameters",
        description="A sequence of parameters used to append custom parameters to all WMTS requests. These parameters are applied to `GetCapabilities` and `GetTile`. If used with the `customLayerParameters` property, `customParameters` will not take precedence.",
    )
    layer_identifier: str | None = Field(
        None,
        alias="layerIdentifier",
        description="Identifier for the specific layer used in the WMTS service. Required input by the user.",
    )
    tile_matrix_set: str | None = Field(
        None,
        alias="tileMatrixSet",
        description="Tiling schema, set by the WMTS service.",
    )
    url: str | None = Field(
        None,
        description="URL to the WMTS web service. Required input by the user.",
    )


class WebFeatureServiceInfo(BaseModel):
    """
    Object that defines and provides information about layers in a WFS service.
    """

    model_config = common_config
    custom_parameters: dict[constr(pattern=r".*"), str] | None = Field(
        None,
        alias="customParameters",
        description="A sequence of parameters used to append custom parameters to all WFS requests. These parameters are applied to `GetCapabilities`, `DescribeFeatureType`, and `GetFeatures`.",
    )
    feature_url: str | None = Field(
        None,
        alias="featureUrl",
        description="URL of the WFS service operation.",
    )
    max_features: int | None = Field(
        None,
        alias="maxFeatures",
        description="Set this to limit the number of requested features that a GetFeature request presents.",
    )
    name: str | None = Field(
        None,
        description="The name of the WFS layer. This is used to set layer visibility.",
    )
    supported_spatial_references: list[int] | None = Field(
        None,
        alias="supportedSpatialReferences",
        description="List of supported spatial reference IDs",
    )
    swap_xy: bool | None = Field(
        False,
        alias="swapXY",
        description="Boolean value indicating whether X and Y axis are flipped.",
    )
    version: str | None = Field(
        None,
        description="Value indicating which version of the WFS specification is used.",
    )
    wfs_namespace: str | None = Field(
        None,
        alias="wfsNamespace",
        description="String indicating namespace.",
    )


class WMSLayerLayer(BaseModel):
    """
    A layer object may allow overrides on popup content and drawing behavior for individual layers of a web service.
    """

    model_config = common_config
    legend_url: str | None = Field(
        None,
        alias="legendUrl",
        description="A string URL to a legend graphic for the layer.",
    )
    name: str | None = Field(
        None, description="A string containing a unique name for the layer."
    )
    queryable: bool | None = Field(
        None,
        description="Boolean specifying whether a layer is queryable or not.",
    )
    show_popup: bool | None = Field(
        None,
        alias="showPopup",
        description="Boolean specifying whether to display popup or not.",
    )
    time_animation: bool | None = Field(
        True,
        alias="timeAnimation",
        description="Boolean specifying whether to animate time or not.",
    )
    title: str | None = Field(
        None,
        description="A user-friendly string title for the layer that can be used in a table of contents.",
    )


class Title(BaseModel):
    """
    <em>Deprecated.</em> Text and formatting for the title of the individual presentation slide
    """

    model_config = common_config
    background_color: list[conint(ge=0, le=255)] | None = Field(
        None,
        alias="backgroundColor",
        description="Background color is represented as a four-element array. The four elements represent values for red, green, blue, and alpha in that order. Values range from 0 through 255. If color is undefined for a symbol, the color value is null.",
        title="color",
    )
    border_color: list[conint(ge=0, le=255)] | None = Field(
        None,
        alias="borderColor",
        description="Background color is represented as a four-element array. The four elements represent values for red, green, blue, and alpha in that order. Values range from 0 through 255. If color is undefined for a symbol, the color value is null.",
        title="color",
    )
    border_size: float | None = Field(
        None, alias="borderSize", description="The sizing of the border."
    )
    font: str | None = Field(None, description="The font style picked for the title.")
    font_size: float | None = Field(
        None,
        alias="fontSize",
        description="The size of the font for the text in the title.",
    )
    foreground_color: list[conint(ge=0, le=255)] | None = Field(
        None,
        alias="foregroundColor",
        description="Background color is represented as a four-element array. The four elements represent values for red, green, blue, and alpha in that order. Values range from 0 through 255. If color is undefined for a symbol, the color value is null.",
        title="color",
    )
    horizontal_alignment: float | None = Field(
        None,
        alias="horizontalAlignment",
        description="The alignment of the text box.",
    )
    opacity: float | None = Field(
        None, description="The opacity of background and border."
    )
    text: str | None = Field(None, description="Text to display as titles for slide.")
    title_font_style: confloat(ge=1.0, le=7.0) | None = Field(
        None, alias="titleFontStyle", description="A number between 1 and 7."
    )


class VisibleLayer(BaseModel):
    """
    <em>Deprecated.</em> An array of numbers indicating layer visibility.
    """

    model_config = common_config
    feature_visibility: list[list[int]] | None = Field(
        None, alias="featureVisibility", description="An array of arrays."
    )
    id: str | None = Field(
        None,
        description="The id of the layer as listed on the operational layer.",
    )
    sub_layer_ids: list[int] | None = Field(
        None, alias="subLayerIds", description="An array of integers."
    )


class Info(BaseModel):
    """
    An object containing additional information specifying layer and update interval time used in the [locationTracking](locationTracking.md) object.
    """

    model_config = common_config
    layer_id: str | None = Field(
        None,
        alias="layerId",
        description="A string value indicating the given layer id specified in the web map.",
    )
    update_interval: str | None = Field(
        "300",
        alias="updateInterval",
        description="A numeric value indicating the time interval used to update the feature service. Default value is 300 seconds.",
    )


class EffectFunctionsType(Enum):
    """
    Effect type.
    """

    brightness = "brightness"
    contrast = "contrast"
    grayscale = "grayscale"
    invert = "invert"
    opacity = "opacity"
    saturate = "saturate"
    sepia = "sepia"


class EffectFunctions(BaseModel):
    """
    Effect functions `brightness`, `contrast`, `grayscale`, `invert`, `opacity`, `saturate`, and `sepia`
    """

    model_config = common_config
    amount: float = Field(
        ...,
        description="Amount of effect. A value of 0 leaves the input unchanged. `grayscale`, `invert`, `sepia`, and `opacity` effects accept a maximum `amount` of 1 which applies the effect at 100%. `brightness`, `contrast`, and `saturate` can accept amount above 1. Negative values are not allowed.",
    )
    type: EffectFunctionsType = Field(..., description="Effect type.")


class EffectFunctions1(BaseModel):
    """
    Effect function `hue-rotate`
    """

    model_config = common_config
    angle: float = Field(
        ...,
        description="The relative change in hue as an angle in degree. A value of 0 leaves the input unchanged. A positive hue rotation increases the hue value, while a negative one decreases the hue value.",
    )
    type: Literal["hue-rotate"] = Field("hue-rotate", description="Effect type.")


class EffectFunctions2(BaseModel):
    """
    Effect function `blur`
    """

    model_config = common_config
    radius: float = Field(
        ...,
        description="The radius of the blur in points. It defines the value of the standard deviation to the Gaussian function. Negative values are not allowed.",
    )
    type: Literal["blur"] = Field("blur", description="Effect type.")


class EffectFunctions3(BaseModel):
    """
    Effect function `drop-shadow`
    """

    model_config = common_config
    blur_radius: float = Field(
        ...,
        alias="blurRadius",
        description="The radius of the blur in points. It defines the value of the standard deviation to the Gaussian function.",
    )
    color: list[conint(ge=0, le=255)] = Field(
        ...,
        description="Color is represented as a four-element array. The four elements represent values for red, green, blue, and alpha in that order. Values range from 0 through 255.",
        title="color",
    )
    type: Literal["drop-shadow"] = Field("drop-shadow", description="Effect type.")
    xoffset: float = Field(
        ...,
        description="The distance of the shadow on the x-axis in points.",
    )
    yoffset: float = Field(
        ...,
        description="The distance of the shadow on the y-axis in points.",
    )


class EffectFunctions4(BaseModel):
    """
    Effect function `bloom`
    """

    model_config = common_config
    radius: float = Field(
        ...,
        description="Determines the radius of the blur. Negative values are not allowed. Leaves the pixels inside the radius untouched.",
    )
    strength: float = Field(
        ...,
        description="The intensity of the bloom effect. The higher the value, the brighter the glow. Negative values are not allowed.",
    )
    threshold: float = Field(
        ...,
        description="The mininum color luminosity for a pixel to bloom, where at 0 all pixels bloom and 1 only the pixels with 100% luminosity colors bloom.",
    )
    type: Literal["bloom"] = Field("bloom", description="Effect type.")


class ScaleDependentEffect(BaseModel):
    """
    An object describing the effect to apply at a scale stop
    """

    model_config = common_config
    scale: float = Field(
        ...,
        description="The scale of the view for the effect to take place.",
    )
    value: list[
        EffectFunctions
        | EffectFunctions1
        | EffectFunctions2
        | EffectFunctions3
        | EffectFunctions4
    ] = Field(
        ...,
        description="The effect to be applied at the corresponding scale.",
    )


class FilterMode(Enum):
    """
    Display filter mode.
    """

    manual = "manual"
    scale = "scale"


class FieldOverride(BaseModel):
    """
    Defines overridden properties on a field for a specific view of the data.
    """

    model_config = common_config
    alias: str | None = Field(
        None, description="A string containing the overridden field alias."
    )
    editable: bool | None = Field(
        None,
        description="A Boolean determining whether users can edit this field.",
    )
    name: str | None = Field(
        None,
        description="A string containing the field name as defined by the service.",
    )


class FieldType(Enum):
    """
    A string defining the field type.
    """

    esri_field_type_big_integer = "esriFieldTypeBigInteger"
    esri_field_type_blob = "esriFieldTypeBlob"
    esri_field_type_date = "esriFieldTypeDate"
    esri_field_type_date_only = "esriFieldTypeDateOnly"
    esri_field_type_double = "esriFieldTypeDouble"
    esri_field_type_geometry = "esriFieldTypeGeometry"
    esri_field_type_global_id = "esriFieldTypeGlobalID"
    esri_field_type_guid = "esriFieldTypeGUID"
    esri_field_type_integer = "esriFieldTypeInteger"
    esri_field_type_oid = "esriFieldTypeOID"
    esri_field_type_raster = "esriFieldTypeRaster"
    esri_field_type_single = "esriFieldTypeSingle"
    esri_field_type_small_integer = "esriFieldTypeSmallInteger"
    esri_field_type_string = "esriFieldTypeString"
    esri_field_type_time_only = "esriFieldTypeTimeOnly"
    esri_field_type_timestamp_offset = "esriFieldTypeTimestampOffset"
    esri_field_type_xml = "esriFieldTypeXML"


class FloorInfo(BaseModel):
    """
    Contains floor-awareness information for a layer.
    """

    model_config = common_config
    floor_field: str = Field(
        ...,
        alias="floorField",
        description="The name of the attribute field that contains a floor's level ID used for floor filtering.",
    )


class Order(Enum):
    """
    Indicates whether features are sorted in ascending or descending order of the field values.
    """

    asc = "asc"
    desc = "desc"


class OrderByField(BaseModel):
    """
    Object defining the display order of features or records based on a field value, and whether they should be sorted in ascending or descending order.
    """

    model_config = common_config
    field: str = Field(
        ...,
        description="Name of a field. The value of this field will drive the sorting.",
    )
    order: Order = Field(
        ...,
        description="Indicates whether features are sorted in ascending or descending order of the field values.",
    )


class RangeInformation(BaseModel):
    """
    Range Information.
    """

    model_config = common_config
    current_range_extent: list[float] | None = Field(
        None,
        alias="currentRangeExtent",
        description="Contains the min and max values within which the features are visible.",
        max_length=2,
        min_length=2,
    )
    field: str = Field(..., description="Field name to used for the range.")
    full_range_extent: list[float] | None = Field(
        None,
        alias="fullRangeExtent",
        description="Contains the min and max values of all the features for this rangeInfo.",
        max_length=2,
        min_length=2,
    )
    name: str = Field(
        ...,
        description="A unique name that can be referenced by webMap.activeRanges.",
    )
    type: Literal["rangeInfo"] = Field("rangeInfo", description="Type of range object.")


class DrawingTool(Enum):
    """
    An optional string that can define a client-side drawing tool to be used with this feature. For example, map notes used by the Online Map Viewer use this to represent the viewer's different drawing tools.
    """

    esri_feature_edit_tool_auto_complete_polygon = (
        "esriFeatureEditToolAutoCompletePolygon"
    )
    esri_feature_edit_tool_circle = "esriFeatureEditToolCircle"
    esri_feature_edit_tool_down_arrow = "esriFeatureEditToolDownArrow"
    esri_feature_edit_tool_ellipse = "esriFeatureEditToolEllipse"
    esri_feature_edit_tool_freehand = "esriFeatureEditToolFreehand"
    esri_feature_edit_tool_left_arrow = "esriFeatureEditToolLeftArrow"
    esri_feature_edit_tool_line = "esriFeatureEditToolLine"
    esri_feature_edit_tool_none = "esriFeatureEditToolNone"
    esri_feature_edit_tool_point = "esriFeatureEditToolPoint"
    esri_feature_edit_tool_polygon = "esriFeatureEditToolPolygon"
    esri_feature_edit_tool_rectangle = "esriFeatureEditToolRectangle"
    esri_feature_edit_tool_right_arrow = "esriFeatureEditToolRightArrow"
    esri_feature_edit_tool_text = "esriFeatureEditToolText"
    esri_feature_edit_tool_triangle = "esriFeatureEditToolTriangle"
    esri_feature_edit_tool_up_arrow = "esriFeatureEditToolUpArrow"


class TimeIntervalUnits(Enum):
    """
    Temporal unit in which the time interval is measured.
    """

    esri_time_units_centuries = "esriTimeUnitsCenturies"
    esri_time_units_days = "esriTimeUnitsDays"
    esri_time_units_decades = "esriTimeUnitsDecades"
    esri_time_units_hours = "esriTimeUnitsHours"
    esri_time_units_milliseconds = "esriTimeUnitsMilliseconds"
    esri_time_units_minutes = "esriTimeUnitsMinutes"
    esri_time_units_months = "esriTimeUnitsMonths"
    esri_time_units_seconds = "esriTimeUnitsSeconds"
    esri_time_units_unknown = "esriTimeUnitsUnknown"
    esri_time_units_weeks = "esriTimeUnitsWeeks"
    esri_time_units_years = "esriTimeUnitsYears"


class ReturnType(Enum):
    """
    Return type of the Arcade expression, can be a number or string. Defaults to string value. Number values are assumed to be `double`. This can be determined by the authoring client by executing the expression using a sample feature(s), although it can be corrected by the user. Knowing the `returnType` allows the authoring client to present fields in relevant contexts. For example, numeric fields in numeric contexts such as chart values.
    """

    number = "number"
    string = "string"


class PopupExpressionInfo(BaseModel):
    """
    Arcade expression added to the pop-up.
    """

    model_config = common_config
    expression: str | None = Field(None, description="The Arcade expression.")
    name: str | None = Field(None, description="Unique identifier for the expression.")
    return_type: ReturnType | None = Field(
        None,
        alias="returnType",
        description="Return type of the Arcade expression, can be a number or string. Defaults to string value. Number values are assumed to be `double`. This can be determined by the authoring client by executing the expression using a sample feature(s), although it can be corrected by the user. Knowing the `returnType` allows the authoring client to present fields in relevant contexts. For example, numeric fields in numeric contexts such as chart values.",
    )
    title: str | None = Field(None, description="Title of the expression.")


class StringFieldOption(Enum):
    """
    A string determining what type of input box editors see when editing the field. Applies only to string fields. Not applicable to Arcade expressions.
    """

    richtext = "richtext"
    textarea = "textarea"
    textbox = "textbox"


class LayerOptions(BaseModel):
    """
    Additional options available for the popup layer.
    """

    model_config = common_config
    return_topmost_raster: bool | None = Field(
        None,
        alias="returnTopmostRaster",
        description="Indicates whether or not only the topmost raster should be displayed.",
    )
    show_no_data_records: bool | None = Field(
        None,
        alias="showNoDataRecords",
        description="Indicates whether or not the NoData records should be displayed.",
    )


class MediaType(Enum):
    """
    A string defining the type of media.
    """

    barchart = "barchart"
    columnchart = "columnchart"
    image = "image"
    linechart = "linechart"
    piechart = "piechart"


class RelatedRecordsInfo(BaseModel):
    """
    Applicable only when [popupInfo](popupInfo.md) contains a [relationship content element](popupElement_relationship.md). This is needed for backward compatibility for some web maps.
    """

    model_config = common_config

    order_by_fields: list[OrderByField] | None = Field(
        None,
        alias="orderByFields",
        description="Array of orderByField objects indicating the field display order for the related records, and whether they should be sorted in ascending <code>'asc'</code> or descending <code>'desc'</code> order.",
    )
    show_related_records: bool | None = Field(
        None,
        alias="showRelatedRecords",
        description="Required boolean value indicating whether to display related records. If <code>true</code>, client should let the user navigate to the related records. Defaults to <code>true</code> if the layer participates in a relationship AND the related layer/table has already been added to the map (either as an operationalLayer or as a table).",
    )


class Group(BaseModel):
    """
    Specifies the type of groups available in the feature collection.
    """

    model_config = common_config
    group_id: int | None = Field(
        None,
        alias="groupId",
        description="A number that uniquely identifies a specific type of group",
    )
    group_type: Literal["pointSymbolCallout"] | None = Field(
        None,
        alias="groupType",
        description="Type of group in the feature collection.",
    )


class ArcadeReturnType(Enum):
    """
    Return type of the Arcade expression. This can be determined by the authoring client by executing the expression using a sample feature(s), although it can be corrected by the user.
    """

    boolean = "boolean"
    date = "date"
    date_only = "dateOnly"
    number = "number"
    string = "string"
    time = "time"


class FormExpressionInfo(BaseModel):
    """
    Arcade expression used in the form.
    """

    model_config = common_config
    expression: str | None = Field(None, description="The Arcade expression.")
    name: str | None = Field(None, description="Unique identifier for the expression.")
    return_type: ArcadeReturnType | None = Field(
        None,
        alias="returnType",
        description="Return type of the Arcade expression. This can be determined by the authoring client by executing the expression using a sample feature(s), although it can be corrected by the user.",
    )
    title: str | None = Field(None, description="Title of the expression.")


class GroupInitialState(Enum):
    """
    Defines if the group should be expanded or collapsed when the form is initially displayed. If not provided, the default value is `expanded`
    """

    collapsed = "collapsed"
    expanded = "expanded"


class FormRelationshipElement(BaseModel):
    """
    Defines how a relationship between feature layers and tables can participate in the form. When present in the form, the user may have the option to add or edit related records.
    """

    model_config = common_config
    description: str | None = Field(
        None, description="A string that describes the element in detail."
    )
    display_count: int | None = Field(
        None,
        alias="displayCount",
        description="An integer that indicates the maximum number of records to display.",
    )
    display_type: Literal["list"] = Field(
        "list",
        alias="displayType",
        description="A string that defines how the related records should be displayed.",
    )
    editable_expression: str | None = Field(
        None,
        alias="editableExpression",
        description="A reference to an Arcade expression that returns a boolean value. When this expression evaluates to `true`, the element is editable. When the expression evaluates to `false` the element is not editable. If the referenced related table is not editable, the editable expression is ignored and the element is not editable.",
    )
    label: str | None = Field(
        None,
        description="A string value indicating what the element represents.",
    )
    order_by_fields: list[OrderByField] | None = Field(
        None,
        alias="orderByFields",
        description="Array of orderByField objects indicating the display order for the related records, and whether they should be sorted in ascending <code>'asc'</code> or descending <code>'desc'</code> order.",
    )
    relationship_id: int = Field(
        ...,
        alias="relationshipId",
        description="The id of the relationship as defined in the feature layer definition",
    )
    type: Literal["relationship"] = Field(
        "relationship",
        description="String value indicating which type of element to use.",
    )
    visibility_expression: str | None = Field(
        None,
        alias="visibilityExpression",
        description="A reference to an Arcade expression that returns a boolean value. When this expression evaluates to `true`, the element is displayed. When the expression evaluates to `false` the element is not displayed. If no expression is provided, the default behavior is that the element is displayed.",
    )


class TextFormat(Enum):
    """
    Defines language of `text` property. Default is `plain-text`.
    """

    markdown = "markdown"
    plain_text = "plain-text"


class FormTextElement(BaseModel):
    """
    Configures read-only text in form elements.
    """

    model_config = common_config
    text: str = Field(
        ...,
        description="String value indicating the text to be displayed within the formTextElement.",
    )
    text_format: TextFormat | None = Field(
        TextFormat.plain_text,
        validate_default=True,
        alias="textFormat",
        description="Defines language of `text` property. Default is `plain-text`.",
    )
    type: Literal["text"] = Field(
        "text",
        description="String value indicating which type of element to use. Valid value of this property is `text`.",
    )
    visibility_expression: str | None = Field(
        None,
        alias="visibilityExpression",
        description="A reference to an Arcade expression that returns a boolean value. When this expression evaluates to `true`, the element is displayed. When the expression evaluates to `false` the element is not displayed. If no expression is provided, the default behavior is that the element is displayed.",
    )


class DeconflictionStrategy(Enum):
    """
    Specifies the approach to use for deconflicting labels with this class against existing, more important, labels. The option 'none' uses the preferred position and can overlap existing labels and features. The option 'static' uses the preferred position but will not overlap existing labels or features. The option 'dynamic' will try to find a position to avoid overlap of labels and features. The option 'dynamicNeverRemove' will choose the position that minimizes overlap of labels and features but can overlap them if necessary.
    """

    dynamic = "dynamic"
    dynamic_never_remove = "dynamicNeverRemove"
    none = "none"
    static = "static"


class LabelPlacement(Enum):
    """
    Preferred position of the label with respect to its feature symbology. If missing, then the default depends on the geometry of the feature: `esriServerPointLabelPlacementAboveRight` for point feature geometries, `esriServerLinePlacementAboveAlong` for line feature geometries, and `esriServerPolygonPlacementAlwaysHorizontal` for polygon feature geometries.
    """

    esri_server_line_placement_above_after = "esriServerLinePlacementAboveAfter"
    esri_server_line_placement_above_along = "esriServerLinePlacementAboveAlong"
    esri_server_line_placement_above_before = "esriServerLinePlacementAboveBefore"
    esri_server_line_placement_above_end = "esriServerLinePlacementAboveEnd"
    esri_server_line_placement_above_start = "esriServerLinePlacementAboveStart"
    esri_server_line_placement_below_after = "esriServerLinePlacementBelowAfter"
    esri_server_line_placement_below_along = "esriServerLinePlacementBelowAlong"
    esri_server_line_placement_below_before = "esriServerLinePlacementBelowBefore"
    esri_server_line_placement_below_end = "esriServerLinePlacementBelowEnd"
    esri_server_line_placement_below_start = "esriServerLinePlacementBelowStart"
    esri_server_line_placement_center_after = "esriServerLinePlacementCenterAfter"
    esri_server_line_placement_center_along = "esriServerLinePlacementCenterAlong"
    esri_server_line_placement_center_before = "esriServerLinePlacementCenterBefore"
    esri_server_line_placement_center_end = "esriServerLinePlacementCenterEnd"
    esri_server_line_placement_center_start = "esriServerLinePlacementCenterStart"
    esri_server_point_label_placement_above_center = (
        "esriServerPointLabelPlacementAboveCenter"
    )
    esri_server_point_label_placement_above_left = (
        "esriServerPointLabelPlacementAboveLeft"
    )
    esri_server_point_label_placement_above_right = (
        "esriServerPointLabelPlacementAboveRight"
    )
    esri_server_point_label_placement_below_center = (
        "esriServerPointLabelPlacementBelowCenter"
    )
    esri_server_point_label_placement_below_left = (
        "esriServerPointLabelPlacementBelowLeft"
    )
    esri_server_point_label_placement_below_right = (
        "esriServerPointLabelPlacementBelowRight"
    )
    esri_server_point_label_placement_center_center = (
        "esriServerPointLabelPlacementCenterCenter"
    )
    esri_server_point_label_placement_center_left = (
        "esriServerPointLabelPlacementCenterLeft"
    )
    esri_server_point_label_placement_center_right = (
        "esriServerPointLabelPlacementCenterRight"
    )
    esri_server_polygon_placement_always_horizontal = (
        "esriServerPolygonPlacementAlwaysHorizontal"
    )


class LineConnection(Enum):
    """
    Specifies the approach to use for connecting line labels with this class.  The option 'none' specifies that line connection should not be performed.  The option 'minimizeLabels' connects lines through intersections while 'unambiguousLabels' allows for labels on sides of intersections to clarify ambiguity with label and feature relationships.
    """

    minimize_labels = "minimizeLabels"
    none = "none"
    unambiguous_labels = "unambiguousLabels"


class LineOrientation(Enum):
    """
    String specifying whether `labelPlacement` of `Above` (or `Below`) will be interpreted as `Above` (or `Below`) on the `page`, or with respect to the direction of line's geometry (that is, the digitization order in which the vertices are listed). If the `lineOrientation` is set to `page`, then `labelPlacement` of `Above` means the label will be offset perpendicularly from its line segment towards the **top** of the page. If the `lineOrientation` is set to `direction`, then `labelPlacement` of `Above` means the label will be offset perpendicularly **left** from its line segment. If the `lineOrientation` is set to `unconstrained`, then the label will be offset perpendicularly to whichever side of the line geometry has space (defaulting to `Above`, in the `page` sense). `labelPlacement` of `Below` would have the corresponding interpretations.
    """

    direction = "direction"
    page = "page"
    unconstrained = "unconstrained"


class MultiPart(Enum):
    """
    Specifies the approach to use for labeling parts and segments of geometries.
    """

    label_largest = "labelLargest"
    label_per_feature = "labelPerFeature"
    label_per_part = "labelPerPart"
    label_per_segment = "labelPerSegment"


class RemoveDuplicates(Enum):
    """
    Specifies whether or not to remove duplicates and if removing duplicate labels whether or not to do it within just this label class, within all labels of that feature type (e.g. point layers) or across all layers. The removeDuplicatesDistance is used when a value other than none is set.
    """

    all = "all"
    feature_type = "featureType"
    label_class = "labelClass"
    none = "none"


class StackAlignment(Enum):
    """
    This string property indicates whether or not to derive stacking from the text symbol or have dynamic stacking based on the relative position of the label to the feature.
    """

    dynamic = "dynamic"
    text_symbol = "textSymbol"


class StackBreakPosition(Enum):
    """
    This string property indicates whether a row of text should be broken before or after it exceeds the ideal length. If stacking is turned on we can insert a linebreak `before` or `after` the breaking word that overruns the maximum number of characters per row. Using the `before` option means rows will generally be shorter than the stackRowLength although will overrun for individual words larger than this count.
    """

    after = "after"
    before = "before"


class TextLayout(Enum):
    """
    String describing, once the text is positioned, how the text should be oriented based on the feature geometry. If this property is present, it must be one of the following values: <ul><li>`followFeature`</li><li>`horizontal`</li><li>`perpendicular`</li><li>`straight`</li></ul><br>A value of `followFeature` will make the text curve to follow a line feature (e.g. road or river). A value of `horizontal` will make the text be written horizontally with respect to the page. A value of `straight` will make the text straight and angled depending on the feature geometry: (point) rotated by the specified angle, (line) placed at an angle that follows the line, (polygon) angled to represent the shape of the polygon. A value of `perpendicular` will make the text rotated 90 degrees clockwise from the angle it would have used for `straight`.<br>The default value is `horizontal` for labels attached to point and polygon features, and `followFeature` for labels attached to line features.
    """

    follow_feature = "followFeature"
    horizontal = "horizontal"
    perpendicular = "perpendicular"
    straight = "straight"


class Placement(Enum):
    """
    Indicates where the marker is placed.
    """

    begin = "begin"
    begin_end = "begin-end"
    end = "end"


class Marker(BaseModel):
    """
    Represents markers placed along the line. Markers will have the same color as the line, and their size will be proportional to the width of the line.
    """

    model_config = common_config
    placement: Placement | None = Field(
        None, description="Indicates where the marker is placed."
    )
    style: Literal["arrow"] | None = Field(None, description="Style of the marker.")


class PointGeometry(BaseModel):
    """
    Defines the JSON formats of the point and spatial reference objects.
    """

    model_config = common_config
    m: float | None = Field(
        None,
        description="M coordinate which contains measures used for linear referencing.",
    )
    spatial_reference: SpatialReference | None = Field(
        SpatialReference(wkid=102100, latestWkid=3857),
        alias="spatialReference",
        description="The spatial reference can be defined using a well-known ID (WKID) or well-known text (WKT).",
        title="spatialReference",
    )
    x: float | Literal["NaN"] | None = Field(
        ...,
        description="X coordinate which is measured along the east/west axis.",
    )
    y: float | None = Field(
        None,
        description="Y coordinate which is measured along the north/south axis.",
    )
    z: float | None = Field(
        None, description="Z coordinate which measures height or elevation."
    )


class PolygonGeometry(BaseModel):
    """
    A polygon contains an array of rings and a spatial reference.
    """

    model_config = common_config
    has_m: bool | None = Field(
        None,
        alias="hasM",
        description="Indicates whether the geometry contains M coordinate values.",
    )
    has_z: bool | None = Field(
        None,
        alias="hasZ",
        description="Indicates whether the geometry contains Z coordinate values.",
    )
    rings: list[list[list[Any]]] = Field(
        ...,
        description="Represents an array of points. Each point is an array of numbers.",
    )
    spatial_reference: SpatialReference | None = Field(
        SpatialReference(wkid=102100, latestWkid=3857),
        alias="spatialReference",
        description="The spatial reference can be defined using a well-known ID (WKID) or well-known text (WKT).",
        title="spatialReference",
    )


class FunctionType(Enum):
    """
    Defines whether the `function` is applied to a mosaic dataset. Indicates the level of the mosaic processing is used. Only applies to mosaic based image services. `0` - function is applied after mosaicking; `1` - function is applied on each raster item before mosaicking; `2` - function is applied to a group of raster items before mosaicking.
    """

    number_0 = 0
    number_1 = 1
    number_2 = 2


class Properties(BaseModel):
    """
    The properties used to define multidimensional dataset processing rules.
    """

    field_object_id: int | None = Field(None, alias="_object_id")
    type: str


class GeometryType(Enum):
    """
    The type of geometry.
    """

    esri_geometry_envelope = "esriGeometryEnvelope"
    esri_geometry_multipoint = "esriGeometryMultipoint"
    esri_geometry_point = "esriGeometryPoint"
    esri_geometry_polygon = "esriGeometryPolygon"
    esri_geometry_polyline = "esriGeometryPolyline"


class ControlPoint(BaseModel):
    """
    A location in pixels in the media of the [MediaLayer](mediaLayer.md). The origin is located at the top-left corner of the media.
    """

    model_config = common_config
    x: float = Field(
        ...,
        description="The X coordinate in pixels. The value must be between 0, and the width of the [georeference](mediaLayer_georeference_schema.md)",
    )
    y: float = Field(
        ...,
        description="The Y coordinate in pixels. The value must be between 0, and the height of the [georeference](mediaLayer_georeference_schema.md)",
    )


class OrientedImageryElevationSource(BaseModel):
    """
    Object defines the Digital Elevation Model (DEM) or a constant value to be used to compute the ground-to-image transformations for Oriented Imagery. The object defines properties to be used in the [OrientedImageryProperties](orientedImageryProperties.md) service.
    """

    model_config = common_config
    lod: float | None = Field(
        None,
        description="The scale in a tiling schema. The scale represents the zoom level value. Each successive level improves resolution and map scale by double when compared to the previous level. lod is applicable only when the url points to a tiled image service.",
    )
    raster_function: str | None = Field(
        None,
        alias="rasterFunction",
        description="The raster function processing template that can be applied to the image service.",
    )
    url: str = Field(
        ...,
        description="URL that references the input digital elevation model. A dynamic image service or a tile image service can be used as the digital elevation model.",
    )


class OrientedImageryElevationSource1(BaseModel):
    """
    Object defines the Digital Elevation Model (DEM) or a constant value to be used to compute the ground-to-image transformations for Oriented Imagery. The object defines properties to be used in the [OrientedImageryProperties](orientedImageryProperties.md) service.
    """

    model_config = common_config
    constant_elevation: float = Field(
        ...,
        alias="constantElevation",
        description="The constant ground elevation value for the entire dataset. The vertical measurement unit value will be used as the unit for constant elevation.",
    )


class Lod(BaseModel):
    model_config = common_config
    level: int | None = Field(None, description="ID for each level.")
    level_value: str | None = Field(
        None,
        alias="levelValue",
        description="String to be used when constructing URL to access a tile from this LOD.",
    )
    resolution: float | None = Field(
        None,
        description="Resolution in map units of each pixel in a tile for each level.",
    )
    scale: float | None = Field(None, description="Scale for each level.")


class CenterPoint(BaseModel):
    """
    <em>Deprecated.</em> The center X/Y point of the [mapLocation](mapLocation.md).
    """

    model_config = common_config
    spatial_reference: SpatialReference | None = Field(
        None,
        alias="spatialReference",
        description="The spatial reference can be defined using a well-known ID (WKID) or well-known text (WKT).",
        title="spatialReference",
    )
    x: float | None = Field(None, description="The X coordinate.")
    y: float | None = Field(None, description="The Y coordinate.")


class TimeStopInterval(BaseModel):
    """
    The interval set for the time slider widget.
    """

    model_config = common_config
    interval: float | None = Field(None, description="The length of the time interval.")
    units: TimeUnit | TimeIntervalUnits | None = Field(
        None, description="The units used to define the interval."
    )


class ExpressionInfo(BaseModel):
    """
    Defines a script expression that can be used to compute values. Depending on the context, the script may refer to external data which will be available when the expression is being evaluated.
    """

    model_config = common_config
    expression: str | None = Field(
        None,
        description="Optional expression in the [Arcade expression](https://developers.arcgis.com/arcade/) language. If no expression is provided, then the default empty expression produces a null, empty string, zero or false when evaluated (depending on usage and context).",
    )
    return_type: ArcadeReturnType | None = Field(
        ArcadeReturnType.string,
        validate_default=True,
        alias="returnType",
        description="Optional return type of the Arcade expression. Defaults to string value. Number values are assumed to be `double`. This can be determined by the authoring client by executing the expression using a sample feature, although it can be corrected by the user. Knowing the returnType allows the authoring client to present fields in relevant contexts. For example, numeric fields in numeric contexts such as charts.",
    )
    title: str | None = Field(
        None,
        description="Optional title of the expression. Typically used when presenting the expression to end-users e.g. in dialogs, table-of-contents or editing tools.",
    )


class FeatureCollectionSubLayerSource(BaseModel):
    """
    The source for a layer within a feature collection to be used as fences for Geotriggers. For example, data from a map notes or sketch layer.
    """

    model_config = common_config
    layer_id: str = Field(
        ...,
        alias="layerId",
        description="A unique identifying string that must match the `id` property of a feature layer, with a feature collection, in an associated map. The fence parameters will use the same underlying data as the feature collection sub-layer in the map.",
    )
    sub_layer_id: int = Field(
        ...,
        alias="subLayerId",
        description="A reference to a layer within the feature collection specified by `layerId`. This must match the `id` property within the `layerDefinition`.",
    )
    type: Literal["featureCollectionSubLayer"] = Field(
        "featureCollectionSubLayer",
        description="String indicating the type of source.",
    )


class FeatureLayerSource(BaseModel):
    """
    The source for a feature layer to be used as fences for Geotriggers. For example, data from an online feature service or offline geodatabase table.
    """

    model_config = common_config

    layer_id: str | None = Field(
        None,
        alias="layerId",
        description="A unique identifying string that must match the `id` property of a feature layer in an associated map. The fence parameters will use the same underlying data as the feature layer in the map.",
    )
    layer_url: str | None = Field(
        None,
        alias="layerUrl",
        description="For online data, a URL to a feature layer that will be used for all queries.",
    )
    table_path: constr(pattern=r"^file:.+\.geodatabase\?itemId=\d+$") | None = Field(
        None,
        alias="tablePath",
        description="For offline data, a path to a geodatabase file. A URI format is used starting with `file:` followed by a file system path with a `.geodatabase` extension. A query parameter `itemId` must also be present specifying the ID of a table in the geodatabase's `GDB_ServiceItems` table. A relative path must be from the file which defines the layer. For example `file:../p20/northamerica.geodatabase?itemId=1`.",
    )
    type: Literal["featureLayer"] = Field(
        "featureLayer", description="String indicating the type of source."
    )


class DisplayFilter(BaseModel):
    """
    Display filters information.
    """

    model_config = common_config
    id: str = Field(..., description="Display filter identifier.")
    max_scale: float | None = Field(
        0,
        alias="maxScale",
        description="Maximum scale up to which this display filter should be active and honored in the display. A value of 0 implies no maximum scale is specified.",
    )
    min_scale: float | None = Field(
        0,
        alias="minScale",
        description="Minimal scale up to which the display filter should be active and honored in the display. A value of 0 implies no minimum scale is specified.",
    )
    title: str | None = Field(
        None, description="Human-readable title for the display filter."
    )
    where: str | None = Field(
        None,
        description="SQL-based where clause that narrows the data to be rendered for display purposes. When this element is empty or missing all features will be rendered for this display filter.",
    )


class BinType(Enum):
    """
    Determines the type or shape of bins used in the aggregation.
    """

    flat_hexagon = "flatHexagon"
    geohash = "geohash"
    pointy_hexagon = "pointyHexagon"
    square = "square"


class DynamicMapLayer(BaseModel):
    """
    A dynamic map layer refers to a layer in the current map service. More information on this can be found in the [ArcGIS REST API help](http://resources.arcgis.com/en/help/rest/apiref/layersource.html).
    """

    model_config = common_config
    gdb_version: str | None = Field(
        None,
        alias="gdbVersion",
        description="If applicable, specify this to use an alternate geodatabase version.",
    )
    map_layer_id: int = Field(
        ..., alias="mapLayerId", description="The current map layer's id."
    )
    type: Literal["mapLayer"] = Field(
        "mapLayer", description="A string value indicating the type."
    )


class TimeInfoExportOptions(BaseModel):
    """
    The default time-related export options for a layer.
    """

    model_config = common_config
    time_data_cumulative: bool | None = Field(
        None,
        alias="timeDataCumulative",
        description="If true, draw all the features from the beginning of time for that data.",
    )
    time_offset: float | None = Field(
        None,
        alias="timeOffset",
        description="Time offset value for this layer so that it can be overlaid on the top of a previous or future time period.",
    )
    time_offset_units: TimeIntervalUnits | None = Field(
        None,
        alias="timeOffsetUnits",
        description="Temporal unit in which the time offset is measured.",
    )
    use_time: bool | None = Field(
        None,
        alias="useTime",
        description="If true, use the time extent specified by the time parameter.",
    )


class TimeReference(BaseModel):
    """
    Defines information about daylight savings time and the time zone in which data was collected.
    """

    model_config = common_config

    respects_daylight_saving: bool | None = Field(
        None,
        alias="respectsDaylightSaving",
        description="If true, dates will honor the daylight savings equivalent of 'timeZone'. This applies to certain 'timeZone' values only.",
    )
    time_zone: str | None = Field(
        None,
        alias="timeZone",
        description="The time zone in which the data was captured.",
    )
    time_zone_IANA: str | None = Field(
        None,
        alias="timeZoneIANA",
        description="The time zone in which the data was captured. Values are in IANA format.\nClients should use 'timeZoneIANA' over 'timeZone'/'respectsDaylightSaving'.",
    )


class DateFormat(Enum):
    """
    A string used with date fields to specify how the date should be formatted.
    """

    day_short_month_year = "dayShortMonthYear"
    day_short_month_year_long_time = "dayShortMonthYearLongTime"
    day_short_month_year_long_time24 = "dayShortMonthYearLongTime24"
    day_short_month_year_short_time = "dayShortMonthYearShortTime"
    day_short_month_year_short_time24 = "dayShortMonthYearShortTime24"
    long_date = "longDate"
    long_date_long_time = "longDateLongTime"
    long_date_long_time24 = "longDateLongTime24"
    long_date_short_time = "longDateShortTime"
    long_date_short_time24 = "longDateShortTime24"
    long_month_day_year = "longMonthDayYear"
    long_month_day_year_long_time = "longMonthDayYearLongTime"
    long_month_day_year_long_time24 = "longMonthDayYearLongTime24"
    long_month_day_year_short_time = "longMonthDayYearShortTime"
    long_month_day_year_short_time24 = "longMonthDayYearShortTime24"
    long_month_year = "longMonthYear"
    short_date = "shortDate"
    short_date_le = "shortDateLE"
    short_date_le_long_time = "shortDateLELongTime"
    short_date_le_long_time24 = "shortDateLELongTime24"
    short_date_le_short_time = "shortDateLEShortTime"
    short_date_le_short_time24 = "shortDateLEShortTime24"
    short_date_long_time = "shortDateLongTime"
    short_date_long_time24 = "shortDateLongTime24"
    short_date_short_time = "shortDateShortTime"
    short_date_short_time24 = "shortDateShortTime24"
    short_month_year = "shortMonthYear"
    year = "year"


class FieldInfoFormat(BaseModel):
    """
    The format object can be used with numerical or date fields to provide more detail about how values should be formatted for display.
    """

    model_config = common_config
    date_format: DateFormat | None = Field(
        None,
        alias="dateFormat",
        description="A string used with date fields to specify how the date should be formatted.",
    )
    digit_separator: bool | None = Field(
        None,
        alias="digitSeparator",
        description="A Boolean used with numerical fields. A value of true allows the number to have a digit (or thousands) separator. Depending on the locale, this separator is a decimal point or a comma. A value of false means that no separator will be used.",
    )
    places: int | None = Field(
        None,
        description="An integer used with numerical fields to specify the number of decimal places. Any places beyond this value are rounded.",
    )


class Value(BaseModel):
    """
    The value object contains information for popup windows about how images should be retrieved or charts constructed.
    """

    model_config = common_config
    colors: list[list[conint(ge=0, le=255)]] | None = Field(
        None,
        description="Used with charts. An optional array of colors where each `color` sequentially corresponds to a field in the `fields` property. When the value for `mediaInfo.type` is `linechart`, the first color in the array will drive the line color. If `colors` is longer than `fields`, unmatched colors are ignored. If `colors` is shorter than `fields` or `colors` isn't specified, a default color ramp is applied.",
    )
    fields: list[str] | None = Field(
        None,
        description="Used with charts. An array of strings, with each string containing the name of a field to display in the chart.",
    )
    link_url: str | None = Field(
        None,
        alias="linkURL",
        description="Used with images. A string containing a URL to be launched in a browser when a user clicks the image.",
    )
    normalize_field: str | None = Field(
        None,
        alias="normalizeField",
        description="Used with charts. An optional string containing the name of a field. The values of all fields in the chart will be normalized (divided) by the value of this field.",
    )
    source_url: str | None = Field(
        None,
        alias="sourceURL",
        description="Used with images. A string containing the URL to the image.",
    )
    tooltip_field: str | None = Field(
        None,
        alias="tooltipField",
        description="String value indicating the tooltip for a chart specified from another field. This field is needed when related records are not used. It is used for showing tooltips from another field in the same layer or related layer/table.",
    )


class DisplayType(Enum):
    """
    This property applies to elements of type `attachments`. A string value indicating how to display the attachment. If `list` is specified, attachments show as links. If `preview` is specified, attachments expand to the width of the pop-up. The default `auto` setting allows applications to choose the most suitable default experience.
    """

    auto = "auto"
    list = "list"
    preview = "preview"


class PopupElementAttachments(BaseModel):
    """
    Configures attachments in popup elements.
    """

    model_config = common_config
    description: str | None = Field(
        None,
        description="An optional string value describing the element in detail.",
    )
    display_type: DisplayType | None = Field(
        None,
        alias="displayType",
        description="This property applies to elements of type `attachments`. A string value indicating how to display the attachment. If `list` is specified, attachments show as links. If `preview` is specified, attachments expand to the width of the pop-up. The default `auto` setting allows applications to choose the most suitable default experience.",
    )
    title: str | None = Field(
        None,
        description="An optional string value indicating what the element represents.",
    )
    type: Literal["attachments"] = "attachments"


class PopupElementRelationship(BaseModel):
    """
    Provides the ability to navigate and view related records from a layer or table associated within the [pop-up](popupInfo.md).
    """

    model_config = common_config
    description: str | None = Field(
        None, description="A string that describes the element in detail."
    )
    display_count: int | None = Field(
        None,
        alias="displayCount",
        description="An integer that indicates the maximum number of records to display.",
    )
    display_type: Literal["list"] = Field(
        "list",
        alias="displayType",
        description="A string that defines how the related records should be displayed.",
    )
    order_by_fields: list[OrderByField] | None = Field(
        None,
        alias="orderByFields",
        description="Array of `orderByField` objects indicating the display order for the related records, and whether they should be sorted in ascending `'asc'` or descending `'desc'` order. If `orderByFields` is not provided, the popupElement will display whatever is specified directly in the `popupInfo.relatedRecordsInfo.orderByFields` property.",
    )
    relationship_id: int = Field(
        ...,
        alias="relationshipId",
        description="The id of the relationship as defined in the feature layer definition",
    )
    title: str | None = Field(
        None,
        description="A string value indicating what the element represents.",
    )
    type: Literal["relationship"] = Field(
        "relationship",
        description="String value indicating which type of element to use.",
    )


class PopupElementText(BaseModel):
    """
    Configures text in popup elements.
    """

    model_config = common_config
    text: str | None = Field(
        None,
        description="String value indicating the text to be displayed within the popupElement. If no `text` property is provided, the popupElement will display whatever is set in the [popupInfo.description](popupInfo.md) property.",
    )
    type: Literal["text"] = "text"


class AssociationType(Enum):
    connectivity = "connectivity"
    containment = "containment"
    structural = "structural"


class PopupElementUtilityNetworkAssociations(BaseModel):
    """
    Provides the ability to navigate and view associated objects from a layer or table associated within the [pop-up](popupInfo.md).
    """

    model_config = common_config

    associated_asset_group: int | None = Field(
        None,
        alias="associatedAssetGroup",
        description="The id of the asset group to filter utility network associations.",
    )
    associated_asset_type: int | None = Field(
        None,
        alias="associatedAssetType",
        description="The id of the asset type to filter utility network associations.",
    )
    associations_type: AssociationType | None = Field(
        ...,
        alias="associationsType",
        description="String value indicating which type of utility network associations to use.",
    )
    description: str | None = Field(
        None,
        description="A string that describes the element in detail.",
    )
    display_count: int | None = Field(
        None,
        alias="displayCount",
        description="An integer that indicates the maximum number of records to display.",
    )
    order_by_fields: list[OrderByField] | None = Field(
        None,
        alias="orderByFields",
        description="Array of `orderByField` objects indicating the display order for the related records, and whether they should be sorted in ascending `'asc'` or descending `'desc'` order. If `orderByFields` is not provided, the popupElement will display whatever is specified directly in the `popupInfo.relatedRecordsInfo.orderByFields` property.",
    )
    title: str | None = Field(
        None,
        description="A string value indicating what the element represents.",
    )
    type: Literal["utilityNetworkAssociations"] = Field(
        "utilityNetworkAssociations",
        description="String value indicating which type of element to use.",
    )


class Parameter(BaseModel):
    """
    Objects defined by a [definitionEditor](definitionEditor.md) input.
    """

    model_config = common_config
    default_value: float | str | None = Field(
        None,
        alias="defaultValue",
        description="The default value that is automatically given is nothing is provided.",
    )
    field_name: str | None = Field(
        None,
        alias="fieldName",
        description="A string value representing the name of the field to query.",
    )
    parameter_id: int | None = Field(
        None,
        alias="parameterId",
        description="Number given to uniquely identify the specified parameter.",
    )
    type: FieldType | None = Field(
        None, description="The field type for the specified field parameter."
    )
    utc_value: int | None = Field(
        None,
        alias="utcValue",
        description="An integer value representing exact UNIX time used when `defaultValue` is a date string.",
    )


class FormAttachmentInput(BaseModel):
    """
    Defines that any supported file can be attached.
    """

    model_config = common_config
    type: Literal["attachment"] = Field(
        "attachment", description="The input type identifier."
    )


class FormAudioInput(BaseModel):
    """
    Defines that an audio file can be attached.
    """

    model_config = common_config
    type: Literal["audio"] = Field("audio", description="The input type identifier.")


class FormDocumentInput(BaseModel):
    """
    Defines that a document file can be attached.
    """

    model_config = common_config
    type: Literal["document"] = Field(
        "document", description="The input type identifier."
    )


class FormImageInput(BaseModel):
    """
    Defines that an image file should be attached.
    """

    model_config = common_config
    type: Literal["image"] = Field("image", description="The input type identifier.")


class FormSignatureInput(BaseModel):
    """
    Defines that a signature should be captured and attached.
    """

    model_config = common_config
    type: Literal["signature"] = Field(
        "signature", description="The input type identifier."
    )


class FormVideoInput(BaseModel):
    """
    Defines that a video file should be attached.
    """

    model_config = common_config
    type: Literal["video"] = Field("video", description="The input type indentifier.")


class FormBarcodeScannerInput(BaseModel):
    """
    Defines the desired user interface is a barcode or QR code scanner. If the client does not support barcode scanning, a single-line text box should be used.
    """

    model_config = common_config
    max_length: int | None = Field(
        None,
        alias="maxLength",
        description="This represents the maximum number of characters allowed. This only applies for string fields. If not supplied, the value is derived from the length property of the referenced field in the service.",
    )
    min_length: int | None = Field(
        None,
        alias="minLength",
        description="This represents the minimum number of characters allowed. This only applies for string fields. If not supplied, the value is 0, meaning there is no minimum constraint.",
    )
    type: Literal["barcode-scanner"] = Field(
        "barcode-scanner", description="The input type identifier."
    )


class FormComboBoxInput(BaseModel):
    """
    Defines the desired user interface is a list of values in a drop-down that supports typing to filter. Only one value can be selected at a time.
    """

    model_config = common_config
    no_value_option_label: str | None = Field(
        None,
        alias="noValueOptionLabel",
        description="The text used to represent a null value.",
    )
    show_no_value_option: bool | None = Field(
        None,
        alias="showNoValueOption",
        description="This property only applies to fields that support null values. It indicates whether to display a null value option. If not provided, the default value is `true`.",
    )
    type: Literal["combo-box"] = Field(
        "combo-box", description="The input type identifier."
    )


class FormDatePickerInput(BaseModel):
    """
    Defines the desired user interface is a date picker.
    """

    model_config = common_config
    max: str | None = Field(
        None,
        description="The maximum date to allow. The number represents an ISO-8601 date.",
    )
    min: str | None = Field(
        None,
        description="The minimum date to allow. The number represents an ISO-8601 date.",
    )
    type: Literal["date-picker"] = Field(
        "date-picker", description="The input type identifier."
    )


class FormDatetimePickerInput(BaseModel):
    """
    Defines the desired user interface is a calendar date picker.
    """

    model_config = common_config
    include_time: bool | None = Field(
        None,
        alias="includeTime",
        description="Indicates if the datetime picker should provide an option to select the time. If not provided, the default value is `false`.",
    )
    max: int | None = Field(
        None,
        description="The maximum date to allow. The number represents the number of milliseconds since epoch (January 1, 1970) in UTC.",
    )
    min: int | None = Field(
        None,
        description="The minimum date to allow. The number represents the number of milliseconds since epoch (January 1, 1970) in UTC.",
    )
    type: Literal["datetime-picker"] = Field(
        "datetime-picker", description="The input type identifier."
    )


class FormRadioButtonsInput(BaseModel):
    """
    Defines the desired user interface is a radio button group.
    """

    model_config = common_config
    no_value_option_label: str | None = Field(
        None,
        alias="noValueOptionLabel",
        description="The text used to represent a null value.",
    )
    show_no_value_option: bool | None = Field(
        None,
        alias="showNoValueOption",
        description="This property only applies to fields that support null values. It indicates whether to display a null value option. If not provided, the default value is `true`.",
    )
    type: Literal["radio-buttons"] = Field(
        "radio-buttons", description="The input type identifier."
    )


class FormSwitchInput(BaseModel):
    """
    Defines a desired user interface to present a binary switch, or toggle. This should be used when selecting between two options.
    """

    model_config = common_config
    off_value: int | str = Field(
        ...,
        alias="offValue",
        description="The coded value when switch state is `off`.",
    )
    on_value: int | str = Field(
        ...,
        alias="onValue",
        description="The coded value when switch state is `on`.",
    )
    type: Literal["switch"] = Field("switch", description="The input type identifier.")


class FormTextAreaInput(BaseModel):
    """
    Defines the desired user interface is a multi-line text area.
    """

    model_config = common_config
    max_length: int | None = Field(
        None,
        alias="maxLength",
        description="This represents the maximum number of characters allowed. If not supplied, the value is derived from the length property of the referenced field in the service.",
    )
    min_length: int | None = Field(
        None,
        alias="minLength",
        description="This represents the minimum number of characters allowed. If not supplied, the value is 0, meaning there is no minimum constraint.",
    )
    type: Literal["text-area"] = Field(
        "text-area", description="The input type identifier."
    )


class FormTextBoxInput(BaseModel):
    """
    Defines the desired user interface is a single-line text box.
    """

    model_config = common_config
    max_length: int | None = Field(
        None,
        alias="maxLength",
        description="This represents the maximum number of characters allowed. This only applies for string fields. If not supplied, the value is derived from the length property of the referenced field in the service.",
    )
    min_length: int | None = Field(
        None,
        alias="minLength",
        description="This represents the minimum number of characters allowed. This only applies for string fields. If not supplied, the value is 0, meaning there is no minimum constraint.",
    )
    type: Literal["text-box"] = Field(
        "text-box", description="The input type identifier."
    )


class FormTimeInput(BaseModel):
    """
    Defines the desired user interface is a time picker.
    """

    model_config = common_config
    max: str | None = Field(
        None,
        description="The maximum time to allow. The number represents an extended ISO-8601 time.",
    )
    min: str | None = Field(
        None,
        description="The minimum time to allow. The number represents an extended ISO-8601 time.",
    )
    time_resolution: TimeUnit | None = Field(
        TimeUnit.minutes,
        validate_default=True,
        alias="timeResolution",
        description="The resolution identifier. If not specified default is 'minutes'.",
    )
    type: Literal["time-picker"] = Field(
        "time-picker", description="The input type identifier."
    )


class FormTimestampOffsetPickerInput(BaseModel):
    """
    Defines the desired user interface is a calendar date and time picker with a time offset.
    """

    model_config = common_config
    include_time_offset: bool | None = Field(
        True,
        alias="includeTimeOffset",
        description="Indicates if the timestampoffset picker should provide an option to select the timeoffset. If not provided, the default value is `true`.",
    )
    max: str | None = Field(
        None,
        description="The maximum timestampoffset to allow. The number represents an ISO-8601 date with a time offset.",
    )
    min: str | None = Field(
        None,
        description="The minimum timestampoffset to allow. The number represents an ISO-8601 date with a time offset.",
    )
    time_resolution: TimeUnit | None = Field(
        TimeUnit.minutes,
        validate_default=True,
        alias="timeResolution",
        description="The resolution identifier. If not specified default is 'minutes'.",
    )
    type: Literal["timestampoffset-picker"] = Field(
        "timestampoffset-picker", description="The input type identifier."
    )


class LabelOverlap(Enum):
    """
    String describing whether other labels are allowed to overlap this entity (e.g. feature or label already on the map).<br>`allow` means that labels are allowed to overlap this entity. `avoid` means that labels that would overlap will move as much possible to minimize the overlap. `exclude` means that labels that would overlap are not placed.
    """

    allow = "allow"
    avoid = "avoid"
    exclude = "exclude"


class FieldInfoLabelingInfo(BaseModel):
    """
    Defines how a field in the dataset is formatted when displayed as label on the map.
    """

    model_config = common_config
    field_name: str | None = Field(
        None,
        alias="fieldName",
        description="A string containing a field name as defined by the service.",
    )
    format: FieldInfoFormat | None = Field(
        None,
        description="An object specifying number or date formatting options.",
    )


class RotationType(Enum):
    """
    Optional specification of whether the placement angle calculated by the `angleExpressionInfo` should be interpreted as `arithmetic` (counter-clockwise from East) or `geographic` (clockwise from North).
    """

    arithmetic = "arithmetic"
    geographic = "geographic"


class LabelAngleInfo(BaseModel):
    """
    This object specifies the angular positions and layout directions for labels on or around point feature symbols. This may be different for each feature (driven by one or more feature attributes) or constant for all features (specified by a fixed number)
    """

    model_config = common_config
    angle_expression_info: ExpressionInfo = Field(
        ...,
        alias="angleExpressionInfo",
        description="This `expressionInfo` object allows specifies how the angle (in degrees) for a label is calculated from the feature attributes. It may use attributes, fixed numbers, or a combination of both. If missing, an angle value of zero is assumed.",
    )
    rotation_type: RotationType | None = Field(
        RotationType.arithmetic,
        validate_default=True,
        alias="rotationType",
        description="Optional specification of whether the placement angle calculated by the `angleExpressionInfo` should be interpreted as `arithmetic` (counter-clockwise from East) or `geographic` (clockwise from North).",
    )


class LabelExpressionInfo(BaseModel):
    """
    The labelExpressionInfo allows label text to be read similar to that of Popups's description property.
    """

    model_config = common_config
    expression: str | None = Field(
        None,
        description="An [Arcade expression](https://developers.arcgis.com/arcade/) evaluating to either a string or a number.",
    )
    title: str | None = Field(
        None, description="The title of the expression. (optional)"
    )
    value: str | None = Field(
        None,
        description="Represents a simple templated string. This property is deprecated as of version 2.7 of the web map in favor of `expression`.",
    )


class BreakPosition(Enum):
    """
    Optional property indicating whether a row of text should be broken before or after the character is encountered. We can insert a linebreak `before` or `after` the separator character. This is only useful if the separator character is visible after a linebreak is inserted. Using the `before` option means rows will generally be shorter than the stackRowLength although will overrun for individual words larger than this count. `automatic` will choose the appropriate default for each feature-geometry (currently `after` in all cases). This setting for an individual separator overrides the `labelingInfo.stackBreakPosition` property.
    """

    after = "after"
    automatic = "automatic"
    before = "before"


class LabelStackSeparator(BaseModel):
    """
    The `labelStackSeparator` object specifies a character that indicates where a linebreak may, or must, be inserted into  a text label.
    """

    model_config = common_config
    break_position: BreakPosition | None = Field(
        BreakPosition.after,
        validate_default=True,
        alias="breakPosition",
        description="Optional property indicating whether a row of text should be broken before or after the character is encountered. We can insert a linebreak `before` or `after` the separator character. This is only useful if the separator character is visible after a linebreak is inserted. Using the `before` option means rows will generally be shorter than the stackRowLength although will overrun for individual words larger than this count. `automatic` will choose the appropriate default for each feature-geometry (currently `after` in all cases). This setting for an individual separator overrides the `labelingInfo.stackBreakPosition` property.",
    )
    forced: bool | None = Field(
        False,
        description="Optional property describing whether a linebreak must be inserted, when the character is encountered.",
    )
    separator: str = Field(..., description="Single character (unicode codepoint).")
    visible: bool | None = Field(
        False,
        description="Optional property describing whether the character still be visible, if the character is used as a linebreak (e.g. keep a hyphenation mark vs hide a separator)",
    )


class HorizontalAlignment(Enum):
    """
    One of the following string values representing the horizontal alignment of the text.
    """

    center = "center"
    justify = "justify"
    left = "left"
    right = "right"


class VerticalAlignment(Enum):
    """
    One of the following string values representing the vertical alignment of the text.
    """

    baseline = "baseline"
    bottom = "bottom"
    middle = "middle"
    top = "top"


class ClassificationMethod(Enum):
    """
    Determines the classification method that was used to generate class breaks. This has been replaced by [authoringInfo](authoringInfo.md).
    """

    esri_classify_defined_interval = "esriClassifyDefinedInterval"
    esri_classify_equal_interval = "esriClassifyEqualInterval"
    esri_classify_geometrical_interval = "esriClassifyGeometricalInterval"
    esri_classify_manual = "esriClassifyManual"
    esri_classify_natural_breaks = "esriClassifyNaturalBreaks"
    esri_classify_quantile = "esriClassifyQuantile"
    esri_classify_standard_deviation = "esriClassifyStandardDeviation"


class NormalizationType(Enum):
    """
    Determine how the data was normalized.
    """

    esri_normalize_by_field = "esriNormalizeByField"
    esri_normalize_by_log = "esriNormalizeByLog"
    esri_normalize_by_percent_of_total = "esriNormalizeByPercentOfTotal"


class DictionaryRenderer(BaseModel):
    """
    A renderer where symbols are drawn from a dictionary style.
    """

    model_config = common_config
    configuration: dict[constr(pattern=r".*"), str] | None = Field(
        None,
        description="An object representing the configuration properties for a symbol.",
    )
    dictionary_name: str | None = Field(
        None,
        alias="dictionaryName",
        description="The name of the symbol dictionary.",
    )
    field_map: dict[constr(pattern=r".*"), str] | None = Field(
        None,
        alias="fieldMap",
        description="An object with key/ value pairs representing expected field name and actual field name.",
    )
    scaling_expression_info: ExpressionInfo | None = Field(
        None,
        alias="scalingExpressionInfo",
        description="Optional expression script object specifying the scaling ratio as a number. A return value of 1 means no scaling, a return value of 2 means scale 2 times etc. Absence of this object also results in no scaling. Expected return type from the Arcade expression is number",
    )
    type: Literal["dictionary"] = Field(
        "dictionary", description="Specifies the type of renderer used."
    )
    url: str = Field(..., description="The URL to dictionary web style.")


class FlowRepresentation(Enum):
    """
    Sets the flow direction of the data.
    """

    flow_from = "flow_from"
    flow_to = "flow_to"


class TrailCap(Enum):
    """
    The style of the streamline's cap. The 'round' cap will only be applied if trailWidth is greater than 3pts.
    """

    butt = "butt"
    round = "round"


class HillshadeType(Enum):
    """
    Use single (traditional), or multiple illumination sources to generate hillshade
    """

    multi_directional = "multi-directional"
    traditional = "traditional"


class ScalingType(Enum):
    """
    Apply a constant or adjusted z-factor based on resolution changes. The `adjusted` type is suitable for worldwide elevation dataset. An adjusted `zFactor` is determined using this equation: `Adjusted Z-Factor = (Z Factor) + (Pixel Size)` <sup>(Pixel Size Power)</sup> `x Pixel Size Factor`
    """

    adjusted = "adjusted"
    none = "none"


class StretchType(Enum):
    """
    The stretch types for stretch raster function.
    """

    histogram_equalization = "histogramEqualization"
    min_max = "minMax"
    none = "none"
    percent_clip = "percentClip"
    sigmoid = "sigmoid"
    standard_deviation = "standardDeviation"


class InputUnit(Enum):
    """
    Input unit for Magnitude.
    """

    esri_feet_per_second = "esriFeetPerSecond"
    esri_kilometers_per_hour = "esriKilometersPerHour"
    esri_knots = "esriKnots"
    esri_meters_per_second = "esriMetersPerSecond"
    esri_miles_per_hour = "esriMilesPerHour"


class OutputUnit(Enum):
    """
    Output unit for Magnitude.
    """

    esri_feet_per_second = "esriFeetPerSecond"
    esri_kilometers_per_hour = "esriKilometersPerHour"
    esri_knots = "esriKnots"
    esri_meters_per_second = "esriMetersPerSecond"
    esri_miles_per_hour = "esriMilesPerHour"


class VectorFieldRendererStyle(Enum):
    """
    A predefined style.
    """

    beaufort_ft = "beaufort_ft"
    beaufort_km = "beaufort_km"
    beaufort_kn = "beaufort_kn"
    beaufort_m = "beaufort_m"
    beaufort_mi = "beaufort_mi"
    classified_arrow = "classified_arrow"
    ocean_current_kn = "ocean_current_kn"
    ocean_current_m = "ocean_current_m"
    simple_scalar = "simple_scalar"
    single_arrow = "single_arrow"
    wind_speed = "wind_speed"


class RasterFunctionTemplateArguments(BaseModel):
    """
    Raster function template or raster function variable used as argument.
    """

    model_config = common_config
    field_object_id: int | None = Field(
        None,
        alias="_object_id",
        description="The id of the raster function template argument.",
    )
    type: str | None = Field(None, description="Type of the raster function argument.")


class RasterFunctionInformation(BaseModel):
    """
    Information about the `function` referenced in a raster function template.
    """

    model_config = common_config
    field_object_id: int | None = Field(
        None,
        alias="_object_id",
        description="Optional. The id of the raster function info.",
    )
    description: str | None = Field(
        None, description="Description of the raster function."
    )
    name: str = Field(
        ...,
        description="Name of the raster function used by the raster function template.",
    )
    pixel_type: PixelType = Field(
        ...,
        alias="pixelType",
        description="Pixel type of the output image processed by the raster function template.",
    )
    type: str = Field(
        ...,
        description="Type of the raster function used by the raster function template.",
    )


class MultipointGeometry(BaseModel):
    """
    Contains an array of points, along with a spatial reference field.
    """

    model_config = common_config
    has_m: bool | None = Field(
        None,
        alias="hasM",
        description="Indicates whether the geometry contains M coordinate values.",
    )
    has_z: bool | None = Field(
        None,
        alias="hasZ",
        description="Indicates whether the geometry contains Z coordinate values.",
    )
    points: list[list[float]] = Field(
        ..., description="An array that corresponds to 2D and 3D points."
    )
    spatial_reference: SpatialReference | None = Field(
        SpatialReference(wkid=102100, latestWkid=3857),
        alias="spatialReference",
        description="The spatial reference can be defined using a well-known ID (WKID) or well-known text (WKT).",
        title="spatialReference",
    )


class PolylineGeometry(BaseModel):
    """
    Contains an array of paths and a spatialReference.
    """

    model_config = common_config
    has_m: bool | None = Field(
        None,
        alias="hasM",
        description="Indicates whether the geometry contains M coordinate values.",
    )
    has_z: bool | None = Field(
        None,
        alias="hasZ",
        description="Indicates whether the geometry contains Z coordinate values.",
    )
    paths: list[list[list[Any]]] = Field(
        ..., description="Three nested arrays which correspond to a polyline"
    )
    spatial_reference: SpatialReference | None = Field(
        SpatialReference(wkid=102100, latestWkid=3857),
        alias="spatialReference",
        description="The spatial reference can be defined using a well-known ID (WKID) or well-known text (WKT).",
        title="spatialReference",
    )


class StatisticType(Enum):
    """
    Defines the statistic method for aggregating data in the onStatisticField or `onStatisticExpression` returned from features in a cluster or bin.
    """

    avg = "avg"
    count = "count"
    max = "max"
    min = "min"
    mode = "mode"
    stddev = "stddev"
    sum = "sum"
    var = "var"


class AggregateField(BaseModel):
    """
    Defines an aggregate field for use in FeatureReductionBinning or FeatureReductionCluster.
    """

    model_config = common_config
    alias: str | None = Field(
        None,
        description="The alias or text used to describe the aggregate field in the legend and popup.",
    )
    is_auto_generated: bool | None = Field(
        False,
        alias="isAutoGenerated",
        description="Only applicable to cluster renderers. A Boolean indicating whether the field was automatically created internally by the JS API's rendering engine for use by an inferred cluster renderer. Set it to `false` for fields manually created by the user. Default is `false`.",
    )
    name: str | None = Field(
        None,
        description="A unique name identifying the aggregate field. For clarity, this name could include the layer's field being aggregated as defined in onStatisticField along with the statisticType. For example, when creating a  field aggregating the values from a layer's 'population' field, you could name the field 'population_sum'.",
    )
    on_statistic_expression: ExpressionInfo | None = Field(
        None,
        alias="onStatisticExpression",
        description="Defines an [Arcade expression](https://developers.arcgis.com/arcade/) evaluating to either a string or a number. This expression typically originates from the source layer's renderer. A string may be returned when calculating 'mode', but a number must be returned for all other statistic types. The `returnType` and `expression` properties in this object are required, but `title` is optional. This may be used as an alternative to `onStatisticField` for aggregating data.",
    )
    on_statistic_field: str | None = Field(
        None,
        alias="onStatisticField",
        description="A field from the source layer to aggregate based on a given statistic type. Alternatively, you can aggregate data based on an Arcade expression in `onStatisticExpression`. If present, this value always takes precedent over `onStatisticExpression`.",
    )
    statistic_type: StatisticType | None = Field(
        None,
        alias="statisticType",
        description="Defines the statistic method for aggregating data in the onStatisticField or `onStatisticExpression` returned from features in a cluster or bin.",
    )


class FeatureReductionScaleVisibilityInfo(BaseModel):
    """
    Properties describing how to set the visible scale range for displaying the renderer in a feature reduction visualization.
    """

    model_config = common_config
    max_scale: confloat(ge=0.0) | None = Field(
        0,
        alias="maxScale",
        description="Integer describing the maximum scale at which the feature reduction renderer is displayed.",
    )
    type: Literal["scale"] = Field(
        "scale",
        description="Describes the threshold type for determining the visibility of the feature reduction renderer",
    )


class InheritedDomain(BaseModel):
    """
    This domain applies to domains on subtypes. It implies that the domain for a field at the subtype level is the same as the domain for the field at the layer level.
    """

    model_config = common_config
    type: Literal["inherited"] = Field(
        "inherited", description="String value representing the domain type."
    )


class RangeDomain(BaseModel):
    """
    Range domain specifies a range of valid values for a field.
    """

    model_config = common_config
    name: str | None = Field(None, description="The domain name.")
    range: list[float] = Field(
        ...,
        description="The first element is the minValue and the second element is the maxValue.",
        max_length=2,
        min_length=2,
    )
    type: Literal["range"] = Field(
        "range", description="String value representing the domain type."
    )


class PopupElementExpressionInfo(BaseModel):
    """
    An Arcade expression that defines the pop-up element content. The return type will always be a `dictionary` that defines the desired pop-up element as outlined [in the Arcade documentation](https://developers.arcgis.com/arcade/guide/profiles/#popup-element).
    """

    model_config = common_config
    expression: str = Field(..., description="The Arcade expression.")
    return_type: Literal["dictionary"] | None = Field(
        None,
        alias="returnType",
        description="Return type of the Arcade expression, the expected return is always `dictionary.`",
    )
    title: str | None = Field(None, description="Title of the expression.")


class Decoration(Enum):
    """
    The text decoration.
    """

    line_through = "line-through"
    none = "none"
    underline = "underline"


class TextStyle(Enum):
    """
    The text style.
    """

    italic = "italic"
    normal = "normal"
    oblique = "oblique"


class Weight(Enum):
    """
    The text weight.
    """

    bold = "bold"
    bolder = "bolder"
    lighter = "lighter"
    normal = "normal"


class Font(BaseModel):
    """
    Font used for text symbols
    """

    model_config = common_config
    decoration: Decoration | None = Field(None, description="The text decoration.")
    family: str | None = Field(None, description="The font family.")
    size: float | None = Field(None, description="The font size in points.")
    style: TextStyle | str | None = Field(None, description="The text style.")
    weight: Weight | None = Field(None, description="The text weight.")


class FlowTheme(Enum):
    """
    Theme to be used only when working with renderers of type `flow`.
    """

    flow_line = "flow-line"
    wave_front = "wave-front"


class Focus(Enum):
    """
    Optional. Used for Relationship renderer. If not set, the legend will default to being square.
    """

    hh = "HH"
    hl = "HL"
    lh = "LH"
    ll = "LL"


class StandardDeviationInterval(Enum):
    """
    Use this property if the classificationMethod is `esriClassifyStandardDeviation`.
    """

    number_0_25 = 0.25
    number_0_33 = 0.33
    number_0_5 = 0.5
    number_1 = 1


class AuthoringInfoType(Enum):
    classed_color = "classedColor"
    classed_size = "classedSize"
    dot_density = "dotDensity"
    flow = "flow"
    predominance = "predominance"
    relationship = "relationship"
    univariate_color_size = "univariateColorSize"


class UnivariateSymbolStyle(Enum):
    """
    Symbol style or symbol pair used when creating a renderer of type `univariateColorSize` with an `above-and-below` univariateTheme. The `custom` style indicates the renderer uses a custom symbol pair not provided by the authoring application.
    """

    arrow = "arrow"
    caret = "caret"
    circle = "circle"
    circle_arrow = "circle-arrow"
    circle_caret = "circle-caret"
    circle_plus_minus = "circle-plus-minus"
    custom = "custom"
    happy_sad = "happy-sad"
    plus_minus = "plus-minus"
    square = "square"
    thumb = "thumb"
    triangle = "triangle"


class UnivariateTheme(Enum):
    """
    Theme to be used only when working with renderers of type `univariateColorSize`.
    """

    above = "above"
    above_and_below = "above-and-below"
    below = "below"
    high_to_low = "high-to-low"


class LegendOrder(Enum):
    """
    Indicates the order in which the legend is displayed.
    """

    ascending_values = "ascendingValues"
    descending_values = "descendingValues"


class LegendOptions(BaseModel):
    """
    Options available for the legend.
    """

    model_config = common_config
    dot_label: str | None = Field(
        None,
        alias="dotLabel",
        description="The text that should be displayed in the legend for each dot. This will display next to the number 1. If not present, it will be a localized string for the word 'Dot'. Only applicable to dot density renderers.",
    )
    max_label: str | None = Field(
        None,
        alias="maxLabel",
        description="Text in the legend that describes the hottest (most dense) part of the heatmap. Only applicable to Heatmap renderers. If not specified, then a localized label, for 'High' will display on the legend.",
    )
    min_label: str | None = Field(
        None,
        alias="minLabel",
        description="Text in the legend that describes the coldest (least dense) part of the heatmap. Only applicable to Heatmap renderers. If not specified, then a localized label, for 'Low' will display on the legend.",
    )
    order: LegendOrder | None = Field(
        None,
        description="Indicates the order in which the legend is displayed.",
    )
    show_legend: bool | None = Field(
        None,
        alias="showLegend",
        description="Indicates whether to show the color/size/opacity ramp in the legend. **This property is not available directly under [uniqueValueRenderer](uniqueValueRenderer.md) and/or [classBreaksRenderer](classBreaksRenderer.md).**",
    )
    title: str | None = Field(None, description="The title of the legend.")
    unit: str | None = Field(
        None,
        description="Indicates the unit of the data being visualized in a dotDensity renderer. This will display next to the dot value in the title of the legend.",
    )


class AttributeColorInfo(BaseModel):
    """
    The following is a list of properties found on the attributeColorInfo object. This object defines colors used to represent numeric fields in a dotDensity renderer or a pieChart renderer.
    """

    model_config = common_config
    color: list[conint(ge=0, le=255)] = Field(
        ...,
        description="The color used to represent the field or valueExpression when rendering dots in a dotDensity renderer or slices in a pieChart renderer. Color is represented as a four-element array. The four elements represent values for red, green, blue, and alpha in that order. Values range from 0 through 255. If color is undefined for a symbol, the color value is null.",
        title="color",
    )
    field: str | None = Field(
        None, description="The name of a numeric attribute field."
    )
    label: str | None = Field(
        None,
        description="The label used to describe the field or attribute in the legend.",
    )
    value_expression: str | None = Field(
        None,
        alias="valueExpression",
        description="An [Arcade expression](https://developers.arcgis.com/arcade/) that computes a numeric value in lieu of a value provided by an attribute `field`.",
    )
    value_expression_title: str | None = Field(
        None,
        alias="valueExpressionTitle",
        description="The title identifying and describing the associated [Arcade](https://developers.arcgis.com/arcade/) expression as defined in the `valueExpression` property.",
    )


class HeatmapColorStop(BaseModel):
    """
    A colorStop object describes the renderer's color ramp with more specificity than just colors.
    """

    model_config = common_config

    color: list[conint(ge=0, le=255)] = Field(
        ...,
        description="Color is represented as a four-element array. The four elements represent values for red, green, blue, and alpha in that order. Values range from 0 through 255. If color is undefined for a symbol, the color value is null.",
        title="color",
    )
    ratio: float = Field(
        ...,
        description="A number between 0-1. Describes what portion along the gradient the colorStop is added.",
    )


class OthersThresholdColorInfo(BaseModel):
    """
    Defines the rules for how to aggregate small categories to a generic "others" category for categorical chart renderers, such as pie charts.
    """

    model_config = common_config
    color: list[conint(ge=0, le=255)] | None = Field(
        None,
        description='Defines the color used to represent all categories smaller than the percentage defined by `threshold`. This is typically used to represent a generic "others" category where categories would otherwise be too small to read.',
        title="color",
    )
    label: str | None = Field(
        None,
        description='The label used to describe the "others" category in the legend. When not specified, the legend will display a localized version of "Others".',
    )
    threshold: confloat(ge=0.0, le=1.0) | None = Field(
        0,
        description='Represents the minimum size of individual categories as a percentage of all categories combined. All categories that make up a smaller percentage than the threshold will automatically be aggregated to an "others" category represented by the color specified in `color`. For example, if the threshold is 0.05, then all categories that make up less than 5% of all categories will be represented with `color`.',
    )


class ColormapInfo(BaseModel):
    """
    The color map information used when [rendering](rasterColormapRenderer.md) raster data.
    """

    model_config = common_config
    color: list[conint(ge=0, le=255)] | None = Field(
        None, description="The pixel color.", title="color"
    )
    label: str | None = Field(None, description="The label used for the pixel value.")
    value: float | None = Field(None, description="The raster pixel value.")


class Algorithm(Enum):
    """
    Algorithm used for calculating the ramp.
    """

    esri_cie_lab_algorithm = "esriCIELabAlgorithm"
    esri_hsv_algorithm = "esriHSVAlgorithm"
    esri_lab_l_ch_algorithm = "esriLabLChAlgorithm"


class ColorRampType(Enum):
    """
    Value indicating the type of colorRamp.
    """

    algorithmic = "algorithmic"
    multipart = "multipart"


class ColorRamp(BaseModel):
    """
    A colorRamp object is used to specify a range of colors that are applied to a group of symbols.
    """

    model_config = common_config
    algorithm: Algorithm | None = Field(
        None, description="Algorithm used for calculating the ramp."
    )
    color_ramps: list[ColorRamp] | None = Field(
        None,
        alias="colorRamps",
        description="A multipart color ramp is defined by a list of constituent color ramps.",
    )
    from_color: list[conint(ge=0, le=255)] | None = Field(
        None,
        alias="fromColor",
        description="Array representing the initial color to start the ramp from.",
        title="color",
    )
    to_color: list[conint(ge=0, le=255)] | None = Field(
        None,
        alias="toColor",
        description="Array representing the final color to end the ramp with.",
        title="color",
    )
    type: ColorRampType | None = Field(
        None, description="Value indicating the type of colorRamp."
    )


class CodedValues(BaseModel):
    """
    A set of valid coded values with unique names.
    """

    model_config = common_config
    code: float | str = Field(
        ..., description="The value stored in the feature attribute."
    )
    name: str = Field(..., description="User-friendly name for what the code means.")


class JoinType(Enum):
    """
    The type of join (left outer or left inner).
    """

    esri_left_inner_join = "esriLeftInnerJoin"
    esri_left_outer_join = "esriLeftOuterJoin"


class QueryTableDataSource(BaseModel):
    """
    Query table data source is a layer/table that is defined by a SQL query.
    """

    model_config = common_config
    geometry_type: GeometryType | None = Field(
        None,
        alias="geometryType",
        description="The geometry type. When querying a table that does not have a geometry column, do not include geometryType.",
    )
    oid_fields: str | None = Field(
        None,
        alias="oidFields",
        description="Comma separated list of identifier fields. There are only certain field types that can be used as a unique identifier. These field types include integer, string, GUID, and date. If a single integer field is specified, map server uses the values in that field directly to uniquely identify all features and rows returned from a queryTable. However, if a single string field or a group of fields is used as the unique identifier, map server maps those unique values to an integer.",
    )
    query: str | None = Field(None, description="The SQL query.")
    spatial_reference: SpatialReference | None = Field(
        None,
        alias="spatialReference",
        description="The spatial reference of the geometry column. When querying a table that does not have a geometry column, do not include spatialReference.",
        title="spatialReference",
    )
    type: Literal["queryTable"] = Field(
        "queryTable",
        description="String value indicating the type for the dataSource.",
    )
    workspace_id: str | None = Field(
        None,
        alias="workspaceId",
        description="The unique string value used to identify the datasource's workspace.",
    )


class RasterDataSource(BaseModel):
    """
    Raster data source is a file-based raster that resides in a registered raster workspace.
    """

    model_config = common_config
    data_source_name: str | None = Field(
        None,
        alias="dataSourceName",
        description="The raster datasource's name.",
    )
    type: Literal["raster"] = Field(
        "raster",
        description="String value indicating the type for the dataSource.",
    )
    workspace_id: str | None = Field(
        None,
        alias="workspaceId",
        description="The unique string value used to identify the datasource's workspace.",
    )


class TableDataSource(BaseModel):
    """
    Table data source is a table, feature class, or raster that resides in a registered workspace (either a folder or geodatabase). In the case of a geodatabase, if versioned, use version to switch to an alternate geodatabase version. If version is empty or missing, the registered geodatabase version will be used.
    """

    model_config = common_config
    data_source_name: str | None = Field(
        None,
        alias="dataSourceName",
        description="The fully-qualified string value used to specify where the dataSource is derived.",
    )
    gdb_version: str | None = Field(
        None,
        alias="gdbVersion",
        description="If applicable, the value indicating the version of the geodatabase.",
    )
    type: Literal["table"] = Field(
        "table",
        description="String value indicating the type for the dataSource.",
    )
    workspace_id: str | None = Field(
        None,
        alias="workspaceId",
        description="The unique string value used to identify the datasource's workspace.",
    )


class CimSymbolReference(BaseModel):
    """
    Represents a symbol reference that contains a CIM symbol. In addition to `type` listed below, a symbol reference will contain additional properties listed [here](https://github.com/Esri/cim-spec/blob/main/docs/v3/CIMRenderers.md#CIMSymbolReference). More details on CIM symbol reference and CIM symbols are available on github: [Symbols Overview](https://github.com/Esri/cim-spec/blob/main/docs/v3/Overview-Symbols.md).
    """

    model_config = ConfigDict(
        extra="allow",
    )
    type: Literal["CIMSymbolReference"] = Field(
        "CIMSymbolReference",
        description="Specifies the type of symbol used.",
    )


class SimpleMarkerSymbolStyle(Enum):
    """
    String value representing the simple marker type.
    """

    esri_sms_circle = "esriSMSCircle"
    esri_sms_cross = "esriSMSCross"
    esri_sms_diamond = "esriSMSDiamond"
    esri_sms_square = "esriSMSSquare"
    esri_sms_triangle = "esriSMSTriangle"
    esri_smsx = "esriSMSX"


class AuthoringInfoStatistics(BaseModel):
    """
    Statistics queried from the layer to be used by the legend. The statistics can be used by the legend to avoid displaying data values that fall outside the data range despite the renderer's configuration. Only applies to `univariateColorSize` styles with an `above-and-below` `univariateTheme`.
    """

    model_config = common_config
    max: float | None = Field(
        None,
        description="A numeric value indicating the maximum value of the data represented by the renderer.",
    )
    min: float | None = Field(
        None,
        description="A numeric value indicating the minimum value of the data represented by the renderer.",
    )


class ReferenceSizeSymbolStyle(Enum):
    """
    Only applicable when `sizeInfoType` is `referenceSize`. This value specifies the style (or shape) of the symbols generated with a reference line. Typically, a reference line is used to visualize the maximum possible size (i.e. data value) of a data-driven proportional symbol. Visualizations with a reference size must be defined in a ClassBreaksRenderer or UniqueValueRenderer with a CIMSymbol containing two symbol layers: one visualizing the maximum size of the symbol as a hollow ring, and the other as a solid shape whose size is driven by a data value set in the renderer's field property, and configured in a primitive override of the CIMSymbol. These renderers must not contain size visual variables, but may contain other visual variable types. This property is used for UI purposes only. When defined, `AuthoringInfoVisualVariable.sizeStops` must also be defined for the legend to properly represent the visualization.
    """

    circle = "circle"
    diamond = "diamond"
    hexagon_flat = "hexagon-flat"
    hexagon_pointy = "hexagon-pointy"
    square = "square"


class RatioStyle(Enum):
    """
    It is used to map the ratio between two numbers. It is possible to express that relationship as percentages, simple ratios, or an overall percentage.
    """

    percent = "percent"
    percent_total = "percentTotal"
    ratio = "ratio"


class Theme(Enum):
    """
    Theme to be used only when working with visual variables of type `colorInfo` or `sizeInfo`. Default is `high-to-low`. The `centered-on`, and `extremes` themes only apply to `colorInfo` visual variables.
    """

    above = "above"
    above_and_below = "above-and-below"
    below = "below"
    centered_on = "centered-on"
    extremes = "extremes"
    high_to_low = "high-to-low"
    reference_size = "reference-size"


class RendererVisualVariableType(Enum):
    """
    A string value specifying the type of renderer's visual variable.
    """

    color_info = "colorInfo"
    rotation_info = "rotationInfo"
    size_info = "sizeInfo"
    transparency_info = "transparencyInfo"


class RotationInfoVisualVariable(BaseModel):
    """
    The rotation visual variable defines how features rendered with marker symbols are rotated. The rotation value is determined by a value in a field or an Arcade expression calculating a value. Use either the `field` property or `valueExpression` when specifying rotation values.
    """

    model_config = common_config
    field: str | None = Field(
        None,
        description="Attribute field used for setting the rotation of a symbol if no `valueExpression` is provided.",
    )
    legend_options: LegendOptions | None = Field(None, alias="legendOptions")
    rotation_type: RotationType | None = Field(
        RotationType.geographic,
        validate_default=True,
        alias="rotationType",
        description="Defines the origin and direction of rotation depending on how the angle of rotation was measured. Possible values are `geographic` which rotates the symbol from the north in a clockwise direction and `arithmetic` which rotates the symbol from the east in a counter-clockwise direction.",
    )
    type: Literal["rotationInfo"] = Field(
        "rotationInfo",
        description="A string value indicating the type of visual variable used for the renderer.",
    )
    value_expression: str | None = Field(
        None,
        alias="valueExpression",
        description="An [Arcade expression](https://developers.arcgis.com/arcade/) evaluating to a number.",
    )
    value_expression_title: str | None = Field(
        None,
        alias="valueExpressionTitle",
        description="The title identifying and describing the associated [Arcade expression] (https://developers.arcgis.com/arcade/) as defined in the `valueExpression` property.",
    )


class SizeStop(BaseModel):
    """
    A `sizeStop` object describes the size of the symbol at various values of the expression.
    """

    model_config = common_config
    label: str | None = Field(
        None, description="Text used to describe the stop in the legend."
    )
    size: float = Field(
        ...,
        description="Specifies the marker size to use for the specified value.",
    )
    value: float = Field(
        ...,
        description="The value to be mapped to a size. Depending on how the visual variable is defined, the value may represent the value of an attribute field or the value returned by an expression.",
    )


class AuthoringInfoClassBreakInfo(BaseModel):
    """
    The classBreaksInfo object provides information about the class breaks associated with the Relationship renderer.
    """

    model_config = common_config
    max_value: float | None = Field(
        None,
        alias="maxValue",
        description="A numeric value used to specify the maximum value for a break.",
    )
    min_value: float | None = Field(
        None,
        alias="minValue",
        description="A numeric value used to specify the minimum value for a break.",
    )


class ColorStop(BaseModel):
    """
    A colorStop object describes the renderer's color ramp with more specificity than just colors.
    """

    model_config = common_config

    color: list[conint(ge=0, le=255)] = Field(
        ...,
        description="A CSS color string or an array of rbga values. The color to place at the stop indicated by either a ratio or value.",
        title="color",
    )
    label: str | None = Field(
        None,
        description="Value if a label is needed on the legend for a stop.",
    )
    value: float = Field(
        ...,
        description="The pixel intensity value. Describes the pixel intensity value that the color should be associated with. Just like in colorInfo, using value will ignore `maxPixelIntensity` and `minPixelIntensity` properties. It will actually set those properties to maximum and minimum values you set in the colorStops array. The hard values are converted to ratios to create the color gradient that is used in the heatmap calculations. Setting `minPixelIntensity` or `maxPixelIntensity`, after setting colorStops with values, removes the hard link between the color ramp and the pixel intensity values that were used to create it.",
    )


class TransparencyStop(BaseModel):
    """
    The transparencyStop object defines the thematic opacity ramp in a sequence of stops. At least two stops are required. The stops must be listed in ascending order based on the value of the `value` property in each stop.
    """

    model_config = common_config
    label: str | None = Field(
        None,
        description="A string value used to label the stop in the legend.",
    )
    transparency: int | float = Field(
        ...,
        description="A numeric transparency value for a stop ranging from 0-100, where 0 is opaque and 100 is 100% transparent.",
    )
    value: float = Field(
        ...,
        description="The pixel intensity value. Describes the pixel intensity value that the color should be associated with.",
    )


class Background(BaseModel):
    """
    Defines the appearance for the background of the map.
    """

    model_config = common_config
    color: list[conint(ge=0, le=255)] | None = Field(
        None,
        description="To define the color of the background of the map (which is shown when no data is shown).",
        title="color",
    )


class Bookmark(BaseModel):
    """
    Predefined bookmarks for use by the application. A bookmark is a saved map extent that allows end users to quickly navigate to a particular area of interest.
    """

    model_config = common_config
    extent: Extent | dict = Field(
        ...,
        description="An extent object containing a spatial reference, a lower left coordinate, and an upper right coordinate defining the rectangular area of the bookmark. The spatial reference must be the same as the map spatial reference. Documentation for the envelope is in the [Geometry Objects topic of the ArcGIS REST API help](https://developers.arcgis.com/documentation/common-data-types/geometry-objects.htm). If viewpoint is defined, ignore the extent property. For backwards compatibility, please save both extent and viewpoint properties.",
    )
    name: str | None = Field("Untitled", description="A string name for the bookmark.")
    thumbnail: Thumbnail | None = None
    time_extent: list[int | None] | None = Field(
        None,
        alias="timeExtent",
        description="Represents the time extent for the bookmark. If the bookmark has a time extent set, it will update the time extent of the view when the bookmark is selected. Otherwise, if the time extent is not set on the bookmark, the time extent of the view will not be changed when the bookmark is selected.",
        title="timeExtent",
    )
    viewpoint: Viewpoint | None = Field(
        None,
        description="Represents the location displayed on the map. If viewpoint is defined, ignore the extent. If viewpoint is not defined, use the extent property. For backwards compatibility, please save both extent and viewpoint properties.",
    )


class InitialState(BaseModel):
    """
    Defines the initial state for web map.
    """

    model_config = common_config
    time_extent: list[int | None] | None = Field(
        None,
        alias="timeExtent",
        description="Represents the time extent for the data displayed on the map.",
        title="timeExtent",
    )
    viewpoint: Viewpoint = Field(
        ..., description="Represents the location displayed on the map."
    )


class MapFloorInfo(BaseModel):
    """
    Contains floor-awareness information for the map. Defines the layers and required fields for each layer that are used for floor filtering.
    """

    model_config = common_config
    facility_layer: FacilityLayer = Field(
        ...,
        alias="facilityLayer",
        description="Defines the layer and field properties for the Facility layer used for floor filtering.",
    )
    level_layer: LevelLayer = Field(
        ...,
        alias="levelLayer",
        description="Defines the layer and field properties for the Level layer used for floor filtering.",
    )
    site_layer: SiteLayer | None = Field(
        None,
        alias="siteLayer",
        description="Defines the layer and field properties for the Site layer used for floor filtering. This property is optional.",
    )


class MapIPSInfo(BaseModel):
    """
    Contains indoor positioning system information for the map. Defines indoor position data service and related properties that help applications compute device location inside a building.
    """

    model_config = common_config
    positioning_service: PositioningService = Field(
        ...,
        alias="positioningService",
        description="Defines the portal item for the positioning data service.",
    )


class UtilityNetwork(BaseModel):
    """
    Identifies the central object for utility network schema information to access utility-related functionality, such as tracing and querying associations.
    """

    model_config = common_config
    id: str | None = Field(
        None,
        description="A unique identifying string for the utility network.",
    )
    title: str = Field(
        ...,
        description="A user-friendly string title for the utility network that can be used in a table of contents.",
    )
    trace_configurations: list[TraceConfiguration] | None = Field(
        None,
        alias="traceConfigurations",
        description="An array of pre-configured trace configurations for quickly running common traces.",
    )
    url: str = Field(
        ...,
        description="A string value indicating the URL to the utility network layer.",
    )


class Offline(BaseModel):
    """
    Use if working with offline maps.
    """

    model_config = common_config
    connected_online_layers: list[ConnectedOnlineLayer] | None = Field(
        None,
        alias="connectedOnlineLayers",
        description="List of layers which should be included in an offline map as connected online layers.",
    )
    editable_layers: EditableLayers | None = Field(
        None,
        alias="editableLayers",
        description="Object detailing the available offline editing options.",
    )
    offlinebasemap: Offlinebasemap | None = None
    readonly_layers: ReadonlyLayers | None = Field(
        None,
        alias="readonlyLayers",
        description="Object indicating what to do with attachments in read-only layers.",
    )
    sync_data_options: float | None = Field(
        None,
        alias="syncDataOptions",
        description="An integer value that corresponds to `syncDataOptions` for [Create Replica](https://developers.arcgis.com/rest/services-reference/enterprise/create-replica.htm). This value determines what additional capabilities will be included when going offline for a feature layer (e.g. contingent values, annotation) that are not included by default. This value applies to all feature layers in the webmap, however if the requested capability is not supported or present in the feature layer it will be ignored.",
    )


class LocationTracking(BaseModel):
    """
    If locationTracking is set and enabled, the collector app will update the feature service at the defined interval with the current location of the user logged into the collector application.
    """

    model_config = common_config
    enabled: bool | None = Field(
        None,
        description="A boolean value indicating whether or not location tracking is enabled on the webmap.",
    )
    info: Info | None = Field(
        None,
        description="An object of additional information specifying layer and update interval time.",
    )


class CatalogDynamicGroupLayerCatalogDynamicGroupLayer(BaseModel):
    """
    A dynamic group layer that is used in Catalog Layer that allows
    """

    model_config = common_config
    effect: (
        list[
            EffectFunctions
            | EffectFunctions1
            | EffectFunctions2
            | EffectFunctions3
            | EffectFunctions4
        ]
        | list[ScaleDependentEffect]
        | None
    ) = Field(
        None,
        description="Effect provides various filter functions to achieve different visual effects similar to how image filters (photo apps) work.",
        title="Effect",
    )
    id: str | None = Field(
        None, description="A unique identifying string for the layer."
    )
    maximum_visible_sublayers: int | None = Field(
        10,
        alias="maximumVisibleSublayers",
        description=" Gets or sets upper bound for number of layers in view for the dynamic group layer.",
    )
    max_scale: confloat(ge=0.0) | None = Field(
        0,
        alias="maxScale",
        description="A number representing the maximum scale at which the layer will be visible. The number is the scale's denominator.",
    )
    min_scale: confloat(ge=0.0) | None = Field(
        0,
        alias="minScale",
        description="A number representing the minimum scale at which the layer will be visible. The number is the scale's denominator.",
    )
    opacity: confloat(ge=0.0, le=1.0) | None = Field(
        1,
        description="The degree of transparency applied to the layer on the client side, where 0 is full transparency and 1 is no transparency.",
    )
    show_legend: bool = Field(
        True,
        alias="showLegend",
        description="Boolean value indicating whether to display the legends for sub layers that are dynamically loaded. Default value is `true`.",
    )
    title: str = Field(
        ...,
        description="A user-friendly string title for the layer that can be used in a table of contents.",
    )
    visibility: bool | None = Field(
        True,
        description="Boolean property determining whether the layer is initially visible in the web map.",
    )


class SimpleLineSymbolEsriSLS(BaseModel):
    """
    Simple line symbols can be used to symbolize polyline geometries or outlines for polygon fills.
    """

    model_config = common_config
    color: list[conint(ge=0, le=255)] | None = Field(
        None,
        description="Color is represented as a four-element array. The four elements represent values for red, green, blue, and alpha in that order. Values range from 0 through 255. If color is undefined for a symbol, the color value is null.",
        title="color",
    )
    marker: Marker | None = None
    style: SimpleLineSymbolStyle | str | None = Field(
        None,
        description="String value representing the simple line symbol type.",
    )
    type: Literal["esriSLS"] | str | None = Field(
        "esriSLS", description="Specifies the type of symbol used."
    )
    width: float | None = Field(
        None,
        description="Numeric value indicating the width of the line in points.",
    )


class SimpleFillSymbolEsriSFS(BaseModel):
    """
    Simple fill symbols that can be used to symbolize polygon geometries.
    """

    model_config = common_config
    color: list[conint(ge=0, le=255)] | None = Field(
        None,
        description="Color is represented as a four-element array. The four elements represent values for red, green, blue, and alpha in that order. Values range from 0 through 255. If color is undefined for a symbol, the color value is null.",
        title="color",
    )
    outline: SimpleLineSymbolEsriSLS | None = Field(
        None, description="Sets the outline of the fill symbol."
    )
    style: SimpleFillSymbolStyle | str = Field(
        ...,
        description="String value representing the simple fill symbol type.",
    )
    type: Literal["esriSFS"] = Field(
        "esriSFS", description="Specifies the type of symbol used."
    )


class MosaicRule(BaseModel):
    """
    The image service uses a mosaic rule to mosaick multiple rasters on the fly. The mosaic rule parameter is used by many image service operations, for example, export image and identify operations.
    """

    model_config = common_config
    ascending: bool | None = Field(
        None,
        description="Indicate whether to use ascending or descending order.",
    )
    fids: list[int] | None = Field(
        None,
        description="A list that defines a subset of rasters used in the mosaic, be aware that the rasters may not be visible at all scales.",
    )
    item_rendering_rule: str | None = Field(
        None,
        alias="itemRenderingRule",
        description="The rendering rule applies on items before mosaicking.",
    )
    lock_raster_ids: list[int] | None = Field(
        None,
        alias="lockRasterIds",
        description="Lock a few rasters in the image service. Used together with `esriMosaicLockRaster`.",
    )
    mosaic_method: MosaicMethod = Field(
        ...,
        alias="mosaicMethod",
        description="A string value that determines how the selected rasters are ordered.",
    )
    mosaic_operation: MosaicOperation | None = Field(
        None,
        alias="mosaicOperation",
        description="Use the mosaic operation to resolve overlap pixel values: from first or last raster, use the min, max or mean of the pixel values, or blend them.",
    )
    multidimensional_definition: list[DimensionalDefinition] | None = Field(
        None,
        alias="multidimensionalDefinition",
        description="An array of objects representing a slice from multidimensional data or multiple slices that are dynamically mosaicked and processed by the server. The dimensional definitions in this array are used to filter display data based on slices in one or more dimensions.",
    )
    sort_field: str | None = Field(
        None,
        alias="sortField",
        description="The field name used together with `esriMosaicAttribute` method.",
    )
    sort_value: float | str | None = Field(
        0,
        alias="sortValue",
        description="The base sort value used together with `esriMosaicAttribute` method and `sortField` parameter.",
    )
    viewpoint: PointGeometry | None = Field(
        None,
        description="Use a view point along with `esriMosaicViewpoint`.",
    )
    where: str | None = Field(
        None,
        description="Deprecated. Use `layerDefinition.definitionExpression` instead.",
    )


class MultidimensionalSubset(BaseModel):
    """
    Represents a multidimensional subset of raster data. This includes subsets of both variables and dimensions. When the multidimensionalSubset is defined on a layer, the [layer.multidimensionalDefinition](multidimensionalDefinition.md) or the [mosaicRule.multidimensionalDefinition](mosaicRule.md) must be within the defined multidimensionalSubset, otherwise nothing will be displayed.
    """

    model_config = common_config
    area_of_interest: Extent | PolygonGeometry | dict | None = Field(
        None,
        alias="areaOfInterest",
        description="An optional area of interest for the entire multidimensional subset.",
    )
    subset_definitions: list[DimensionalDefinition] | None = Field(
        None,
        alias="subsetDefinitions",
        description="An optional array of objects representing dimension range subsets for selected variables from multidimensional data.",
    )


class Georeference(BaseModel):
    """
    The georeference used to place a media in a [MediaLayer](mediaLayer.md).
    """

    model_config = common_config
    coefficients: list[float] = Field(
        ...,
        description="An array of 8 coefficients representing the [projective transformation](https://desktop.arcgis.com/en/arcmap/latest/manage-data/editing-existing-features/about-spatial-adjustment-transformations.htm#ESRI_SECTION1_EBB9C52B96934FE08A32CE852788EA02).",
        max_length=8,
        min_length=8,
    )
    control_points: list[ControlPoint] = Field(
        ...,
        alias="controlPoints",
        description="An array of 4 user defined control points placed on the media.",
        max_length=4,
        min_length=4,
    )
    height: float = Field(
        ...,
        description="Numeric value indicating the height of media in pixels.",
    )
    spatial_reference: SpatialReference = Field(
        ...,
        alias="spatialReference",
        description="The spatial reference can be defined using a well-known ID (wkid) or well-known text (WKT).",
        title="spatialReference",
    )
    width: float = Field(
        ...,
        description="Numeric value indicating the width of media in pixels.",
    )


class OrientedImageryProperties(BaseModel):
    """
    Object that defines properties of layers in a feature service with layer type [OrientedImageryLayer](orientedImageryLayer.md). If a property is not defined in the layer field, corresponding value for that property defined here would be used instead.
    """

    model_config = common_config
    camera_heading: float | None = Field(
        None,
        alias="cameraHeading",
        description="Camera orientation defining the first rotation around z-axis of the camera. Defined in degrees. Heading values are measured in the positive clockwise direction where north is defined as 0 degrees. -999 is used when the orientation is unknown.",
    )
    camera_height: float | None = Field(
        None,
        alias="cameraHeight",
        description="The height of camera above the ground when the imagery was captured. The units are in meters. Camera height is used to determine the visible extent of the image, large values will result in a greater view extent. Values should not be less than 0.",
    )
    camera_pitch: float | None = Field(
        None,
        alias="cameraPitch",
        description="Camera orientation defining the second rotation around x-axis of the camera in the positive counterclockwise direction. Defined in degrees. The pitch is 0 degrees when the camera is facing straight down to ground. The valid range of pitch value is from 0 to 180 degrees, with 180 degrees for a camera facing straight up and 90 degrees for a camera facing horizon.",
    )
    camera_roll: float | None = Field(
        None,
        alias="cameraRoll",
        description="Camera orientation defining the final rotation around z-axis of the camera in the positive clockwise direction. The camera housing rotation is defined in degrees. Valid values range from -90 to +90.",
    )
    coverage_percent: float | None = Field(
        None,
        alias="coveragePercent",
        description="Modifies the extent of the image's ground footprint. The ground footprint of each image is computed to search for images that contain the selected location, which is identified as the red cross on the map. Valid values are from -50 to 50. Negative percentage values shrink the size of the ground footprint and positive values increase the size of the ground footprint.",
    )
    dem_path_prefix: str | None = Field(
        None,
        alias="demPathPrefix",
        description="Prefix used to build the DEM url path in conjunction with the elevationSource attribute.",
    )
    dem_path_suffix: str | None = Field(
        None,
        alias="demPathSuffix",
        description="Suffix used to build the DEM url path in conjunction with the elevationSource attribute.",
    )
    depth_image_path_prefix: str | None = Field(
        None,
        alias="depthImagePathPrefix",
        description="Prefix used to build the depth image url path in conjunction with the depth image attribute.",
    )
    depth_image_path_suffix: str | None = Field(
        None,
        alias="depthImagePathSuffix",
        description="Suffix used to build the depth image url path in conjunction with the depth image attribute.",
    )
    elevation_source: (
        OrientedImageryElevationSource | OrientedImageryElevationSource1 | None
    ) = Field(
        None,
        alias="elevationSource",
        description="The source of elevation as a JSON string, that will be used to compute ground to image transformations. The elevation source can be a digital elevation model (DEM) or a constant value. A dynamic image service or a tile image service can be used as the digital elevation model. The unit of constant elevation value should be in meters.",
        title="Oriented Imagery Elevation Source",
    )
    far_distance: float | None = Field(
        None,
        alias="farDistance",
        description="The farthest usable distance of the imagery from the camera position. FarDistance is used to determine the extent of the image footprint, which is used to determine if an image is returned when you click on the map, and for creating optional footprint features. The units are in meters. Far distance should be always greater than 0.",
    )
    horizontal_field_of_view: float | None = Field(
        None,
        alias="horizontalFieldOfView",
        description="The camera's scope in horizontal direction. The units are in degrees and valid values range from 0 to 360.",
    )
    horizontal_measurement_unit: str | None = Field(
        None,
        alias="horizontalMeasurementUnit",
        description="Defines the unit that will be used for all horizontal measurements. The unit will be obtained from the layer coordinate system and will be used for display purposes only.",
    )
    image_path_prefix: str | None = Field(
        None,
        alias="imagePathPrefix",
        description="Prefix used to build the image url path in conjunction with the image attribute.",
    )
    image_path_suffix: str | None = Field(
        None,
        alias="imagePathSuffix",
        description="Suffix used to build the image url path in conjunction with the image attribute.",
    )
    image_rotation: float | None = Field(
        None,
        alias="imageRotation",
        description="The orientation of the camera in degrees relative to the scene when the image was captured. The rotation is added in addition to the camera roll. The value can range from -360 to +360.",
    )
    maximum_distance: confloat(ge=0.0) | None = Field(
        None,
        alias="maximumDistance",
        description="Maximum search distance to be used while querying the feature service specified in the Oriented Imagery Layer. The maximum distance can never be less than zero.",
    )
    near_distance: float | None = Field(
        None,
        alias="nearDistance",
        description="The nearest usable distance of the imagery from the camera position. The units are in meters. Near distance can never be less than 0.",
    )
    orientation_accuracy: str | None = Field(
        None,
        alias="orientationAccuracy",
        description="Semicolon-delimited string used to store standard deviation values. The standard deviation values are in the following order and format: Camera location in XY direction; camera height; camera heading; camera pitch; camera roll; near distance; far distance; elevation (all in meters).",
    )
    oriented_imagery_type: OrientedImageryType | None = Field(
        None,
        alias="orientedImageryType",
        description="String that defines the imagery type used in the particular Oriented Imagery Layer.",
    )
    time_interval_unit: TimeUnit | None = Field(
        None,
        alias="timeIntervalUnit",
        description="Defines the unit of time used in the viewer's time selector tool. Images will be filtered in the viewer based on the Time Unit value defined here.",
    )
    vertical_field_of_view: float | None = Field(
        None,
        alias="verticalFieldOfView",
        description="The camera's scope in the vertical direction. The units are in degrees and valid values range from 0 to 180.",
    )
    vertical_measurement_unit: VerticalMeasurementUnit | None = Field(
        None,
        alias="verticalMeasurementUnit",
        description="Defines the primary unit to be used for all vertical measurements.",
    )
    video_path_prefix: str | None = Field(
        None,
        alias="videoPathPrefix",
        description="Prefix used to build the video url path in conjunction with the image attribute.",
    )
    video_path_suffix: str | None = Field(
        None,
        alias="videoPathSuffix",
        description="Suffix used to build the video url path in conjunction with the image attribute.",
    )


class TileInfo(BaseModel):
    """
    Tile information, returned from the WMTS OGC Web Service. The tileInfo will contain the spatial reference of the layer. tileInfo is the same json representation as the ArcGIS Map/Image service tileInfo except that it may contain a levelValue on the lod objects that should be used instead of the level in the templateUrl.
    """

    model_config = common_config
    cols: int | None = Field(None, description="Requested tile's column.")
    compression_quality: confloat(ge=0.0, le=100.0) | None = Field(
        None,
        alias="compressionQuality",
        description="Compression quality of the tile.",
    )
    dpi: float | None = Field(None, description="The dpi of the tiling scheme.")
    format: Format | None = Field(None, description="Image format of the cached tiles.")
    lods: list[Lod] | None = Field(
        None,
        description="An array of levels of detail that define the tiling scheme.",
    )
    origin: PointGeometry | None = Field(None, description="The tiling scheme origin.")
    rows: int | None = Field(None, description="Requested tile's row.")
    spatial_reference: SpatialReference | None = Field(
        None,
        alias="spatialReference",
        description="The spatial reference of the tiling schema.",
        title="spatialReference",
    )


class MapLocation(BaseModel):
    """
    <em>Deprecated.</em> Contains location information within a presentation slide.
    """

    model_config = common_config
    center_point: CenterPoint = Field(
        ...,
        alias="centerPoint",
        description="The center of the map specified using X/Y coordinates.",
    )
    spatial_reference: SpatialReference | None = Field(
        None,
        alias="spatialReference",
        description="Well-known ID (WKID) or well-known text (WKT).",
        title="spatialReference",
    )


class TimeSliderProperties(BaseModel):
    """
    Configurable properties used within the TimeSlider widget.
    """

    model_config = common_config
    current_time_extent: list[int] | None = Field(
        None,
        alias="currentTimeExtent",
        description="An optional array of numbers indicating the slider's start to end time extent.",
    )
    end_time: float | None = Field(
        None,
        alias="endTime",
        description="The optional end of the time slider. If not specified, the slider defaults to the full time extent of all time-enabled layers.",
    )
    loop: bool | None = Field(
        False,
        description="When `true`, the time slider will play its animation in a loop. The default is `false`.",
    )
    number_of_stops: int | None = Field(
        None,
        alias="numberOfStops",
        description="Number of stops within the timeSlider widget.",
    )
    start_time: float | None = Field(
        None,
        alias="startTime",
        description="The optional start of the time slider. If not specified, the slider defaults to the full time extent of all time-enabled layers.",
    )
    stops: list[int] | None = Field(
        None,
        description="An optional array of numbers that defines stops for the time slider. Can be used to create irregularly spaced stops representing specific moments of importance.",
    )
    thumb_count: int | None = Field(
        2,
        alias="thumbCount",
        description="The default value for the thumbCount is 2.",
    )
    thumb_moving_rate: float | None = Field(
        2000,
        alias="thumbMovingRate",
        description="Rate at which the time animation plays. Units are in milliseconds. Default is `2000`.",
    )
    time_stop_interval: TimeStopInterval | None = Field(
        None,
        alias="timeStopInterval",
        description="The interval which has been defined for the time slider.",
    )


class DeviceLocationGeotriggerFeed(BaseModel):
    """
    A Geotrigger feed which uses the device location to provide updates.
    """

    model_config = common_config
    filter_expression: ExpressionInfo | None = Field(
        None,
        alias="filterExpression",
        description="An optional Arcade expression that controls whether a location update will be used by a geotrigger. For example, the expression could reject GPS updates with a poor horizontal accuracy. This expression uses the [Location Update Constraint](https://developers.arcgis.com/arcade/guide/profiles/#location-update-constraint) Arcade profile. The expression should return a Boolean where false indicates the location will not be used.",
    )
    type: Literal["deviceLocation"] = Field(
        "deviceLocation",
        description="String indicating the type of Geotrigger feed.",
    )


class GeotriggerNotificationOptions(BaseModel):
    """
    Options that control the notification information sent to a client app client when a Geotrigger condition is met.
    """

    model_config = common_config

    expression_info: ExpressionInfo | None = Field(
        None,
        alias="expressionInfo",
        description="An optional Arcade expression which can be used to configure notification information when the Geotrigger condition is met. The expression uses the [Geotrigger Notification](https://developers.arcgis.com/arcade/guide/profiles/#geotrigger-notification) Arcade profile. The expression can return either a String that will be used for a user facing message or a Dictionary that can include a user facing message with the key 'message', and a recommended list of app actions using the key 'actions'.",
    )
    requested_actions: list[str] | None = Field(
        None,
        alias="requestedActions",
        description="An optional list of strings indicating the set of possible actions resulting from this Geotrigger. This property shows the full list of recommended actions that the author intends to be taken for this Geotrigger. Note that there is no requirement to take any action when a notification is delivered, but these provide a way to understand the intention of the author of the Geotrigger. These strings can be displayed to a user to make them aware of the Geotrigger's expected behavior, or used by client apps to determine whether the desired actions are supported. If a client app receives notification information containing an unrecognized action they should ignore it. Actions can be any strings that are supported by geotrigger enabled apps in your organization and should cover all possible 'action' values returned from evaluation of expressionInfo.expression.",
    )


class DisplayFilterInfo(BaseModel):
    """
    Display filters provide information about which features should be rendered on the display. Unlike definition expression which filters the data for tables/ charts, display filters are meant for decluttering the display only. These filters should be applied only while drawing features. These filters should not be applied when performing hit tests (popup), showing data, tools that are participating in editing data, highlighting etc.
    """

    model_config = common_config
    active_filter_id: str | None = Field(
        None, alias="activeFilterId", description="Active display filter id."
    )
    filter_mode: FilterMode = Field(
        ..., alias="filterMode", description="Display filter mode."
    )
    filters: list[DisplayFilter] = Field(
        ...,
        description="Display filters that contain filters describing which features should be rendered on display.",
    )


class LayerTimeInfo(BaseModel):
    """
    Time info if the layer/table supports querying and exporting maps based on time.
    """

    model_config = common_config
    end_time_field: str | None = Field(
        None,
        alias="endTimeField",
        description="The name of the attribute field that contains the end time information.",
    )
    export_options: TimeInfoExportOptions | None = Field(
        None,
        alias="exportOptions",
        description="The default time-related export options for this layer.",
    )
    has_live_data: bool | None = Field(
        None,
        alias="hasLiveData",
        description="Indicates whether service has live data.",
    )
    start_time_field: str | None = Field(
        None,
        alias="startTimeField",
        description="The name of the attribute field that contains the start time information.",
    )
    time_extent: list[float] | None = Field(
        None,
        alias="timeExtent",
        description="The time extent for all the data in the layer.",
        max_length=2,
        min_length=2,
    )
    time_interval: float | None = Field(
        None,
        alias="timeInterval",
        description="Time interval of the data in the layer. Typically used for the TimeSlider when animating the layer.",
    )
    time_interval_units: TimeIntervalUnits | None = Field(
        None,
        alias="timeIntervalUnits",
        description="Temporal unit in which the time interval is measured.",
    )
    time_reference: TimeReference | None = Field(
        None,
        alias="timeReference",
        description="Information about how the time was measured.",
    )
    track_id_field: str | None = Field(
        None,
        alias="trackIdField",
        description="The field that contains the trackId.",
    )


class FieldInfo(BaseModel):
    """
    Defines how a field in the dataset participates (or does not participate) in a popup window.
    """

    model_config = common_config
    field_name: str | None = Field(
        None,
        alias="fieldName",
        description="A string containing the field name as defined by the service. Anywhere that a fieldname is referenced as `{field-name} in popupInfo, an Arcade expression can also be referenced as `{expression/<expression-name>}`.",
    )
    format: FieldInfoFormat | None = Field(
        None,
        description="A format object used with numerical or date fields to provide more detail about how the value should be displayed in a web map popup window.",
    )
    is_editable: bool | None = Field(
        True,
        alias="isEditable",
        description="A Boolean determining whether users can edit this field. Not applicable to Arcade expressions.",
    )
    label: str | None = Field(
        None,
        description="A string containing the field alias. This can be overridden by the web map author. Not applicable to Arcade expressions as `title` is used instead.",
    )
    statistic_type: StatisticType | None = Field(
        None,
        alias="statisticType",
        description="Used in a 1:many or many:many relationship to compute the statistics on the field to show in the popup.",
    )
    string_field_option: StringFieldOption | None = Field(
        None,
        alias="stringFieldOption",
        description="A string determining what type of input box editors see when editing the field. Applies only to string fields. Not applicable to Arcade expressions.",
    )
    tooltip: str | None = Field(
        None,
        description="A string providing an editing hint for editors of the field. Not applicable to Arcade expressions.",
    )
    visible: bool | None = Field(
        None,
        description="A Boolean determining whether the field is visible in the popup window.",
    )


class MediaInfo(BaseModel):
    """
    Defines an image or a chart to be displayed in a popup window.
    """

    model_config = common_config
    alt_text: str | None = Field(
        None,
        alias="altText",
        description="A string providing the alternate text for the media.",
    )
    caption: str | None = Field(
        None, description="A string caption describing the media."
    )
    refresh_interval: float | None = Field(
        0,
        alias="refreshInterval",
        description="Refresh interval of the layer in minutes. Non-zero value indicates automatic layer refresh at the specified interval. Value of 0 indicates auto refresh is not enabled. If the property does not exist, it's equivalent to having a value of 0. Only applicable when `type` is set to `image`.",
    )
    title: str | None = Field(None, description="A string title for the media.")
    type: MediaType | None = Field(
        None, description="A string defining the type of media."
    )
    value: Value | None = Field(
        None,
        description="A value object containing information about how the image should be retrieved or how the chart should be constructed.",
    )


class Input(BaseModel):
    """
    The input objects specified by the [definitionEditor](definitionEditor.md).
    """

    model_config = common_config
    hint: str | None = Field(
        None, description="A string value representing a hint for the input."
    )
    parameters: list[Parameter] | None = Field(
        None, description="An array of parameter objects."
    )
    prompt: str | None = Field(
        None,
        description="A string value representing the prompt for the input.",
    )


class FormAttachmentElement(BaseModel):
    """
    Defines how one or more attachments can participate in the form. When present in the form, the user has the ability to upload an attachment specific to the form element.
    """

    model_config = common_config
    attachment_keyword: str = Field(
        ...,
        alias="attachmentKeyword",
        description="A string to identify the attachment(s). When a file is attached using the form, this property is used to set the value of the keywords field for the attachment. When a form is displaying existing attachments, this property is used to query attachments using an exact match on the keywords field.",
    )
    description: str | None = Field(
        None, description="A string that describes the element in detail."
    )
    editable_expression: str | None = Field(
        None,
        alias="editableExpression",
        description="A reference to an Arcade expression that returns a boolean value. When this expression evaluates to `true`, the element is editable. When the expression evaluates to `false` the element is not editable.",
    )
    input_type: (
        FormAttachmentInput
        | FormAudioInput
        | FormDocumentInput
        | FormImageInput
        | FormSignatureInput
        | FormVideoInput
        | None
    ) = Field(
        ...,
        alias="inputType",
        description="The input user interface to use for the attachment.",
    )
    label: str | None = Field(
        None,
        description="A string value indicating what the element represents.",
    )
    type: Literal["attachment"] = Field(
        "attachment",
        description="String value indicating which type of element to use.",
    )
    visibility_expression: str | None = Field(
        None,
        alias="visibilityExpression",
        description="A reference to an Arcade expression that returns a boolean value. When this expression evaluates to `true`, the element is displayed. When the expression evaluates to `false` the element is not displayed. If no expression is provided, the default behavior is that the element is displayed.",
    )


class RasterFunctionTemplate(BaseModel):
    """
    Raster function template containing one or more raster functions chained together to produce a processing workflow.
    """

    model_config = common_config
    field_object_id: int | None = Field(
        None,
        alias="_object_id",
        description="The id of the raster function template.",
    )
    aliases: list[str] | None = Field(
        None,
        description="Aliases for the `function` referenced in the template.",
    )
    arguments: RasterFunctionTemplateArguments = Field(
        ...,
        description="The arguments for the `function` referenced in the raster function template.",
        title="Raster Function Template Arguments",
    )
    definition: str | None = Field(
        None,
        description="A query definition to filter rasters when the layer's data source is a mosaic dataset.",
    )
    description: str = Field(
        ..., description="The description of the raster function template."
    )
    function: RasterFunctionInformation = Field(
        ...,
        description="The raster function referenced by the raster function template.",
    )
    function_type: FunctionType = Field(
        ...,
        alias="functionType",
        description="Defines whether the `function` is applied to a mosaic dataset. Indicates the level of the mosaic processing is used. Only applies to mosaic based image services. `0` - function is applied after mosaicking; `1` - function is applied on each raster item before mosaicking; `2` - function is applied to a group of raster items before mosaicking.",
    )
    group: str | None = Field(
        None,
        description="Group field name for item group function template ",
    )
    help: str | None = Field(
        None,
        description="The short description of what the raster function template does.",
    )
    name: str = Field(..., description="Name of the raster function template.")
    properties: Properties | None = Field(
        None,
        description="The properties used to define multidimensional dataset processing rules.",
    )
    tag: str | None = Field(
        None, description="Tag field name for item group function template ."
    )
    thumbnail: str | None = Field(
        None, description="Thumbnail url of the raster function template."
    )
    thumbnail_ex: str | None = Field(
        None,
        alias="thumbnailEx",
        description="Base64 encoded thumbnail of the raster function template.",
    )
    type: Literal["RasterFunctionTemplate"] | None = Field(
        None, description="Type of the raster function template."
    )


class PopupElementExpression(BaseModel):
    """
    A pop-up element defined by an arcade expression.
    """

    model_config = common_config

    expression_info: PopupElementExpressionInfo = Field(
        ...,
        alias="expressionInfo",
        description="An Arcade expression that defines the pop-up element content. The return type will always be `dictionary` as outlined [in the Arcade documentation](https://developers.arcgis.com/arcade/guide/profiles/#popup-element).",
    )
    type: Literal["expression"] = Field(
        "expression", description="Specifies the type of element."
    )


class PopupElementFields(BaseModel):
    """
    Configures fields in popup elements.
    """

    model_config = common_config
    attributes: dict[str, Any] | None = Field(
        None,
        description="A dictionary of key value pairs representing attributes to be used instead of fields and their values. This property is only used when an element of type `fields` is being returned inside an element of type `expression` and should be returned as part of the arcade expression itself. This property allows passing arcade derived attribute values into `fields` elements. More details can be found [here](https://developers.arcgis.com/arcade/guide/profiles/#popup-element).",
    )
    description: str | None = Field(
        None,
        description="An optional string value describing the element in detail.",
    )
    field_infos: list[FieldInfo] | None = Field(
        None,
        alias="fieldInfos",
        description="It is an array of `fieldInfo` objects representing a field/value pair displayed as a table within the popupElement. If the `fieldInfos` property is not provided, the popupElement will display whatever is specified directly in the `popupInfo.fieldInfos` property.",
    )
    title: str | None = Field(
        None,
        description="An optional string value indicating what the element represents.",
    )
    type: Literal["fields"] = Field(
        "fields", description="Specifies the type of element."
    )


class PopupElementMedia(BaseModel):
    """
    Configures media in popup elements.
    """

    model_config = common_config
    attributes: dict[str, Any] | None = Field(
        None,
        description="A dictionary of key value pairs representing attributes to be used instead of fields and their values.  This property is only used when an element of type  `media` is being returned inside an element of type `expression` and should be returned as part of the arcade expression itself. This property allows passing arcade derived attribute values into `mediaInfos` such as charts. More details can be found [here](https://developers.arcgis.com/arcade/guide/profiles/#popup-element).",
    )
    description: str | None = Field(
        None,
        description="An optional string value describing the element in detail.",
    )
    media_infos: list[MediaInfo] | None = Field(
        None,
        alias="mediaInfos",
        description="An array of `mediaInfo` objects representing an image or chart for display. If no `mediaInfos` property is provided, the popupElement will display whatever is specified in the `popupInfo.mediaInfos` property.",
    )
    title: str | None = Field(
        None,
        description="An optional string value indicating what the element represents.",
    )
    type: Literal["media"] = "media"


class TextSymbolEsriTS(BaseModel):
    """
    Text symbols are used to add text to a feature (labeling).
    """

    model_config = common_config
    angle: confloat(ge=0.0, le=360.0) | None = Field(
        None,
        description="A numeric value that defines the number of degrees (0 to 360) that a text symbol is rotated. The rotation is from East in a counter-clockwise direction where East is the 0� axis.",
    )
    background_color: list[conint(ge=0, le=255)] | None = Field(
        None,
        alias="backgroundColor",
        description="Background color is represented as a four-element array. The four elements represent values for red, green, blue, and alpha in that order. Values range from 0 through 255. If color is undefined for a symbol, the color value is null.",
        title="color",
    )
    border_line_color: list[conint(ge=0, le=255)] | None = Field(
        None,
        alias="borderLineColor",
        description="Borderline color is represented as a four-element array. The four elements represent values for red, green, blue, and alpha in that order. Values range from 0 through 255. If color is undefined for a symbol, the color value is null.",
        title="color",
    )
    border_line_size: float | None = Field(
        None,
        alias="borderLineSize",
        description="Numeric value indicating the the size of the border line in points.",
    )
    color: list[conint(ge=0, le=255)] = Field(
        ...,
        description="Color is represented as a four-element array. The four elements represent values for red, green, blue, and alpha in that order. Values range from 0 through 255. If color is undefined for a symbol, the color value is null.",
        title="color",
    )
    font: Font | None = Field(
        None,
        description="An object specifying the font used for the text symbol.",
    )
    halo_color: list[conint(ge=0, le=255)] | None = Field(
        None,
        alias="haloColor",
        description="Color of the halo around the text.",
        title="color",
    )
    halo_size: float | None = Field(
        None,
        alias="haloSize",
        description="Numeric value indicating the point size of a halo around the text symbol.",
    )
    horizontal_alignment: HorizontalAlignment | None = Field(
        None,
        alias="horizontalAlignment",
        description="One of the following string values representing the horizontal alignment of the text.",
    )
    kerning: bool | None = Field(
        None,
        description="Boolean value indicating whether to adjust the spacing between characters in the text string.",
    )
    right_to_left: bool | None = Field(
        None,
        alias="rightToLeft",
        description="Boolean value, set to true if using Hebrew or Arabic fonts.",
    )
    rotated: bool | None = Field(
        None,
        description="Boolean value indicating whether every character in the text string is rotated.",
    )
    text: str | None = Field(
        None,
        description="only applicable when specified as a client-side graphic.",
    )
    type: Literal["esriTS"] = Field(
        "esriTS", description="Specifies the type of symbol used."
    )
    vertical_alignment: VerticalAlignment | None = Field(
        None,
        alias="verticalAlignment",
        description="One of the following string values representing the vertical alignment of the text.",
    )
    xoffset: float | None = Field(
        None,
        description="Numeric value indicating the offset on the x-axis in points.",
    )
    yoffset: float | None = Field(
        None,
        description="Numeric value indicating the offset on the y-axis in points.",
    )


class RasterColorMapRenderer(BaseModel):
    """
    A value/color look up table used for rendering raster data only. This renderer is similar to [unique value rendering](uniqueValueRenderer.md) in regards to its functionality. The rendering is automatically applied when a raster source has colormap information.
    """

    model_config = common_config
    colormap_infos: list[ColormapInfo] = Field(
        ...,
        alias="colormapInfos",
        description="An array of colormapInfo objects.",
    )
    type: Literal["rasterColormap"] = Field(
        "rasterColormap", description="Specifies the type of renderer used."
    )


class RasterShadedReliefRenderer(BaseModel):
    """
    This renderer produces a grayscale or colored 3D representations. This renderer can be used on either layers of type: [ImageServiceLayer](imageServiceLayer.md) or [TiledImageServiceLayer](tiledImageServiceLayer.md)
    """

    model_config = common_config
    altitude: float = Field(
        ...,
        description="Used when the `hillshadeType` is `traditional`. The  altitude of the illumination source.",
    )
    azimuth: float = Field(
        ...,
        description="Used when the `hillshadeType` is `traditional`. The azimuth of the illumination source.",
    )
    color_ramp: ColorRamp | None = Field(
        None,
        alias="colorRamp",
        description="The color ramp to display the shaded relief. when not specified, a grayscale hillshade is produced. When this is specified, grayscale hillshade is fused with colorized elevation.",
    )
    hillshade_type: HillshadeType = Field(
        ...,
        alias="hillshadeType",
        description="Use single (traditional), or multiple illumination sources to generate hillshade",
    )
    pixel_size_factor: float | None = Field(
        None,
        alias="pixelSizeFactor",
        description="Accounts for changes in scale as the viewer zooms in and out on the map display",
    )
    pixel_size_power: float | None = Field(
        None,
        alias="pixelSizePower",
        description="Accounts for the altitude changes (or scale) as the viewer zooms in and out on the map display",
    )
    scaling_type: ScalingType = Field(
        ...,
        alias="scalingType",
        description="Apply a constant or adjusted z-factor based on resolution changes. The `adjusted` type is suitable for worldwide elevation dataset. An adjusted `zFactor` is determined using this equation: `Adjusted Z-Factor = (Z Factor) + (Pixel Size)` <sup>(Pixel Size Power)</sup> `x Pixel Size Factor`",
    )
    type: Literal["rasterShadedRelief"] = Field(
        "rasterShadedRelief",
        description="Specifies the type of renderer used.",
    )
    z_factor: float = Field(
        ...,
        alias="zFactor",
        description="A conversion factor that adjusts the units of measure for the vertical (or elevation) units when they are different from the horizontal coordinate (x,y) units of the input surface. It is the number of ground x,y units in one surface z-unit.",
    )


class StretchRenderer(BaseModel):
    """
    This renderer displays continuous raster cell values across a gradual ramp of colors. Use this renderer to draw a single band of continuous data. This renderer works well when you have a large range of values to display, such as with imagery or scientific data.
    """

    model_config = common_config
    color_ramp: ColorRamp | None = Field(None, alias="colorRamp")
    compute_gamma: bool | None = Field(
        None,
        alias="computeGamma",
        description="Indicates if gamma values should be computed by default.",
    )
    dra: bool | None = Field(
        None,
        description="Indicates if Dynamic Range Adjustment should be applied.",
    )
    gamma: list[float] | None = Field(None, description="The list of Gamma value(s).")
    max: float | None = Field(None, description="The current maximum output value.")
    max_percent: float | None = Field(
        None,
        alias="maxPercent",
        description="The current maximum percent value.",
    )
    min: float | None = Field(None, description="The current minimum output value.")
    min_percent: float | None = Field(
        None,
        alias="minPercent",
        description="The current minimum percent value.",
    )
    number_of_standard_deviations: float | None = Field(
        None,
        alias="numberOfStandardDeviations",
        description="The number of standard deviations for standard deviation stretch.",
    )
    sigmoid_strength_level: float | None = Field(
        None,
        alias="sigmoidStrengthLevel",
        description="Set this from (1 to 6) to adjust the curvature of Sigmoid curve used in color stretch.",
    )
    statistics: list[list[float]] | None = Field(
        None, description="The custom raster stretch statistics."
    )
    stretch_type: StretchType | None = Field(
        None,
        alias="stretchType",
        description="The stretch types for stretch raster function.",
    )
    type: Literal["rasterStretch"] | None = Field(
        None, description="Specifies the type of renderer used."
    )
    use_gamma: bool | None = Field(
        None,
        alias="useGamma",
        description="Indicates if the renderer applies Gamma stretch.",
    )


class CodedValue(BaseModel):
    """
    The coded value domain includes both the actual value that is stored in a database and a description of what the code value means.
    """

    model_config = common_config
    coded_values: list[CodedValues] = Field(
        ...,
        alias="codedValues",
        description="A set of valid values with unique names.",
    )
    name: str | None = Field(None, description="The domain name.")
    type: Literal["codedValue"] = Field(
        "codedValue",
        description="String value representing the domain type.",
    )


class PictureFillSymbolsEsriPFS(BaseModel):
    """
    Picture fill symbols can be used to symbolize polygon geometries.
    """

    model_config = common_config
    angle: confloat(ge=0.0, le=360.0) | None = Field(
        None,
        description="Numeric value that defines the number of degrees ranging from 0-360, that a marker symbol is rotated. The rotation is from East in a counter-clockwise direction where East is the 0� axis.",
    )
    content_type: str | None = Field(
        None,
        alias="contentType",
        description="String value indicating the content type for the image.",
    )
    height: float | None = Field(
        None,
        description="Numeric value used if needing to resize the symbol. Specify a value in points. If images are to be displayed in their original size, leave this blank.",
    )
    image_data: str | None = Field(
        None,
        alias="imageData",
        description="String value indicating the base64 encoded data.",
    )
    outline: SimpleLineSymbolEsriSLS | None = Field(
        None, description="Sets the outline of the symbol."
    )
    type: Literal["esriPFS"] = Field(
        "esriPFS", description="Specifies the type of symbol used."
    )
    url: str | None = Field(
        None,
        description="String value indicating the URL of the image. The URL should be relative if working with static layers. A full URL should be used for map service dynamic layers. A relative URL can be dereferenced by accessing the map layer image resource or the feature layer image resource.",
    )
    width: float | None = Field(
        None,
        description="Numeric value used if needing to resize the symbol. Specify a value in points. If images are to be displayed in their original size, leave this blank.",
    )
    xoffset: float | None = Field(
        None,
        description="Numeric value indicating the offset on the x-axis in points.",
    )
    xscale: float | None = Field(
        None,
        description="Numeric value indicating the scale factor in x direction.",
    )
    yoffset: float | None = Field(
        None,
        description="Numeric value indicating the offset on the y-axis in points.",
    )
    yscale: float | None = Field(
        None,
        description="Numeric value indicating the scale factor in y direction.",
    )


class SimpleMarkerSymbolEsriSMS(BaseModel):
    """
    Simple marker symbols can be used to symbolize point geometries.
    """

    model_config = common_config
    angle: confloat(ge=0.0, le=360.0) | None = Field(
        None,
        description="Numeric value used to rotate the symbol. The symbol is rotated counter-clockwise. For example, The following, angle=-30, in will create a symbol rotated -30 degrees counter-clockwise; that is, 30 degrees clockwise.",
    )
    color: list[conint(ge=0, le=255)] | None = Field(
        None,
        description="Color is represented as a four-element array. The four elements represent values for red, green, blue, and alpha in that order. Values range from 0 through 255. If color is undefined for a symbol, the color value is null.",
        title="color",
    )
    outline: SimpleLineSymbolEsriSLS | None = Field(
        None, description="Sets the outline of the marker symbol."
    )
    size: float | None = Field(
        None, description="Numeric size of the symbol given in points."
    )
    style: SimpleMarkerSymbolStyle | str = Field(
        ..., description="String value representing the simple marker type."
    )
    type: Literal["esriSMS"] = Field(
        "esriSMS", description="Specifies the type of symbol used."
    )
    xoffset: float | None = Field(
        None,
        description="Numeric value indicating the offset on the x-axis in points.",
    )
    yoffset: float | None = Field(
        None,
        description="Numeric value indicating the offset on the y-axis in points.",
    )


class AuthoringInfoField(BaseModel):
    """
    Contains information about an attribute field relating to Relationship renderers.
    """

    model_config = common_config
    class_break_infos: list[AuthoringInfoClassBreakInfo] | None = Field(
        None, alias="classBreakInfos"
    )
    field: str | None = Field(None, description="Attribute field used for renderer.")
    label: str | None = Field(
        None,
        description="The label used to describe the field or attribute in the legend.",
    )
    normalization_field: str | None = Field(
        None,
        alias="normalizationField",
        description="Attribute field used to normalize the data.",
    )


class AuthoringInfoVisualVariable(BaseModel):
    """
    This visual variable pertains specifically to [authoringInfo](authoringInfo.md) and is different from visual variables directly on the [renderer](renderer.md).
    """

    model_config = common_config
    end_time: float | str | None = Field(
        None,
        alias="endTime",
        description="A Unix stamp. Both `startTime` or `endTime` can be fields. If this is the case, their names must be different.",
    )
    field: str | None = Field(
        None,
        description="The attribute field the user chose in the Smart Mapping gallery. Applies to age renderer or reference size visualizations (i.e. when `theme` is `reference-size`). For age renderer, this value must also be specified in either `startTime` or `endTime`. This property is used for UI purposes only.",
    )
    max_slider_value: float | None = Field(
        None,
        alias="maxSliderValue",
        description="A numeric value indicating the maximum value displayed.",
    )
    min_slider_value: float | None = Field(
        None,
        alias="minSliderValue",
        description="A numeric value indicating the minimum value displayed.",
    )
    normalization_field: str | None = Field(
        None,
        alias="normalizationField",
        description="Only applicable when `theme` is `reference-size`. Indicates the attribute field the user chose in the Smart Mapping gallery for normalizing data in the selected `field`. This property is used for UI purposes only.",
    )
    reference_size_scale: int = Field(
        0,
        alias="referenceSizeScale",
        description="The view scale value at which the reference size symbol was created. At this scale value, the sizes persisted in `sizeStops` are used to render the reference size symbols in the map. At other view scales, the effective sizes in `sizeStops` will scale proportionally (based on this value) to avoid symbol overlap and maintain a consistent visualization.",
    )
    reference_size_symbol_style: ReferenceSizeSymbolStyle | None = Field(
        None,
        alias="referenceSizeSymbolStyle",
        description="Only applicable when `theme` is `reference-size`. This value specifies the style (or shape) of the symbols generated with a reference line. Typically, a reference line is used to visualize the maximum possible size (i.e. data value) of a data-driven proportional symbol. Visualizations with a reference size must be defined in a ClassBreaksRenderer or UniqueValueRenderer with a CIMSymbol containing two symbol layers: one visualizing the maximum size of the symbol as a hollow ring, and the other as a solid shape whose size is driven by a data value set in the renderer's field property, and configured in a primitive override of the CIMSymbol. These renderers must not contain size visual variables, but may contain other visual variable types. This property is used for UI purposes only. When defined, `AuthoringInfoVisualVariable.sizeStops` must also be defined for the legend to properly represent the visualization.",
    )
    size_info_type: Literal["referenceSize"] | None = Field(
        "referenceSize",
        alias="sizeInfoType",
        description="Indicates the type of specialty size variable to create.",
    )
    size_stops: list[SizeStop] | None = Field(
        None,
        alias="sizeStops",
        description="An array of objects that defines the thematic size ramp for a size-based visualization with a `referenceSize` size variable. At least two stops are required. The stops must be listed in ascending order based on the value of the `value` property in each stop. This property is required when `sizeInfoType` is `referenceSize` for the legend to properly render the size reference symbol style along with its labels.",
    )
    start_time: float | str | None = Field(
        None,
        alias="startTime",
        description="A Unix time stamp. Both `startTime` or `endTime` can be fields. If this is the case, their names must be different.",
    )
    style: RatioStyle | str | None = Field(
        None,
        description="It is used to map the ratio between two numbers. It is possible to express that relationship as percentages, simple ratios, or an overall percentage.",
    )
    theme: Theme | None = Field(
        None,
        description="Theme to be used only when working with visual variables of type `colorInfo` or `sizeInfo`. Default is `high-to-low`. The `centered-on`, and `extremes` themes only apply to `colorInfo` visual variables.",
    )
    type: RendererVisualVariableType | None = Field(
        None,
        description="A string value specifying the type of renderer's visual variable.",
    )
    units: TimeUnit | None = Field(
        None, description="Units for `startTime` and `endTime`."
    )


class ColorInfoVisualVariable(BaseModel):
    """
    The colorInfo visual variable defines how a continuous color ramp is applied to features based on the values of a numeric field attribute.
    """

    model_config = common_config
    field: str | None = Field(
        None,
        description="Attribute field used for color rendering if no valueExpression is provided.",
    )
    legend_options: LegendOptions | None = Field(None, alias="legendOptions")
    normalization_field: str | None = Field(
        None,
        alias="normalizationField",
        description="Attribute field used to normalize the data.",
    )
    stops: list[ColorStop] | None = Field(None, description="An array of stop objects.")
    type: Literal["colorInfo"] = Field(
        "colorInfo", description="Specifies the type of visual variable."
    )
    value_expression: str | None = Field(
        None,
        alias="valueExpression",
        description="An [Arcade expression](https://developers.arcgis.com/arcade/) that computes a value in lieu of a value provided by an attribute `field`.",
    )
    value_expression_title: str | None = Field(
        None,
        alias="valueExpressionTitle",
        description="The title identifying and describing the associated [Arcade](https://developers.arcgis.com/arcade/) expression as defined in the `valueExpression` property.",
    )


class TransparencyInfoVisualVariable(BaseModel):
    """
    The transparencyInfo visual variable defines the transparency, or opacity, of each feature's symbol based on a numeric attribute field value.
    """

    model_config = common_config
    field: str | None = Field(
        None,
        description="Attribute field used for setting the transparency of a feature if no `valueExpression` is provided.",
    )
    legend_options: LegendOptions | None = Field(None, alias="legendOptions")
    normalization_field: str | None = Field(
        None,
        alias="normalizationField",
        description="Attribute field used to normalize the data.",
    )
    stops: list[TransparencyStop] | None = Field(
        None, description="An array of transparencyStop objects."
    )
    type: Literal["transparencyInfo"] = Field(
        "transparencyInfo",
        description="Specifies the type of visual variable.",
    )
    value_expression: str | None = Field(
        None,
        alias="valueExpression",
        description="An [Arcade expression](https://developers.arcgis.com/arcade/) evaluating to a number.",
    )
    value_expression_title: str | None = Field(
        None,
        alias="valueExpressionTitle",
        description="The title identifying and describing the associated [Arcade](https://developers.arcgis.com/arcade/) expression as defined in the `valueExpression` property.",
    )


class Size(BaseModel):
    """
    Specifies the marker size to use at any given map scale. This is required if valueUnit is set to `unknown`.
    """

    model_config = common_config
    expression: str | None = Field(
        None,
        description="The value which allows a size to be defined based on the map scale. Currently the only supported expression is `view.scale`.",
    )
    stops: list[SizeStop] = Field(
        ...,
        description="An array of objects that define the size of the symbol at various values of the expression. Each object in the array has a numeric size property and a numeric value property. If the value calculated from the expression matches the value of a stop, then the size corresponding to that stop is selected. For example, if expression is set to `view.scale`, the value corresponds to the map's scale. The size represents the symbol size (in points) that corresponds to this scale. If the map scale matches the scale value of a stop, the size corresponding to that stop value is used as the symbol size for the features. If the map scale value falls between two stops, the symbol size is interpolated between the sizes of the two stops. The minSize and maxSize stop values are usually the same, although it is possible to have different values depending on how minSize is calculated versus the maxSize.",
    )
    type: Literal["sizeInfo"] = Field(
        "sizeInfo", description="Value indicating the type of rendering."
    )
    value_expression: str = Field(
        None,
        alias="valueExpression",
        description="An [Arcade expression](https://developers.arcgis.com/arcade/) evaluating to a number.",
    )


class Editing(BaseModel):
    """
    An object containing all the editing properties within the web map.
    """

    model_config = common_config
    location_tracking: LocationTracking | None = Field(
        None,
        alias="locationTracking",
        description=" If locationTracking is set and enabled, the collector app will update the feature service at the defined interval with the current location of the user logged into the collector application.",
    )


class GeoRSSLayerGeoRSS(BaseModel):
    """
    GeoRSS feeds may contain any combination of points, lines, and polygons. Web clients use a GeoRSS to JSON request service. This service returns one to many feature collections with different geometry types. The returned JSON specifies the point, lines, and polygons symbols used to display the features in that layer.
    """

    model_config = common_config
    blend_mode: BlendMode | None = Field(None, alias="blendMode")
    effect: (
        list[
            EffectFunctions
            | EffectFunctions1
            | EffectFunctions2
            | EffectFunctions3
            | EffectFunctions4
        ]
        | list[ScaleDependentEffect]
        | None
    ) = Field(
        None,
        description="Effect provides various filter functions to achieve different visual effects similar to how image filters (photo apps) work.",
        title="Effect",
    )
    id: str | None = Field(
        None, description="A unique identifying string for the layer."
    )
    layer_type: Literal["GeoRSS"] = Field(
        "GeoRSS",
        alias="layerType",
        description="String indicating the layer type.",
    )
    line_symbol: SimpleLineSymbolEsriSLS | None = Field(
        None,
        alias="lineSymbol",
        description="Defined by the GeoRSS to JSON request service. If the GeoRSS feed does not have lines, this property is not added to the layer JSON.",
    )
    max_scale: confloat(ge=0.0) | None = Field(
        None,
        alias="maxScale",
        description="A number representing the maximum scale at which the layer will be visible. The number is the scale's denominator.",
    )
    min_scale: confloat(ge=0.0) | None = Field(
        None,
        alias="minScale",
        description="A number representing the minimum scale at which the layer will be visible. The number is the scale's denominator.",
    )
    opacity: confloat(ge=0.0, le=1.0) | None = Field(
        1,
        description="The degree of transparency applied to the layer on the client side, where 0 is full transparency and 1 is no transparency.",
    )
    point_symbol: PictureMarkerSymbolEsriPMS | None = Field(
        None,
        alias="pointSymbol",
        description="Defined by the GeoRSS to JSON request service. If the GeoRSS feed does not have points, this property is not added to the layer JSON.",
    )
    polygon_symbol: SimpleFillSymbolEsriSFS | None = Field(
        None,
        alias="polygonSymbol",
        description="Defined by the GeoRSS to JSON request service. If the GeoRSS feed does not have polygons, this property is not added to the layer JSON.",
    )
    refresh_interval: float | None = Field(
        0,
        alias="refreshInterval",
        description="Refresh interval of the layer in minutes. Non-zero value indicates automatic layer refresh at the specified interval. Value of 0 indicates auto refresh is not enabled.",
    )
    show_legend: bool | None = Field(
        True,
        alias="showLegend",
        description="Boolean value indicating whether to display the layer in the legend. Default value is `true`.",
    )
    title: str = Field(
        ...,
        description="A user-friendly string title for the layer that can be used in a table of contents.",
    )
    type: str | None = Field(None, description="Deprecated, please use layerType.")
    url: str = Field(..., description="The URL to the layer.")
    visibility: bool | None = Field(
        True,
        description="Boolean property determining whether the layer is initially visible in the web map.",
    )
    visibility_time_extent: list[int | None] | None = Field(
        None,
        alias="visibilityTimeExtent",
        description="Represents time extent that will control when a layer should be visible based on webmap's current time. Visibility time extent only affects the layer visibility and will not filter the data.",
        title="timeExtent",
    )


class KMLLayerKML(BaseModel):
    """
    Keyhole Markup Language (KML) is an XML-based format for storing geographic data and associated content and is an official Open Geospatial Consortium (OGC) standard. KML is a common format for sharing geographic data with non-GIS users as it can be easily delivered on the Internet.
    """

    model_config = common_config
    blend_mode: BlendMode | None = Field(None, alias="blendMode")
    effect: (
        list[
            EffectFunctions
            | EffectFunctions1
            | EffectFunctions2
            | EffectFunctions3
            | EffectFunctions4
        ]
        | list[ScaleDependentEffect]
        | None
    ) = Field(
        None,
        description="Effect provides various filter functions to achieve different visual effects similar to how image filters (photo apps) work.",
        title="Effect",
    )
    id: str | None = Field(
        None, description="A unique identifying string for the layer."
    )
    item_id: str | None = Field(
        None,
        alias="itemId",
        description="Optional string containing the item ID if it's registered on ArcGIS Online or your organization's portal.",
    )
    layer_type: Literal["KML"] = Field(
        "KML",
        alias="layerType",
        description="String indicating the layer type.",
    )
    max_scale: confloat(ge=0.0) | None = Field(
        None,
        alias="maxScale",
        description="A number representing the maximum scale at which the layer will be visible. The number is the scale's denominator.",
    )
    min_scale: confloat(ge=0.0) | None = Field(
        None,
        alias="minScale",
        description="A number representing the minimum scale at which the layer will be visible. The number is the scale's denominator.",
    )
    opacity: confloat(ge=0.0, le=1.0) | None = Field(
        1,
        description="The degree of transparency applied to the layer on the client side, where 0 is full transparency and 1 is no transparency.",
    )
    refresh_interval: float | None = Field(
        0,
        alias="refreshInterval",
        description="Refresh interval of the layer in minutes. Non-zero value indicates automatic layer refresh at the specified interval. Value of 0 indicates auto refresh is not enabled.",
    )
    show_legend: bool | None = Field(
        True,
        alias="showLegend",
        description="Boolean value indicating whether to display the layer in the legend. Default value is `true`.",
    )
    title: str = Field(
        ...,
        description="A user-friendly string title for the layer that can be used in a table of contents.",
    )
    type: str | None = Field(None, description="Deprecated. Use layerType instead.")
    url: str = Field(..., description="The URL to the layer.")
    visibility: bool | None = Field(
        True,
        description="Boolean property determining whether the layer is initially visible in the web map.",
    )
    visibility_time_extent: list[int | None] | None = Field(
        None,
        alias="visibilityTimeExtent",
        description="Represents time extent that will control when a layer should be visible based on webmap's current time. Visibility time extent only affects the layer visibility and will not filter the data.",
        title="timeExtent",
    )
    visible_folders: list[int] | None = Field(
        None,
        alias="visibleFolders",
        description="Array of numeric IDs of folders that will be made visible.",
    )


class MediaLayerMedia(BaseModel):
    """
    Media layer displays one media on the map positioned by 4 control points.
    """

    model_config = common_config
    blend_mode: BlendMode | None = Field(None, alias="blendMode")
    effect: (
        list[
            EffectFunctions
            | EffectFunctions1
            | EffectFunctions2
            | EffectFunctions3
            | EffectFunctions4
        ]
        | list[ScaleDependentEffect]
        | None
    ) = Field(
        None,
        description="Effect provides various filter functions to achieve different visual effects similar to how image filters (photo apps) work.",
        title="Effect",
    )
    georeference: Georeference | None = None
    id: str | None = Field(
        None, description="A unique identifying string for the layer."
    )
    item_id: str | None = Field(
        None,
        alias="itemId",
        description="Optional string containing the item ID of the `Media Layer` item registered on ArcGIS Online or your organization's portal.",
    )
    layer_type: Literal["MediaLayer"] = Field(
        "MediaLayer",
        alias="layerType",
        description="String indicating the layer type.",
    )
    max_scale: confloat(ge=0.0) | None = Field(
        0,
        alias="maxScale",
        description="A number representing the maximum scale at which the layer will be visible. The number is the scale's denominator.",
    )
    media_type: Literal["image"] = Field(
        "image",
        alias="mediaType",
        description="Indicates the type of media the url points to. The currently only supported type is `image` in jpeg or png format. It is applicable only when `url` is defined.",
    )
    min_scale: confloat(ge=0.0) | None = Field(
        0,
        alias="minScale",
        description="A number representing the minimum scale at which the layer will be visible. The number is the scale's denominator.",
    )
    opacity: confloat(ge=0.0, le=1.0) | None = Field(
        1,
        description="The degree of transparency applied to the layer on the client side, where 0 is full transparency and 1 is no transparency.",
    )
    title: str = Field(
        ...,
        description="A user-friendly string title for the layer that can be used in a table of contents.",
    )
    url: str | None = Field(
        None,
        description="URL to the media file. The url is relative when the media file is stored as an item resource. It is not applicable when `itemId` is defined. See related `mediaType` property.",
    )
    visibility: bool | None = Field(
        True,
        description="Boolean property determining whether the layer is initially visible in the web map.",
    )
    visibility_time_extent: list[int | None] | None = Field(
        None,
        alias="visibilityTimeExtent",
        description="Represents time extent that will control when a layer should be visible based on webmap's current time. Visibility time extent only affects the layer visibility and will not filter the data.",
        title="timeExtent",
    )


class VectorTileLayerVectorTileLayer(BaseModel):
    """
    A vector tile layer references a set of web-accessible vector tiles and the corresponding style for how those tiles should be drawn.
    """

    model_config = common_config
    blend_mode: BlendMode | None = Field(None, alias="blendMode")
    full_extent: Extent | dict | None = Field(
        None,
        alias="fullExtent",
        description="An extent object representing the full extent envelope for the layer.",
    )
    custom_parameters: dict[constr(pattern=r".*"), str] | None = Field(
        None,
        alias="customParameters",
        description="A sequence of custom parameters appended to the URL of all requests related to a layer.",
        title="customParameters",
    )
    effect: (
        list[
            EffectFunctions
            | EffectFunctions1
            | EffectFunctions2
            | EffectFunctions3
            | EffectFunctions4
        ]
        | list[ScaleDependentEffect]
        | None
    ) = Field(
        None,
        description="Effect provides various filter functions to achieve different visual effects similar to how image filters (photo apps) work.",
        title="Effect",
    )
    id: str | None = Field(
        None,
        description="A string containing the item ID of the service if it's registered on ArcGIS Online or your organization's portal.",
    )
    is_reference: bool | None = Field(
        None,
        alias="isReference",
        description="This property is applicable if used as a baseMapLayer. A boolean value indicating whether or not the baseMapLayer draws on top (true) of other layers, including operationalLayers, or below (false).",
    )
    item_id: str | None = Field(
        None,
        alias="itemId",
        description="Optional string containing the item ID of the service if it's registered on ArcGIS Online or your organization's portal.",
    )
    layer_type: Literal["VectorTileLayer"] = Field(
        "VectorTileLayer",
        alias="layerType",
        description="String indicating the layer type.",
    )
    max_scale: float | None = Field(
        None,
        alias="maxScale",
        description="A number representing the maximum scale at which the layer will be visible. The number is the scale's denominator.",
    )
    min_scale: float | None = Field(
        None,
        alias="minScale",
        description="A number representing the minimum scale at which the layer will be visible. The number is the scale's denominator.",
    )
    opacity: confloat(ge=0.0, le=1.0) | None = Field(
        1,
        description="The degree of transparency applied to the layer on the client side, where 0 is full transparency and 1 is no transparency.",
    )
    style_url: str | None = Field(
        None,
        alias="styleUrl",
        description="A url to a JSON file containing the stylesheet information used to render the layer. You may also pass an object containing the stylesheet information identical to the JSON file.",
    )
    title: str = Field(
        ...,
        description="A user-friendly string title for the layer that can be used in a table of contents.",
    )
    visibility: bool | None = Field(
        True,
        description="Boolean property determining whether the layer is initially visible in the web map.",
    )
    visibility_time_extent: list[int | None] | None = Field(
        None,
        alias="visibilityTimeExtent",
        description="Represents time extent that will control when a layer should be visible based on webmap's current time. Visibility time extent only affects the layer visibility and will not filter the data.",
        title="timeExtent",
    )


class WebTiledLayerWebTiledLayer(BaseModel):
    """
    A tile layer is a derived from a set of web-accessible tiles which reside on a server. The tiles are accessed by a direct URL request from the web browser. Because the tiles in a tile layer are not available as a service, they must be in a specific format for a web app such as the ArcGIS.com map viewer to display the layer on a map.
    """

    model_config = common_config
    blend_mode: BlendMode | None = Field(None, alias="blendMode")
    copyright: str | None = Field(
        None,
        description="Attribution to the Web Tiled Layer provider. It is displayed in the attribution on the web map. Input required by the user when the layer is added to the web map.",
    )
    effect: (
        list[
            EffectFunctions
            | EffectFunctions1
            | EffectFunctions2
            | EffectFunctions3
            | EffectFunctions4
        ]
        | list[ScaleDependentEffect]
        | None
    ) = Field(
        None,
        description="Effect provides various filter functions to achieve different visual effects similar to how image filters (photo apps) work.",
        title="Effect",
    )
    full_extent: Extent | dict | None = Field(
        None,
        alias="fullExtent",
        description="An extent object representing the full extent envelope for the layer.",
    )
    id: str | None = Field(
        None, description="A unique identifying string for the layer."
    )
    is_reference: bool | None = Field(
        None,
        alias="isReference",
        description="This is applicable if used as a baseMapLayer. A boolean value indicating whether or not the baseMapLayer draws on top (true) of other layers, including operationalLayers , or below (false).",
    )
    item_id: str | None = Field(
        None,
        alias="itemId",
        description="Unique string value indicating an item registered in ArcGIS Online or your organization's portal.",
    )
    layer_type: Literal["WebTiledLayer"] = Field(
        "WebTiledLayer",
        alias="layerType",
        description="String indicating the layer type.",
    )
    max_scale: confloat(ge=0.0) | None = Field(
        None,
        alias="maxScale",
        description="A number representing the maximum scale at which the layer will be visible. The number is the scale's denominator.",
    )
    min_scale: confloat(ge=0.0) | None = Field(
        None,
        alias="minScale",
        description="A number representing the minimum scale at which the layer will be visible. The number is the scale's denominator.",
    )
    opacity: confloat(ge=0.0, le=1.0) | None = Field(
        1,
        description="The degree of transparency applied to the layer on the client side, where 0 is full transparency and 1 is no transparency.",
    )
    refresh_interval: float | None = Field(
        0,
        alias="refreshInterval",
        description="Refresh interval of the layer in minutes. Non-zero value indicates automatic layer refresh at the specified interval. Value of 0 indicates auto refresh is not enabled.",
    )
    sub_domains: list[str] | None = Field(
        None,
        alias="subDomains",
        description="If subdomains are detected, they must be specified. The map viewer detects if the Web Tiled Layer has subdomains by parsing the templateURL value for {subDomain}.",
    )
    template_url: str | None = Field(
        None,
        alias="templateUrl",
        description="URL to the Web Tiled Layer. Input required by the user when the layer is added to the web map. The template URL contains a parameterized URL. The URL can contain the following templated parameters: 'level', 'col', 'row', and 'subDomain'.",
    )
    tile_info: TileInfo | None = Field(
        None,
        alias="tileInfo",
        description="Contains the spatial reference and the tiling scheme of the layer. Typically retrieved from a WMTS OGC Web Service. If missing the layer must be in the WGS 1984 Web Mercator (Auxiliary Sphere) tiling scheme.",
    )
    title: str = Field(
        ...,
        description="A user-friendly string title for the layer that can be used in a table of contents.",
    )
    type: str | None = Field(None, description="Deprecated, use layerType instead.")
    visibility: bool | None = Field(
        True,
        description="Boolean property determining whether the layer is initially visible in the web map.",
    )
    visibility_time_extent: list[int | None] | None = Field(
        None,
        alias="visibilityTimeExtent",
        description="Represents time extent that will control when a layer should be visible based on webmap's current time. Visibility time extent only affects the layer visibility and will not filter the data.",
        title="timeExtent",
    )
    wmts_info: WebMapTileServiceInfo | None = Field(
        None,
        alias="wmtsInfo",
        description="Object containing information about the chosen WMTS service layer and tiling schema.",
    )


class WMSLayerWMS(BaseModel):
    """
    A layer consuming a Web Map Service (WMS). The WMS specification is an international specification for serving and consuming dynamic maps on the web.
    """

    model_config = common_config
    blend_mode: BlendMode | None = Field(None, alias="blendMode")
    copyright: str | None = Field(
        None,
        description="A string containing copyright and access information for a WMS layer. This is copied from the capabilities document exposed by the WMS service.",
    )
    custom_layer_parameters: dict[constr(pattern=r".*"), str] | None = Field(
        None,
        alias="customLayerParameters",
        description="A sequence of custom parameters to WMS layer requests. These parameters are applied to `GetMap` and `GetFeatureInfo` requests. The `customLayerParameters` property takes precedence if `customParameters` is also present.",
    )
    custom_parameters: dict[constr(pattern=r".*"), str] | None = Field(
        None,
        alias="customParameters",
        description="A sequence of custom parameters to all WMS requests. These parameters are applied to `GetCapabilities`, `GetMap`, and `GetFeatureinfo` requests. If used with the `customLayerParameters` property, `customParameters` will not take precedence.",
    )
    effect: (
        list[
            EffectFunctions
            | EffectFunctions1
            | EffectFunctions2
            | EffectFunctions3
            | EffectFunctions4
        ]
        | list[ScaleDependentEffect]
        | None
    ) = Field(
        None,
        description="Effect provides various filter functions to achieve different visual effects similar to how image filters (photo apps) work.",
        title="Effect",
    )
    extent: list[list[Any]] | None = Field(
        None,
        description="The minimum bounding rectangle, in decimal degrees, of the area covered by the layer as specified in the capabilities.",
        max_length=2,
        min_length=2,
    )
    feature_info_format: str | None = Field(
        None,
        alias="featureInfoFormat",
        description="Format of the feature, e.g.`text/plain`",
    )
    feature_info_url: str | None = Field(
        None,
        alias="featureInfoUrl",
        description="The URL for the WMS GetFeatureInfo call.",
    )
    format: Format | None = Field(
        Format.png,
        validate_default=True,
        description="A string containing the image format to be requested from a WMS service. Default is `png`.",
    )
    id: str | None = Field(
        None, description="A unique identifying string for the layer."
    )
    is_reference: bool | None = Field(
        None,
        alias="isReference",
        description="This is applicable if used as a baseMapLayer. A boolean value indicating whether or not the baseMapLayer draws on top (true) of other layers, including operationalLayers , or below (false).",
    )
    item_id: str | None = Field(
        None,
        alias="itemId",
        description="Unique string value indicating an item registered in ArcGIS Online or your organization's portal.",
    )
    layers: list[WMSLayerLayer] | None = Field(
        None, description="An array of layer objects from the WMS service."
    )
    layer_type: Literal["WMS"] = Field(
        "WMS",
        alias="layerType",
        description="String indicating the layer type.",
    )
    map_url: str | None = Field(
        None,
        alias="mapUrl",
        description="A string containing the URL of the WMS map. When using a WMS layer, you should also supply the url property. `mapUrl` is the URL returned by the capabilities to be used for the getMap requests.",
    )
    max_height: float | None = Field(
        None,
        alias="maxHeight",
        description="A number defining the maximum height, in pixels, that should be requested from the service.",
    )
    max_scale: confloat(ge=0.0) | None = Field(
        None,
        alias="maxScale",
        description="A number representing the maximum scale at which the layer will be visible. The number is the scale's denominator.",
    )
    max_width: float | None = Field(
        None,
        alias="maxWidth",
        description="A number defining the maximum width, in pixels, that should be requested from the service.",
    )
    min_scale: confloat(ge=0.0) | None = Field(
        None,
        alias="minScale",
        description="A number representing the minimum scale at which the layer will be visible. The number is the scale's denominator.",
    )
    opacity: confloat(ge=0.0, le=1.0) | None = Field(
        1,
        description="The degree of transparency applied to the layer on the client side, where 0 is full transparency and 1 is no transparency.",
    )
    refresh_interval: float | None = Field(
        0,
        alias="refreshInterval",
        description="Refresh interval of the layer in minutes. Non-zero value indicates automatic layer refresh at the specified interval. Value of 0 indicates auto refresh is not enabled.",
    )
    show_legend: bool | None = Field(
        None,
        alias="showLegend",
        description="Boolean value indicating whether to display the layer in the legend. Default value is `true`.",
    )
    spatial_references: list[int] | None = Field(
        None,
        alias="spatialReferences",
        description="An array of numbers containing well-known IDs for spatial references supported by the service.",
    )
    title: str = Field(
        ...,
        description="A user-friendly string title for the layer that can be used in a table of contents.",
    )
    type: str | None = Field(None, description="Deprecated. Use layerType instead.")
    url: str | None = Field(
        None,
        description="The URL to the WMS service (`getCapabilities` URL).",
    )
    version: str | None = Field(
        None,
        description="A string containing the version number of the service.",
    )
    visibility: bool | None = Field(
        True,
        description="Boolean property determining whether the layer is initially visible in the web map.",
    )
    visibility_time_extent: list[int | None] | None = Field(
        None,
        alias="visibilityTimeExtent",
        description="Represents time extent that will control when a layer should be visible based on webmap's current time. Visibility time extent only affects the layer visibility and will not filter the data.",
        title="timeExtent",
    )
    visible_layers: list[str] | None = Field(
        None,
        alias="visibleLayers",
        description="An array of layers that should appear visible. The array contains the names of the visible layers.",
    )


class TimeSlider(BaseModel):
    """
    Time animation is controlled by a configurable time slider. Those configurations are saved to the web map as a timeSlider widget.
    """

    model_config = common_config
    properties: TimeSliderProperties | None = None


class BingLayerBingLayer(BaseModel):
    """
    Indicates if working with Microsoft Bing layers. There are three layer types associated with Bing Layers: BingMapsAerial, BingMapsRoad, and BingMapsHybrid.
    """

    model_config = common_config
    blend_mode: BlendMode | None = Field(None, alias="blendMode")
    effect: (
        list[
            EffectFunctions
            | EffectFunctions1
            | EffectFunctions2
            | EffectFunctions3
            | EffectFunctions4
        ]
        | list[ScaleDependentEffect]
        | None
    ) = Field(
        None,
        description="Effect provides various filter functions to achieve different visual effects similar to how image filters (photo apps) work.",
        title="Effect",
    )
    id: str | None = Field(
        None, description="A unique identifying string for the layer."
    )
    layer_type: LayerType = Field(
        ...,
        alias="layerType",
        description="String indicating the layer type.",
    )
    max_scale: conint(ge=0) | None = Field(
        None,
        alias="maxScale",
        description="Integer property used to determine the maximum scale at which the layer is displayed.",
    )
    min_scale: conint(ge=0) | None = Field(
        None,
        alias="minScale",
        description="Integer property used to determine the minimum scale at which the layer is displayed.",
    )
    opacity: confloat(ge=0.0, le=1.0) | None = Field(
        1,
        description="The degree of transparency applied to the layer on the client side, where 0 is full transparency and 1 is no transparency.",
    )
    portal_url: str | None = Field(
        None,
        alias="portalUrl",
        description="A string value representing the URL to the Portal/organization Self resource. Calls should be made to this property to retrieve the Bing key. If the key is not made accessible to the public or if `canShareBingPublic` is false, any web maps using Bing layers will not work.",
    )
    title: str = Field(
        ...,
        description="A user-friendly string title for the layer that can be used in  a table of contents.",
    )
    type: str | None = Field(None, description="Deprecated, use layerType instead.")
    visibility: bool | None = Field(
        True,
        description="Boolean property determining whether the layer is initially visible in the web map.",
    )
    visibility_time_extent: list[int | None] | None = Field(
        None,
        alias="visibilityTimeExtent",
        description="Represents time extent that will control when a layer should be visible based on webmap's current time. Visibility time extent only affects the layer visibility and will not filter the data.",
        title="timeExtent",
    )


class OpenStreetMapLayerOpenStreetMap(BaseModel):
    """
    Allows use of OpenStreetMap data for use in basemaps only.
    """

    model_config = common_config
    blend_mode: BlendMode | None = Field(None, alias="blendMode")
    effect: (
        list[
            EffectFunctions
            | EffectFunctions1
            | EffectFunctions2
            | EffectFunctions3
            | EffectFunctions4
        ]
        | list[ScaleDependentEffect]
        | None
    ) = Field(
        None,
        description="Effect provides various filter functions to achieve different visual effects similar to how image filters (photo apps) work.",
        title="Effect",
    )
    id: str | None = Field(
        "defaultBasemap",
        description="A unique identifying string for the layer.",
    )
    layer_type: Literal["OpenStreetMap"] = Field(
        "OpenStreetMap",
        alias="layerType",
        description="String indicating the layer type.",
    )
    max_scale: confloat(ge=0.0) | None = Field(
        None,
        alias="maxScale",
        description="A numeric property used to determine the maximum scale at which the layer is displayed.",
    )
    min_scale: confloat(ge=0.0) | None = Field(
        None,
        alias="minScale",
        description="A numeric property used to determine the minimum scale at which the layer is displayed.",
    )
    opacity: confloat(ge=0.0, le=1.0) | None = Field(
        1,
        description="The degree of transparency applied to the layer on the client side, where 0 is full transparency and 1 is no transparency.",
    )
    title: str = Field(..., description="String title for the basemap layer.")
    type: str | None = Field(None, description="Deprecated, use layerType instead.")
    visibility: bool | None = Field(
        True,
        description="Boolean property determining whether the layer is initially visible in the web map.",
    )
    visibility_time_extent: list[int | None] | None = Field(
        None,
        alias="visibilityTimeExtent",
        description="Represents time extent that will control when a layer should be visible based on webmap's current time. Visibility time extent only affects the layer visibility and will not filter the data.",
        title="timeExtent",
    )


class DefinitionEditor(BaseModel):
    """
    The definitionEditor stores interactive filters at the same level as layerDefinition.
    """

    model_config = common_config
    inputs: list[Input] | None = Field(None, description="An array of input objects.")
    parameterized_expression: str | None = Field(
        None,
        alias="parameterizedExpression",
        description="A string value representing the where clause for the interactive filter.",
    )


class RenderingRule(BaseModel):
    """
    Specifies the rendering rule for how the requested image should be rendered.
    """

    model_config = common_config
    output_pixel_type: PixelType | None = Field(
        None,
        alias="outputPixelType",
        description="the output pixel type defines the output image's pixel type.",
    )
    raster_function: str | None = Field(
        None,
        alias="rasterFunction",
        description="The raster function name identifies the processing or rendering to be performed. For a list of possible types, please see the [Raster Functions](https://developers.arcgis.com/documentation/common-data-types/raster-function-objects.htm) help topic for additional information on this.",
    )
    raster_function_arguments: dict[str, Any] | None = Field(
        None,
        alias="rasterFunctionArguments",
        description="The arguments for the referenced `rasterFunction`. For a description of arguments per raster function type, please see the [Raster Functions](https://developers.arcgis.com/documentation/common-data-types/raster-function-objects.htm) help topic for additional information on this.",
    )
    raster_function_definition: RasterFunctionTemplate | None = Field(
        None,
        alias="rasterFunctionDefinition",
        description="Specifies the raster function template for how the requested image should be processed.",
    )
    variable_name: str | None = Field(
        None,
        alias="variableName",
        description="Variable name for the raster function.",
    )


class ExclusionArea(BaseModel):
    """
    Exclusion areas define [extent](extent.md) areas where no data will be fetched for a layer.
    """

    model_config = common_config
    geometry: (
        MultipointGeometry | PointGeometry | PolygonGeometry | PolylineGeometry
    ) = Field(
        ...,
        description="The geometry defining the area where no data will be fetched. Only [extent](extent.md) is supported.",
        title="geometry",
    )
    max_scale: float | None = Field(
        -1,
        alias="maxScale",
        description="The zoom level where the exclusion ends.",
    )
    max_zoom: float | None = Field(
        -1,
        alias="maxZoom",
        description="The zoom level where the exclusion ends.",
    )
    min_scale: float | None = Field(
        -1,
        alias="minScale",
        description="The zoom level where the exclusion starts.",
    )
    min_zoom: float | None = Field(
        -1,
        alias="minZoom",
        description="The zoom level where the exclusion starts.",
    )


class FeatureFilter(BaseModel):
    """
    Description of spatial and attribute filters that will be applied to Feature data. For example, used in Fence Parameters for Geotriggers.
    """

    model_config = common_config

    geometry: (
        MultipointGeometry | PointGeometry | PolygonGeometry | PolylineGeometry | None
    ) = Field(
        None,
        description="A geometry used to filter the features from a feature table. Any features that intersect the area of interest will be used. It can be any of the supported geometry types.",
        title="geometry",
    )
    where: str | None = Field(
        None,
        description="A SQL-based where clause that narrows the data to be used. Any features that satisfy the query will be used.",
    )


class LabelingInfo(BaseModel):
    """
    The labelingInfo object specifies the label definition for a layer.
    """

    model_config = common_config
    allow_overlap_of_feature_boundary: LabelOverlap | None = Field(
        LabelOverlap.allow,
        validate_default=True,
        alias="allowOverlapOfFeatureBoundary",
        description="A string describing whether other labels are allowed to overlap this polygon feature's edge.<br>`allow` means that labels are allowed to overlap this polygon feature boundary. `avoid` means that labels that would overlap will move as much possible to minimize the overlap. `exclude` means that labels that would overlap are not placed.",
    )
    allow_overlap_of_feature_interior: LabelOverlap | None = Field(
        LabelOverlap.allow,
        validate_default=True,
        alias="allowOverlapOfFeatureInterior",
        description="A string describing how much other labels are allowed to overlap this feature.<br>`allow` means that labels are allowed to overlap this feature. `avoid` means that labels that would overlap will move as much possible to minimize the overlap. `exclude` means that labels that would overlap are not placed.",
    )
    allow_overlap_of_label: LabelOverlap | None = Field(
        LabelOverlap.exclude,
        validate_default=True,
        alias="allowOverlapOfLabel",
        description="A string describing whether other labels are allowed to overlap this label.<br>`allow` means that labels are allowed to overlap this label. `avoid` means that labels that would overlap will move as much possible to minimize the overlap. `exclude` means that labels that would overlap are not placed.",
    )
    allow_overrun: bool | None = Field(
        None,
        alias="allowOverrun",
        description="Specifies whether or not a label can overrun the geometry feature being labeled. Only applicable to labels for lines or polygons. If missing, then the default depends on the geometry of the feature: `false` for line feature geometries, and `true` for polygon feature geometries.",
    )
    deconfliction_strategy: DeconflictionStrategy | None = Field(
        DeconflictionStrategy.static,
        validate_default=True,
        alias="deconflictionStrategy",
        description="Specifies the approach to use for deconflicting labels with this class against existing, more important, labels. The option 'none' uses the preferred position and can overlap existing labels and features. The option 'static' uses the preferred position but will not overlap existing labels or features. The option 'dynamic' will try to find a position to avoid overlap of labels and features. The option 'dynamicNeverRemove' will choose the position that minimizes overlap of labels and features but can overlap them if necessary.",
    )
    field_infos: list[FieldInfoLabelingInfo] | None = Field(
        None,
        alias="fieldInfos",
        description="An array of objects providing formatting information for the label field.",
    )
    label_angle_info: LabelAngleInfo | None = Field(
        None,
        alias="labelAngleInfo",
        description="Optional object specifying how to position a label following the direction of an angle. These properties will be used if the expression is not empty. The `labelPlacement` will still be used to indicate whether offset or centered positioning is required, but the exact position will be given by the angle calculated for the feature. Once the position has been determined, `textLayout` and `textOrientation` are used to specify the layout of the text at that position.",
    )
    label_expression: str | None = Field(
        None,
        alias="labelExpression",
        description="Read-only property specifying text for labels using [simple expressions](https://resources.arcgis.com/en/help/rest/apiref/label.html#class). Prefer to use `labelExpressionInfo` instead. This `labelExpression` property is only used if `labelExpressionInfo` is missing. An empty expression will result in no labels being created.",
    )
    label_expression_info: LabelExpressionInfo | None = Field(
        None,
        alias="labelExpressionInfo",
        description="Expression script object specifying the text that should be used as a label for each feature. This expression may combine information from the feature attributes with fixed strings. An empty expression will result in no labels being created. If this object isn't present then the `labelExpression` property will be used as a fallback.",
    )
    label_placement: LabelPlacement | None = Field(
        None,
        alias="labelPlacement",
        description="Preferred position of the label with respect to its feature symbology. If missing, then the default depends on the geometry of the feature: `esriServerPointLabelPlacementAboveRight` for point feature geometries, `esriServerLinePlacementAboveAlong` for line feature geometries, and `esriServerPolygonPlacementAlwaysHorizontal` for polygon feature geometries.",
    )
    line_connection: LineConnection | None = Field(
        LineConnection.minimize_labels,
        validate_default=True,
        alias="lineConnection",
        description="Specifies the approach to use for connecting line labels with this class.  The option 'none' specifies that line connection should not be performed.  The option 'minimizeLabels' connects lines through intersections while 'unambiguousLabels' allows for labels on sides of intersections to clarify ambiguity with label and feature relationships.",
    )
    line_orientation: LineOrientation | None = Field(
        LineOrientation.page,
        validate_default=True,
        alias="lineOrientation",
        description="String specifying whether `labelPlacement` of `Above` (or `Below`) will be interpreted as `Above` (or `Below`) on the `page`, or with respect to the direction of line's geometry (that is, the digitization order in which the vertices are listed). If the `lineOrientation` is set to `page`, then `labelPlacement` of `Above` means the label will be offset perpendicularly from its line segment towards the **top** of the page. If the `lineOrientation` is set to `direction`, then `labelPlacement` of `Above` means the label will be offset perpendicularly **left** from its line segment. If the `lineOrientation` is set to `unconstrained`, then the label will be offset perpendicularly to whichever side of the line geometry has space (defaulting to `Above`, in the `page` sense). `labelPlacement` of `Below` would have the corresponding interpretations.",
    )
    max_scale: float | None = Field(
        None,
        alias="maxScale",
        description="Represents the maximum scale at which the layer definition will be applied.",
    )
    min_scale: float | None = Field(
        None,
        alias="minScale",
        description="Represents the minimum scale at which the layer definition will be applied.",
    )
    multi_part: MultiPart | None = Field(
        MultiPart.label_per_part,
        validate_default=True,
        alias="multiPart",
        description="Specifies the approach to use for labeling parts and segments of geometries.",
    )
    name: str | None = Field(
        None,
        description="The name of the label class. May be used to identify members within a collection of label classes e.g. attached to a feature layer",
    )
    offset_distance: float | None = Field(
        1,
        alias="offsetDistance",
        description="Specification of the screen distance (in points) between the feature symbol geometry and an offset label.",
    )
    priority: float | None = Field(
        None,
        description="The priority of the label class relative to other label classes. When there is not enough space on the map for all labels, important labels will be placed, at the expense of less important labels. Priorities should be positive with 0 being the most important and higher numbers being less important. If missing, the default depends on the geometry of the feature: `12` for point feature geometries, `15` for line feature geometries, and `18` for polygon feature geometries.",
    )
    remove_duplicates: RemoveDuplicates | None = Field(
        RemoveDuplicates.none,
        validate_default=True,
        alias="removeDuplicates",
        description="Specifies whether or not to remove duplicates and if removing duplicate labels whether or not to do it within just this label class, within all labels of that feature type (e.g. point layers) or across all layers. The removeDuplicatesDistance is used when a value other than none is set.",
    )
    remove_duplicates_distance: float | None = Field(
        0,
        alias="removeDuplicatesDistance",
        description="The screen distance in points to remove duplicates within. The value 0 is a special value and indicates to remove duplicates for the entire extent.",
    )
    repeat_label: bool | None = Field(
        None,
        alias="repeatLabel",
        description="A boolean value indicating whether or not to repeat the label along or across the feature. If true, the label will be repeated according to the repeatLabelDistance. If missing, the default depends on the geometry of the feature: false for point and polygon feature geometries, and true for line feature geometries.",
    )
    repeat_label_distance: float | None = Field(
        216,
        alias="repeatLabelDistance",
        description="The repeat label distance used when repeatLabel is true. It represents a screen distance in points.",
    )
    stack_alignment: StackAlignment | None = Field(
        StackAlignment.text_symbol,
        validate_default=True,
        alias="stackAlignment",
        description="This string property indicates whether or not to derive stacking from the text symbol or have dynamic stacking based on the relative position of the label to the feature.",
    )
    stack_break_position: StackBreakPosition | None = Field(
        StackBreakPosition.after,
        validate_default=True,
        alias="stackBreakPosition",
        description="This string property indicates whether a row of text should be broken before or after it exceeds the ideal length. If stacking is turned on we can insert a linebreak `before` or `after` the breaking word that overruns the maximum number of characters per row. Using the `before` option means rows will generally be shorter than the stackRowLength although will overrun for individual words larger than this count.",
    )
    stack_label: bool | None = Field(
        None,
        alias="stackLabel",
        description="A boolean value indicating whether or not to stack (i.e. insert linebreaks into) long labels for this label class. If missing, the default depends on the geometry of the feature: `true` for point and polygon feature geometries, and `false` for line feature geometries.",
    )
    stack_row_length: float | None = Field(
        -1,
        alias="stackRowLength",
        description="The ideal number of characters to place on a row of stacked text. This length guides the decision on when to break long text strings into separate rows. The linebreak will be inserted between words, not in the middle of a word, so rows may be longer or shorter than the ideal. Depending on `stackBreakPosition`, the break may be inserted before the breaking word, or after. `stackRowLength` values of one or higher will cause linebreaks to be added when a row will exceed this length. Values of zero will cause linebreaks to be added whenever possible i.e. after every word. Values less than zero will cause a default length to be used (currently 9 characters, but may vary by feature geometry type).",
    )
    stack_separators: list[LabelStackSeparator] | None = Field(
        None,
        alias="stackSeparators",
        description="Array of which characters in a text label can indicate a line-break. By default, space and comma indicate optional linebreaks, and newline indicates a forced linebreak. If an empty array of stackSeparators is specified, then these default optional indicators are turned off. If any separator list, other than the two default optional separators, is specified then that list replaces the default list. If the user requires a mixture of default separators and custom separators, then they need to specify all of them.",
    )
    symbol: TextSymbolEsriTS | None = Field(
        None, description="The text symbol used to label."
    )
    text_layout: TextLayout | None = Field(
        None,
        alias="textLayout",
        description="String describing, once the text is positioned, how the text should be oriented based on the feature geometry. If this property is present, it must be one of the following values: <ul><li>`followFeature`</li><li>`horizontal`</li><li>`perpendicular`</li><li>`straight`</li></ul><br>A value of `followFeature` will make the text curve to follow a line feature (e.g. road or river). A value of `horizontal` will make the text be written horizontally with respect to the page. A value of `straight` will make the text straight and angled depending on the feature geometry: (point) rotated by the specified angle, (line) placed at an angle that follows the line, (polygon) angled to represent the shape of the polygon. A value of `perpendicular` will make the text rotated 90 degrees clockwise from the angle it would have used for `straight`.<br>The default value is `horizontal` for labels attached to point and polygon features, and `followFeature` for labels attached to line features.",
    )
    use_clipped_geometry: bool | None = Field(
        "true",
        alias="useClippedGeometry",
        description="Boolean value indicating whether label positioning should be based on the original unclipped geometry, or on the geometry after it has been clipped to the screen extent. Only applicable to labels for lines or polygons.",
    )
    use_coded_values: bool | None = Field(
        "false",
        alias="useCodedValues",
        description="Boolean value indicating whether to display the coded values for the field names referenced from the `labelExpression` or `labelExpressionInfo.value`. Note that if an Arcade `labelExpresionInfo.expression` is being used, then `useCodedValues` is ignored, as Arcade scripts explicitly specify when to decode and encode values.",
    )
    where: str | None = Field(
        None,
        description="SQL string template used to determine which features to label.",
    )


class AuthoringInfo(BaseModel):
    """
    The authoringInfo is an object containing metadata about the authoring process for creating a renderer object. This allows the authoring clients to save specific overridable settings so that next time it is accessed via an authoring client, their selections are remembered. Non-authoring clients can ignore it. Properties for color/size/transparency sliders, theme selection, classification information, and additional properties are saved within this object.
    """

    model_config = common_config
    classification_method: ClassificationMethod | None = Field(
        ClassificationMethod.esri_classify_manual,
        validate_default=True,
        alias="classificationMethod",
        description="Used for classed color or size. The default value is `esriClassifyManual`. The `esriClassifyDefinedInterval` method is only applicable to raster class breaks renderer only.",
    )
    color_ramp: ColorRamp | None = Field(None, alias="colorRamp")
    fade_ratio: confloat(ge=0.0, le=1.0) | None = Field(
        0,
        alias="fadeRatio",
        description="The degree with which to fade colors in a `heatmap`. A value of `0` indicates all color stops in the heatmap have an alpha of 1. A value of `1` indicates the color stop representing the highest density has an alpha value of 1, but all other color stops decrease in opacity significantly. Values between 0 and 1 will result in less transparent alpha values for each color stop. When the renderer is persisted, these alpha values will be persisted in the renderer's color stops.",
    )
    field1: AuthoringInfoField | None = None
    field2: AuthoringInfoField | None = None
    fields: list[str] | None = Field(
        None,
        description="An array of string values representing field names used for creating predominance renderers.",
    )
    flow_theme: FlowTheme | None = Field(
        None,
        alias="flowTheme",
        description="Theme to be used only when working with renderers of type `flow`.",
    )
    focus: Focus | None = Field(
        None,
        description="Optional. Used for Relationship renderer. If not set, the legend will default to being square.",
    )
    is_auto_generated: bool | None = Field(
        None,
        alias="isAutoGenerated",
        description="Only applicable to FeatureReductionCluster renderers. Indicates whether the renderer was automatically created internally in behalf of the user by the JS API's rendering engine. When a user manually creates a FeatureReductionCluster renderer, this option should be ignored.",
    )
    max_slider_value: float | None = Field(
        None,
        alias="maxSliderValue",
        description="Optional. Indicates the maximum value of a slider if one was used to generate the dot value for dot density renderer.",
    )
    min_slider_value: float | None = Field(
        None,
        alias="minSliderValue",
        description="Optional. Indicates the minimum value of a slider if one was used to generate the dot value for dot density renderer.",
    )
    num_classes: conint(ge=2, le=4) | None = Field(
        None,
        alias="numClasses",
        description="Number of classes to be associated with the relationship. Used for Relationship renderer.",
    )
    standard_deviation_interval: StandardDeviationInterval | None = Field(
        None,
        alias="standardDeviationInterval",
        description="Use this property if the classificationMethod is `esriClassifyStandardDeviation`.",
    )
    statistics: AuthoringInfoStatistics | None = Field(
        None,
        description="Statistics used by the legend to avoid representing data values that are beyond the dataset max and min. Only applies to renderers of type `univariateColorSize` with an 'above-and-below' `univariateTheme`.",
    )
    type: AuthoringInfoType | None = None
    univariate_symbol_style: UnivariateSymbolStyle | None = Field(
        None,
        alias="univariateSymbolStyle",
        description="Symbol style or symbol pair used when creating a renderer of type `univariateColorSize` with an `above-and-below` univariateTheme. The `custom` style indicates the renderer uses a custom symbol pair not provided by the authoring application.",
    )
    univariate_theme: UnivariateTheme | None = Field(
        None,
        alias="univariateTheme",
        description="Theme to be used only when working with renderers of type `univariateColorSize`.",
    )
    visual_variables: list[AuthoringInfoVisualVariable] | None = Field(
        None,
        alias="visualVariables",
        description="An array of visualVariable objects containing additional information needed when authoring the renderer.",
    )


class ClassBreakInfo(SymbolValidatorMixin, BaseModel):
    """
    The classBreaksInfo object provides information about the class breaks associated with the renderer.
    """

    model_config = common_config
    alternate_symbols: list[CimSymbolReference] | None = Field(
        None,
        alias="alternateSymbols",
        description="An array of symbol alternatives to a primary symbol. When alternative symbols are present, each symbol has minimum scale and maximum scale at which the symbol should be made visible. For any renderer that support alternate symbols, there is a primary symbol that has minimum and maximum scale defined. When rendering these renderer classes, the renderer should pick only one symbol at a given map scale for a given renderer class. The order of picking a symbol should be starting with primary symbol to check if it falls within the map's scale first before it iterates through  alternate symbols in the array starting from 0. The renderer will then pick the first symbol that is visibile at current map scale. A symbol is visible if the map scale is greater than symbol's maximum scale and less than or equal to symbol's minimum scale.",
    )
    class_max_value: float | None = Field(
        None,
        alias="classMaxValue",
        description="A numeric value used to specify the maximum value for a break.",
    )
    class_min_value: float | None = Field(
        None,
        alias="classMinValue",
        description="A numeric value used to specify discontinuous class breaks. If this value is null or is missing, the map server will calculate the minimum value based on the preceding class' maximum value.",
    )
    description: str | None = Field(
        None, description="String value used to describe the drawn symbol."
    )
    label: str | None = Field(
        None, description="String value used to label the drawn symbol."
    )
    symbol: (
        CimSymbolReference
        | PictureFillSymbolsEsriPFS
        | PictureMarkerSymbolEsriPMS
        | SimpleFillSymbolEsriSFS
        | SimpleLineSymbolEsriSLS
        | SimpleMarkerSymbolEsriSMS
        | TextSymbolEsriTS
    ) = Field(
        ...,
        description="An object used to display the value.",
        title="symbol",
    )


class SizeInfoVisualVariable(BaseModel):
    """
    The sizeInfo visual variable defines how size is applied to features based on the values of a numeric field attribute. The minimum and maximum values of the data should be indicated along with their respective size values. You must specify `minSize` and `maxSize` or `stops` to construct the size ramp. All features with values falling in between the specified min and max data values (or stops) will be scaled proportionally between the provided min and max sizes.
    """

    model_config = common_config
    field: str | None = Field(
        None,
        description="Attribute field used for size rendering if no valueExpression is provided.",
    )
    legend_options: LegendOptions | None = Field(None, alias="legendOptions")
    max_data_value: float | None = Field(
        None, alias="maxDataValue", description="The maximum data value."
    )
    max_size: Size | float | None = Field(
        None,
        alias="maxSize",
        description="Specifies the largest marker size to use at any given map scale. Can be either a fixed number or object, depending on whether the user chose a fixed range or not.",
    )
    min_data_value: float | None = Field(
        None, alias="minDataValue", description="The minimum data value."
    )
    min_size: Size | float | None = Field(
        None,
        alias="minSize",
        description="Specifies the smallest marker size to use at any given map scale. Can be either a fixed number or object, depending on whether the user chose a fixed range or not.",
    )
    normalization_field: str | None = Field(
        None,
        alias="normalizationField",
        description="Attribute field used to normalize the data.",
    )
    stops: list[SizeStop] | None = Field(
        None,
        description="An array of objects that defines the thematic size ramp in a sequence of data or expression stops. At least two stops are required. The stops must be listed in ascending order based on the value of the `value` property in each stop. This property is required if `minDataValue`, `maxDataValue`, `minSize`, and `maxSize` are not defined. This property is also required when setting a size visual variable to the `minSize` or `maxSize` properties based on `expression` (e.g. `expression: 'view.scale'`).",
    )
    target: Literal["outline"] | None = Field(
        None,
        description="Only used when sizeInfo is used for polygon outlines.",
    )
    type: Literal["sizeInfo"] = Field(
        "sizeInfo", description="Specifies the type of visual variable."
    )
    value_expression: str | None = Field(
        None,
        alias="valueExpression",
        description="An [Arcade expression](https://developers.arcgis.com/arcade/) evaluating to a number. New style is similar to `$view.scale`. This is used in combination with the `target` `outline` propery where the outline looks thinner at smaller scales and thicker at larger scales.",
    )
    value_expression_title: str | None = Field(
        None,
        alias="valueExpressionTitle",
        description="The title identifying and describing the associated [Arcade](https://developers.arcgis.com/arcade/) expression as defined in the `valueExpression` property.",
    )
    value_unit: str | None = Field(
        "unknown",
        alias="valueUnit",
        description="A string value indicating the required unit of measurement.",
    )


class UniqueValueInfo(SymbolValidatorMixin, BaseModel):
    """
    The following is a list of properties found on the uniqueValueInfo object, which is one of the properties on the renderer object. The uniqueValueInfo object contains the symbology for each uniquely drawn value in the renderer.
    """

    model_config = common_config
    alternate_symbols: list[CimSymbolReference] | None = Field(
        None,
        alias="alternateSymbols",
        description="An array of symbol alternatives to a primary symbol. When alternative symbols are present, each symbol has minimum scale and maximum scale at which the symbol should be made visible. For any renderer that support alternate symbols, there is a primary symbol that has minimum and maximum scale defined. When rendering these renderer classes, the renderer should pick only one symbol at a given map scale for a given renderer class. The order of picking a symbol should be starting with primary symbol to check if it falls within the map's scale first before it iterates through  alternate symbols in the array starting from 0. The renderer will then pick the first symbol that is visible at current map scale. A symbol is visible if the map scale is greater than symbol's maximum scale and less than or equal to symbol's minimum scale.",
    )
    description: str | None = Field(
        None, description="String value used to describe the drawn symbol."
    )
    label: str | None = Field(
        None, description="String value used to label the drawn symbol."
    )
    symbol: (
        CimSymbolReference
        | PictureFillSymbolsEsriPFS
        | PictureMarkerSymbolEsriPMS
        | SimpleFillSymbolEsriSFS
        | SimpleLineSymbolEsriSLS
        | SimpleMarkerSymbolEsriSMS
        | TextSymbolEsriTS
        | None
    ) = Field(
        None,
        description="An object used to display the value.",
        title="symbol",
    )
    value: str | int | float | None = Field(
        None, description="value indicating the unique value."
    )


class UniqueValueClass(SymbolValidatorMixin, BaseModel):
    """
    The following is a list of properties found on the uniqueValueClass object. The uniqueValueClass object contains the symbology for grouped unique values in the renderer.
    """

    model_config = common_config
    alternate_symbols: list[CimSymbolReference] | None = Field(
        None,
        alias="alternateSymbols",
        description="An array of symbol alternatives to a primary symbol. When alternative symbols are present, each symbol has minimum scale and maximum scale at which the symbol should be made visible. For any renderer that support alternate symbols, there is a primary symbol that has minimum and maximum scale defined. When rendering these renderer classes, the renderer should pick only one symbol at a given map scale for a given renderer class. The order of picking a symbol should be starting with primary symbol to check if it falls within the map's scale first before it iterates through  alternate symbols in the array starting from 0. The renderer will then pick the first symbol that is visible at current map scale. A symbol is visible if the map scale is greater than symbol's maximum scale and less than or equal to symbol's minimum scale.",
    )
    description: str | None = Field(
        None, description="String value used to describe the drawn symbol."
    )
    label: str | None = Field(
        None, description="String value used to label the drawn symbol."
    )
    symbol: (
        CimSymbolReference
        | PictureFillSymbolsEsriPFS
        | PictureMarkerSymbolEsriPMS
        | SimpleFillSymbolEsriSFS
        | SimpleLineSymbolEsriSLS
        | SimpleMarkerSymbolEsriSMS
        | TextSymbolEsriTS
    ) = Field(
        ...,
        description="An object used to display the value.",
        title="symbol",
    )
    values: list[list[str]] = Field(
        ...,
        description="A list of unique values that should be rendered with the same symbol. Each item in the list represents a set of value combinations represented by the given symbol. The inner array must contain only one value if only field1 is specified, two values if field1 and field2 are specified, or three values if field1, field2, and field3 are specified. The inner arrays must not contain more than three values.",
    )


class Widgets(BaseModel):
    """
    The widgets object contains widgets that should be exposed to the user.
    """

    model_config = common_config
    floor_filter: FloorFilter | None = Field(
        None,
        alias="floorFilter",
        description="Configurable properties used by the floor filter widget.",
    )
    range: Range | Range | None = Field(
        None, description="Active range.", title="Range"
    )
    time_slider: TimeSlider | None = Field(
        None,
        alias="timeSlider",
        description="Time animation is controlled by a configurable time slider. The time slider widget will act upon all the time aware layers in the map.",
    )


class PopupInfo(BaseModel):
    """
    Defines the look and feel of popup windows when a user clicks or queries a feature.
    """

    model_config = common_config
    description: str | None = Field(
        None,
        description="A string that appears in the body of the popup window as a description. A basic subset of HTML may also be used to enrich the text. The supported HTML for ArcGIS Online can be seen in the [Supported HTML](https://doc.arcgis.com/en/arcgis-online/reference/supported-html.htm) page.",
    )
    expression_infos: list[PopupExpressionInfo] | None = Field(
        None,
        alias="expressionInfos",
        description="List of Arcade expressions added to the pop-up.",
    )
    field_infos: list[FieldInfo] | None = Field(
        None,
        alias="fieldInfos",
        description="Array of fieldInfo information properties. This information is provided by the service layer definition. When the description uses name/value pairs, the order of the array is how the fields display in the editable Map Viewer popup and the resulting popup. It is also possible to specify HTML-formatted content.",
    )
    layer_options: LayerOptions | None = Field(
        None,
        alias="layerOptions",
        description="Additional options that can be defined for the popup layer.",
    )
    media_infos: list[MediaInfo] | None = Field(
        None,
        alias="mediaInfos",
        description="Array of various mediaInfo to display. Can be of type `image`, `piechart`, `barchart`, `columnchart`, or `linechart`. The order given is the order in which is displays.",
    )
    popup_elements: (
        list[
            PopupElementAttachments
            | PopupElementExpression
            | PopupElementFields
            | PopupElementMedia
            | PopupElementRelationship
            | PopupElementText
            | PopupElementUtilityNetworkAssociations
        ]
        | None
    ) = Field(
        None,
        alias="popupElements",
        description="An array of popupElement objects that represent an ordered list of popup elements.",
    )
    related_records_info: RelatedRecordsInfo | None = Field(
        None,
        alias="relatedRecordsInfo",
        description="Applicable only when the pop-up contains a [relationship content element](popupElement_relationship.md). This is needed for backward compatibility for some web maps.",
    )
    show_attachments: bool | None = Field(
        None,
        alias="showAttachments",
        description="Indicates whether attachments will be loaded for feature layers that have attachments.",
    )
    show_last_edit_info: bool | None = Field(
        True,
        alias="showLastEditInfo",
        description="Indicates whether popup will display information about when and who last edited the feature. Applicable only to layers that have been configured to keep track of such information.",
    )
    title: str | None = Field(
        None,
        description="A string that appears at the top of the popup window as a title.",
    )


class FeatureEffect(BaseModel):
    """
    Feature Effect emphasizes or deemphasizes features that satisfy a filter using graphical effects
    """

    model_config = common_config
    excluded_effect: (
        list[
            EffectFunctions
            | EffectFunctions1
            | EffectFunctions2
            | EffectFunctions3
            | EffectFunctions4
        ]
        | list[ScaleDependentEffect]
        | None
    ) = Field(
        None,
        alias="excludedEffect",
        description="The effect applied to features that do not meet the filter requirements.",
        title="Effect",
    )
    filter: Filter = Field(
        ...,
        description="The client-side filter executed on each displayed feature to determine which of includedEffect or excludedEffect to apply.",
    )
    included_effect: (
        list[
            EffectFunctions
            | EffectFunctions1
            | EffectFunctions2
            | EffectFunctions3
            | EffectFunctions4
        ]
        | list[ScaleDependentEffect]
        | None
    ) = Field(
        None,
        alias="includedEffect",
        description="The effect applied to features that meet the filter requirements.",
        title="Effect",
    )


class Filter(FeatureFilter):
    """
    An optional filter to reduce the features used for the parameters.
    """

    geometry: Any | None = None
    where: Any | None = None


class FeatureFenceParameters(BaseModel):
    """
    Fence parameters for a Geotrigger that uses feature data from an online feature service, offline geodatabase table, or layer within a feature collection.
    """

    model_config = common_config
    buffer_distance: float | None = Field(
        0,
        alias="bufferDistance",
        description="An optional buffer distance to apply to fence features in meters.",
    )
    fence_source: FeatureCollectionSubLayerSource | FeatureLayerSource = Field(
        ...,
        alias="fenceSource",
        description="An object defining the source for a feature layer to be used as fences.",
    )
    filter: Filter | None = Field(
        None,
        description="An optional filter to reduce the features used for the parameters.",
    )
    type: Literal["features"] = Field(
        "features",
        description="String indicating the fence parameters type.",
    )


class FieldModel(BaseModel):
    """
    Contains information about an attribute field.
    """

    model_config = common_config
    alias: str | None = Field(None, description="A string defining the field alias.")
    domain: CodedValue | InheritedDomain | RangeDomain | None = Field(
        None, description="The domain objects if applicable.", title="domain"
    )
    editable: bool | None = Field(
        None,
        description="A Boolean defining whether this field is editable.",
    )
    exact_match: bool | None = Field(
        None,
        alias="exactMatch",
        description="A Boolean defining whether or not the field is an exact match.",
    )
    length: int | None = Field(
        None,
        description="A number defining how many characters are allowed in a string. field.",
    )
    name: str | None = Field(None, description="A string defining the field name.")
    nullable: bool | None = Field(
        None,
        description="A Boolean defining whether this field can have a null value.",
    )
    type: FieldType | None = Field(
        None, description="A string defining the field type."
    )


class FormFieldElement(BaseModel):
    """
    Defines how a field in the dataset participates in the form.
    """

    model_config = common_config

    description: str | None = Field(
        None, description="A string that describes the element in detail."
    )
    domain: CodedValue | InheritedDomain | RangeDomain | None = Field(
        None,
        description="The domain to apply to this field. If defined, it takes precedence over domains defined in field, type, or subtype.",
        title="domain",
    )
    editable_expression: str | None = Field(
        None,
        alias="editableExpression",
        description="A reference to an Arcade expression that returns a boolean value. When this expression evaluates to `true`, the element is editable. When the expression evaluates to `false` the element is not editable. If the referenced field is not editable, the editable expression is ignored and the element is not editable.",
    )
    field_name: str = Field(
        ...,
        alias="fieldName",
        description="A string containing the field name as defined by the feature layer.",
    )
    hint: str | None = Field(
        None,
        description="A string representing placeholder text. This only applies for input types that support text or numeric entry.",
    )
    input_type: (
        FormBarcodeScannerInput
        | FormComboBoxInput
        | FormDatePickerInput
        | FormDatetimePickerInput
        | FormRadioButtonsInput
        | FormSwitchInput
        | FormTextAreaInput
        | FormTextBoxInput
        | FormTimeInput
        | FormTimestampOffsetPickerInput
        | None
    ) = Field(
        ...,
        alias="inputType",
        description="The input user interface to use for the element.",
    )
    label: str | None = Field(
        None,
        description="A string indicating what the element represents. If not supplied, the label is derived from the alias property in the referenced field in the service.",
    )
    required_expression: str | None = Field(
        None,
        alias="requiredExpression",
        description="A reference to an Arcade expression that returns a boolean value. When this expression evaluates to `true` and the element is visible, the element must have a valid value in order for the feature to be created or edited. When the expression evaluates to `false` the element is not required. If no expression is provided, the default behavior is that the element is not required. If the referenced field is non-nullable, the required expression is ignored and the element is always required.",
    )
    type: Literal["field"] = Field(
        "field",
        description="A string indicating which type of element to use.",
    )
    value_expression: str | None = Field(
        None,
        alias="valueExpression",
        description="A reference to an Arcade expression that returns a date, number, or string value.  When this expression evaluates the value of the field will be updated to the result.  This expression is only evaluated when `editableExpression` (if defined) is false but the field itself allows edits.",
    )
    visibility_expression: str | None = Field(
        None,
        alias="visibilityExpression",
        description="A reference to an Arcade expression that returns a boolean value. When this expression evaluates to `true`, the element is displayed. When the expression evaluates to `false` the element is not displayed. If no expression is provided, the default behavior is that the element is displayed. Care must be taken when defining a visibility expression for a non-nullable field i.e. to make sure that such fields either have default values or are made visible to users so that they can provide a value before submitting the form.",
    )


class FormGroupElement(BaseModel):
    """
    Defines a container that holds a set of form elements that can be expanded, collapsed, or displayed together.
    """

    model_config = common_config
    description: str | None = Field(
        None, description="A string that describes the element in detail."
    )
    form_elements: list[
        FormAttachmentElement
        | FormFieldElement
        | FormRelationshipElement
        | FormTextElement
    ] = Field(
        ...,
        alias="formElements",
        description="An array of Form Element objects that represent an ordered list of form elements. Nested group elements are not supported.",
    )
    initial_state: GroupInitialState | None = Field(
        None,
        alias="initialState",
        description="Defines if the group should be expanded or collapsed when the form is initially displayed. If not provided, the default value is `expanded`",
    )
    label: str | None = Field(
        None,
        description="A string value indicating what the element represents.",
    )
    type: Literal["group"] = Field(
        "group",
        description="String value indicating which type of element to use.",
    )
    visibility_expression: str | None = Field(
        None,
        alias="visibilityExpression",
        description="A reference to an Arcade expression that returns a boolean value. When this expression evaluates to `true`, the element is displayed. When the expression evaluates to `false` the element is not displayed. If no expression is provided, the default behavior is that the element is displayed.",
    )


class Feature(SymbolValidatorMixin, BaseModel):
    """
    Contains information about an attribute field and feature geometry.
    """

    model_config = common_config
    attributes: dict[str, Any] | None = Field(
        None,
        description="The feature attributes. A JSON object that contains a dictionary of name-value pairs. The names are the feature field names. The values are the field values, and they can be any of the standard JSON types: string, number, and boolean. Note that date values are encoded as numbers. The number represents the number of milliseconds since epoch (January 1, 1970) in UTC.",
    )
    geometry: (
        MultipointGeometry | PointGeometry | PolygonGeometry | PolylineGeometry | None
    ) = Field(
        None,
        description="It can be any of the supported geometry types.",
        title="geometry",
    )
    popup_info: PopupInfo | None = Field(
        None,
        alias="popupInfo",
        description="A popupInfo object defining the content of popup window when you click a feature on the map. Applicable to features in a route and map notes feature layer only.",
    )
    symbol: (
        CimSymbolReference
        | PictureFillSymbolsEsriPFS
        | PictureMarkerSymbolEsriPMS
        | SimpleFillSymbolEsriSFS
        | SimpleLineSymbolEsriSLS
        | SimpleMarkerSymbolEsriSMS
        | TextSymbolEsriTS
        | None
    ) = Field(
        None,
        description="Symbol used for drawing the feature.",
        title="symbol",
    )


class HeatmapRenderer(BaseModel):
    """
    The HeatmapRenderer renders point data into a raster visualization that emphasizes areas of higher density or weighted values.
    """

    model_config = common_config
    authoring_info: AuthoringInfo | None = Field(
        None,
        alias="authoringInfo",
        description="An object containing metadata about the authoring process for creating a renderer object. This allows the authoring clients to save specific settings so that next time it is accessed via the UI, their selections are remembered. Non-authoring clients can ignore it.",
    )
    blur_radius: float | None = Field(
        None,
        alias="blurRadius",
        description="The radius (in pixels) of the circle over which the majority of each point's value is spread. Only used for heatmaps calculated with Gaussian blur. This value must be set in conjunction with `maxPixelIntensity` and `minPixelIntensity` and will eventually be deprecated. New heatmaps should favor `radius` over `blurRadius`, but must continue to persist this value for backward compatibility with old clients.",
    )
    color_stops: list[HeatmapColorStop] = Field(
        ...,
        alias="colorStops",
        description="An array of colorStop objects describing the renderer's color ramp with more specificity than just colors.",
    )
    field: str | None = Field(
        None,
        description="This is optional as this renderer can be created if no field is specified. Each feature gets the same value/importance/weight or with a field where each feature is weighted by the field's value.",
    )
    legend_options: LegendOptions | None = Field(
        None,
        alias="legendOptions",
        description="Options for describing the heatmap in the legend.",
    )
    max_density: float | None = Field(
        None,
        alias="maxDensity",
        description="The density value assigned to the final color in the `colorStops`. Only used for heatmaps calculated with kernel density. This value must be set in conjunction with `radius` and `minDensity`.",
    )
    max_pixel_intensity: float | None = Field(
        None,
        alias="maxPixelIntensity",
        description="The pixel intensity value assigned to the final color in the color ramp. Only used for heatmaps calculated with Gaussian blur. This value must be set in conjunction with `blurRadius` and `minPixelIntensity` and will eventually be deprecated. New heatmaps should favor `maxDensity` over `maxPixelIntensity`, but must continue to persist this value for backward compatibility with old clients.",
    )
    min_density: float | None = Field(
        None,
        alias="minDensity",
        description="The density value assigned to the first color in the `colorStops`. Only used for heatmaps calculated with kernel density. This value must be set in conjunction with `radius` and `maxDensity`.",
    )
    min_pixel_intensity: float | None = Field(
        None,
        alias="minPixelIntensity",
        description="The pixel intensity value assigned to the initial color in the color ramp. Only used for heatmaps calculated with Gaussian blur. This value must be set in conjunction with `maxPixelIntensity` and `blurRadius` and will eventually be deprecated. New heatmaps should favor `minDensity` over `minPixelIntensity`, but must continue to persist this value for backward compatibility with old clients.",
    )
    radius: float | None = Field(
        None,
        description="The radius (in points) of the circle representing each point. Only used for heatmaps calculated with kernel density. This value must be set in conjunction with `minDensity` and `maxDensity`.",
    )
    reference_scale: confloat(ge=0.0) | None = Field(
        0,
        alias="referenceScale",
        description="When defined, the heatmap will maintain a consistent, fixed rendering across all scales according to its configuration at the scale defined here. The heatmap will not dynamically update as the user zooms in and out. For example, when a referenceScale is defined, the same geographic areas appearing hot/dense will always appear hot/dense as the user zooms in and out.",
    )
    type: Literal["heatmap"] = Field(
        "heatmap", description="Specifies the type of renderer used."
    )


class PieChartRenderer(BaseModel):
    """
    This renderer allows you to create pie charts to compare numeric values between categories within the same group.
    """

    model_config = common_config
    attributes: list[AttributeColorInfo] = Field(
        ...,
        description="An array of AttributeColorInfo objects defining the color of each slice.",
    )
    authoring_info: AuthoringInfo | None = Field(
        None,
        alias="authoringInfo",
        description="An object containing metadata about the authoring process for creating a renderer object. This allows the authoring clients to save specific overridable settings so that next time it is accessed via the UI, their selections are remembered. Non-authoring clients can ignore it.",
    )
    background_fill_symbol: SimpleFillSymbolEsriSFS | None = Field(
        None,
        alias="backgroundFillSymbol",
        description="The symbols used to represent the polygon fill behind the pie charts.",
    )
    default_color: list[conint(ge=0, le=255)] | None = Field(
        None,
        alias="defaultColor",
        description="Defines the color used to represent features where all values of attributes are either null or zero. This is typically used to represent areas with 'no data' or 'no values' in the legend.",
        title="color",
    )
    default_label: str | None = Field(
        None,
        alias="defaultLabel",
        description="The text used to describe the `defaultColor` in the legend. Typically, this label will be something similar to 'No data' or 'No values'.",
    )
    hole_percentage: confloat(ge=0.0, le=1.0) | None = Field(
        0,
        alias="holePercentage",
        description="Defines the size of the hole to cut from the center of the chart as a percentage of the size of the chart. For example, a value of `0` will render a full pie chart. A value of `0.5` will remove 50% of the center of the pie. This property is used to create a donut chart.",
    )
    legend_options: LegendOptions | None = Field(
        None,
        alias="legendOptions",
        description="Options for describing the renderer in the legend.",
    )
    others_category: OthersThresholdColorInfo | None = Field(
        None,
        alias="othersCategory",
        description='Defines how to aggregate small pie slices to a generic "others" category.',
    )
    outline: SimpleLineSymbolEsriSLS | None = Field(
        None,
        description="Sets the outline of the pie chart. The outline width is applied to the outer outline of the pie (and inner outline in the case of donut charts). The outline color is applied to the outer and inner outlines, and the boundaries of the slices.",
    )
    size: float | None = Field(
        12, description="The diameter of the pie chart in points."
    )
    type: Literal["pieChart"] = Field(
        "pieChart", description="Specifies the type of renderer used."
    )
    visual_variables: list[SizeInfoVisualVariable] | None = Field(
        None,
        alias="visualVariables",
        description="An array of sizeInfo objects used to vary the size of the pie charts.",
    )


class UniqueValueGroup(BaseModel):
    """
    Represents a group of unique value classes (i.e. symbols). This is used to group symbols under a common heading and/or when representing multiple unique values with a single symbol.
    """

    model_config = common_config
    classes: list[UniqueValueClass] = Field(
        ...,
        description="Specifies the classes (i.e. symbols) to group under a common heading. Classes may be included here without a heading when representing multiple values with a single symbol.",
    )
    heading: str | None = Field(
        None,
        description="The heading to be displayed for the collection of classes defined in this group.",
    )


class FenceGeotrigger(BaseModel):
    """
    A condition which monitors the dynamic elements of the geotrigger feed for enter/exit against the fences defined by the Fence Parameters
    """

    enter_exit_rule: EnterExitRule | None = Field(
        None,
        alias="enterExitRule",
        description="The rule that determines whether a fence polygon has been entered or exited by the geometry from a feed. If this value is 'enterIntersectsAndExitDoesNotIntersect', a fence polygon is entered when it intersects a feed geometry and exited when it no longer intersects. If this value is 'enterContainsAndExitDoesNotContain', a fence polygon is entered when it contains a feed geometry and exited when it is no longer contained. If this value is 'enterContainsAndExitDoesNotIntersect' a fence polygon is entered when it contains a feed geometry and exited when it no longer intersects. If not set, the default behavior is `enterContainsAndExitDoesNotIntersect`. The 'feedAccuracyMode' must be set to 'useGeometryWithAccuracy' for this property to have an effect.",
    )
    feed: DeviceLocationGeotriggerFeed = Field(
        ..., description="The feed for this Geotrigger."
    )
    feed_accuracy_mode: FeedAccuracyMode | None = Field(
        None,
        alias="feedAccuracyMode",
        description="Indicates how the geotrigger will use accuracy information from a feed. If this value is 'useGeometry', the reported geometry from a feed will be used. If this value is 'useGeometryWithAccuracy' the feed geometry will be used in conjunction with accuracy information. If not set, the default behavior is `useGeometry`.",
    )
    fence_notification_rule: FenceNotificationRule = Field(
        ...,
        alias="fenceNotificationRule",
        description="Indicates the type of event that will trigger notifications for the Fence Geotrigger. For example, a value of 'enter' will result in notifications when the geometry of the feed enters a fence polygon.",
    )
    fence_parameters: FeatureFenceParameters = Field(
        ...,
        alias="fenceParameters",
        description="An object defining the fences to use for this Geotrigger.",
    )
    name: str | None = Field(None, description="The name for this Geotrigger.")
    notification_options: GeotriggerNotificationOptions | None = Field(
        None,
        alias="notificationOptions",
        description="Options that control the notification information sent to a client app when a Geotrigger condition is met.",
    )
    type: Literal["fence"] = Field(
        "fence",
        description="String indicating the Geotrigger condition type.",
    )


class FormInfo(BaseModel):
    """
    Defines the form configuration when a user edits a feature.
    """

    model_config = common_config
    description: str | None = Field(
        None,
        description="A string that appears in the body of the form as a description.",
    )
    expression_infos: list[FormExpressionInfo] | None = Field(
        None,
        alias="expressionInfos",
        description="List of Arcade expressions used in the form.",
    )
    form_elements: list[
        FormAttachmentElement
        | FormFieldElement
        | FormGroupElement
        | FormRelationshipElement
        | FormTextElement
    ] = Field(
        ...,
        alias="formElements",
        description="An array of formElement objects that represent an ordered list of form elements.",
    )
    preserve_field_values_when_hidden: bool | None = Field(
        None,
        alias="preserveFieldValuesWhenHidden",
        description="Determines whether a previously visible `formFieldElement` value is retained or cleared when a `visibilityExpression` applied on the `formFieldElement` or its parent `formGroupElement` evaluates to `false`. Default is `false`.",
    )
    title: str | None = Field(
        None,
        description="A string that appears at the top of the form as a title.",
    )


class SearchLayer(BaseModel):
    """
    Layer configuration for search.
    """

    model_config = common_config
    field: FieldModel
    id: str = Field(..., description="A string identifying the layer.")
    sub_layer: int | None = Field(
        None, alias="subLayer", description="Optional index for a sublayer."
    )


class SearchTable(BaseModel):
    """
    Search configuration for table.
    """

    model_config = common_config
    field: FieldModel
    id: str = Field(..., description="A string identifying the table.")


class Template(BaseModel):
    """
    Templates describe features that can be created in a layer. They are generally used with feature collections and editable web-based CSV layers. Templates are not used with ArcGIS feature services as these already have templates defined in the service. They are also defined as properties of the layer definition when there are no defined types. Otherwise, templates are defined as properties of the types.
    """

    model_config = common_config
    description: str | None = Field(
        None,
        description="A string value containing a detailed description of the template.",
    )
    drawing_tool: DrawingTool | None = Field(
        None,
        alias="drawingTool",
        description="An optional string that can define a client-side drawing tool to be used with this feature. For example, map notes used by the Online Map Viewer use this to represent the viewer's different drawing tools.",
    )
    name: str | None = Field(
        None,
        description="A string containing a user-friendly name for the template.",
    )
    prototype: Feature | None = Field(
        None,
        description="A feature object representing a prototypical feature for the template.",
    )


class AttributeFieldType(BaseModel):
    """
    Contains information about an attribute field.
    """

    model_config = common_config
    domains: (
        dict[constr(pattern=r".*"), CodedValue | InheritedDomain | RangeDomain] | None
    ) = Field(
        None,
        description="A comma-delimited series of domain objects for each domain in the type.",
    )
    id: float | str = Field(
        ..., description="A unique string or numerical ID for the type."
    )
    name: str | None = Field(None, description="A user-friendly name for the type.")
    templates: list[Template] | None = Field(
        None,
        description="Defined as a property of the layer definition when there are no types defined; otherwise, templates are defined as properties of the types.",
    )


class FeatureSet(BaseModel):
    """
    A featureSet object contains the geometry and attributes of features in a layer. This object is used with feature collections only.
    """

    model_config = common_config
    features: list[Feature] = Field(
        ...,
        description="An array of feature objects containing geometry and a set of attributes.",
    )
    geometry_type: GeometryType = Field(
        ..., alias="geometryType", description="The type of geometry."
    )


class ClassBreaksRenderer(SymbolValidatorMixin, BaseModel):
    """
    A class breaks renderer symbolizes based on the value of some numeric attribute. The classBreakInfo define the values at which the symbology changes.
    """

    model_config = common_config
    authoring_info: AuthoringInfo | None = Field(
        None,
        alias="authoringInfo",
        description="An object containing metadata about the authoring process for creating a renderer object. This allows the authoring clients to save specific overridable settings so that next time it is accessed via the UI, their selections are remembered. Non-authoring clients can ignore it.",
    )
    background_fill_symbol: SimpleFillSymbolEsriSFS | None = Field(
        None,
        alias="backgroundFillSymbol",
        description="A symbol used for polygon features as a background if the renderer uses point symbols, e.g. for bivariate types & size rendering. Only applicable to polygon layers. [PictureFillSymbols](esriPFS_symbol.md) can also be used outside of the Map Viewer for Size and Predominance and Size renderers.",
    )
    class_break_infos: list[ClassBreakInfo] = Field(
        ...,
        alias="classBreakInfos",
        description="Array of classBreakInfo objects.",
    )
    classification_method: ClassificationMethod | str | None = Field(
        None,
        alias="classificationMethod",
        description="Determines the classification method that was used to generate class breaks. This has been replaced by [authoringInfo](authoringInfo.md).",
    )
    default_label: str | None = Field(
        None,
        alias="defaultLabel",
        description="Label for the default symbol used to draw unspecified values.",
    )
    default_symbol: (
        CimSymbolReference
        | PictureFillSymbolsEsriPFS
        | PictureMarkerSymbolEsriPMS
        | SimpleFillSymbolEsriSFS
        | SimpleLineSymbolEsriSLS
        | SimpleMarkerSymbolEsriSMS
        | TextSymbolEsriTS
        | None
    ) = Field(
        None,
        alias="defaultSymbol",
        description="Symbol used when a value cannot be classified.",
        title="symbol",
    )
    field: str | None = Field(None, description="Attribute field used for renderer.")
    legend_options: LegendOptions | None = Field(
        None,
        alias="legendOptions",
        description="A legend containing one title, which is a string describing the renderer in the legend.",
    )
    min_value: float | None = Field(
        None,
        alias="minValue",
        description="The minimum numeric data value needed to begin class breaks.",
    )
    normalization_field: str | None = Field(
        None,
        alias="normalizationField",
        description="Used when normalizationType is field. The string value indicating the attribute field by which the data value is normalized.",
    )
    normalization_total: float | None = Field(
        None,
        alias="normalizationTotal",
        description="Used when normalizationType is percent-of-total, this number property contains the total of all data values.",
    )
    normalization_type: NormalizationType | None = Field(
        None,
        alias="normalizationType",
        description="Determine how the data was normalized.",
    )
    rotation_expression: str | None = Field(
        None,
        alias="rotationExpression",
        description="A constant value or an expression that derives the angle of rotation based on a feature attribute value. When an attribute name is specified, it's enclosed in square brackets.  Rotation is set using a visual variable of type `rotationInfo` with a specified `field` or `valueExpression` property.",
    )
    rotation_type: RotationType | None = Field(
        None,
        alias="rotationType",
        description="A string property which controls the origin and direction of rotation. If the rotationType is defined as `arithmetic`, the symbol is rotated from East in a couter-clockwise direction where East is the 0 degree axis. If the rotationType is defined as `geographic`, the symbol is rotated from North in a clockwise direction where North is the 0 degree axis.",
    )
    type: Literal["classBreaks"] = Field(
        "classBreaks", description="Specifies the type of renderer used."
    )
    value_expression: str | None = Field(
        None,
        alias="valueExpression",
        description="An [Arcade expression](https://developers.arcgis.com/arcade/) evaluating to a number.",
    )
    value_expression_title: str | None = Field(
        None,
        alias="valueExpressionTitle",
        description="The title identifying and describing the associated [Arcade](https://developers.arcgis.com/arcade/) expression as defined in the `valueExpression` property.",
    )
    visual_variables: (
        list[
            ColorInfoVisualVariable
            | RotationInfoVisualVariable
            | SizeInfoVisualVariable
            | TransparencyInfoVisualVariable
        ]
        | None
    ) = Field(
        None,
        alias="visualVariables",
        description="An array of objects used to set rendering properties.",
    )


class DotDensityRenderer(BaseModel):
    """
    This renderer allows you to create dot density visualizations for polygon layers. Dot density visualizations randomly draw dots within each polygon to visualize the density of a population or some other variable. Each dot represents a fixed numeric value of an attribute or a subset of attributes.
    """

    model_config = common_config
    attributes: list[AttributeColorInfo] = Field(
        ...,
        description="An array of AttributeColorInfo objects defining the dot colors.",
    )
    authoring_info: AuthoringInfo | None = Field(
        None,
        alias="authoringInfo",
        description="An object containing metadata about the authoring process for creating a renderer object. This allows the authoring clients to save specific overridable settings so that next time it is accessed via the UI, their selections are remembered. Non-authoring clients can ignore it.",
    )
    background_color: list[conint(ge=0, le=255)] | None = Field(
        None,
        alias="backgroundColor",
        description="The color used to shade the polygon fill behind the dots. Color is represented as a four-element array. The four elements represent values for red, green, blue, and alpha in that order. Values range from 0 through 255. If color is undefined for a symbol, the color value is null.",
        title="color",
    )
    dot_blending_enabled: bool | None = Field(
        None,
        alias="dotBlendingEnabled",
        description="Only applicable when two or more `attributes` are specified. When `true`, indicates that colors for overlapping dots will blend.",
    )
    dot_size: float | None = Field(
        1,
        alias="dotSize",
        description="Defines the size of each dot in points. The default is `1` in maps that don't persist `dotSize`.",
    )
    dot_value: float | None = Field(
        None,
        alias="dotValue",
        description="Defines the dot value used for visualizing density. For example, if set to `100`, each dot will represent 100 units. If a `referenceScale` is provided, this value indicates the value of each dot at the view.scale matching the value in `referenceScale`.",
    )
    legend_options: LegendOptions | None = Field(
        None,
        alias="legendOptions",
        description="Options for describing the renderer in the legend. This includes the title and the units describing the `dotValue`.",
    )
    outline: SimpleLineSymbolEsriSLS | None = Field(
        None, description="Sets the outline of the polygon."
    )
    reference_scale: float | None = Field(
        None,
        alias="referenceScale",
        description="When defined, the renderer will recalculate the dot value linearly based on the change in the view's scale. The rendering will maintain the density of points as drawn at the provided scale across various scales.",
    )
    seed: float | None = Field(
        "1",
        description="The reference to a specific rendering of dots. This value ensures you can view the same dot density rendering for each draw.",
    )
    type: Literal["dotDensity"] = Field(
        "dotDensity", description="Specifies the type of renderer used."
    )
    visual_variables: (
        list[
            ColorInfoVisualVariable
            | RotationInfoVisualVariable
            | SizeInfoVisualVariable
            | TransparencyInfoVisualVariable
        ]
        | None
    ) = Field(
        None,
        alias="visualVariables",
        description="An array of sizeInfo objects used to vary the outline width based on the view.scale.",
    )


class FlowRenderer(BaseModel):
    """
    A flow renderer is a renderer that uses animated streamlines to visualize U-V or Magnitude-Direction raster data. This renderer works with ImageryLayers and ImageryTileLayers.
    """

    model_config = common_config
    authoring_info: AuthoringInfo | None = Field(
        None,
        alias="authoringInfo",
        description="An object containing metadata about the authoring process for creating a renderer object. This allows the authoring clients to save specific overridable settings so that next time it is accessed via the UI, their selections are remembered. Non-authoring clients can ignore it.",
    )
    color: list[conint(ge=0, le=255)] | None = Field(
        [255, 255, 255, 255],
        description="The color of the streamlines.",
        title="color",
    )
    density: float | None = Field(
        0.8,
        description="The density of the streamlines. Accepted values are between 0 and 1, where 0 is the least dense and 1 is the most dense.",
    )
    flow_representation: FlowRepresentation | None = Field(
        "flow-from",
        alias="flowRepresentation",
        description="Sets the flow direction of the data.",
    )
    flow_speed: float | None = Field(
        10,
        alias="flowSpeed",
        description="The speed of the animated streamlines, relative to simulation time. This serves as a multiple of the magnitude from the imagery layer. If the magnitude is 2 m/s, and flowSpeed is 10, then the actual speed of a streamline will be 20 pts/s. A speed of 0 will result in no animation.",
    )
    legend_options: LegendOptions | None = Field(
        None,
        alias="legendOptions",
        description="A legend containing one title, which is a string describing the renderer in the legend.",
    )
    max_path_length: float | None = Field(
        200,
        alias="maxPathLength",
        description="The maximum length the streamlines will travel in points.",
    )
    trail_cap: TrailCap | None = Field(
        TrailCap.butt,
        validate_default=True,
        alias="trailCap",
        description="The style of the streamline's cap. The 'round' cap will only be applied if trailWidth is greater than 3pts.",
    )
    trail_length: float | None = Field(
        100,
        alias="trailLength",
        description="The approximate visible length of the streamline in points. This will be longer where the particle is moving faster, and shorter where the particle is moving slower.",
    )
    trail_width: float | None = Field(
        1.5,
        alias="trailWidth",
        description="The width of the streamlines in points.",
    )
    type: Literal["flowRenderer"] = Field(
        "flowRenderer", description="Specifies the type of renderer used."
    )
    visual_variables: (
        list[
            ColorInfoVisualVariable
            | RotationInfoVisualVariable
            | SizeInfoVisualVariable
            | TransparencyInfoVisualVariable
        ]
        | None
    ) = Field(
        None,
        alias="visualVariables",
        description="An array of objects used to set rendering properties. Supports color, size, and opacity visual variables.",
    )


class PredominanceRenderer(SymbolValidatorMixin, BaseModel):
    """
    This renderer is a type of [UniqueValue renderer](uniqueValueRenderer.md) which is based off the `valueExpression` property rather than `field`. Optionally, `size` and/or `transparency` visual variables may be included with `valueExpression`. Note that this renderer is supported for ArcGIS Online hosted feature services and feature collections.
    """

    model_config = common_config
    authoring_info: AuthoringInfo | None = Field(
        None,
        alias="authoringInfo",
        description="An object containing metadata about the authoring process for creating a renderer object. This allows the authoring clients to save specific overridable settings so that next time it is accessed via the UI, their selections are remembered. Non-authoring clients can ignore it.",
    )
    background_fill_symbol: SimpleFillSymbolEsriSFS | None = Field(
        None,
        alias="backgroundFillSymbol",
        description="A symbol used for polygon features as a background if the renderer uses point symbols, e.g. for bivariate types & size rendering. Only applicable to polygon layers. [PictureFillSymbols](esriPFS_symbol.md) can also be used outside of the Map Viewer for Size and Predominance and Size renderers.",
    )
    default_label: str | None = Field(
        None,
        alias="defaultLabel",
        description="Default label for the default symbol used to draw unspecified values.",
    )
    default_symbol: (
        CimSymbolReference
        | PictureFillSymbolsEsriPFS
        | PictureMarkerSymbolEsriPMS
        | SimpleFillSymbolEsriSFS
        | SimpleLineSymbolEsriSLS
        | SimpleMarkerSymbolEsriSMS
        | TextSymbolEsriTS
        | None
    ) = Field(
        None,
        alias="defaultSymbol",
        description="Symbol used when a value cannot be classified.",
        title="symbol",
    )
    rotation_expression: str | None = Field(
        None,
        alias="rotationExpression",
        description="A constant value or an expression that derives the angle of rotation based on a feature attribute value. When an attribute name is specified, it's enclosed in square brackets.  Rotation is set using a visual variable of type `rotationInfo` with a specified `field` or `valueExpression` property",
    )
    rotation_type: RotationType | None = Field(
        None,
        alias="rotationType",
        description="String value which controls the origin and direction of rotation on point features. If the rotationType is defined as `arithmetic`, the symbol is rotated from East in a counter-clockwise direction where East is the 0 degree axis. If the rotationType is defined as `geographic`, the symbol is rotated from North in a clockwise direction where North is the 0 degree axis.",
    )
    type: Literal["uniqueValue"] = Field(
        "uniqueValue", description="Specifies the type of renderer used."
    )
    unique_value_infos: list[UniqueValueInfo] = Field(
        ...,
        alias="uniqueValueInfos",
        description="An array of uniqueValueInfo objects.",
    )
    value_expression: str | None = Field(
        None,
        alias="valueExpression",
        description="An [Arcade expression](https://developers.arcgis.com/arcade/) evaluating to either a string or a number.",
    )
    value_expression_title: str | None = Field(
        None,
        alias="valueExpressionTitle",
        description="The title identifying and describing the associated [Arcade](https://developers.arcgis.com/arcade/) expression as defined in the `valueExpression` property.",
    )
    visual_variables: list[
        ColorInfoVisualVariable
        | RotationInfoVisualVariable
        | SizeInfoVisualVariable
        | TransparencyInfoVisualVariable
    ] = Field(
        ...,
        alias="visualVariables",
        description="An array of objects used to set rendering properties.",
    )


class SimpleRenderer(SymbolValidatorMixin, BaseModel):
    """
    A simple renderer is a renderer that uses one symbol only.
    """

    model_config = common_config
    authoring_info: AuthoringInfo | None = Field(
        None,
        alias="authoringInfo",
        description="An object containing metadata about the authoring process for creating a renderer object. This allows the authoring clients to save specific overridable settings so that next time it is accessed via the UI, their selections are remembered. Non-authoring clients can ignore it.",
    )
    description: str | None = Field(None, description="Description of the renderer.")
    label: str | None = Field(
        None,
        description="The text string that is displayed in the table of contents.",
    )
    rotation_expression: str | None = Field(
        None,
        alias="rotationExpression",
        description="A constant value or an expression that derives the angle of rotation based on a feature attribute value. When an attribute name is specified, it's enclosed in square brackets.  Rotation is set using a visual variable of type `rotationInfo` with a specified `field` or `valueExpression` property",
    )
    rotation_type: RotationType | None = Field(
        None,
        alias="rotationType",
        description="String value which controls the origin and direction of rotation on point features. If the rotationType is defined as `arithmetic`, the symbol is rotated from East in a counter-clockwise direction where East is the 0 degree axis. If the rotationType is defined as `geographic`, the symbol is rotated from North in a clockwise direction where North is the 0 degree axis.",
    )
    symbol: (
        CimSymbolReference
        | PictureFillSymbolsEsriPFS
        | PictureMarkerSymbolEsriPMS
        | SimpleFillSymbolEsriSFS
        | SimpleLineSymbolEsriSLS
        | SimpleMarkerSymbolEsriSMS
        | TextSymbolEsriTS
    ) = Field(
        ...,
        description="An object that represents how all features will be drawn.",
        title="symbol",
    )
    type: Literal["simple"] = Field(
        "simple", description="Specifies the type of renderer used."
    )
    visual_variables: (
        list[
            ColorInfoVisualVariable
            | RotationInfoVisualVariable
            | SizeInfoVisualVariable
            | TransparencyInfoVisualVariable
        ]
        | None
    ) = Field(
        None,
        alias="visualVariables",
        description="An array of objects used to set rendering properties.",
    )

    # @root_validator(pre=True)
    # def validate_symbol_type(cls, values):
    #     symbol_data = values.get("symbol")
    #     if symbol_data and isinstance(symbol_data, dict):
    #         symbol_type = symbol_data.get("type")
    #         if symbol_type == "esriSFS":
    #             values["symbol"] = SimpleFillSymbolEsriSFS(**symbol_data)
    #         elif symbol_type == "esriSLS":
    #             values["symbol"] = SimpleLineSymbolEsriSLS(**symbol_data)
    #     return values


class TemporalRenderer(BaseModel):
    """
    Temporal renderers provide time-based rendering of features in a feature layer. It can be useful to visualize historic or real-time data such as earthquake or hurricane occurrences. You can use a temporal renderer to define how observations (regular, historic, latest) and tracks are rendered. You can also show aging of features with respect to the map's time extent.
    """

    model_config = common_config
    latest_observation_renderer: SimpleRenderer | None = Field(
        None,
        alias="latestObservationRenderer",
        description="Simple renderer used to symbolize point geometries for the most current observations.",
    )
    observational_renderer: SimpleRenderer | None = Field(
        None,
        alias="observationalRenderer",
        description="Simple renderer used to symbolize regular/historic observations.",
    )
    track_renderer: SimpleRenderer | None = Field(
        None,
        alias="trackRenderer",
        description="Simple renderer used to symbolize the tracks.",
    )
    type: Literal["temporal"] | None = Field(
        "temporal", description="Specifies the type of renderer used."
    )


class UniqueValueRenderer(SymbolValidatorMixin, BaseModel):
    """
    This renderer symbolizes features based on one or more matching string attributes.
    """

    model_config = common_config
    authoring_info: AuthoringInfo | None = Field(
        None,
        alias="authoringInfo",
        description="An object containing metadata about the authoring process for creating a renderer object. This allows the authoring clients to save specific settings so that next time it is accessed via the UI, their selections are remembered. Non-authoring clients can ignore it.",
    )
    background_fill_symbol: SimpleFillSymbolEsriSFS | None = Field(
        None,
        alias="backgroundFillSymbol",
        description="A symbol used for polygon features as a background if the renderer uses point symbols, e.g. for bivariate types & size rendering. Only applicable to polygon layers. [PictureFillSymbols](esriPFS_symbol.md) can also be used outside of the Map Viewer for Size and Predominance and Size renderers.",
    )
    default_label: str | None = Field(
        None,
        alias="defaultLabel",
        description="Default label for the default symbol used to draw unspecified values.",
    )
    default_symbol: (
        CimSymbolReference
        | PictureFillSymbolsEsriPFS
        | PictureMarkerSymbolEsriPMS
        | SimpleFillSymbolEsriSFS
        | SimpleLineSymbolEsriSLS
        | SimpleMarkerSymbolEsriSMS
        | TextSymbolEsriTS
        | None
    ) = Field(
        None,
        alias="defaultSymbol",
        description="Symbol used when a value cannot be matched.",
        title="symbol",
    )
    draw_in_class_order: bool | None = Field(
        False,
        alias="drawInClassOrder",
        description="Indicates whether the order of the classes in the renderer definition should be used for the feature drawing order of the layer. If `orderBy` is set in the layerDefinition, then that will take precedence over this property.",
    )
    field1: str | None = Field(
        None, description="Attribute field renderer uses to match values."
    )
    field2: str | None = Field(
        None,
        description="If needed, specify an additional attribute field the renderer uses to match values.",
    )
    field3: str | None = Field(
        None,
        description="If needed, specify an additional attribute field the renderer uses to match values.",
    )
    field_delimiter: str | None = Field(
        ", ",
        alias="fieldDelimiter",
        description="String inserted between the values if multiple attribute fields are specified.",
    )
    legend_options: LegendOptions | None = Field(
        None,
        alias="legendOptions",
        description="Allows the user to override the layer title with a more descriptive title of the renderer.",
    )
    rotation_expression: str | None = Field(
        None,
        alias="rotationExpression",
        description="A constant value or an expression that derives the angle of rotation based on a feature attribute value. When an attribute name is specified, it's enclosed in square brackets.  Rotation is set using a visual variable of type `rotationInfo` with a specified `field` or `valueExpression` property.",
    )
    rotation_type: RotationType | None = Field(
        None,
        alias="rotationType",
        description="String property which controls the origin and direction of rotation. If the rotationType is defined as `arithmetic` the symbol is rotated from East in a counter-clockwise direction where East is the 0 degree axis. If the rotationType is defined as `geographic`, the symbol is rotated from North in a clockwise direction where North is the 0 degree axis.",
    )
    type: Literal["uniqueValue"] = Field(
        "uniqueValue", description="Specifies the type of renderer used."
    )
    unique_value_groups: list[UniqueValueGroup] | None = Field(
        None,
        alias="uniqueValueGroups",
        description="An array of uniqueValueGroup objects. If present, then `uniqueValueGroups` should be used in favor of `uniqueValueInfos`.",
    )
    unique_value_infos: list[UniqueValueInfo] = Field(
        ...,
        alias="uniqueValueInfos",
        description="An array of uniqueValueInfo objects. If `uniqueValueGroups` is present, then this property should be ignored during webmap reading. In the future, this property will be deprecated and eventually removed.",
    )
    value_expression: str | None = Field(
        None,
        alias="valueExpression",
        description="An [Arcade expression](https://developers.arcgis.com/arcade/) evaluating to either a string or a number.",
    )
    value_expression_title: str | None = Field(
        None,
        alias="valueExpressionTitle",
        description="The title identifying and describing the associated [Arcade](https://developers.arcgis.com/arcade/) expression as defined in the `valueExpression` property.",
    )
    visual_variables: (
        list[
            ColorInfoVisualVariable
            | RotationInfoVisualVariable
            | SizeInfoVisualVariable
            | TransparencyInfoVisualVariable
        ]
        | None
    ) = Field(
        None,
        alias="visualVariables",
        description="An array of objects used to set rendering properties.",
    )


class VectorFieldRenderer(BaseModel):
    """
    A vector field renderer is a renderer that uses symbolizes a U-V or Magnitude-Direction data.
    """

    model_config = common_config
    attribute_field: str | None = Field(
        None,
        alias="attributeField",
        description="Name of the feature attribute field that contains the data value.",
    )
    flow_representation: FlowRepresentation | None = Field(
        "flow-from",
        alias="flowRepresentation",
        description="Sets the flow direction of the data.",
    )
    input_unit: InputUnit | None = Field(
        None, alias="inputUnit", description="Input unit for Magnitude."
    )
    output_unit: OutputUnit | None = Field(
        None, alias="outputUnit", description="Output unit for Magnitude."
    )
    rotation_type: RotationType | None = Field(
        None,
        alias="rotationType",
        description="String value which controls the origin and direction of rotation on point features. If the rotationType is defined as `arithmetic`, the symbol is rotated from East in a counter-clockwise direction where East is the 0 degree axis. If the rotationType is defined as `geographic`, the symbol is rotated from North in a clockwise direction where North is the 0 degree axis.",
    )
    style: VectorFieldRendererStyle | str | None = Field(
        None, description="A predefined style."
    )
    symbol_tile_size: float | None = Field(
        50,
        alias="symbolTileSize",
        description="Determines the density of the symbols. Larger tile size, fewer symbols appear in the display. The VectorFieldRenderer draws one symbol within a defined tile size (in pixels). The default is 50 pixels.",
    )
    type: Literal["vectorField"] = Field(
        "vectorField", description="Specifies the type of renderer used."
    )
    visual_variables: (
        list[
            ColorInfoVisualVariable
            | RotationInfoVisualVariable
            | SizeInfoVisualVariable
            | TransparencyInfoVisualVariable
        ]
        | None
    ) = Field(
        None,
        alias="visualVariables",
        description="An array of objects used to set rendering properties.",
    )


class Search(BaseModel):
    """
    An object specifying the search parameters set within the web map.
    """

    model_config = common_config
    disable_place_finder: bool = Field(
        ...,
        alias="disablePlaceFinder",
        description="[Required] A boolean value indicating whether or not to disable the place finder.",
    )
    enabled: bool = Field(
        ...,
        description="[Required] A boolean value indicating whether search (find) functionality is enabled in the web map.",
    )
    hint_text: str | None = Field(
        None,
        alias="hintText",
        description="A string value used to indicate the hint provided with the search dialog.",
    )
    layers: list[SearchLayer] | None = Field(
        None,
        description="An array of objects that define search fields and search criteria for layers in the web map.",
    )
    tables: list[SearchTable] | None = Field(
        None,
        description="An array of objects that define search fields and search criteria for tables in the web map.",
    )


class FeatureReductionBinningDrawingInfo(BaseModel):
    """
    The feature reduction binning drawingInfo object contains drawing information, such as labelingInfo and renderer, for feature layer binning.
    """

    model_config = common_config
    labeling_info: list[LabelingInfo] | None = Field(
        None,
        alias="labelingInfo",
        description="An object defining the properties used for labeling bins.",
    )
    renderer: (
        ClassBreaksRenderer
        | DictionaryRenderer
        | DotDensityRenderer
        | FlowRenderer
        | HeatmapRenderer
        | PieChartRenderer
        | PredominanceRenderer
        | RasterColorMapRenderer
        | RasterShadedReliefRenderer
        | SimpleRenderer
        | StretchRenderer
        | TemporalRenderer
        | UniqueValueRenderer
        | VectorFieldRenderer
        | None
    ) = Field(
        None,
        description="An object defining the symbology of the bins.",
        title="renderer",
    )


class FeatureReductionClusterDrawingInfo(BaseModel):
    """
    The feature reduction cluster drawingInfo object contains drawing information, such as labelingInfo, for featureReduction (e.g. clustering) on a feature layer.
    """

    model_config = common_config
    labeling_info: list[LabelingInfo] | None = Field(
        None,
        alias="labelingInfo",
        description="An object defining the properties used for labeling clusters.",
    )
    renderer: (
        ClassBreaksRenderer
        | DictionaryRenderer
        | DotDensityRenderer
        | FlowRenderer
        | HeatmapRenderer
        | PieChartRenderer
        | PredominanceRenderer
        | RasterColorMapRenderer
        | RasterShadedReliefRenderer
        | SimpleRenderer
        | StretchRenderer
        | TemporalRenderer
        | UniqueValueRenderer
        | VectorFieldRenderer
        | None
    ) = Field(
        None,
        description="An object defining the symbology of the cluster which provides the symbology for the layer. If not defined, web clients will infer a cluster style from the layer's renderer. Other clients may infer a style or set a default cluster style. If no visual variables are present in a simpleRenderer or a pieChartRenderer, then cluster sizes will automatically be rendered based on the clusterMinSize and clusterMaxSize.",
        title="renderer",
    )


class GeotriggersInfo(BaseModel):
    """
    Information relating to a list of Geotriggers.
    """

    geotriggers: list[FenceGeotrigger] = Field(
        ..., description="A list of Geotriggers."
    )


class Viewing(BaseModel):
    """
    An object containing all the viewing properties of the web map. If this is *null* or not defined, the client should assume a logical default.
    """

    model_config = common_config
    basemap_gallery: BasemapGallery | None = Field(
        None,
        alias="basemapGallery",
        description="Deprecated. The basemap tool which will use the basemap group defined in the Portal.",
    )
    measure: Measure | None = Field(None, description="Deprecated. Measure tool.")
    routing: Routing | None = Field(
        None,
        description="Deprecated. The route tool which will leverage the Portals defined route service.",
    )
    search: Search | None = Field(
        None,
        description="An object specifying search parameters within the webmap.",
    )


class DrawingInfo(BaseModel):
    """
    The drawingInfo object contains drawing information for a feature layer.
    """

    model_config = common_config
    fixed_symbols: bool | None = Field(
        None,
        alias="fixedSymbols",
        description="Only used for feature collections with a renderer. The feature's symbol is defined by the layer's renderer.",
    )
    labeling_info: list[LabelingInfo] | None = Field(
        None,
        alias="labelingInfo",
        description="An object defining the properties used for labeling the layer. If working with [Map Image layers](mapServiceLayer.md), this property is only applicable if the layer is enabled with [dynamic layers](http://enterprise.arcgis.com/en/server/latest/publish-services/windows/about-dynamic-layers.htm)",
    )
    renderer: (
        ClassBreaksRenderer
        | DictionaryRenderer
        | DotDensityRenderer
        | FlowRenderer
        | HeatmapRenderer
        | PieChartRenderer
        | PredominanceRenderer
        | RasterColorMapRenderer
        | RasterShadedReliefRenderer
        | SimpleRenderer
        | StretchRenderer
        | TemporalRenderer
        | UniqueValueRenderer
        | VectorFieldRenderer
    ) = Field(
        ...,
        description="An object defined which provides the symbology for the layer. If working with [Map Image layers](mapServiceLayer.md), this property is only applicable if the layer is enabled with [dynamic layers](http://enterprise.arcgis.com/en/server/latest/publish-services/windows/about-dynamic-layers.htm)",
        title="renderer",
    )
    scale_symbols: bool | None = Field(
        False,
        alias="scaleSymbols",
        description="Boolean property indicating whether symbols should stay the same size in screen units as you zoom in. A value of `false` means the symbols stay the same size in screen units regardless of the map scale.",
    )
    show_labels: bool | None = Field(
        None,
        alias="showLabels",
        description="Defines whether a labels should be shown or not. This is only valid for sublayers.",
    )
    transparency: confloat(ge=0.0, le=100.0) | None = Field(
        None,
        description="Number value ranging between 0 (no transparency) to 100 (completely transparent).",
    )


class FeatureReductionBinning(BaseModel):
    """
    Binning aggregates point data to polygons, thus summarizing the density of data. This can be an effective method for visualizing large datasets.
    """

    model_config = common_config
    bin_type: BinType = Field(
        ...,
        alias="binType",
        description="Determines the type or shape of bins used in the aggregation.",
    )
    disable_popup: bool | None = Field(
        False,
        alias="disablePopup",
        description="Indicates whether to disable popups describing aggregate data in a binning visualization.",
    )
    drawing_info: FeatureReductionBinningDrawingInfo | None = Field(
        None,
        alias="drawingInfo",
        description="Contains labeling and rendering information for the bins.",
    )
    fields: list[AggregateField] | None = Field(
        None,
        description="An array of objects defining the aggregate fields to use in binning popups, labels, and renderers.",
    )
    fixed_bin_level: float | None = Field(
        None,
        alias="fixedBinLevel",
        description="Indicates the fixed geohash level used to create bins. When defined, bins defined at this level are static and do not regenerate on zoom. When undefined, bin resolution will vary as you zoom in and out. Dynamically changing bin resolution on zoom is currently not supported on web clients.",
    )
    popup_info: PopupInfo | None = Field(
        None,
        alias="popupInfo",
        description="Defines the popup used to describe aggregate data in the selected bin.",
    )
    show_labels: bool | None = Field(
        None,
        alias="showLabels",
        description="Defines whether labels should be shown in the bins.",
    )
    type: Literal["binning"] = Field(
        "binning", description="Type of feature reduction."
    )
    visibility_info: FeatureReductionScaleVisibilityInfo | None = Field(
        None,
        alias="visibilityInfo",
        description="Defines the threshold for toggling between when a layer should be drawn using the feature reduction configuration versus the layer's drawing info.",
    )


class FeatureReductionCluster(BaseModel):
    """
    Clustering declutters the screen by hiding features that would otherwise intersect with other features on screen.
    """

    model_config = common_config
    cluster_max_size: float | None = Field(
        None,
        alias="clusterMaxSize",
        description="Size of the largest cluster, in screen units (points).",
    )
    cluster_min_size: float | None = Field(
        None,
        alias="clusterMinSize",
        description="Size of the smallest cluster, in screen units (points).",
    )
    cluster_radius: float | None = Field(
        None,
        alias="clusterRadius",
        description="Strength of clustering, in screen units (points).",
    )
    disable_popup: bool | None = Field(
        False,
        alias="disablePopup",
        description="Indicates whether to disable viewing popups defined for the clusters.",
    )
    drawing_info: FeatureReductionClusterDrawingInfo | None = Field(
        None,
        alias="drawingInfo",
        description="Contains labeling and rendering information for the cluster.",
    )
    fields: list[AggregateField] | None = Field(
        None,
        description="An array of objects defining the aggregate fields to use in cluster popups, labels, and explicit renderers.",
    )
    popup_info: PopupInfo | None = Field(
        None,
        alias="popupInfo",
        description="Defines the popup used to describe aggregate data in the selected cluster.",
    )
    show_labels: bool | None = Field(
        None,
        alias="showLabels",
        description="Defines whether labels should be shown in the clusters.",
    )
    type: Literal["cluster"] | None = Field(
        None, description="Type of feature reduction."
    )
    visibility_info: FeatureReductionScaleVisibilityInfo | None = Field(
        None,
        alias="visibilityInfo",
        description="Defines the threshold for toggling between when a layer should be drawn using the feature reduction configuration versus the layer's drawing info.",
    )


class ApplicationProperties(BaseModel):
    """
    The applicationProperties object is one of the objects at the top level of the JSON web map JSON schema. This is responsible for containing the viewing and editing properties of the web map. There are specific objects within this object that are applicable only to Collector and are explained within the property descriptions.
    """

    model_config = common_config
    editing: Editing | None = Field(
        None,
        description="If locationTracking is set and enabled, the Collector application will update the feature service at the defined interval with the current location of the user logged into the Collector app.",
    )
    offline: Offline | None = Field(
        None, description="Use if working with offline maps."
    )
    viewing: Viewing | None = Field(
        None,
        description="An object containing all the viewing properties of the web map. If this is *null* or not defined, the client should assume a logical default.",
    )


class Webmap(BaseModel):
    """
    The web map data lists the basemap, operational layers, and bookmarks to be used in the web map. It also contains information about popup windows and layer styling overrides to be used in the web map. A version property allows you to supply the version of the web map JSON format being used.
    """

    model_config = common_config
    application_properties: ApplicationProperties | None = Field(
        None,
        alias="applicationProperties",
        description="Viewing and editing properties of the webmap.",
    )
    authoring_app: str | None = Field(
        None,
        alias="authoringApp",
        description="[Required] String value indicating the application that last authored the webmap.",
    )
    authoring_app_version: str | None = Field(
        None,
        alias="authoringAppVersion",
        description="[Required] String value indicating the version number of the application that last authored the webmap.",
    )
    background: Background | None = None
    base_map: BaseMap = Field(
        ...,
        alias="baseMap",
        description="[Required] Basemaps give the web map a geographic context.",
    )
    bookmarks: list[Bookmark] | None = Field(
        None,
        description="A bookmark is a saved geographic extent that allows end users to quickly navigate to a particular area of interest.",
    )
    geotriggers_info: GeotriggersInfo | None = Field(
        None,
        alias="geotriggersInfo",
        description="Information on any Geotrigger conditions defined for this map.",
    )
    initial_state: InitialState | None = Field(
        None,
        alias="initialState",
        description="The initial state at which to open the map.",
    )
    map_floor_info: MapFloorInfo | None = Field(
        None,
        alias="mapFloorInfo",
        description="Contains floor-awareness information for the map.",
    )
    map_ips_info: MapIPSInfo | None = Field(
        None,
        alias="mapIPSInfo",
        description="Contains indoor positioning system information for the map.",
    )
    map_range_info: MapRangeInformation | None = Field(
        None, alias="mapRangeInfo", description="Map range information."
    )
    operational_layers: (
        list[
            AnnotationLayerArcGISAnnotationLayer
            | CatalogLayerCatalogLayer
            | CSVLayerCSV
            | DimensionLayerArcGISDimensionLayer
            | FeatureLayerArcGISFeatureLayer
            | GeoJSONLayerGeoJSON
            | GeoRSSLayerGeoRSS
            | GroupLayer
            | ImageServiceLayerArcGISImageServiceLayer
            | ImageServiceVectorLayerArcGISImageServiceVectorLayer
            | KMLLayerKML
            | KnowledgeGraphLayerKnowledgeGraphLayer
            | MapServiceLayerArcGISMapServiceLayer
            | OGCFeatureLayer
            | OrientedImageryLayerOrientedImageryLayer
            | StreamLayerArcGISStreamLayer
            | SubtypeGroupLayerSubtypeGroupLayer
            | TiledImageServiceLayerArcGISTiledImageServiceLayer
            | TiledMapServiceLayerArcGISTiledMapServiceLayer
            | VectorTileLayerVectorTileLayer
            | WebTiledLayerWebTiledLayer
            | WebFeatureServiceLayerWFS
            | WMSLayerWMS
            | MediaLayerMedia
            | LinkChartLayerLinkChartLayer
        ]
        | None
    ) = Field(
        None,
        alias="operationalLayers",
        description="Operational layers contain business data which are used to make thematic maps.",
    )
    parcel_fabric: ParcelFabric | None = Field(
        None,
        alias="parcelFabric",
        description="A Parcel Fabric object that the map can use to access Parcel Fabric related functionality, such as managing parcel records.",
    )
    reference_scale: confloat(ge=0.0) | None = Field(
        0,
        alias="referenceScale",
        description="A floating-point number representing the reference scale which map symbols are drawn relative to. The number is the scale's denominator. When the reference scale is 0, symbols are always drawn at the same size regardless of the map scale. The referenceScale is only used for Feature Layers that have scaleSymbols:true. Not all applications or layer types support referenceScale yet. In particular, ArcGISOnline will not use the referenceScale when drawing symbols in the browser.",
    )
    spatial_reference: SpatialReference = Field(
        ...,
        alias="spatialReference",
        description="[Required] An object used to specify the spatial reference of the given geometry.",
        title="spatialReference",
    )
    tables: list[SubtypeGroupTableSubtypeGroupTable | Table] | None = Field(
        None,
        description="An array of objects representing non-spatial datasets used in the web map.",
    )
    time_zone: str | None = Field(
        None,
        alias="timeZone",
        description="Time zone of the webmap. When applicable, dates and times will be displayed using this time zone. The time zone can be `system`, `unknown` or any named [IANA](https://www.iana.org/time-zones) time zone. See [here](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) for a comprehensive list of time zones. The `system` keyword indicates the webmap will use the time zone currently used by the device loading the webmap. Whereas `unknown` means that dates will be treated as if they do not have an associated time zone. When the property is not defined in the webmap, the client uses its default behavior (JavaScript Maps SDK uses `system`, while ArcGIS Pro uses `unknown`).",
    )
    utility_networks: list[UtilityNetwork] | None = Field(
        None,
        alias="utilityNetworks",
        description="An array of utility network objects the map can use to access utility-related functionality, such as tracing and querying associations.",
    )
    version: str = Field("2.31", description="The webmap version being used")
    widgets: Widgets | None = Field(
        None,
        description="The widgets object contains widgets that should be exposed to the user.",
    )


class BaseMap(BaseModel):
    """
    A basemap layer is a layer that provides geographic context to the map. A web map always contains a basemap. The basemap has a title and is the combination of each baseMapLayer. It is required that a baseMap be saved within the web map.
    """

    model_config = common_config
    base_map_layers: list[
        BingLayerBingLayer
        | ImageServiceLayerArcGISImageServiceLayer
        | ImageServiceVectorLayerArcGISImageServiceVectorLayer
        | MapServiceLayerArcGISMapServiceLayer
        | OpenStreetMapLayerOpenStreetMap
        | TiledImageServiceLayerArcGISTiledImageServiceLayer
        | TiledMapServiceLayerArcGISTiledMapServiceLayer
        | VectorTileLayerVectorTileLayer
        | WebTiledLayerWebTiledLayer
        | WMSLayerWMS
    ] = Field(
        ...,
        alias="baseMapLayers",
        description="An array of baseMapLayer objects defining the basemaps used in the web map.",
    )
    title: str = Field(
        ...,
        description="Required string title for the basemap that can be used in a table of contents. It takes the title of the first `baseMapLayer` in the array.",
    )


class AnnotationLayerArcGISAnnotationLayer(BaseModel):
    """
    Annotation layers can be created by referencing a layer from a feature service. Annotation layers honor any feature templates configured in the source document.
    """

    model_config = common_config
    blend_mode: BlendMode | None = Field(None, alias="blendMode")
    custom_parameters: dict[constr(pattern=r".*"), str] | None = Field(
        None,
        alias="customParameters",
        description="A sequence of custom parameters appended to the URL of all requests related to a layer.",
        title="customParameters",
    )
    disable_popup: bool | None = Field(
        False,
        alias="disablePopup",
        description="Indicates whether to allow a client to ignore popups defined by the service item.",
    )
    effect: (
        list[
            EffectFunctions
            | EffectFunctions1
            | EffectFunctions2
            | EffectFunctions3
            | EffectFunctions4
        ]
        | list[ScaleDependentEffect]
        | None
    ) = Field(
        None,
        description="Effect provides various filter functions to achieve different visual effects similar to how image filters (photo apps) work.",
        title="Effect",
    )
    enable_editing: bool | None = Field(
        False,
        alias="enableEditing",
        description="Indicates whether a client can add, remove or update features in the layer.",
    )
    id: str | None = Field(
        None, description="A unique identifying string for the layer."
    )
    layer_definition: LayerDefinition | None = Field(
        None,
        alias="layerDefinition",
        description="A layerDefinition object defining the attribute schema and drawing information for the layer.",
    )
    layer_type: Literal["ArcGISAnnotationLayer"] = Field(
        "ArcGISAnnotationLayer",
        alias="layerType",
        description="String indicating the layer type.",
    )
    opacity: confloat(ge=0.0, le=1.0) | None = Field(
        1,
        description="The degree of transparency applied to the layer on the client side, where 0 is full transparency and 1 is no transparency.",
    )
    popup_info: PopupInfo | None = Field(
        None,
        alias="popupInfo",
        description="A popupInfo object defining the content of popup windows when you click or query a feature.",
    )
    refresh_interval: float | None = Field(
        0,
        alias="refreshInterval",
        description="Refresh interval of the layer in minutes. Non-zero value indicates automatic layer refresh at the specified interval. Value of 0 indicates auto refresh is not enabled.",
    )
    time_animation: bool | None = Field(
        True,
        alias="timeAnimation",
        description="Indicates whether to disable time animation if the layer supports it.",
    )
    title: str = Field(
        ...,
        description="A user-friendly string title for the layer that can be used in a table of contents.",
    )
    url: str | None = Field(
        None,
        description="The URL to the layer. If the layer is not from a web service but rather a feature collection, then the url property is omitted.",
    )
    visibility: bool | None = Field(
        True,
        description="Boolean property determining whether the layer is initially visible in the web map.",
    )
    visible_layers: list[int] | None = Field(
        None,
        alias="visibleLayers",
        description="An array of sublayer ids that should appear visible. These ids refer to subsets of the Annotation features in the AnnotationLayer, identified by their AnnotationClassId.",
    )


class CatalogLayerCatalogLayer(BaseModel):
    """
    Catalog layers can be created by referencing a feature service layer where the type is a 'Catalog Layer'. Catalog Layer helps visually explore the footprints of disperate layer types stored as references along with footprint in shape field and other attributes relavent to each layer reference.
    """

    model_config = common_config
    blend_mode: BlendMode | None = Field(None, alias="blendMode")
    custom_parameters: dict[constr(pattern=r".*"), str] | None = Field(
        None,
        alias="customParameters",
        description="A sequence of custom parameters appended to the URL of all requests related to a layer.",
        title="customParameters",
    )
    dynamic_group_layer: CatalogDynamicGroupLayerCatalogDynamicGroupLayer | None = (
        Field(
            None,
            alias="dynamicGroupLayer",
            description="Object representing the dynamic group layer that loads layers selectively based on the current map extent, their scale visibility, time and range.",
        )
    )
    effect: (
        list[
            EffectFunctions
            | EffectFunctions1
            | EffectFunctions2
            | EffectFunctions3
            | EffectFunctions4
        ]
        | list[ScaleDependentEffect]
        | None
    ) = Field(
        None,
        description="Effect provides various filter functions to achieve different visual effects similar to how image filters (photo apps) work.",
        title="Effect",
    )
    footprint_layer: FootprintLayerFootprintLayer | None = Field(
        None,
        alias="footprintLayer",
        description="Object representing the dynamic group layer to visualize the catalog layer items as a polygon feature layer.",
    )
    id: str | None = Field(
        None, description="A unique identifying string for the layer."
    )
    item_id: str | None = Field(
        None,
        alias="itemId",
        description="Optional string containing the item ID of the service if it's registered on ArcGIS Online or your organization's portal.",
    )
    layer_definition: LayerDefinition | None = Field(
        None,
        alias="layerDefinition",
        description="A layerDefinition object defining the attribute schema and drawing information for the layer.",
    )
    layer_type: Literal["CatalogLayer"] = Field(
        "CatalogLayer",
        alias="layerType",
        description="String indicating the layer type.",
    )
    opacity: confloat(ge=0.0, le=1.0) | None = Field(
        1,
        description="The degree of transparency applied to the layer on the client side, where 0 is full transparency and 1 is no transparency.",
    )
    refresh_interval: float | None = Field(
        0,
        alias="refreshInterval",
        description="Refresh interval of the layer in minutes. Non-zero value indicates automatic layer refresh at the specified interval. Value of 0 indicates auto refresh is not enabled.",
    )
    show_legend: bool = Field(
        True,
        alias="showLegend",
        description="Boolean value indicating whether to display the layer in the legend. Default value is `true`.",
    )
    time_animation: bool | None = Field(
        True,
        alias="timeAnimation",
        description="Indicates whether to disable time animation if the layer supports it.",
    )
    title: str = Field(
        ...,
        description="A user-friendly string title for the layer that can be used in a table of contents.",
    )
    url: str | None = Field(None, description="The URL to the layer.")
    visibility: bool | None = Field(
        True,
        description="Boolean property determining whether the layer is initially visible in the web map.",
    )
    visibility_time_extent: list[int | None] | None = Field(
        None,
        alias="visibilityTimeExtent",
        description="Represents time extent that will control when a layer should be visible based on webmap's current time. Visibility time extent only affects the layer visibility and will not filter the data.",
        title="timeExtent",
    )


class CSVLayerCSV(BaseModel):
    """
    The CSV layer type references a CSV or TXT file from a publicly-accessible web server. It then dynamically loads into the map at run time. The CSV layer will maintain a reference to the CSV resource.
    """

    model_config = common_config
    blend_mode: BlendMode | None = Field(None, alias="blendMode")
    column_delimiter: ColumnDelimiter | None = Field(
        None,
        alias="columnDelimiter",
        description="A string defining the character used to separate columns in a CSV file.",
    )
    custom_parameters: dict[constr(pattern=r".*"), str] | None = Field(
        None,
        alias="customParameters",
        description="A sequence of custom parameters appended to the URL of all requests related to a layer.",
        title="customParameters",
    )
    disable_popup: bool | None = Field(
        False,
        alias="disablePopup",
        description="Indicates whether to allow a client to ignore popups defined by the service item.",
    )
    effect: (
        list[
            EffectFunctions
            | EffectFunctions1
            | EffectFunctions2
            | EffectFunctions3
            | EffectFunctions4
        ]
        | list[ScaleDependentEffect]
        | None
    ) = Field(
        None,
        description="Effect provides various filter functions to achieve different visual effects similar to how image filters (photo apps) work.",
        title="Effect",
    )
    feature_effect: FeatureEffect | None = Field(None, alias="featureEffect")
    id: str = Field(..., description="A unique identifying string for the layer.")
    item_id: str | None = Field(
        None,
        alias="itemId",
        description="Optional string containing the item ID if it's registered on ArcGIS Online or your organization's portal.",
    )
    layer_definition: LayerDefinition | None = Field(
        None,
        alias="layerDefinition",
        description="A layerDefinition object defining the attribute schema and drawing information for the layer.",
    )
    layer_type: Literal["CSV"] = Field(
        "CSV",
        alias="layerType",
        description="String indicating the layer type.",
    )
    location_info: LocationInfo | None = Field(
        None,
        alias="locationInfo",
        description="A locationInfo object defining how location information will be retrieved from a CSV file.",
    )
    opacity: confloat(ge=0.0, le=1.0) | None = Field(
        1,
        description="The degree of transparency applied to the layer on the client side, where 0 is full transparency and 1 is no transparency.",
    )
    popup_info: PopupInfo | None = Field(
        None,
        alias="popupInfo",
        description="A popupInfo object defining the content of popup windows when you click or query a feature.",
    )
    refresh_interval: float | None = Field(
        0,
        alias="refreshInterval",
        description="Refresh interval of the layer in minutes. Non-zero value indicates automatic layer refresh at the specified interval. Value of 0 indicates auto refresh is not enabled.",
    )
    show_labels: bool | None = Field(
        False,
        alias="showLabels",
        description="Labels will display if this property is set to `true` and the layer also has a [labelingInfo](labelingInfo.md) property associated with it. This property can get stored in the web scene config.",
    )
    show_legend: bool | None = Field(
        True,
        alias="showLegend",
        description="Boolean value indicating whether to display the layer in the legend. Default value is `true`.",
    )
    title: str = Field(
        ...,
        description="A user-friendly string title for the layer that can be used in a table of contents.",
    )
    type: str | None = Field(None, description="Deprecated, use layerType instead.")
    url: str = Field(..., description="The URL to the layer.")
    visibility: bool | None = Field(
        True,
        description="Boolean property determining whether the layer is initially visible in the web map.",
    )
    visibility_time_extent: list[int | None] | None = Field(
        None,
        alias="visibilityTimeExtent",
        description="Represents time extent that will control when a layer should be visible based on webmap's current time. Visibility time extent only affects the layer visibility and will not filter the data.",
        title="timeExtent",
    )


class DimensionLayerArcGISDimensionLayer(BaseModel):
    """
    Dimension layers can be created by referencing a layer from a feature service. Dimension layers honor any feature templates configured in the source document.
    """

    model_config = common_config
    blend_mode: BlendMode | None = Field(None, alias="blendMode")
    custom_parameters: dict[constr(pattern=r".*"), str] | None = Field(
        None,
        alias="customParameters",
        description="A sequence of custom parameters appended to the URL of all requests related to a layer.",
        title="customParameters",
    )
    disable_popup: bool | None = Field(
        False,
        alias="disablePopup",
        description="Indicates whether to allow a client to ignore popups defined by the service item.",
    )
    effect: (
        list[
            EffectFunctions
            | EffectFunctions1
            | EffectFunctions2
            | EffectFunctions3
            | EffectFunctions4
        ]
        | list[ScaleDependentEffect]
        | None
    ) = Field(
        None,
        description="Effect provides various filter functions to achieve different visual effects similar to how image filters (photo apps) work.",
        title="Effect",
    )
    enable_editing: bool | None = Field(
        False,
        alias="enableEditing",
        description="Indicates whether a client can add, remove or update features in the layer.",
    )
    id: str | None = Field(
        None, description="A unique identifying string for the layer."
    )
    layer_definition: LayerDefinition | None = Field(
        None,
        alias="layerDefinition",
        description="A layerDefinition object defining the attribute schema and drawing information for the layer.",
    )
    layer_type: Literal["ArcGISDimensionLayer"] = Field(
        "ArcGISDimensionLayer",
        alias="layerType",
        description="String indicating the layer type.",
    )
    opacity: confloat(ge=0.0, le=1.0) | None = Field(
        1,
        description="The degree of transparency applied to the layer on the client side, where 0 is full transparency and 1 is no transparency.",
    )
    popup_info: PopupInfo | None = Field(
        None,
        alias="popupInfo",
        description="A popupInfo object defining the content of popup windows when you click or query a feature.",
    )
    refresh_interval: float | None = Field(
        0,
        alias="refreshInterval",
        description="Refresh interval of the layer in minutes. Non-zero value indicates automatic layer refresh at the specified interval. Value of 0 indicates auto refresh is not enabled.",
    )
    time_animation: bool | None = Field(
        True,
        alias="timeAnimation",
        description="Indicates whether to disable time animation if the layer supports it.",
    )
    title: str = Field(
        ...,
        description="A user-friendly string title for the layer that can be used in a table of contents.",
    )
    url: str | None = Field(
        None,
        description="The URL to the layer. If the layer is not from a web service but rather a feature collection, then the url property is omitted.",
    )
    visibility: bool | None = Field(
        True,
        description="Boolean property determining whether the layer is initially visible in the web map.",
    )
    visibility_time_extent: list[int | None] | None = Field(
        None,
        alias="visibilityTimeExtent",
        description="Represents time extent that will control when a layer should be visible based on webmap's current time. Visibility time extent only affects the layer visibility and will not filter the data.",
        title="timeExtent",
    )


class FeatureLayerArcGISFeatureLayer(BaseModel):
    """
    Feature layers can be created by referencing a layer from either a map service or a feature service or by specifying a [feature collection](featureCollection.md) object. Use a map service if you just want to retrieve geometries and attributes from the server and symbolize them yourself. Use a feature service if you want to take advantage of symbols from the service's source map document. Also, use a feature service if you plan on doing editing with the feature layer. Feature layers honor any feature templates configured in the source map document. Feature collection objects are used to create a feature layer based on the supplied definition.
    """

    model_config = common_config
    blend_mode: BlendMode | None = Field(None, alias="blendMode")
    capabilities: str | None = Field(
        None,
        description="A comma-separated string listing which editing operations are allowed on an editable feature service.",
    )
    charts: list[dict[str, Any]] | None = Field(
        None,
        description="An array of chart items of type WebChart available on the feature layer.",
    )
    custom_parameters: dict[constr(pattern=r".*"), str] | None = Field(
        None,
        alias="customParameters",
        description="A sequence of custom parameters appended to the URL of all requests related to a layer.",
        title="customParameters",
    )
    definition_editor: DefinitionEditor | None = Field(
        None,
        alias="definitionEditor",
        description="Stores interactive filters.",
    )
    disable_popup: bool | None = Field(
        False,
        alias="disablePopup",
        description="Indicates whether to allow a client to ignore popups defined by the service item.",
    )
    effect: (
        list[
            EffectFunctions
            | EffectFunctions1
            | EffectFunctions2
            | EffectFunctions3
            | EffectFunctions4
        ]
        | list[ScaleDependentEffect]
        | None
    ) = Field(
        None,
        description="Effect provides various filter functions to achieve different visual effects similar to how image filters (photo apps) work.",
        title="Effect",
    )
    feature_collection: FeatureCollection | None = Field(
        None,
        alias="featureCollection",
        description="A `featureCollection` object defining a layer of features whose geometry and attributes are either stored directly within the web map or with an item. Feature Collections can be created from CSVs, shapefiles, GPX, or map notes.",
    )
    feature_collection_type: FeatureCollectionType | None = Field(
        None,
        alias="featureCollectionType",
        description="Indicates the type of features in the feature collection. If `featureCollectionType` is missing, it means the feature collection is a regular single-layer or multi-layer feature collection.",
    )
    feature_effect: FeatureEffect | None = Field(
        None,
        alias="featureEffect",
        description="Feature Effect emphasizes or deemphasizes features that satisfy a filter using graphical effects.",
    )
    form_info: FormInfo | None = Field(
        None,
        alias="formInfo",
        description="A formInfo object defining the content of the form when you are editing a feature.",
    )
    id: str | None = Field(
        None, description="A unique identifying string for the layer."
    )
    item_id: str | None = Field(
        None,
        alias="itemId",
        description="Optional string containing the item ID of the service if it's registered on ArcGIS Online or your organization's portal.",
    )
    layer_definition: LayerDefinition | None = Field(
        None,
        alias="layerDefinition",
        description="A layerDefinition object defining the attribute schema and drawing information for the layer.",
    )
    layer_type: Literal["ArcGISFeatureLayer"] = Field(
        "ArcGISFeatureLayer",
        alias="layerType",
        description="String indicating the layer type.",
    )
    mode: conint(ge=0, le=2) | None = Field(
        None,
        description="0 is snapshot mode. 1 is on-demand mode. 2 is selection-only mode. Used with ArcGIS feature services and individual layers in ArcGIS map services.",
    )
    opacity: confloat(ge=0.0, le=1.0) | None = Field(
        1,
        description="The degree of transparency applied to the layer on the client side, where 0 is full transparency and 1 is no transparency.",
    )
    popup_info: PopupInfo | None = Field(
        None,
        alias="popupInfo",
        description="A popupInfo object defining the content of popup window when you click a feature on the map.",
    )
    refresh_interval: float | None = Field(
        0,
        alias="refreshInterval",
        description="Refresh interval of the layer in minutes. Non-zero value indicates automatic layer refresh at the specified interval. Value of 0 indicates auto refresh is not enabled.",
    )
    show_labels: bool | None = Field(
        False,
        alias="showLabels",
        description="Labels will display if this property is set to `true` and the layer also has a [labelingInfo](labelingInfo.md) property associated with it. This property can get stored in the web map config and in the item/data.",
    )
    show_legend: bool | None = Field(
        True,
        alias="showLegend",
        description="Boolean value indicating whether to display the layer in the legend. Default value is `true`.",
    )
    subtype_code: int | None = Field(
        None,
        alias="subtypeCode",
        description="The feature subtype code identifying the layer. Used with SubtypeGroupLayers.",
    )
    time_animation: bool | None = Field(
        True,
        alias="timeAnimation",
        description="Indicates whether to disable time animation if the layer supports it.",
    )
    title: str = Field(
        ...,
        description="A user-friendly string title for the layer that can be used in a table of contents.",
    )
    url: str | None = Field(
        None,
        description="The URL to the layer. If the layer is not from a web service but rather a feature collection, then the url property is omitted.",
    )
    visibility: bool | None = Field(
        True,
        description="Boolean property determining whether the layer is initially visible in the web map.",
    )
    visibility_time_extent: list[int | None] | None = Field(
        None,
        alias="visibilityTimeExtent",
        description="Represents time extent that will control when a layer should be visible based on webmap's current time. Visibility time extent only affects the layer visibility and will not filter the data.",
        title="timeExtent",
    )
    visible_layers: list[int] | None = Field(
        None,
        alias="visibleLayers",
        description="An array of sublayer ids that should appear visible. Used with feature layers that are based on feature collections.",
    )


class GeoJSONLayerGeoJSON(BaseModel):
    """
    The GeoJSON layer type references a GeoJSON file from a publicly-accessible web server. It then dynamically loads into the map at run time. The GeoJSON layer will maintain a reference to the GeoJSON resource.
    """

    model_config = common_config
    blend_mode: BlendMode | None = Field(None, alias="blendMode")
    custom_parameters: dict[constr(pattern=r".*"), str] | None = Field(
        None,
        alias="customParameters",
        description="A sequence of custom parameters appended to the URL of all requests related to a layer.",
        title="customParameters",
    )
    disable_popup: bool | None = Field(
        False,
        alias="disablePopup",
        description="Indicates whether to allow a client to ignore popups defined by the service item.",
    )
    effect: (
        list[
            EffectFunctions
            | EffectFunctions1
            | EffectFunctions2
            | EffectFunctions3
            | EffectFunctions4
        ]
        | list[ScaleDependentEffect]
        | None
    ) = Field(
        None,
        description="Effect provides various filter functions to achieve different visual effects similar to how image filters (photo apps) work.",
        title="Effect",
    )
    feature_effect: FeatureEffect | None = Field(None, alias="featureEffect")
    id: str | None = Field(
        None, description="A unique identifying string for the layer."
    )
    item_id: str | None = Field(
        None,
        alias="itemId",
        description="Optional string containing the item ID if it's registered on ArcGIS Online or your organization's portal.",
    )
    layer_definition: LayerDefinition | None = Field(
        None,
        alias="layerDefinition",
        description="Additional properties that define drawing information and other configurations for the layer.",
    )
    layer_type: Literal["GeoJSON"] = Field(
        "GeoJSON",
        alias="layerType",
        description="String indicating the layer type.",
    )
    max_scale: confloat(ge=0.0) | None = Field(
        None,
        alias="maxScale",
        description="A number representing the maximum scale at which the layer will be visible. The number is the scale's denominator.",
    )
    min_scale: confloat(ge=0.0) | None = Field(
        None,
        alias="minScale",
        description="A number representing the minimum scale at which the layer will be visible. The number is the scale's denominator.",
    )
    opacity: confloat(ge=0.0, le=1.0) | None = Field(
        1,
        description="The degree of transparency applied to the layer on the client side, where 0 is full transparency and 1 is no transparency.",
    )
    popup_info: PopupInfo | None = Field(
        None,
        alias="popupInfo",
        description="A popupInfo object defining the content of popup windows when you click or query a feature.",
    )
    refresh_interval: float | None = Field(
        0,
        alias="refreshInterval",
        description="Refresh interval of the layer in minutes. Non-zero value indicates automatic layer refresh at the specified interval. Value of 0 indicates auto refresh is not enabled.",
    )
    show_labels: bool | None = Field(
        False,
        alias="showLabels",
        description="Labels will display if this property is set to `true` and the layer also has a [labelingInfo](labelingInfo.md) property associated with it. This property can get stored in the web scene config.",
    )
    show_legend: bool | None = Field(
        True,
        alias="showLegend",
        description="Boolean value indicating whether to display the layer in the legend. Default value is `true`.",
    )
    time_animation: bool | None = Field(
        False,
        alias="timeAnimation",
        description="Indicates whether to disable time animation if the layer supports it.",
    )
    title: str = Field(
        ...,
        description="A user-friendly string title for the layer that can be used in a table of contents.",
    )
    url: str = Field(..., description="The URL to the layer.")
    visibility: bool | None = Field(
        True,
        description="Boolean property determining whether the layer is initially visible in the web map.",
    )
    visibility_time_extent: list[int | None] | None = Field(
        None,
        alias="visibilityTimeExtent",
        description="Represents time extent that will control when a layer should be visible based on webmap's current time. Visibility time extent only affects the layer visibility and will not filter the data.",
        title="timeExtent",
    )


class GroupLayer(BaseModel):
    """
    GroupLayer provides the ability to organize several sublayers into one common layer. Suppose there are several FeatureLayers that all represent water features in different dimensions. For example, wells (points), streams (lines), and lakes (polygons). The GroupLayer provides the functionality to treat them as one layer called Water Features even though they are stored as separate feature layers.<br><br>With respect to layer blending, sublayers of a group layer are blended together in isolation, separate from layers outside that group layer. When `blendMode` is specified for a group layer, the group's collective content is blended with the layer underneath.<br><br>With respect to scale visibility, sublayers of a group layer will be visible only within the scale range defined for the group layer. A sublayer may further restrict itself to a narrow scale range. In other words, a sublayer will be visible only when the current map scale intersects the scale range of that sublayer as well as the scale range of all its parent group layers.
    """

    model_config = common_config
    blend_mode: BlendMode | None = Field(None, alias="blendMode")
    effect: (
        list[
            EffectFunctions
            | EffectFunctions1
            | EffectFunctions2
            | EffectFunctions3
            | EffectFunctions4
        ]
        | list[ScaleDependentEffect]
        | None
    ) = Field(
        None,
        description="Effect provides various filter functions to achieve different visual effects similar to how image filters (photo apps) work.",
        title="Effect",
    )
    id: str | None = Field(
        None, description="A unique identifying string for the layer."
    )
    item_id: str | None = Field(
        None,
        alias="itemId",
        description="Optional string containing the item ID of the group layer if it's registered on ArcGIS Online or your organization's portal.",
    )
    layers: (
        list[
            AnnotationLayerArcGISAnnotationLayer
            | CatalogLayerCatalogLayer
            | CSVLayerCSV
            | DimensionLayerArcGISDimensionLayer
            | FeatureLayerArcGISFeatureLayer
            | GeoJSONLayerGeoJSON
            | GeoRSSLayerGeoRSS
            | GroupLayer
            | ImageServiceLayerArcGISImageServiceLayer
            | ImageServiceVectorLayerArcGISImageServiceVectorLayer
            | KMLLayerKML
            | KnowledgeGraphLayerKnowledgeGraphLayer
            | MapServiceLayerArcGISMapServiceLayer
            | OGCFeatureLayer
            | OrientedImageryLayerOrientedImageryLayer
            | StreamLayerArcGISStreamLayer
            | SubtypeGroupLayerSubtypeGroupLayer
            | TiledImageServiceLayerArcGISTiledImageServiceLayer
            | TiledMapServiceLayerArcGISTiledMapServiceLayer
            | VectorTileLayerVectorTileLayer
            | WebTiledLayerWebTiledLayer
            | WebFeatureServiceLayerWFS
            | WMSLayerWMS
            | MediaLayerMedia
            | LinkChartLayerLinkChartLayer
        ]
        | None
    ) = Field(None, description="List of child operationalLayers")
    layer_type: Literal["GroupLayer"] = Field(
        "GroupLayer",
        alias="layerType",
        description="String indicating the layer type.",
    )
    max_scale: confloat(ge=0.0) | None = Field(
        0,
        alias="maxScale",
        description="A number representing the maximum scale at which the layer will be visible. The number is the scale's denominator.",
    )
    min_scale: confloat(ge=0.0) | None = Field(
        0,
        alias="minScale",
        description="A number representing the minimum scale at which the layer will be visible. The number is the scale's denominator.",
    )
    opacity: confloat(ge=0.0, le=1.0) | None = Field(
        1,
        description="The degree of transparency applied to the layer on the client side, where 0 is full transparency and 1 is no transparency.",
    )
    title: str = Field(
        ...,
        description="A user-friendly string title for the layer that can be used in a table of contents.",
    )
    visibility: bool | None = Field(
        True,
        description="Boolean property determining whether the layer is initially visible in the web map.",
    )
    visibility_mode: VisibilityMode | None = Field(
        VisibilityMode.independent,
        validate_default=True,
        alias="visibilityMode",
        description="Defines how visibility of sub layers is affected. If set to 'exclusive', clients should ensure only one sublayer is visible at a time. If set to 'independent', clients should allow visibility to be set independently for each sublayer. 'independent' is default.'",
    )
    visibility_time_extent: list[int | None] | None = Field(
        None,
        alias="visibilityTimeExtent",
        description="Represents time extent that will control when a layer should be visible based on webmap's current time. Visibility time extent only affects the layer visibility and will not filter the data.",
        title="timeExtent",
    )


class ImageServiceLayerArcGISImageServiceLayer(BaseModel):
    """
    An image service provides access to raster data through a web service. Multiple rasters can be served as one image service through mosaic dataset technology, dynamically processed and mosaicked on the fly. An image service supports accessing both the mosaicked image and its catalog, as well as individual rasters in the catalog. Also, image services can be cached (tiled) or uncached (dynamic). This object specifically details properties within uncached image services.
    """

    model_config = common_config
    band_ids: list[int] | None = Field(
        None,
        alias="bandIds",
        description="An array of bandIds that are visible, can specify bands to export or rearrange band order(from image service).",
    )
    blend_mode: BlendMode | None = Field(None, alias="blendMode")
    compression_quality: confloat(ge=0.0, le=100.0) | None = Field(
        None,
        alias="compressionQuality",
        description="Controls how much loss the image will be subjected to by the compression algorithm (from image service).",
    )
    custom_parameters: dict[constr(pattern=r".*"), str] | None = Field(
        None,
        alias="customParameters",
        description="A sequence of custom parameters appended to the URL of all requests related to a layer.",
        title="customParameters",
    )
    definition_editor: DefinitionEditor | None = Field(
        None,
        alias="definitionEditor",
        description="Stores interactive filters.",
    )
    disable_popup: bool | None = Field(
        False,
        alias="disablePopup",
        description="Boolean property indicating whether to ignore popups defined by the service item.",
    )
    effect: (
        list[
            EffectFunctions
            | EffectFunctions1
            | EffectFunctions2
            | EffectFunctions3
            | EffectFunctions4
        ]
        | list[ScaleDependentEffect]
        | None
    ) = Field(
        None,
        description="Effect provides various filter functions to achieve different visual effects similar to how image filters (photo apps) work.",
        title="Effect",
    )
    format: Format | None = Field(
        Format.png,
        validate_default=True,
        description="String value representing image format.",
    )
    id: str | None = Field(
        None, description="A unique identifying string for the layer."
    )
    interpolation: Interpolation | None = Field(
        None, description="The algorithm used for interpolation."
    )
    is_reference: bool | None = Field(
        None,
        alias="isReference",
        description="This is applicable if used as a baseMapLayer. A boolean value indicating whether or not the baseMapLayer draws on top (true) of other layers, including operationalLayers , or below (false).",
    )
    item_id: str | None = Field(
        None,
        alias="itemId",
        description="Optional string containing the item ID of the service if it's registered on ArcGIS Online or your organization's portal.",
    )
    layer_definition: LayerDefinition | None = Field(None, alias="layerDefinition")
    layer_type: Literal["ArcGISImageServiceLayer"] = Field(
        "ArcGISImageServiceLayer",
        alias="layerType",
        description="String indicating the layer type.",
    )
    max_scale: confloat(ge=0.0) | None = Field(
        None,
        alias="maxScale",
        description="A number representing the maximum scale at which the layer will be visible. The number is the scale's denominator.",
    )
    min_scale: confloat(ge=0.0) | None = Field(
        None,
        alias="minScale",
        description="A number representing the minimum scale at which the layer will be visible. The number is the scale's denominator.",
    )
    mosaic_rule: MosaicRule | None = Field(
        None,
        alias="mosaicRule",
        description="Specifies the mosaic rule when defining how individual images should be mosaicked.",
    )
    multidimensional_subset: MultidimensionalSubset | None = Field(
        None,
        alias="multidimensionalSubset",
        description="An object representing a subset from multidimensional data. The data is based on slices or ranges in one or more dimensions in [mosaicRule.description](mosaicRule.md). When the [multidimensionalSubset](multidimensionalSubset.md) is defined then the [mosaicRule.multidimensionalDefinition](mosaicRule.md) must be within the defined multidimensionalSubset, otherwise nothing will be displayed.",
    )
    no_data: int | None = Field(
        None,
        alias="noData",
        description="The pixel value that represents no information.",
    )
    no_data_interpretation: NoDataInterpretation | None = Field(
        None,
        alias="noDataInterpretation",
        description="A string value of interpretation of noData setting. Default is 'esriNoDataMatchAny' when noData is a number, and 'esriNoDataMatchAll' when noData is an array.",
    )
    opacity: confloat(ge=0.0, le=1.0) | None = Field(
        1,
        description="The degree of transparency applied to the layer on the client side, where 0 is full transparency and 1 is no transparency.",
    )
    pixel_type: PixelType | None = Field(
        None,
        alias="pixelType",
        description="Pertains to the type of values stored in the raster, such as signed integer, unsigned integer, or floating point.",
    )
    popup_info: PopupInfo | None = Field(
        None,
        alias="popupInfo",
        description="A popupInfo object defining the content of popup windows when you click or query a feature.",
    )
    refresh_interval: float | None = Field(
        0,
        alias="refreshInterval",
        description="Refresh interval of the layer in minutes. Non-zero value indicates automatic layer refresh at the specified interval. Value of 0 indicates auto refresh is not enabled.",
    )
    rendering_rule: RenderingRule | None = Field(
        None,
        alias="renderingRule",
        description="Specifies the rendering rule for how the requested image should be rendered.",
    )
    show_legend: bool | None = Field(
        True,
        alias="showLegend",
        description="Boolean value indicating whether to display the layer in the legend. Default value is `true`.",
    )
    time_animation: bool | None = Field(
        True,
        alias="timeAnimation",
        description="This property is applicable to layers that support time. If 'true', timeAnimation is enabled.",
    )
    title: str = Field(
        ...,
        description="A user-friendly string title for the layer that can be used in a table of contents.",
    )
    url: str = Field(..., description="The URL to the layer.")
    visibility: bool | None = Field(
        True,
        description="Boolean property determining whether the layer is initially visible in the web map.",
    )
    visibility_time_extent: list[int | None] | None = Field(
        None,
        alias="visibilityTimeExtent",
        description="Represents time extent that will control when a layer should be visible based on webmap's current time. Visibility time extent only affects the layer visibility and will not filter the data.",
        title="timeExtent",
    )


class ImageServiceVectorLayerArcGISImageServiceVectorLayer(BaseModel):
    """
    The imageServiceVectorLayer displays pixel values as vectors. To do this, the image service layer must be a two-band raster in which one band holds magnitude values and one band holds direction values. The imageServiceVectorLayer also supports time-enabled data.
    """

    model_config = common_config
    blend_mode: BlendMode | None = Field(None, alias="blendMode")
    custom_parameters: dict[constr(pattern=r".*"), str] | None = Field(
        None,
        alias="customParameters",
        description="A sequence of custom parameters appended to the URL of all requests related to a layer.",
        title="customParameters",
    )
    definition_editor: DefinitionEditor | None = Field(
        None,
        alias="definitionEditor",
        description="Stores interactive filters.",
    )
    disable_popup: bool | None = Field(
        False,
        alias="disablePopup",
        description="Boolean property indicating whether to ignore popups defined by the service item.",
    )
    effect: (
        list[
            EffectFunctions
            | EffectFunctions1
            | EffectFunctions2
            | EffectFunctions3
            | EffectFunctions4
        ]
        | list[ScaleDependentEffect]
        | None
    ) = Field(
        None,
        description="Effect provides various filter functions to achieve different visual effects similar to how image filters (photo apps) work.",
        title="Effect",
    )
    id: str | None = Field(
        None, description="A unique identifying string for the layer."
    )
    is_reference: bool | None = Field(
        None,
        alias="isReference",
        description="This is applicable if used as a baseMapLayer. A boolean value indicating whether or not the baseMapLayer draws on top (true) of other layers, including operationalLayers , or below (false).",
    )
    item_id: str | None = Field(
        None,
        alias="itemId",
        description="A string containing the item ID of the service if it's registered with ArcGIS Online or your organization's portal.",
    )
    layer_definition: LayerDefinition | None = Field(None, alias="layerDefinition")
    layer_type: Literal["ArcGISImageServiceVectorLayer"] = Field(
        "ArcGISImageServiceVectorLayer",
        alias="layerType",
        description="String indicating the layer type.",
    )
    max_scale: confloat(ge=0.0) | None = Field(
        None,
        alias="maxScale",
        description="A number representing the maximum scale at which the layer will be visible. The number is the scale's denominator.",
    )
    min_scale: confloat(ge=0.0) | None = Field(
        None,
        alias="minScale",
        description="A number representing the minimum scale at which the layer will be visible. The number is the scale's denominator.",
    )
    mosaic_rule: MosaicRule | None = Field(
        None,
        alias="mosaicRule",
        description="Specifies the mosaic rule when defining how individual images should be mosaicked.",
    )
    multidimensional_subset: MultidimensionalSubset | None = Field(
        None,
        alias="multidimensionalSubset",
        description="An object representing a subset from multidimensional data. The data is based on slices or ranges in one or more dimensions in [mosaicRule.description](mosaicRule.md). When the [multidimensionalSubset](multidimensionalSubset.md) is defined then the [mosaicRule.multidimensionalDefinition](mosaicRule.md) must be within the defined multidimensionalSubset, otherwise nothing will be displayed.",
    )
    opacity: confloat(ge=0.0, le=1.0) | None = Field(
        1,
        description="The degree of transparency applied to the layer on the client side, where 0 is full transparency and 1 is no transparency.",
    )
    popup_info: PopupInfo | None = Field(
        None,
        alias="popupInfo",
        description="A popupInfo object defining the content of popup windows when you click or query a feature.",
    )
    show_legend: bool | None = Field(
        True,
        alias="showLegend",
        description="Boolean value indicating whether to display legend for this layer. Default value is 'true'.",
    )
    symbol_tile_size: float | None = Field(
        None,
        alias="symbolTileSize",
        description="Number describing the size of the tile.",
    )
    time_animation: bool | None = Field(
        True,
        alias="timeAnimation",
        description="This property is applicable to layers that support time. If 'true', timeAnimation is enabled.",
    )
    title: str = Field(
        ...,
        description="A user-friendly string title for the layer that can be used in a table of contents.",
    )
    url: str = Field(..., description="The URL to the layer.")
    visibility: bool | None = Field(
        True,
        description="Boolean property determining whether the layer is initially visible in the web map.",
    )
    visibility_time_extent: list[int | None] | None = Field(
        None,
        alias="visibilityTimeExtent",
        description="Represents time extent that will control when a layer should be visible based on webmap's current time. Visibility time extent only affects the layer visibility and will not filter the data.",
        title="timeExtent",
    )


class KnowledgeGraphLayerKnowledgeGraphLayer(BaseModel):
    """
    Knowledge graph layer can be created by referencing a Knowledge Graph Service. A Knowledge graph layer is a group layer with collections of feature layers and tables representing geospatial and non-geospatial entity and relationship types.
    """

    model_config = common_config
    blend_mode: BlendMode | None = Field(None, alias="blendMode")
    custom_parameters: dict[constr(pattern=r".*"), str] | None = Field(
        None,
        alias="customParameters",
        description="A sequence of custom parameters appended to the URL of all requests related to a layer.",
        title="customParameters",
    )
    definition_set_map: str | None = Field(
        None,
        alias="definitionSetMap",
        description="A uri pointing to a resource containing graphTypeName to object identifier set dictionary persisted as pbf. The object identifier set for the corresponding graphTypeName will be used to filter features in each sub layer or table. If the graphTypeName is missing, all features are included.  Only graphTypeNames of sub layers and sub tables included in this Knowledge Graph Layer are relevant. Missing definitionSetMap is interpreted as an empty definitionSetMap, which implies all features are included for each relevant sub layer or table.",
    )
    effect: (
        list[
            EffectFunctions
            | EffectFunctions1
            | EffectFunctions2
            | EffectFunctions3
            | EffectFunctions4
        ]
        | list[ScaleDependentEffect]
        | None
    ) = Field(
        None,
        description="Effect provides various filter functions to achieve different visual effects similar to how image filters (photo apps) work.",
        title="Effect",
    )
    id: str | None = Field(
        None, description="A unique identifying string for the layer."
    )
    item_id: str | None = Field(
        None,
        alias="itemId",
        description="Optional string containing the item ID of the service if it's registered on ArcGIS Online or your organization's portal.",
    )
    layers: list[KnowledgeGraphSubLayerKnowledgeGraphSubLayer] | None = Field(
        None,
        description="An array of Knowledge Graph sub layers, each representing graph entity type or relationship in knowledge graph server.",
    )
    layer_type: Literal["KnowledgeGraphLayer"] = Field(
        "KnowledgeGraphLayer",
        alias="layerType",
        description="String indicating the layer type.",
    )
    max_scale: confloat(ge=0.0) | None = Field(
        0,
        alias="maxScale",
        description="A number representing the maximum scale at which the layer will be visible. The number is the scale's denominator.",
    )
    min_scale: confloat(ge=0.0) | None = Field(
        0,
        alias="minScale",
        description="A number representing the minimum scale at which the layer will be visible. The number is the scale's denominator.",
    )
    opacity: confloat(ge=0.0, le=1.0) | None = Field(
        1,
        description="The degree of transparency applied to the layer on the client side, where 0 is full transparency and 1 is no transparency.",
    )
    refresh_interval: float | None = Field(
        0,
        alias="refreshInterval",
        description="Refresh interval of the layer in minutes. Non-zero value indicates automatic layer refresh at the specified interval. Value of 0 indicates auto refresh is not enabled.",
    )
    tables: list[KnowledgeGraphSubTableKnowledgeGraphSubTable] | None = Field(
        None,
        description="An array of Knowledge Graph sub tables, each representing non spatial entity type or relationship in knowledge graph server.",
    )
    title: str = Field(
        ...,
        description="A user-friendly string title for the layer that can be used in a table of contents.",
    )
    url: str = Field(..., description="The URL to the KnowledgeGraphServer.")
    visibility: bool | None = Field(
        True,
        description="Boolean property determining whether the layer is initially visible in the web map.",
    )
    visibility_time_extent: list[int | None] | None = Field(
        None,
        alias="visibilityTimeExtent",
        description="Represents time extent that will control when a layer should be visible based on webmap's current time. Visibility time extent only affects the layer visibility and will not filter the data.",
        title="timeExtent",
    )


class MapServiceLayerArcGISMapServiceLayer(BaseModel):
    """
    ArcGIS web maps are designed to work with web services hosted on ArcGIS Server and ArcGIS Online, in addition to other types of servers. Map services can be cached (tiled) or uncached (dynamic). This object specifically details properties within uncached map services.
    """

    model_config = common_config
    blend_mode: BlendMode | None = Field(None, alias="blendMode")
    custom_parameters: dict[constr(pattern=r".*"), str] | None = Field(
        None,
        alias="customParameters",
        description="A sequence of custom parameters appended to the URL of all requests related to a layer.",
        title="customParameters",
    )
    effect: (
        list[
            EffectFunctions
            | EffectFunctions1
            | EffectFunctions2
            | EffectFunctions3
            | EffectFunctions4
        ]
        | list[ScaleDependentEffect]
        | None
    ) = Field(
        None,
        description="Effect provides various filter functions to achieve different visual effects similar to how image filters (photo apps) work.",
        title="Effect",
    )
    id: str | None = Field(
        None, description="A unique identifying string for the layer."
    )
    is_reference: bool | None = Field(
        None,
        alias="isReference",
        description="This is applicable if used as a baseMapLayer. A boolean value indicating whether or not the baseMapLayer draws on top (true) of other layers, including operationalLayers , or below (false).",
    )
    item_id: str | None = Field(
        None,
        alias="itemId",
        description="Optional string containing the item ID of the service if it's registered on ArcGIS Online or your organization's portal.",
    )
    layers: list[Layer] | None = Field(
        None,
        description="An array of layer objects defining the styling, geometry, and attribute information for the features.",
    )
    layer_type: Literal["ArcGISMapServiceLayer"] = Field(
        "ArcGISMapServiceLayer",
        alias="layerType",
        description="String indicating the layer type.",
    )
    max_scale: confloat(ge=0.0) | None = Field(
        None,
        alias="maxScale",
        description="A number representing the maximum scale at which the layer will be visible. The number is the scale's denominator.",
    )
    min_scale: confloat(ge=0.0) | None = Field(
        None,
        alias="minScale",
        description="A number representing the minimum scale at which the layer will be visible. The number is the scale's denominator.",
    )
    opacity: confloat(ge=0.0, le=1.0) | None = Field(
        1,
        description="The degree of transparency applied to the layer on the client side, where 0 is full transparency and 1 is no transparency.",
    )
    refresh_interval: float | None = Field(
        0,
        alias="refreshInterval",
        description="Refresh interval of the layer in minutes. Non-zero value indicates automatic layer refresh at the specified interval. Value of 0 indicates auto refresh is not enabled.",
    )
    show_legend: bool | None = Field(
        None,
        alias="showLegend",
        description="Boolean value indicating whether to display the layer in the legend. Default value is `true`.",
    )
    thematic_group: ThematicGroup | None = Field(
        None,
        alias="thematicGroup",
        description="(Optional) A thematicGroup object used in [ArcGISMapServiceLayer layers](mapServiceLayer.md).",
    )
    time_animation: bool | None = Field(
        True,
        alias="timeAnimation",
        description="This property is applicable to layers that support time. If 'true', timeAnimation is enabled.",
    )
    title: str = Field(
        ...,
        description="A user-friendly string title for the layer that can be used in a table of contents.",
    )
    url: str = Field(..., description="The URL to the layer.")
    visibility: bool | None = Field(
        True,
        description="Boolean property determining whether the layer is initially visible in the web map.",
    )
    visibility_time_extent: list[int | None] | None = Field(
        None,
        alias="visibilityTimeExtent",
        description="Represents time extent that will control when a layer should be visible based on webmap's current time. Visibility time extent only affects the layer visibility and will not filter the data.",
        title="timeExtent",
    )
    visible_layers: list[int] | None = Field(
        None,
        alias="visibleLayers",
        description="An array of sublayer ids that should appear visible. Used with map service layers that are not tiled.",
    )


class OGCFeatureLayer(BaseModel):
    """
    OGC Feature Layer is a dynamic feature service that follows the specifications of OGC API - Features.
    """

    model_config = common_config
    blend_mode: BlendMode | None = Field(None, alias="blendMode")
    collection_id: str | None = Field(
        None,
        alias="collectionId",
        description="A unique identifying string for a feature collection.",
    )
    custom_parameters: dict[constr(pattern=r".*"), str] | None = Field(
        None,
        alias="customParameters",
        description="A sequence of parameters used to append custom or vendor specific parameters to all OGC API - Features requests.",
    )
    disable_popup: bool | None = Field(
        False,
        alias="disablePopup",
        description="Indicates whether popup is enabled or not.",
    )
    effect: (
        list[
            EffectFunctions
            | EffectFunctions1
            | EffectFunctions2
            | EffectFunctions3
            | EffectFunctions4
        ]
        | list[ScaleDependentEffect]
        | None
    ) = Field(
        None,
        description="Effect provides various filter functions to achieve different visual effects similar to how image filters (photo apps) work.",
        title="Effect",
    )
    feature_effect: FeatureEffect | None = Field(None, alias="featureEffect")
    id: str | None = Field(
        None, description="A unique identifying string for the layer."
    )
    item_id: str | None = Field(
        None,
        alias="itemId",
        description="Unique string value indicating an item registered in ArcGIS Online or your organization's portal.",
    )
    layer_definition: LayerDefinition | None = Field(None, alias="layerDefinition")
    layer_type: Literal["OGCFeatureLayer"] = Field(
        "OGCFeatureLayer",
        alias="layerType",
        description="String indicating the layer type.",
    )
    max_scale: confloat(ge=0.0) | None = Field(
        0,
        alias="maxScale",
        description="A number representing the maximum scale at which the layer will be visible. The number is the scale's denominator.",
    )
    min_scale: confloat(ge=0.0) | None = Field(
        0,
        alias="minScale",
        description="A number representing the minimum scale at which the layer will be visible. The number is the scale's denominator.",
    )
    opacity: confloat(ge=0.0, le=1.0) | None = Field(
        1,
        description="The degree of transparency applied to the layer on the client side, where 0 is full transparency and 1 is no transparency.",
    )
    popup_info: PopupInfo | None = Field(
        None,
        alias="popupInfo",
        description="A popupInfo object defining the content of popup windows when you click or query a feature.",
    )
    show_labels: bool | None = Field(
        False,
        alias="showLabels",
        description="Boolean value indicating whether to display labels for this layer.",
    )
    show_legend: bool | None = Field(
        True,
        alias="showLegend",
        description="Boolean value indicating whether to display the layer in the legend. Default value is `true`.",
    )
    time_animation: bool | None = Field(
        True,
        alias="timeAnimation",
        description="This property is applicable to layers that support time. If 'true', timeAnimation is enabled.",
    )
    title: str = Field(
        ...,
        description="A user-friendly string title for the layer that can be used in a table of contents.",
    )
    url: str = Field(
        ...,
        description="The URL of the OGC API Features service landing page.",
    )
    visibility: bool | None = Field(
        True,
        description="Boolean property determining whether the layer is initially visible in the web map.",
    )
    visibility_time_extent: list[int | None] | None = Field(
        None,
        alias="visibilityTimeExtent",
        description="Represents time extent that will control when a layer should be visible based on webmap's current time. Visibility time extent only affects the layer visibility and will not filter the data.",
        title="timeExtent",
    )


class OrientedImageryLayerOrientedImageryLayer(BaseModel):
    """
    An Oriented Imagery layer is an extended point feature layer with additional properties that support the oriented imagery workflow. It is defined by camera locations (features) and has a geometry that allows it to be rendered in either a 2D MapView or 3D SceneView as a graphic with spatial context.
    """

    model_config = common_config
    blend_mode: BlendMode | None = Field(None, alias="blendMode")
    capabilities: str | None = Field(
        None,
        description="A comma-separated string listing which editing operations are allowed on an editable feature service.",
    )
    charts: list[dict[str, Any]] | None = Field(
        None,
        description="An array of chart items of type WebChart available on the feature layer.",
    )
    custom_parameters: dict[constr(pattern=r".*"), str] | None = Field(
        None,
        alias="customParameters",
        description="A sequence of custom parameters appended to the URL of all requests related to a layer.",
        title="customParameters",
    )
    definition_editor: DefinitionEditor | None = Field(
        None,
        alias="definitionEditor",
        description="Stores interactive filters.",
    )
    disable_popup: bool | None = Field(
        False,
        alias="disablePopup",
        description="Indicates whether to allow a client to ignore popups defined by the service item.",
    )
    effect: (
        list[
            EffectFunctions
            | EffectFunctions1
            | EffectFunctions2
            | EffectFunctions3
            | EffectFunctions4
        ]
        | list[ScaleDependentEffect]
        | None
    ) = Field(
        None,
        description="Effect provides various filter functions to achieve different visual effects similar to how image filters (photo apps) work.",
        title="Effect",
    )
    feature_effect: FeatureEffect | None = Field(None, alias="featureEffect")
    form_info: FormInfo | None = Field(
        None,
        alias="formInfo",
        description="A formInfo object defining the content of the form when you are editing a feature.",
    )
    id: str = Field(..., description="A unique identifying string for the layer.")
    item_id: str | None = Field(
        None,
        alias="itemId",
        description="Optional string containing the item ID of the service if it's registered on ArcGIS Online or your organization's portal.",
    )
    layer_definition: LayerDefinition | None = Field(
        None,
        alias="layerDefinition",
        description="A layerDefinition object defining the attribute schema and drawing information for the layer.",
    )
    layer_type: Literal["OrientedImageryLayer"] = Field(
        "OrientedImageryLayer",
        alias="layerType",
        description="String indicating the layer type.",
    )
    opacity: confloat(ge=0.0, le=1.0) | None = Field(
        1,
        description="The degree of transparency applied to the layer on the client side, where 0 is full transparency and 1 is no transparency.",
    )
    oriented_imagery_properties: OrientedImageryProperties | None = Field(
        None,
        alias="orientedImageryProperties",
        description="Object containing information about the chosen Oriented Imagery layer and schema.",
    )
    popup_info: PopupInfo | None = Field(
        None,
        alias="popupInfo",
        description="A popupInfo object defining the content of popup window when you click a feature on the map.",
    )
    refresh_interval: float | None = Field(
        0,
        alias="refreshInterval",
        description="Refresh interval of the layer in minutes. Non-zero value indicates automatic layer refresh at the specified interval. Value of 0 indicates auto refresh is not enabled.",
    )
    show_labels: bool | None = Field(
        False,
        alias="showLabels",
        description="Labels will display if this property is set to `true` and the layer also has a [labelingInfo](labelingInfo.md) property associated with it. This property can get stored in the web map config and in the item/data.",
    )
    show_legend: bool | None = Field(
        True,
        alias="showLegend",
        description="Boolean value indicating whether to display the layer in the legend. Default value is `true`.",
    )
    time_animation: bool | None = Field(
        True,
        alias="timeAnimation",
        description="Indicates whether to disable time animation if the layer supports it.",
    )
    title: str = Field(
        ...,
        description="A user-friendly string title for the layer that can be used in a table of contents.",
    )
    url: str | None = Field(None, description="The URL to the layer.")
    visibility: bool | None = Field(
        True,
        description="Boolean property determining whether the layer is initially visible in the web map.",
    )
    visibility_time_extent: list[int | None] | None = Field(
        None,
        alias="visibilityTimeExtent",
        description="Represents time extent that will control when a layer should be visible based on webmap's current time. Visibility time extent only affects the layer visibility and will not filter the data.",
        title="timeExtent",
    )


class StreamLayerArcGISStreamLayer(BaseModel):
    """
    Properties specific to the ArcGISStreamLayer layer type.
    """

    model_config = common_config
    blend_mode: BlendMode | None = Field(None, alias="blendMode")
    custom_parameters: dict[constr(pattern=r".*"), str] | None = Field(
        None,
        alias="customParameters",
        description="A sequence of custom parameters appended to the URL of all requests related to a layer.",
        title="customParameters",
    )
    definition_editor: DefinitionEditor | None = Field(
        None,
        alias="definitionEditor",
        description="Stores interactive filters.",
    )
    disable_popup: bool | None = Field(
        False,
        alias="disablePopup",
        description="Indicates whether to ignore popups defined by the service item.",
    )
    effect: (
        list[
            EffectFunctions
            | EffectFunctions1
            | EffectFunctions2
            | EffectFunctions3
            | EffectFunctions4
        ]
        | list[ScaleDependentEffect]
        | None
    ) = Field(
        None,
        description="Effect provides various filter functions to achieve different visual effects similar to how image filters (photo apps) work.",
        title="Effect",
    )
    feature_effect: FeatureEffect | None = Field(None, alias="featureEffect")
    id: str | None = Field(
        None, description="A unique identifying string for the layer."
    )
    item_id: str | None = Field(
        None,
        alias="itemId",
        description="Optional string containing the item ID of the service if it's registered on ArcGIS Online or your organization's portal.",
    )
    layer_definition: LayerDefinition | None = Field(None, alias="layerDefinition")
    layer_type: Literal["ArcGISStreamLayer"] = Field(
        "ArcGISStreamLayer",
        alias="layerType",
        description="String indicating the layer type.",
    )
    opacity: confloat(ge=0.0, le=1.0) | None = Field(
        1,
        description="The degree of transparency applied to the layer on the client side, where 0 is full transparency and 1 is no transparency.",
    )
    popup_info: PopupInfo | None = Field(
        None,
        alias="popupInfo",
        description="A popupInfo object defining the content of pop-up windows when you click or query a feature.",
    )
    show_labels: bool | None = Field(
        False,
        alias="showLabels",
        description="Labels will display if this property is set to `true` and the layer also has a [labelingInfo](labelingInfo.md) property associated with it. This property can get stored in the web map config and in the item/data.",
    )
    show_legend: bool | None = Field(
        True,
        alias="showLegend",
        description="Boolean value indicating whether to display the layer in the legend. Default value is `true`.",
    )
    time_animation: bool | None = Field(
        True,
        alias="timeAnimation",
        description="Indicates whether to disable time animation if the layer supports it.",
    )
    title: str = Field(
        ...,
        description="A user-friendly string title for the layer that can be used in a table of contents.",
    )
    url: str = Field(..., description="URL to the ArcGIS Server Stream Service.")
    visibility: bool | None = Field(
        True,
        description="Boolean property determining whether the layer is initially visible in the web map.",
    )
    visibility_time_extent: list[int | None] | None = Field(
        None,
        alias="visibilityTimeExtent",
        description="Represents time extent that will control when a layer should be visible based on webmap's current time. Visibility time extent only affects the layer visibility and will not filter the data.",
        title="timeExtent",
    )


class SubtypeGroupLayerSubtypeGroupLayer(BaseModel):
    """
    Subtype group layers can be created by referencing a layer from a feature service that contains subtypes.  Each subtype in the feature service layer can be a separate layer in the subtype group layer, and be given its own display and editing properties.<br><br>With respect to layer blending, subtype group layers follow the same rules as [group layers](groupLayer.md).
    """

    model_config = common_config
    blend_mode: BlendMode | None = Field(None, alias="blendMode")
    custom_parameters: dict[constr(pattern=r".*"), str] | None = Field(
        None,
        alias="customParameters",
        description="A sequence of custom parameters appended to the URL of all requests related to a layer.",
        title="customParameters",
    )
    effect: (
        list[
            EffectFunctions
            | EffectFunctions1
            | EffectFunctions2
            | EffectFunctions3
            | EffectFunctions4
        ]
        | list[ScaleDependentEffect]
        | None
    ) = Field(
        None,
        description="Effect provides various filter functions to achieve different visual effects similar to how image filters (photo apps) work.",
        title="Effect",
    )
    id: str | None = Field(
        None, description="A unique identifying string for the layer."
    )
    item_id: str | None = Field(
        None,
        alias="itemId",
        description="Optional string containing the item ID of the service if it's registered on ArcGIS Online or your organization's portal.",
    )
    layer_definition: LayerDefinition | None = Field(
        None,
        alias="layerDefinition",
        description="A layerDefinition object defining the attribute schema and drawing information for the layer.",
    )
    layers: list[SubtypeLayerSubtypeLayer] | None = Field(
        None,
        description="An array of subtype layers, each describing the properties for a subtype in the feature service layer.",
    )
    layer_type: Literal["SubtypeGroupLayer"] = Field(
        "SubtypeGroupLayer",
        alias="layerType",
        description="String indicating the layer type.",
    )
    opacity: confloat(ge=0.0, le=1.0) | None = Field(
        1,
        description="The degree of transparency applied to the layer on the client side, where 0 is full transparency and 1 is no transparency.",
    )
    refresh_interval: float | None = Field(
        0,
        alias="refreshInterval",
        description="Refresh interval of the layer in minutes. Non-zero value indicates automatic layer refresh at the specified interval. Value of 0 indicates auto refresh is not enabled.",
    )
    time_animation: bool | None = Field(
        True,
        alias="timeAnimation",
        description="Indicates whether to disable time animation if the layer supports it.",
    )
    title: str = Field(
        ...,
        description="A user-friendly string title for the layer that can be used in a table of contents.",
    )
    url: str | None = Field(
        None,
        description="The URL to the layer. If the layer is not from a web service but rather a feature collection, then the url property is omitted.",
    )
    visibility: bool | None = Field(
        True,
        description="Boolean property determining whether the layer is initially visible in the web map.",
    )
    visibility_time_extent: list[int | None] | None = Field(
        None,
        alias="visibilityTimeExtent",
        description="Represents time extent that will control when a layer should be visible based on webmap's current time. Visibility time extent only affects the layer visibility and will not filter the data.",
        title="timeExtent",
    )


class TiledImageServiceLayerArcGISTiledImageServiceLayer(BaseModel):
    """
    An ArcGIS Tiled Image Service layer displays map content from an ArcGIS Server Image service that has been cached (tiled).
    """

    model_config = common_config
    band_ids: list[int] | None = Field(
        None,
        alias="bandIds",
        description="The band selection for a multispectral dataset",
    )
    blend_mode: BlendMode | None = Field(None, alias="blendMode")
    custom_parameters: dict[constr(pattern=r".*"), str] | None = Field(
        None,
        alias="customParameters",
        description="A sequence of custom parameters appended to the URL of all requests related to a layer.",
        title="customParameters",
    )
    disable_popup: bool | None = Field(
        False,
        alias="disablePopup",
        description="Indicates whether to allow a client to ignore popups defined by the service item.",
    )
    effect: (
        list[
            EffectFunctions
            | EffectFunctions1
            | EffectFunctions2
            | EffectFunctions3
            | EffectFunctions4
        ]
        | list[ScaleDependentEffect]
        | None
    ) = Field(
        None,
        description="Effect provides various filter functions to achieve different visual effects similar to how image filters (photo apps) work.",
        title="Effect",
    )
    id: str | None = Field(
        None, description="A unique identifying string for the layer."
    )
    interpolation: Interpolation | None = Field(
        None, description="String indicating the interpolation type."
    )
    is_reference: bool | None = Field(
        None,
        alias="isReference",
        description="Applicable if used as a baseMapLayer. A boolean value indicating whether or not the baseMapLayer draws on top (true) of other layers, including operationalLayers , or below (false).",
    )
    item_id: str | None = Field(
        None,
        alias="itemId",
        description="Optional string containing the item ID of the service if it's registered on ArcGIS Online or your organization's portal.",
    )
    layer_definition: LayerDefinition | None = Field(None, alias="layerDefinition")
    layer_type: Literal["ArcGISTiledImageServiceLayer"] = Field(
        "ArcGISTiledImageServiceLayer",
        alias="layerType",
        description="String indicating the layer type.",
    )
    max_scale: confloat(ge=0.0) | None = Field(
        None,
        alias="maxScale",
        description="A number representing the maximum scale at which the layer will be visible. The number is the scale's denominator.",
    )
    min_scale: confloat(ge=0.0) | None = Field(
        None,
        alias="minScale",
        description="A number representing the minimum scale at which the layer will be visible. The number is the scale's denominator.",
    )
    multidimensional_definition: list[DimensionalDefinition] | None = Field(
        None,
        alias="multidimensionalDefinition",
        description="An array of objects representing a slice from multidimensional data. The dimensional definitions in this array are used to filter display data based on slices in one or more dimensions.",
    )
    multidimensional_subset: MultidimensionalSubset | None = Field(
        None,
        alias="multidimensionalSubset",
        description="An object representing a subset from multidimensional data. This includes subsets of both variables and dimensions. When the multidimensionalSubset is defined on a tiled image service layer, the layer's [multidimensionalDefinition](multidimensionalDefinition.md) must be within the defined multidimensionalSubset, otherwise nothing will be displayed.",
    )
    opacity: confloat(ge=0.0, le=1.0) | None = Field(
        1,
        description="The degree of transparency applied to the layer on the client side, where 0 is full transparency and 1 is no transparency.",
    )
    popup_info: PopupInfo | None = Field(
        None,
        alias="popupInfo",
        description="A popupInfo object defining the content of popup windows when you click or query a feature.",
    )
    refresh_interval: float | None = Field(
        0,
        alias="refreshInterval",
        description="Refresh interval of the layer in minutes. Non-zero value indicates automatic layer refresh at the specified interval. Value of 0 indicates auto refresh is not enabled.",
    )
    rendering_rule: RenderingRule | None = Field(
        None,
        alias="renderingRule",
        description="Specifies the rendering rule for how the requested image should be rendered.",
    )
    show_legend: bool | None = Field(
        True,
        alias="showLegend",
        description="Boolean value indicating whether to display the layer in the legend. Default value is `true`.",
    )
    time_animation: bool | None = Field(
        True,
        alias="timeAnimation",
        description="This property is applicable to layers that support time. If 'true', timeAnimation is enabled.",
    )
    title: str = Field(
        ...,
        description="A user-friendly string title for the layer that can be used in a table of contents.",
    )
    url: str = Field(..., description="URL to the ArcGIS Server Image Service.")
    visibility: bool | None = Field(
        True,
        description="Boolean property determining whether the layer is initially visible in the web map.",
    )
    visibility_time_extent: list[int | None] | None = Field(
        None,
        alias="visibilityTimeExtent",
        description="Represents time extent that will control when a layer should be visible based on webmap's current time. Visibility time extent only affects the layer visibility and will not filter the data.",
        title="timeExtent",
    )


class TiledMapServiceLayerArcGISTiledMapServiceLayer(BaseModel):
    """
    An ArcGIS Tiled Map Service layer displays map content from an ArcGIS Server Map service that has been cached (tiled).
    """

    model_config = common_config
    blend_mode: BlendMode | None = Field(None, alias="blendMode")
    custom_parameters: dict[constr(pattern=r".*"), str] | None = Field(
        None,
        alias="customParameters",
        description="A sequence of custom parameters appended to the URL of all requests related to a layer.",
        title="customParameters",
    )
    display_levels: int | None = Field(
        None,
        alias="displayLevels",
        description="NOTE: Applicable if used as a baseMapLayer. Integer value(s) indicating the display levels of the basemap layer. Only applicable for TiledMapService layers. All tiled map service layers should share the same tiling scheme. This property cannot be set via the Map Viewer UI.",
    )
    effect: (
        list[
            EffectFunctions
            | EffectFunctions1
            | EffectFunctions2
            | EffectFunctions3
            | EffectFunctions4
        ]
        | list[ScaleDependentEffect]
        | None
    ) = Field(
        None,
        description="Effect provides various filter functions to achieve different visual effects similar to how image filters (photo apps) work.",
        title="Effect",
    )
    exclusion_areas: list[ExclusionArea] | None = Field(
        None,
        alias="exclusionAreas",
        description="NOTE: Applicable if used as a baseMapLayer.  An array of exclusionArea objects defining the layer exclusions.",
    )
    id: str | None = Field(
        None, description="A unique identifying string for the layer."
    )
    is_reference: bool | None = Field(
        None,
        alias="isReference",
        description="This property is applicable if used as a baseMapLayer. A boolean value indicating whether or not the baseMapLayer draws on top (true) of other layers, including operationalLayers , or below (false).",
    )
    item_id: str | None = Field(
        None,
        alias="itemId",
        description="Optional string containing the item ID of the service if it's registered on ArcGIS Online or your organization's portal.",
    )
    layers: list[Layer] | None = Field(
        None,
        description="An array of layer objects defining a URL for queries and the popup window content.",
    )
    layer_type: Literal["ArcGISTiledMapServiceLayer"] = Field(
        "ArcGISTiledMapServiceLayer",
        alias="layerType",
        description="String indicating the layer type.",
    )
    max_scale: confloat(ge=0.0) | None = Field(
        None,
        alias="maxScale",
        description="A number representing the maximum scale at which the layer will be visible. The number is the scale's denominator.",
    )
    min_scale: confloat(ge=0.0) | None = Field(
        None,
        alias="minScale",
        description="A number representing the minimum scale at which the layer will be visible. The number is the scale's denominator.",
    )
    opacity: confloat(ge=0.0, le=1.0) | None = Field(
        1,
        description="The degree of transparency applied to the layer on the client side, where 0 is full transparency and 1 is no transparency.",
    )
    refresh_interval: float | None = Field(
        0,
        alias="refreshInterval",
        description="Refresh interval of the layer in minutes. Non-zero value indicates automatic layer refresh at the specified interval. Value of 0 indicates auto refresh is not enabled.",
    )
    show_legend: bool | None = Field(
        None,
        alias="showLegend",
        description="Boolean value indicating whether to display the map service layer in the legend.",
    )
    title: str = Field(
        ...,
        description="A user-friendly string title for the layer that can be used in a table of contents. If this is not included, a title is derived from the service.",
    )
    url: str = Field(..., description="URL to the ArcGIS Server tiled Map Service")
    visibility: bool | None = Field(
        True,
        description="Boolean property determining whether the layer is initially visible in the map.",
    )
    visibility_time_extent: list[int | None] | None = Field(
        None,
        alias="visibilityTimeExtent",
        description="Represents time extent that will control when a layer should be visible based on webmap's current time. Visibility time extent only affects the layer visibility and will not filter the data.",
        title="timeExtent",
    )


class WebFeatureServiceLayerWFS(BaseModel):
    """
    OGC Web Feature Service (WFS) is a dynamic feature service that follows the specifications of OGC.
    """

    model_config = common_config
    blend_mode: BlendMode | None = Field(None, alias="blendMode")
    disable_popup: bool | None = Field(
        False,
        alias="disablePopup",
        description="Indicates whether to allow a client to ignore popups defined by the service item.",
    )
    effect: (
        list[
            EffectFunctions
            | EffectFunctions1
            | EffectFunctions2
            | EffectFunctions3
            | EffectFunctions4
        ]
        | list[ScaleDependentEffect]
        | None
    ) = Field(
        None,
        description="Effect provides various filter functions to achieve different visual effects similar to how image filters (photo apps) work.",
        title="Effect",
    )
    feature_effect: FeatureEffect | None = Field(None, alias="featureEffect")
    id: str | None = Field(
        None, description="A unique identifying string for the layer."
    )
    item_id: str | None = Field(
        None,
        alias="itemId",
        description="Unique string value indicating an item registered in ArcGIS Online or your organization's portal.",
    )
    layer_definition: LayerDefinition | None = Field(None, alias="layerDefinition")
    layer_type: Literal["WFS"] = Field(
        "WFS",
        alias="layerType",
        description="String indicating the layer type.",
    )
    max_scale: confloat(ge=0.0) | None = Field(
        None,
        alias="maxScale",
        description="A number representing the maximum scale at which the layer will be visible. The number is the scale's denominator.",
    )
    min_scale: confloat(ge=0.0) | None = Field(
        None,
        alias="minScale",
        description="A number representing the minimum scale at which the layer will be visible. The number is the scale's denominator.",
    )
    mode: conint(ge=0, le=1) | None = Field(
        None,
        description="Number where 0 means 'snapshot' and 1 means 'ondemand'.",
    )
    opacity: confloat(ge=0.0, le=1.0) | None = Field(
        1,
        description="The degree of transparency applied to the layer on the client side, where 0 is full transparency and 1 is no transparency.",
    )
    popup_info: PopupInfo | None = Field(
        None,
        alias="popupInfo",
        description="A popupInfo object defining the content of popup windows when you click or query a feature.",
    )
    refresh_interval: float | None = Field(
        0,
        alias="refreshInterval",
        description="Refresh interval of the layer in minutes. Non-zero value indicates automatic layer refresh at the specified interval. Value of 0 indicates auto refresh is not enabled.",
    )
    show_labels: bool | None = Field(
        False,
        alias="showLabels",
        description="Labels will display if this property is set to `true` and the layer also has a [labelingInfo](labelingInfo.md) property associated with it. This property can get stored in the web map config and in the item/data.",
    )
    show_legend: bool | None = Field(
        True,
        alias="showLegend",
        description="Boolean value indicating whether to display the layer in the legend. Default value is `true`.",
    )
    time_animation: bool | None = Field(
        True,
        alias="timeAnimation",
        description="This property is applicable to layers that support time. If 'true', timeAnimation is enabled.",
    )
    title: str = Field(
        ...,
        description="A user-friendly string title for the layer that can be used in a table of contents.",
    )
    url: str = Field(
        ...,
        description="The URL to the layer. If the layer is not from a web service but rather a feature collection, than the url property is omitted.",
    )
    visibility: bool | None = Field(
        True,
        description="Boolean property determining whether the layer is initially visible in the web map.",
    )
    visibility_time_extent: list[int | None] | None = Field(
        None,
        alias="visibilityTimeExtent",
        description="Represents time extent that will control when a layer should be visible based on webmap's current time. Visibility time extent only affects the layer visibility and will not filter the data.",
        title="timeExtent",
    )
    wfs_info: WebFeatureServiceInfo | None = Field(
        None,
        alias="wfsInfo",
        description="Object that defines and provides information about layers in a WFS service.",
    )


class SubtypeGroupTableSubtypeGroupTable(BaseModel):
    """
    Subtype group tables can be created by referencing a table from a feature service that contains subtypes.  Each subtype in the feature service table can be a separate table in the subtype group table, and be given its own display and editing properties.<br><br>With respect to layer blending, subtype group layers follow the same rules as a typical [group layers](groupLayer.md).
    """

    model_config = common_config
    custom_parameters: dict[constr(pattern=r".*"), str] | None = Field(
        None,
        alias="customParameters",
        description="A sequence of custom parameters appended to the URL of all requests related to a layer.",
        title="customParameters",
    )
    id: str | None = Field(None, description="Unique string identifier for the table.")
    item_id: str | None = Field(
        None,
        alias="itemId",
        description="Optional string containing the item ID of a portal item registered on ArcGIS Online or your organization's portal.",
    )
    layer_definition: LayerDefinition | None = Field(
        None,
        alias="layerDefinition",
        description="A layerDefinition object defining the definition of the group table that apply to all sub tables.",
    )
    layer_type: Literal["SubtypeGroupTable"] = Field(
        "SubtypeGroupTable",
        alias="layerType",
        description="String indicating the table type.",
    )
    refresh_interval: float | None = Field(
        0,
        alias="refreshInterval",
        description="Refresh interval of the table in minutes. Non-zero value indicates automatic table refresh at the specified interval. Value of 0 indicates auto refresh is not enabled.",
    )
    tables: list[SubtypeTableSubtypeTable] | None = Field(
        None,
        description="An array of objects representing non-spatial datasets used in the web map.",
    )
    title: str = Field(..., description="String value for the title of the table.")
    url: str = Field(
        ...,
        description="String value indicating the URL reference of the hosted table.",
    )


class Table(BaseModel):
    """
    A table is a non-spatial dataset in a feature service or map service. A table can be created by specifying a URL to a table resource in a feature service or map service, with optional reference to a portal item that contains additional property overrides.
    """

    model_config = common_config
    capabilities: str | None = Field(
        None,
        description="A comma-separated string listing which editing operations are allowed on an editable feature service. Available operations include: 'Create', 'Delete', 'Query', 'Update', and 'Editing'.",
    )
    custom_parameters: dict[constr(pattern=r".*"), str] | None = Field(
        None,
        alias="customParameters",
        description="A sequence of custom parameters appended to the URL of all requests related to a layer.",
        title="customParameters",
    )
    definition_editor: DefinitionEditor | None = Field(
        None,
        alias="definitionEditor",
        description="Object indicating the definitionEditor used as a table's interactive filter.",
    )
    form_info: FormInfo | None = Field(
        None,
        alias="formInfo",
        description="A formInfo object defining the content of the form when you are editing a record.",
    )
    id: str | None = Field(None, description="Unique string identifier for the table.")
    item_id: str | None = Field(
        None,
        alias="itemId",
        description="Optional string containing the item ID of a portal item registered on ArcGIS Online or your organization's portal.",
    )
    layer_definition: LayerDefinition | None = Field(
        None,
        alias="layerDefinition",
        description="A layerDefinition object defining the attribute schema and other related information specific to the table.",
    )
    popup_info: PopupInfo | None = Field(
        None,
        alias="popupInfo",
        description="An object defining the content of popup windows when you query a record and the sort option for child related records.",
    )
    refresh_interval: float | None = Field(
        0,
        alias="refreshInterval",
        description="Refresh interval of the table in minutes. Non-zero value indicates automatic table refresh at the specified interval. Value of 0 indicates auto refresh is not enabled.",
    )
    title: str = Field(..., description="String value for the title of the table.")
    url: str = Field(
        ...,
        description="String value indicating the URL reference of the hosted table.",
    )


class LayerDefinition(BaseModel):
    """
    An object that defines the attribute schema and drawing information for a layer drawn using client-side graphics.
    """

    model_config = common_config

    allow_geometry_updates: bool | None = Field(
        None,
        alias="allowGeometryUpdates",
        description="Boolean value indicating whether the geometry of the features in the layer can be edited.",
    )
    barrier_weight: BarrierWeight | None = Field(
        None,
        alias="barrierWeight",
        description="Optional weight of features in AnnotationLayers and DimensionLayers when considered as barriers to labeling. If not set but required, the default value is assumed to be High.",
    )
    capabilities: str | None = Field(
        None,
        description="A comma separated list of supported capabilities, e.g. `Query,Editing`.",
    )
    copyright_text: str | None = Field(
        None,
        alias="copyrightText",
        description="String value for the copyright text information for the layer.",
    )
    current_version: float | None = Field(
        None,
        alias="currentVersion",
        description="Numeric value indicating the server version of the layer.",
    )
    default_visibility: bool | None = Field(
        None,
        alias="defaultVisibility",
        description="Boolean value indicating whether the layer's visibility is turned on.",
    )
    definition_editor: DefinitionEditor | None = Field(
        None,
        alias="definitionEditor",
        description="Stores interactive filters.",
    )
    definition_expression: str | None = Field(
        None,
        alias="definitionExpression",
        description="SQL-based definition expression string that narrows the data to be displayed in the layer.",
    )
    definition_geometry: Extent | dict | None = Field(
        None,
        alias="definitionGeometry",
        description="An extent object used to filter features for StreamLayer. Only features that intersect the extent are displayed.",
    )
    description: str | None = Field(
        None,
        description="String value of the layer as defined in the map service.",
    )
    display_field: str | None = Field(
        None,
        alias="displayField",
        description="A string value that summarizes the feature.",
    )
    display_filter_info: DisplayFilterInfo | None = Field(
        None, alias="displayFilterInfo"
    )
    drawing_info: DrawingInfo | None = Field(
        None,
        alias="drawingInfo",
        description="Contains the drawing and labeling information.",
    )
    extent: Extent | dict | None = Field(
        None, description="An object defining the rectangular area."
    )
    feature_reduction: FeatureReductionBinning | FeatureReductionCluster | None = Field(
        None,
        alias="featureReduction",
        description="An object defining how to aggregate dense point data to clusters or bins.",
        title="Feature Reduction",
    )
    field_overrides: list[FieldOverride] | None = Field(
        None,
        alias="fieldOverrides",
        description="The layer-specific overrides of field properties.  Used by SubtypeGroupLayer to modify field information for each subtype.  Any field missing from this array should be hidden.",
    )
    fields: list[FieldModel] | None = Field(
        None,
        description="An array of field objects containing information about the attribute fields for the feature collection or layer.",
    )
    floor_info: FloorInfo | None = Field(
        None,
        alias="floorInfo",
        description="Contains floor-awareness information for the layer.",
    )
    geometry_type: str | None = Field(
        None,
        alias="geometryType",
        description="A string defining the type of geometry. Possible geometry types are: `esriGeometryPoint`, `esriGeometryMultipoint`, `esriGeometryPolyline`, `esriGeometryPolygon`, and `esriGeometryEnvelope`.",
    )
    global_id_field: str | None = Field(
        None,
        alias="globalIdField",
        description="The unique identifier for a feature or table row within a geodatabase.",
    )
    has_attachments: bool | None = Field(
        None,
        alias="hasAttachments",
        description="Indicates whether attachments should be loaded for the layer.",
    )
    has_m: bool | None = Field(
        None,
        alias="hasM",
        description="Boolean value indicating whether layer has M values.",
    )
    has_static_data: bool | None = Field(
        None,
        alias="hasStaticData",
        description="Boolean value indicating whether data changes. True if it does not.",
    )
    has_z: bool | None = Field(
        None,
        alias="hasZ",
        description="Boolean value indicating whether layer has Z values.",
    )
    html_popup_type: HtmlPopupType | None = Field(
        None,
        alias="htmlPopupType",
        description="String value indicating the HTML popup type.",
    )
    id: int | None = Field(None, description="The identifier assigned to the layer.")
    is_data_versioned: bool | None = Field(
        None,
        alias="isDataVersioned",
        description="Boolean value indicating whether the data is versioned.",
    )
    max_record_count: int | None = Field(
        None,
        alias="maxRecordCount",
        description="Numeric value indicating tbe maximum number of records that will be returned at once for a query.",
    )
    max_scale: float | None = Field(
        None,
        alias="maxScale",
        description="Integer property used to determine the maximum scale at which the layer is displayed.",
    )
    min_scale: float | None = Field(
        None,
        alias="minScale",
        description="Integer property used to determine the minimum scale at which the layer is displayed.",
    )
    name: str | None = Field(
        None,
        description="Contains a unique name for the layer that can be displayed in a legend.",
    )
    object_id_field: str | None = Field(
        None,
        alias="objectIdField",
        description="Indicates the name of the object ID field in the dataset.",
    )
    order_by: list[OrderByField] | None = Field(
        None,
        alias="orderBy",
        description="An array of orderByField objects specifying the feature display order. Features can be sorted in ascending or descending order of a numeric or date field only. If `ascending`, features with smaller values will be drawn on top of features with larger values. For date values, `ascending` order means features with older dates will be drawn on top of features with recent dates. If `descending`, the sort behavior is reversed. When this property is not defined, features are displayed in the order in which they are received by the client.",
        min_length=1,
    )
    override_symbols: bool | None = Field(
        None,
        alias="overrideSymbols",
        description="Dictates whether a client can support having an end user modify symbols on individual features.",
    )
    range_infos: list[RangeInformation] | None = Field(
        None,
        alias="rangeInfos",
        description="Indicates range information",
        min_length=1,
    )
    source: DynamicDataLayer | DynamicMapLayer | None = Field(
        None,
        description="An object indicating the layerDefinition's layer source.",
        title="source",
    )
    spatial_reference: SpatialReference | None = Field(
        None,
        alias="spatialReference",
        description="An object containing the WKID or WKT identifying the spatial reference of the layer's geometry.",
        title="spatialReference",
    )
    supported_query_formats: str | None = Field(
        None,
        alias="supportedQueryFormats",
        description="String value indicating the output formats that are supported in a query.",
    )
    supports_advanced_queries: bool | None = Field(
        None,
        alias="supportsAdvancedQueries",
        description="Boolean value indicating whether the layer supports orderByFields in a query operation.",
    )
    supports_attachments_by_upload_id: bool | None = Field(
        None,
        alias="supportsAttachmentsByUploadId",
        description="Boolean value indicating whether the layer supports uploading attachments with the Uploads operation. This can then be used in the Add Attachment and Update Attachment operations.",
    )
    supports_calculate: bool | None = Field(
        None,
        alias="supportsCalculate",
        description="Boolean value indicating whether the layer supports the Calculate REST operation when updating features.",
    )
    supports_rollback_on_failure_parameter: bool | None = Field(
        None,
        alias="supportsRollbackOnFailureParameter",
        description="Boolean value indicating whether the layer supports rolling back edits made on a feature layer if some of the edits fail.",
    )
    supports_statistics: bool | None = Field(
        None,
        alias="supportsStatistics",
        description="Boolean value indicating whether feature layer query operations support statistical functions.",
    )
    supports_validate_sql: bool | None = Field(
        None,
        alias="supportsValidateSql",
        description="Boolean value indicating whether the validateSQL operation is supported across a feature service layer.",
    )
    templates: list[Template] | None = Field(
        None,
        description="A property of the layer definition when there are no types defined; otherwise, templates are defined as properties of the types.",
    )
    time_info: LayerTimeInfo | None = Field(
        None,
        alias="timeInfo",
        description="An object that defines properties to enable time on a layer or table. Refer to the individual layerDefinition properties to see which layer types support this.",
    )
    type: LayerDefinitionType | None = Field(
        None,
        description="Indicates whether the layerDefinition applies to a Feature Layer or a Table.",
    )
    type_id_field: str | None = Field(
        None,
        alias="typeIdField",
        description="Contains the name of the field holding the type ID for the features.",
    )
    types: list[AttributeFieldType] | None = Field(
        None, description="Contains information about an attribute field."
    )
    visibility_field: str | None = Field(
        None,
        alias="visibilityField",
        description="String value indicating the attribute field that is used to control the visibility of a feature. If applicable, when rendering a feature the client should use this field to control visibility. The field's values are 0 = do not display, 1 = display.",
    )


class FootprintLayerFootprintLayer(BaseModel):
    """
    A footprint layer represents polygon features representing footprints. It has its own display and editing properties, and can exist only as a child of a catalog layer.
    """

    model_config = common_config
    blend_mode: BlendMode | None = Field(None, alias="blendMode")
    charts: list[dict[str, Any]] | None = Field(
        None,
        description="An array of chart items of type WebChart available on the footprint layer.",
    )
    disable_popup: bool | None = Field(
        False,
        alias="disablePopup",
        description="Indicates whether a client should ignore popups defined in this layer",
    )
    effect: (
        list[
            EffectFunctions
            | EffectFunctions1
            | EffectFunctions2
            | EffectFunctions3
            | EffectFunctions4
        ]
        | list[ScaleDependentEffect]
        | None
    ) = Field(
        None,
        description="Effect provides various filter functions to achieve different visual effects similar to how image filters (photo apps) work.",
        title="Effect",
    )
    enable_editing: bool | None = Field(
        True,
        alias="enableEditing",
        description="Indicates whether a client should allow feature editing for this layer. Applicable only if the layer has editing capability.",
    )
    feature_effect: FeatureEffect | None = Field(None, alias="featureEffect")
    form_info: FormInfo | None = Field(
        None,
        alias="formInfo",
        description="A formInfo object defining the content of the form when you are editing a feature.",
    )
    id: str = Field(..., description="A unique identifying string for the layer.")
    layer_definition: LayerDefinition | None = Field(
        None,
        alias="layerDefinition",
        description="A layerDefinition object defining the attribute schema and drawing information for the layer.",
    )
    opacity: confloat(ge=0.0, le=1.0) | None = Field(
        1,
        description="The degree of transparency applied to the layer on the client side, where 0 is full transparency and 1 is no transparency.",
    )
    popup_info: PopupInfo | None = Field(
        None,
        alias="popupInfo",
        description="A popupInfo object defining the content of popup window when you click a feature on the map.",
    )
    show_labels: bool | None = Field(
        False,
        alias="showLabels",
        description="Labels will display if this property is set to `true` and the layer also has a [labelingInfo](labelingInfo.md) property associated with it. This property can get stored in the web map config and in the item/data.",
    )
    show_legend: bool | None = Field(
        True,
        alias="showLegend",
        description="Boolean value indicating whether to display the layer in the legend. Default value is `true`.",
    )
    title: str = Field(
        ...,
        description="A user-friendly string title for the layer that can be used in a table of contents.",
    )
    visibility: bool | None = Field(
        True,
        description="Boolean property determining whether the layer is initially visible in the web map.",
    )


class FeatureCollection(BaseModel):
    """
    An object defining a layer of features whose geometry and attributes will be stored directly within the web map. This is used when features are referenced by the client and no url is being used. Feature Collection can be generated from shapefiles, CSVs, GPX files, or map notes. Map notes allows you to add your own data directly to a map. With a map notes layer, you use features to symbolize something you want to show on your map. You can also add descriptive information that appears in pop-ups when the feature is clicked. Map notes are stored directly within the web map and not as a separate item.
    """

    model_config = common_config
    group_id_field: str | None = Field(
        None,
        alias="groupIdField",
        description="The name of the attribute field of features in the feature collection that contains group identifier. The identifier will be one of those specified in `groups`.",
    )
    groups: list[Group] | None = Field(
        None,
        description="Specifies the type of groups available in the feature collection.",
    )
    layers: list[Layer] | None = Field(
        None,
        description="An array of layer objects defining the styling, geometry, and attribute information for the features.",
    )
    show_legend: bool | None = Field(
        True,
        alias="showLegend",
        description="Boolean value indicating whether to display the layer in the legend. Default value is `true`.",
    )


class KnowledgeGraphSubLayerKnowledgeGraphSubLayer(BaseModel):
    """
    Knowledge graph sub layer.
    """

    model_config = common_config
    blend_mode: BlendMode | None = Field(None, alias="blendMode")
    charts: list[dict[str, Any]] | None = Field(
        None,
        description="An array of chart items of type WebChart available on the KnowledgeGraphSubLayer.",
    )
    disable_popup: bool | None = Field(
        False,
        alias="disablePopup",
        description="Indicates whether to allow a client to ignore popups defined by the service item.",
    )
    display_expression_info: ExpressionInfo | None = Field(
        None,
        alias="displayExpressionInfo",
        description="Object defining Arcade expression that will return a display name used for listing entities or relationships. This Arcade expression profile expects the returnType to be always a string.",
    )
    effect: (
        list[
            EffectFunctions
            | EffectFunctions1
            | EffectFunctions2
            | EffectFunctions3
            | EffectFunctions4
        ]
        | list[ScaleDependentEffect]
        | None
    ) = Field(
        None,
        description="Effect provides various filter functions to achieve different visual effects similar to how image filters (photo apps) work.",
        title="Effect",
    )
    feature_effect: FeatureEffect | None = Field(None, alias="featureEffect")
    graph_type: GraphType = Field(
        ...,
        alias="graphType",
        description="Indicates the type of graph object.",
    )
    graph_type_name: str = Field(
        ...,
        alias="graphTypeName",
        description="A unique identifying knowledge graph entity or relationship type name.",
    )
    id: str | None = Field(
        None, description="A unique identifying string for the layer."
    )
    layer_definition: LayerDefinition | None = Field(
        None,
        alias="layerDefinition",
        description="A layerDefinition object defining the attribute schema and drawing information for the layer.",
    )
    layer_type: Literal["KnowledgeGraphSubLayer"] = Field(
        "KnowledgeGraphSubLayer",
        alias="layerType",
        description="String indicating the layer type.",
    )
    opacity: confloat(ge=0.0, le=1.0) | None = Field(
        1,
        description="The degree of transparency applied to the layer on the client side, where 0 is full transparency and 1 is no transparency.",
    )
    popup_info: PopupInfo | None = Field(
        None,
        alias="popupInfo",
        description="A popupInfo object defining the content of popup window when you click a feature on the map.",
    )
    refresh_interval: float | None = Field(
        0,
        alias="refreshInterval",
        description="Refresh interval of the layer in minutes. Non-zero value indicates automatic layer refresh at the specified interval. Value of 0 indicates auto refresh is not enabled.",
    )
    show_labels: bool | None = Field(
        False,
        alias="showLabels",
        description="Labels will display if this property is set to `true` and the layer also has a [labelingInfo](labelingInfo.md) property associated with it. This property can get stored in the web map config and in the item/data.",
    )
    show_legend: bool | None = Field(
        True,
        alias="showLegend",
        description="Boolean value indicating whether to display the layer in the legend. Default value is `true`.",
    )
    time_animation: bool | None = Field(
        True,
        alias="timeAnimation",
        description="Indicates whether to disable time animation if the layer supports it.",
    )
    title: str = Field(
        ...,
        description="A user-friendly string title for the layer that can be used in a table of contents.",
    )
    visibility: bool | None = Field(
        True,
        description="Boolean property determining whether the layer is initially visible in the web map.",
    )


class KnowledgeGraphSubTableKnowledgeGraphSubTable(BaseModel):
    """
    A table is a non-spatial dataset in a Knowledge Graph Server. A table can be created by specifying a graph type name in a Knowledge Graph Server.
    """

    model_config = common_config
    display_expression_info: ExpressionInfo | None = Field(
        None,
        alias="displayExpressionInfo",
        description="Object defining Arcade expression that will return a display name used for listing entities or relationships. This Arcade expression profile expects the returnType to be always a string.",
    )
    graph_type: GraphType = Field(
        ...,
        alias="graphType",
        description="Indicates the type of graph object.",
    )
    graph_type_name: str = Field(
        ...,
        alias="graphTypeName",
        description="A unique identifying knowledge graph entity type or relationship name.",
    )
    id: str | None = Field(None, description="Unique string identifier for the table.")
    layer_definition: LayerDefinition | None = Field(
        None,
        alias="layerDefinition",
        description="A layerDefinition object defining the attribute schema and drawing information for the layer.",
    )
    layer_type: Literal["KnowledgeGraphSubTable"] = Field(
        "KnowledgeGraphSubTable",
        alias="layerType",
        description="String indicating the table type.",
    )
    popup_info: PopupInfo | None = Field(
        None,
        alias="popupInfo",
        description="An object defining the content of popup windows when you query a record and the sort option for child related records.",
    )
    refresh_interval: float | None = Field(
        0,
        alias="refreshInterval",
        description="Refresh interval of the table in minutes. Non-zero value indicates automatic table refresh at the specified interval. Value of 0 indicates auto refresh is not enabled.",
    )
    title: str = Field(..., description="String value for the title of the table.")


class Layer(BaseModel):
    """
    A layer object may allow overrides on popup content and drawing behavior for individual layers of a web service. This object also contains geographic features and their attributes when used in a feature collection.
    """

    model_config = common_config
    default_visibility: bool | None = Field(
        None,
        alias="defaultVisibility",
        description="Default visibility of the layers in the map service.",
    )
    definition_editor: DefinitionEditor | None = Field(
        None,
        alias="definitionEditor",
        description="An object that provides interactive filters.",
    )
    disable_popup: bool | None = Field(
        False,
        alias="disablePopup",
        description="Indicates whether to allow a client to ignore the popups defined on the layer. The popupInfo object could be saved in the map or item.",
    )
    feature_set: FeatureSet | None = Field(
        None,
        alias="featureSet",
        description="A featureSet object containing the geometry and attributes of the features in the layer.",
    )
    field: FieldModel | None = Field(
        None,
        description="Information about each field in a layer. Used with feature collections.",
    )
    id: int | None = Field(None, description="The layer id, as a numeric value.")
    layer_definition: LayerDefinition | None = Field(
        None,
        alias="layerDefinition",
        description="The layerDefinition object defines the attribute schema and drawing information for the layer.",
    )
    layer_item_id: str | None = Field(
        None,
        alias="layerItemId",
        description="The associated query layer's itemId. Only available when there is a `layerUrl`.  You will see this if [popups are configured](https://doc.arcgis.com/en/arcgis-online/manage-data/publish-tiles-from-features.htm) on it.",
    )
    layer_url: str | None = Field(
        None,
        alias="layerUrl",
        description="A URL to a service that should be used for all queries against the layer.",
    )
    max_scale: float | None = Field(
        None,
        alias="maxScale",
        description="A number representing the maximum scale at which the layer will be visible. The number is the scale's denominator.",
    )
    min_scale: float | None = Field(
        None,
        alias="minScale",
        description="A number representing the minimum scale at which the layer will be visible. The number is the scale's denominator.",
    )
    name: str | None = Field(None, description="The name of the layer.")
    next_object_id: int | None = Field(
        None,
        alias="nextObjectId",
        description="Iterates within a featureset. Number objectId value is incremented 1 based on last Object ID defined for the feature in a featureset. Used with feature collections.",
    )
    parent_layer_id: int | None = Field(
        None,
        alias="parentLayerId",
        description="If working with nested layers, this is the numeric value indicating the layer id of the next layer (parent) directly above the current referenced layer.",
    )
    popup_info: PopupInfo | None = Field(
        None,
        alias="popupInfo",
        description="A popupInfo object defining the popup window content for the layer.",
    )
    show_legend: bool | None = Field(
        True,
        alias="showLegend",
        description="Boolean value indicating whether to display the layer in the legend. Default value is `true`.",
    )
    sub_layer: int | None = Field(
        None,
        alias="subLayer",
        description="Integer value indicating the layer id.",
    )
    sub_layer_ids: list[int] | None = Field(
        None,
        alias="subLayerIds",
        description="If the layer is a parent layer, it will have one or more sub layers included in an array.",
    )
    title: str | None = Field(
        None,
        description="A user-friendly string title for the layer that can be used in a table of contents.",
    )


class SubtypeLayerSubtypeLayer(BaseModel):
    """
    A subtype layer represents a subtype defined in a feature service layer. It has its own display and editing properties, and can exist only as a child of a subtype group layer.
    """

    model_config = common_config
    charts: list[dict[str, Any]] | None = Field(
        None,
        description="An array of chart items of type WebChart available on the subtype layer.",
    )
    disable_popup: bool | None = Field(
        False,
        alias="disablePopup",
        description="Indicates whether a client should ignore popups defined in this layer",
    )
    enable_editing: bool | None = Field(
        True,
        alias="enableEditing",
        description="Indicates whether a client should allow feature editing for this layer. Applicable only if the layer has editing capability.",
    )
    form_info: FormInfo | None = Field(
        None,
        alias="formInfo",
        description="A formInfo object defining the content of the form when you are editing a feature.",
    )
    id: str = Field(..., description="A unique identifying string for the layer.")
    layer_definition: LayerDefinition | None = Field(
        None,
        alias="layerDefinition",
        description="A layerDefinition object defining the attribute schema and drawing information for the layer.",
    )
    layer_type: Literal["ArcGISFeatureLayer"] = Field(
        "ArcGISFeatureLayer",
        alias="layerType",
        description="String indicating the layer type.",
    )
    opacity: confloat(ge=0.0, le=1.0) | None = Field(
        1,
        description="The degree of transparency applied to the layer on the client side, where 0 is full transparency and 1 is no transparency.",
    )
    popup_info: PopupInfo | None = Field(
        None,
        alias="popupInfo",
        description="A popupInfo object defining the content of popup window when you click a feature on the map.",
    )
    show_labels: bool | None = Field(
        False,
        alias="showLabels",
        description="Labels will display if this property is set to `true` and the layer also has a [labelingInfo](labelingInfo.md) property associated with it. This property can get stored in the web map config and in the item/data.",
    )
    show_legend: bool | None = Field(
        True,
        alias="showLegend",
        description="Boolean value indicating whether to display the layer in the legend. Default value is `true`.",
    )
    subtype_code: int = Field(
        ...,
        alias="subtypeCode",
        description="The feature subtype code identifying the layer. Used with SubtypeGroupLayers.",
    )
    title: str = Field(
        ...,
        description="A user-friendly string title for the layer that can be used in a table of contents.",
    )
    visibility: bool | None = Field(
        True,
        description="Boolean property determining whether the layer is initially visible in the web map.",
    )


class SubtypeTableSubtypeTable(BaseModel):
    """
    A subtype table represents a subtype defined in a feature service table. It has its own display and editing properties, and can exist only as a child of a subtype group table.
    """

    model_config = common_config
    charts: list[dict[str, Any]] | None = Field(
        None,
        description="An array of chart items of type WebChart available on the subtype table.",
    )
    disable_popup: bool | None = Field(
        False,
        alias="disablePopup",
        description="Indicates whether a client should ignore popups defined in this table",
    )
    enable_editing: bool | None = Field(
        True,
        alias="enableEditing",
        description="Indicates whether a client should allow feature editing for this table. Applicable only if the table has editing capability.",
    )
    form_info: FormInfo | None = Field(
        None,
        alias="formInfo",
        description="A formInfo object defining the content of the form when you are editing a feature.",
    )
    id: str = Field(..., description="A unique identifying string for the table.")
    layer_definition: LayerDefinition | None = Field(
        None,
        alias="layerDefinition",
        description="A layerDefinition object defining the attribute schema and other related information specific to the table.",
    )
    popup_info: PopupInfo | None = Field(
        None,
        alias="popupInfo",
        description="A popupInfo object defining the content of popup window when you click a feature on the map.",
    )
    subtype_code: int = Field(
        ...,
        alias="subtypeCode",
        description="The feature subtype code identifying the table. Used with Subtype Group Tables.",
    )
    title: str = Field(
        ...,
        description="A user-friendly string title for the table that can be used in a table of contents.",
    )


class DynamicDataLayer(BaseModel):
    """
    A dynamic data layer derived from a registered workspace. More information on this can be found in the [ArcGIS REST API help](http://resources.arcgis.com/en/help/rest/apiref/layersource.html).
    """

    model_config = common_config
    data_source: (
        JoinTableDataSource | QueryTableDataSource | RasterDataSource | TableDataSource
    ) = Field(
        ...,
        alias="dataSource",
        description="The layer's data source.",
        title="dataSource",
    )
    fields: list[FieldModel] | None = Field(
        None,
        description="An array of objects specifying information about an attribute field.",
    )
    type: Literal["dataLayer"] = Field(
        "dataLayer", description="A string value indicating the type."
    )


class JoinTableDataSource(BaseModel):
    """
    Join Table data source is the result of a join operation. Nested joins are supported. To use nested joins, set either leftTableSource or rightTableSource to be a joinTable.
    """

    model_config = common_config
    join_type: JoinType | None = Field(
        None,
        alias="joinType",
        description="The type of join (left outer or left inner).",
    )
    left_table_key: str | None = Field(
        None,
        alias="leftTableKey",
        description="Field name from the left table.",
    )
    left_table_source: DynamicDataLayer | DynamicMapLayer | None = Field(
        None,
        alias="leftTableSource",
        description="The left source. If the leftTableSource is a table, the resulting joinTable is a table. If the leftTableSource is a layer, the resulting joinTable is a layer.",
        title="source",
    )
    right_table_key: str | None = Field(
        None,
        alias="rightTableKey",
        description="Field name from the right table.",
    )
    right_table_source: DynamicDataLayer | DynamicMapLayer | None = Field(
        None,
        alias="rightTableSource",
        description="The right table source.",
        title="source",
    )
    type: Literal["joinTable"] = Field(
        "joinTable",
        description="String value indicating the type for the dataSource.",
    )


class LinkChartAggregationLayerLinkChartAggregationLayer(BaseModel):
    """
    Link chart aggregation layer represents aggregated entities or relationships.
    This is a child of a link chart sub layer and the graphTypeName uniquely identifies the
    name of the entity or relationship being aggregated.
    """

    model_config = common_config
    blend_mode: BlendMode | None = Field(None, alias="blendMode")
    charts: list[dict[str, Any]] | None = Field(
        None,
        description="An array of chart items of type WebChart available on the layer.",
    )
    disable_popup: bool | None = Field(
        False,
        alias="disablePopup",
        description="Indicates whether a client should ignore popups defined in this layer",
    )
    display_expression_info: ExpressionInfo | None = Field(
        None,
        alias="displayExpressionInfo",
        description="Object defining Arcade expression that will return a display name used for listing entities or relationships. This Arcade expression profile expects the returnType to be always a string.",
    )
    effect: (
        list[
            EffectFunctions
            | EffectFunctions1
            | EffectFunctions2
            | EffectFunctions3
            | EffectFunctions4
        ]
        | list[ScaleDependentEffect]
        | None
    ) = Field(
        None,
        description="Effect provides various filter functions to achieve different visual effects similar to how image filters (photo apps) work.",
        title="Effect",
    )
    feature_effect: FeatureEffect | None = Field(None, alias="featureEffect")
    graph_type: GraphType = Field(
        ...,
        alias="graphType",
        description="Indicates the type of graph object.",
    )
    graph_type_name: str = Field(
        ...,
        alias="graphTypeName",
        description="Represents a unique identifier for a knowledge graph entity or relationship. If graphTypeName represents entity, features can be fetched from the featureset persisted as pbf specified as aggregatedEntitiesUrl in the parent's [link chart properties](linkChartProperties.md) and relationship features from aggregatedRelationshipsUrl.",
    )
    id: str | None = Field(
        None, description="A unique identifying string for the layer."
    )
    layer_definition: LayerDefinition | None = Field(
        None,
        alias="layerDefinition",
        description="A layerDefinition object defining the attribute schema and drawing information for the layer.",
    )
    layer_type: Literal["LinkChartAggregationLayer"] = Field(
        "LinkChartAggregationLayer",
        alias="layerType",
        description="String indicating the layer type.",
    )
    opacity: confloat(ge=0.0, le=1.0) | None = Field(
        1,
        description="The degree of transparency applied to the layer on the client side, where 0 is full transparency and 1 is no transparency.",
    )
    popup_info: PopupInfo | None = Field(
        None,
        alias="popupInfo",
        description="A popupInfo object defining the content of popup window when you click a feature on the map.",
    )
    refresh_interval: float | None = Field(
        0,
        alias="refreshInterval",
        description="Refresh interval of the layer in minutes. Non-zero value indicates automatic layer refresh at the specified interval. Value of 0 indicates auto refresh is not enabled.",
    )
    show_labels: bool | None = Field(
        False,
        alias="showLabels",
        description="Labels will display if this property is set to `true` and the layer also has a [labelingInfo](labelingInfo.md) property associated with it. This property can get stored in the web map config and in the item/data.",
    )
    show_legend: bool | None = Field(
        True,
        alias="showLegend",
        description="Boolean value indicating whether to display the layer in the legend. Default value is `true`.",
    )
    time_animation: bool | None = Field(
        True,
        alias="timeAnimation",
        description="Indicates whether to disable time animation if the layer supports it.",
    )
    title: str = Field(
        ...,
        description="A user-friendly string title for the layer that can be used in a table of contents.",
    )
    visibility: bool | None = Field(
        True,
        description="Boolean property determining whether the layer is initially visible in the web map.",
    )


class LinkChartLayerLinkChartLayer(BaseModel):
    """
    Link chart layer can be created by referencing a Knowledge Graph Service. A Link chart layer is a group layer with collections of feature layers and tables representing geospatial and non-geospatial entity and relationship types.
    """

    model_config = common_config

    blend_mode: BlendMode | None = Field(None, alias="blendMode")
    custom_parameters: dict[str, Any] | None = Field(
        None,
        alias="customParameters",
        description="Custom parameters for the layer.",
    )
    effect: (
        list[
            EffectFunctions
            | EffectFunctions1
            | EffectFunctions2
            | EffectFunctions3
            | EffectFunctions4
        ]
        | list[ScaleDependentEffect]
        | None
    ) = Field(
        None,
        description="Effect provides various filter functions to achieve different visual effects similar to how image filters (photo apps) work.",
        title="Effect",
    )
    id: str | None = Field(
        None, description="A unique identifying string for the layer."
    )
    item_id: str | None = Field(
        None,
        alias="itemId",
        description="Optional string containing the item ID of the service if it's registered on ArcGIS Online or your organization's portal.",
    )
    layers: list[LinkChartSubLayerLinkChartSubLayer] | None = Field(
        None,
        description="An array of Link chart sub layers, each representing graph entity type or relationship in Link chart server.",
    )
    layer_type: Literal["LinkChartLayer"] = Field(
        "LinkChartLayer",
        alias="layerType",
        description="String indicating the layer type.",
    )
    max_scale: float | None = Field(
        0,
        alias="maxScale",
        description="A number representing the maximum scale at which the layer will be visible. The number is the scale's denominator.",
    )
    min_scale: float | None = Field(
        0,
        alias="minScale",
        description="A number representing the minimum scale at which the layer will be visible. The number is the scale's denominator.",
    )
    opacity: confloat(ge=0.0, le=1.0) | None = Field(
        1,
        description="The degree of transparency applied to the layer on the client side, where 0 is full transparency and 1 is no transparency.",
    )
    refresh_interval: int | None = Field(
        0,
        alias="refreshInterval",
        description="Refresh interval of the layer in minutes. Non-zero value indicates automatic layer refresh at the specified interval. Value of 0 indicates auto refresh is not enabled.",
    )
    title: str = Field(
        ...,
        description="A user-friendly string title for the layer that can be used in a table of contents.",
    )
    url: str = Field(..., description="A URL to the Knowledge Graph Service.")
    visibility: bool | None = Field(
        True,
        description="Boolean property determining whether the layer is initially visible in the web map.",
    )


class LinkChartLayoutSettings(BaseModel):
    """
    Link chart layout settings.
    """

    model_config = common_config

    organic_layout_settings: LinkChartOrganicLayoutSettings | None = Field(
        None,
        alias="organicLayoutSettings",
        description="Settings for organic layout calculations.",
    )


class IdealEdgeLengthType(Enum):
    absolute_value = "absoluteValue"
    multiplier = "multiplier"


class LinkChartOrganicLayoutSettings(BaseModel):
    """
    Settings for organic layout calculations
    """

    absolute_ideal_edge_length: float | None = Field(
        1,
        alias="absoluteIdealEdgeLength",
        description="The value, in degrees, to use for the ideal edge length during layout calculations when the idealEdgeLengthType is 'absoluteValue'. Only used for geographic layouts. Default value is 1.",
        ge=0,
        le=360,
    )
    auto_repulsion_radius: bool = Field(
        True,
        alias="autoRepulsionRadius",
        description="Determines whether the repulsion radius should be calculated automatically (true), or computed according to 'repulsionRadiusMultiplier' (false). Default value is true.",
    )
    ideal_edge_length_type: IdealEdgeLengthType = Field(
        IdealEdgeLengthType.multiplier.value,
        alias="idealEdgeLengthType",
        description="The type of ideal edge length to use during layout calculations. Default value is 'absoluteValue'.",
    )
    multiplication_ideal_edge_length: float | None = Field(
        1,
        alias="multiplicationIdealEdgeLength",
        description="The value to use for the ideal edge length during layout calculations when the idealEdgeLengthType is 'multiplier'. Only used for geographic layouts. Default value is 1.",
        ge=0,
        le=5,
    )
    repulsion_radius_multiplier: float | None = Field(
        1,
        alias="repulsionRadiusMultiplier",
        description="Value to be used for the repulsion radius multiplier in organic layout calculations. The repulsion radius is calculated by multiplying the repulsionRadiusMultiplier by the actual ideal edge length. Default value is 1.",
        ge=1,
        le=99,
    )


class LinkChartLayoutType(Enum):
    basic_grid = "basic-grid"
    chronological_mono_timeline = "chronological-mono-timeline"
    chronological_multi_timeline = "chronological-multi-timeline"
    geographic_organic_standard = "geographic-organic-standard"
    hierarchical_bottom_to_top = "hierarchical-bottom-to-top"
    hierarchical_top_to_bottom = "hierarchical-top-to-bottom"
    organic_community = "organic-community"
    organic_fusiform = "organic-fusiform"
    organic_leaf_circle = "organic-leaf-circle"
    organic_standard = "organic-standard"
    radial_node_centric = "radial-node-centric"
    radial_root_centric = "radial-root-centric"
    tree_bottom_to_top = "tree-bottom-to-top"
    tree_top_to_bottom = "tree-top-to-bottom"
    tree_left_to_right = "tree-left-to-right"
    tree_right_to_left = "tree-right-to-left"


class LinkChartProperties(BaseModel):
    """
    Properties that contain source information, layout configurations and other settings for a Link chart.
    """

    model_config = common_config

    aggregated_entities_url: str | None = Field(
        None,
        alias="aggregatedEntitiesUrl",
        description="Url pointing to a binary reference containing a serialized representation of the internal aggregated entity table.",
    )
    aggregated_relationships_url: str | None = Field(
        None,
        alias="aggregatedRelationshipsUrl",
        description="Url pointing to a binary reference containing a serialized representation of the internal aggregated relationship table.",
    )
    auto_collapse_relationships: bool | None = Field(
        True,
        alias="autoCollapseRelationships",
        description="Indicates whether to automatically collapses eligible relationships.",
    )
    centrality_is_up_to_date: bool | None = Field(
        True,
        alias="centralityIsUpToDate",
        description="Indicates whether the Centrality scores found in the entity and relationship tables were computed using the current Link Chart topology. Default value is true.",
    )
    entities_url: str | None = Field(
        None,
        alias="entitiesUrl",
        description="Url pointing to a resource containing featureSet as PBF reference containing a serialized representation of the internal entity table.",
    )
    layout_settings: LinkChartLayoutSettings | None = Field(
        None,
        alias="layoutSettings",
        description="Link chart layout settings.",
    )
    layout_type: LinkChartLayoutType | None = Field(
        LinkChartLayoutType.organic_standard.value,
        alias="layoutType",
        description="Knowledge Graph Link Chart layout algorithm used. Default value is 'organic-standard'.",
    )
    relationships_url: str | None = Field(
        None,
        alias="relationshipsUrl",
        description="Url pointing to a resource containing featureSet as PBF reference containing a serialized representation of the internal relationship table.",
    )


class LinkChartSubLayerLinkChartSubLayer(BaseModel):
    """
    Link chart sub layer represents entity or relationship in a knowledge graph. graphTypeName uniquely identifies the name of the entity or relationship. The features corresponding entities and relationships can be fetched by using graphTypeName filter.
    """

    model_config = common_config

    aggregation_layer: LinkChartAggregationLayerLinkChartAggregationLayer | None = (
        Field(
            None,
            alias="aggregationLayer",
            description="Represents a aggregated link chart sub layer object that contains aggregated entities or relationships specific to graphTypeName for this link chart sub layer.",
        )
    )
    blend_mode: BlendMode | None = Field(None, alias="blendMode")
    charts: list[dict[str, Any]] | None = Field(
        None,
        description="An array of chart items of type WebChart available on the layer.",
    )
    disable_popup: bool | None = Field(
        False,
        alias="disablePopup",
        description="Indicates whether a client should ignore popups defined in this layer",
    )
    display_expression_info: ExpressionInfo | None = Field(
        None,
        alias="displayExpressionInfo",
        description="Object defining Arcade expression that will return a display name used for listing entities or relationships. This Arcade expression profile expects the returnType to be always a string.",
    )
    effect: (
        list[
            EffectFunctions
            | EffectFunctions1
            | EffectFunctions2
            | EffectFunctions3
            | EffectFunctions4
        ]
        | list[ScaleDependentEffect]
        | None
    ) = Field(
        None,
        description="Effect provides various filter functions to achieve different visual effects similar to how image filters (photo apps) work.",
    )
    feature_effect: FeatureEffect | None = Field(None, alias="featureEffect")
    graph_type: GraphType = Field(
        ...,
        alias="graphType",
        description="Indicates the type of graph object.",
    )
    graph_type_name: str = Field(
        ...,
        alias="graphTypeName",
        description="Represents a unique identifier for a knowledge graph entity or relationship. If graphTypeName represents entity, features can be fetched from the featureset persisted as pbf specified as entitiesUrl in the parent's [link chart properties](linkChartProperties.md) and relationship features from relationshipsUrl.",
    )
    id: str | None = Field(
        None, description="A unique identifying string for the layer."
    )
    layer_definition: LayerDefinition | None = Field(
        None,
        alias="layerDefinition",
        description="A layerDefinition object defining the attribute schema and drawing information for the layer.",
    )
    layer_type: Literal["LinkChartSubLayer"] = Field(
        "LinkChartSubLayer",
        alias="layerType",
        description="String indicating the layer type.",
    )
    opacity: confloat(ge=0.0, le=1.0) | None = Field(
        1,
        description="The degree of transparency applied to the layer on the client side, where 0 is full transparency and 1 is no transparency.",
    )
    popup_info: PopupInfo | None = Field(
        None,
        alias="popupInfo",
        description="A popupInfo object defining the content of popup window when you click a feature on the map.",
    )
    refresh_interval: float | None = Field(
        0,
        alias="refreshInterval",
        description="Refresh interval of the layer in minutes. Non-zero value indicates automatic layer refresh at the specified interval. Value of 0 indicates auto refresh is not enabled.",
    )
    show_labels: bool | None = Field(
        False,
        alias="showLabels",
        description="Labels will display if this property is set to `true` and the layer also has a [labelingInfo](labelingInfo.md) property associated with it. This property can get stored in the web map config and in the item/data.",
    )
    show_legend: bool | None = Field(
        True,
        alias="showLegend",
        description="Boolean value indicating whether to display the layer in the legend. Default value is `true`.",
    )
    time_animation: bool | None = Field(
        True,
        alias="timeAnimation",
        description="Indicates whether to disable time animation if the layer supports it.",
    )
    title: str = Field(
        ...,
        description="A user-friendly string title for the layer that can be used in a table of contents.",
    )
    visibility: bool | None = Field(
        True,
        description="Boolean property determining whether the layer is initially visible in the web map.",
    )


class WebLinkChart(BaseModel):
    """
    Represents a web link chart.
    """

    model_config = common_config

    application_properties: ApplicationProperties | None = Field(
        None,
        alias="applicationProperties",
        description="Viewing and editing properties of the webmap.",
    )
    authoring_app: str = Field(
        ...,
        alias="authoringApp",
        description="[Required] String value indicating the application that last authored the webmap.",
    )
    authoring_app_version: str = Field(
        ...,
        alias="authoringAppVersion",
        description="[Required] String value indicating the version of the application that last authored the webmap.",
    )
    background: Background | None = Field(
        None,
        description="Background color, background image, and color of the background image.",
    )
    base_map: BaseMap | None = Field(
        None,
        alias="baseMap",
        description="Basemaps give the web map a geographic context.",
    )
    bookmarks: list[Bookmark] | None = Field(
        None,
        description="A bookmark is a saved extent that allows end users to quickly navigate to a particular area of interest.",
    )
    initial_state: InitialState | None = Field(
        None,
        alias="initialState",
        description="Initial state at which to open the map.",
    )
    link_chart_properties: LinkChartProperties | None = Field(
        None,
        alias="linkChartProperties",
        description="Link Chart Properties contains information about source Knowledge Graph, resources and properties to display a link chart.",
    )
    map_floor_info: MapFloorInfo | None = Field(
        None,
        alias="mapFloorInfo",
        description="Contains floor-awareness information for the map.",
    )
    map_range_info: MapRangeInfo | None = Field(
        None, alias="mapRangeInfo", description="Map range information."
    )
    map_type: Literal["webLinkChart"] = Field(
        "webLinkChart",
        alias="mapType",
    )
    operational_layers: (
        list[
            AnnotationLayerArcGISAnnotationLayer
            | CatalogLayerCatalogLayer
            | CSVLayerCSV
            | DimensionLayerArcGISDimensionLayer
            | FeatureLayerArcGISFeatureLayer
            | GeoJSONLayerGeoJSON
            | GeoRSSLayerGeoRSS
            | GroupLayer
            | ImageServiceLayerArcGISImageServiceLayer
            | ImageServiceVectorLayerArcGISImageServiceVectorLayer
            | KMLLayerKML
            | KnowledgeGraphLayerKnowledgeGraphLayer
            | MapServiceLayerArcGISMapServiceLayer
            | OGCFeatureLayer
            | OrientedImageryLayerOrientedImageryLayer
            | StreamLayerArcGISStreamLayer
            | SubtypeGroupLayerSubtypeGroupLayer
            | TiledImageServiceLayerArcGISTiledImageServiceLayer
            | TiledMapServiceLayerArcGISTiledMapServiceLayer
            | VectorTileLayerVectorTileLayer
            | WebTiledLayerWebTiledLayer
            | WebFeatureServiceLayerWFS
            | WMSLayerWMS
            | MediaLayerMedia
            | LinkChartLayerLinkChartLayer
        ]
        | None
    ) = Field(
        None,
        alias="operationalLayers",
        description="Operational layers contain business data which are used to make thematic maps.",
    )
    reference_scale: float | None = Field(
        0,
        alias="referenceScale",
        description="A floating-point number representing the reference scale which map symbols are drawn relative to. The number is the scale's denominator. When the reference scale is 0, symbols are always drawn at the same size regardless of the map scale. The referenceScale is only used for Feature Layers that have scaleSymbols:true. Not all applications or layer types support referenceScale yet. In particular, ArcGISOnline will not use the referenceScale when drawing symbols in the browser.",
        ge=0,
    )
    spatial_reference: SpatialReference | None = Field(
        ...,
        alias="spatialReference",
        description="[Required] An object used to specify the spatial reference of the given geometry.",
    )
    tables: list[Table] | None = Field(
        None,
        description="An array of objects representing non-spatial datasets used in the web map.",
    )
    time_zone: str | None = Field(
        None,
        alias="timeZone",
        description="Time zone of the webmap. When applicable, dates and times will be displayed using this time zone. The time zone can be `system`, `unknown` or any named [IANA](https://www.iana.org/time-zones) time zone. See [here](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) for a comprehensive list of time zones. The `system` keyword indicates the webmap will use the time zone currently used by the device loading the webmap. Whereas `unknown` means that dates will be treated as if they do not have an associated time zone.",
    )
    version: str | None = Field(
        "2.31", description="Version of the webmap specification."
    )
    widgets: Widgets | None = Field(
        None,
        description="The widgets object contains widgets that should be exposed to the user.",
    )


ColorRamp.model_rebuild()
Webmap.model_rebuild()
BaseMap.model_rebuild()
AnnotationLayerArcGISAnnotationLayer.model_rebuild()
CatalogLayerCatalogLayer.model_rebuild()
CSVLayerCSV.model_rebuild()
DimensionLayerArcGISDimensionLayer.model_rebuild()
FeatureLayerArcGISFeatureLayer.model_rebuild()
GeoJSONLayerGeoJSON.model_rebuild()
ImageServiceLayerArcGISImageServiceLayer.model_rebuild()
ImageServiceVectorLayerArcGISImageServiceVectorLayer.model_rebuild()
KnowledgeGraphLayerKnowledgeGraphLayer.model_rebuild()
MapServiceLayerArcGISMapServiceLayer.model_rebuild()
OGCFeatureLayer.model_rebuild()
OrientedImageryLayerOrientedImageryLayer.model_rebuild()
StreamLayerArcGISStreamLayer.model_rebuild()
SubtypeGroupLayerSubtypeGroupLayer.model_rebuild()
TiledImageServiceLayerArcGISTiledImageServiceLayer.model_rebuild()
TiledMapServiceLayerArcGISTiledMapServiceLayer.model_rebuild()
WebFeatureServiceLayerWFS.model_rebuild()
SubtypeGroupTableSubtypeGroupTable.model_rebuild()
Table.model_rebuild()
LayerDefinition.model_rebuild()
FootprintLayerFootprintLayer.model_rebuild()
FeatureCollection.model_rebuild()
KnowledgeGraphSubLayerKnowledgeGraphSubLayer.model_rebuild()
KnowledgeGraphSubTableKnowledgeGraphSubTable.model_rebuild()
SubtypeLayerSubtypeLayer.model_rebuild()
SubtypeTableSubtypeTable.model_rebuild()
DynamicDataLayer.model_rebuild()
LinkChartAggregationLayerLinkChartAggregationLayer.model_rebuild()
LinkChartLayerLinkChartLayer.model_rebuild()
LinkChartSubLayerLinkChartSubLayer.model_rebuild()
