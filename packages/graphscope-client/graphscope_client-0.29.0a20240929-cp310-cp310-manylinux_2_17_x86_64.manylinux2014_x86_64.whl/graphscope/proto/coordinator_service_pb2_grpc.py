# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import message_pb2 as message__pb2

GRPC_GENERATED_VERSION = '1.66.2'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in coordinator_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class CoordinatorServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ConnectSession = channel.unary_unary(
                '/gs.rpc.CoordinatorService/ConnectSession',
                request_serializer=message__pb2.ConnectSessionRequest.SerializeToString,
                response_deserializer=message__pb2.ConnectSessionResponse.FromString,
                _registered_method=True)
        self.HeartBeat = channel.unary_unary(
                '/gs.rpc.CoordinatorService/HeartBeat',
                request_serializer=message__pb2.HeartBeatRequest.SerializeToString,
                response_deserializer=message__pb2.HeartBeatResponse.FromString,
                _registered_method=True)
        self.RunStep = channel.stream_stream(
                '/gs.rpc.CoordinatorService/RunStep',
                request_serializer=message__pb2.RunStepRequest.SerializeToString,
                response_deserializer=message__pb2.RunStepResponse.FromString,
                _registered_method=True)
        self.FetchLogs = channel.unary_stream(
                '/gs.rpc.CoordinatorService/FetchLogs',
                request_serializer=message__pb2.FetchLogsRequest.SerializeToString,
                response_deserializer=message__pb2.FetchLogsResponse.FromString,
                _registered_method=True)
        self.CloseSession = channel.unary_unary(
                '/gs.rpc.CoordinatorService/CloseSession',
                request_serializer=message__pb2.CloseSessionRequest.SerializeToString,
                response_deserializer=message__pb2.CloseSessionResponse.FromString,
                _registered_method=True)
        self.AddLib = channel.unary_unary(
                '/gs.rpc.CoordinatorService/AddLib',
                request_serializer=message__pb2.AddLibRequest.SerializeToString,
                response_deserializer=message__pb2.AddLibResponse.FromString,
                _registered_method=True)
        self.CreateAnalyticalInstance = channel.unary_unary(
                '/gs.rpc.CoordinatorService/CreateAnalyticalInstance',
                request_serializer=message__pb2.CreateAnalyticalInstanceRequest.SerializeToString,
                response_deserializer=message__pb2.CreateAnalyticalInstanceResponse.FromString,
                _registered_method=True)
        self.CreateInteractiveInstance = channel.unary_unary(
                '/gs.rpc.CoordinatorService/CreateInteractiveInstance',
                request_serializer=message__pb2.CreateInteractiveInstanceRequest.SerializeToString,
                response_deserializer=message__pb2.CreateInteractiveInstanceResponse.FromString,
                _registered_method=True)
        self.CreateLearningInstance = channel.unary_unary(
                '/gs.rpc.CoordinatorService/CreateLearningInstance',
                request_serializer=message__pb2.CreateLearningInstanceRequest.SerializeToString,
                response_deserializer=message__pb2.CreateLearningInstanceResponse.FromString,
                _registered_method=True)
        self.CloseAnalyticalInstance = channel.unary_unary(
                '/gs.rpc.CoordinatorService/CloseAnalyticalInstance',
                request_serializer=message__pb2.CloseAnalyticalInstanceRequest.SerializeToString,
                response_deserializer=message__pb2.CloseAnalyticalInstanceResponse.FromString,
                _registered_method=True)
        self.CloseInteractiveInstance = channel.unary_unary(
                '/gs.rpc.CoordinatorService/CloseInteractiveInstance',
                request_serializer=message__pb2.CloseInteractiveInstanceRequest.SerializeToString,
                response_deserializer=message__pb2.CloseInteractiveInstanceResponse.FromString,
                _registered_method=True)
        self.CloseLearningInstance = channel.unary_unary(
                '/gs.rpc.CoordinatorService/CloseLearningInstance',
                request_serializer=message__pb2.CloseLearningInstanceRequest.SerializeToString,
                response_deserializer=message__pb2.CloseLearningInstanceResponse.FromString,
                _registered_method=True)


class CoordinatorServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ConnectSession(self, request, context):
        """Connect a session.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HeartBeat(self, request, context):
        """Heart Beat between client and coordinator
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RunStep(self, request_iterator, context):
        """Drives the graph computation.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FetchLogs(self, request, context):
        """Fetch analytical engine logs.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CloseSession(self, request, context):
        """Closes a session.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddLib(self, request, context):
        """Distribute the specified library to servers
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateAnalyticalInstance(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateInteractiveInstance(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateLearningInstance(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CloseAnalyticalInstance(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CloseInteractiveInstance(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CloseLearningInstance(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CoordinatorServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ConnectSession': grpc.unary_unary_rpc_method_handler(
                    servicer.ConnectSession,
                    request_deserializer=message__pb2.ConnectSessionRequest.FromString,
                    response_serializer=message__pb2.ConnectSessionResponse.SerializeToString,
            ),
            'HeartBeat': grpc.unary_unary_rpc_method_handler(
                    servicer.HeartBeat,
                    request_deserializer=message__pb2.HeartBeatRequest.FromString,
                    response_serializer=message__pb2.HeartBeatResponse.SerializeToString,
            ),
            'RunStep': grpc.stream_stream_rpc_method_handler(
                    servicer.RunStep,
                    request_deserializer=message__pb2.RunStepRequest.FromString,
                    response_serializer=message__pb2.RunStepResponse.SerializeToString,
            ),
            'FetchLogs': grpc.unary_stream_rpc_method_handler(
                    servicer.FetchLogs,
                    request_deserializer=message__pb2.FetchLogsRequest.FromString,
                    response_serializer=message__pb2.FetchLogsResponse.SerializeToString,
            ),
            'CloseSession': grpc.unary_unary_rpc_method_handler(
                    servicer.CloseSession,
                    request_deserializer=message__pb2.CloseSessionRequest.FromString,
                    response_serializer=message__pb2.CloseSessionResponse.SerializeToString,
            ),
            'AddLib': grpc.unary_unary_rpc_method_handler(
                    servicer.AddLib,
                    request_deserializer=message__pb2.AddLibRequest.FromString,
                    response_serializer=message__pb2.AddLibResponse.SerializeToString,
            ),
            'CreateAnalyticalInstance': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateAnalyticalInstance,
                    request_deserializer=message__pb2.CreateAnalyticalInstanceRequest.FromString,
                    response_serializer=message__pb2.CreateAnalyticalInstanceResponse.SerializeToString,
            ),
            'CreateInteractiveInstance': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateInteractiveInstance,
                    request_deserializer=message__pb2.CreateInteractiveInstanceRequest.FromString,
                    response_serializer=message__pb2.CreateInteractiveInstanceResponse.SerializeToString,
            ),
            'CreateLearningInstance': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateLearningInstance,
                    request_deserializer=message__pb2.CreateLearningInstanceRequest.FromString,
                    response_serializer=message__pb2.CreateLearningInstanceResponse.SerializeToString,
            ),
            'CloseAnalyticalInstance': grpc.unary_unary_rpc_method_handler(
                    servicer.CloseAnalyticalInstance,
                    request_deserializer=message__pb2.CloseAnalyticalInstanceRequest.FromString,
                    response_serializer=message__pb2.CloseAnalyticalInstanceResponse.SerializeToString,
            ),
            'CloseInteractiveInstance': grpc.unary_unary_rpc_method_handler(
                    servicer.CloseInteractiveInstance,
                    request_deserializer=message__pb2.CloseInteractiveInstanceRequest.FromString,
                    response_serializer=message__pb2.CloseInteractiveInstanceResponse.SerializeToString,
            ),
            'CloseLearningInstance': grpc.unary_unary_rpc_method_handler(
                    servicer.CloseLearningInstance,
                    request_deserializer=message__pb2.CloseLearningInstanceRequest.FromString,
                    response_serializer=message__pb2.CloseLearningInstanceResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'gs.rpc.CoordinatorService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('gs.rpc.CoordinatorService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class CoordinatorService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ConnectSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/gs.rpc.CoordinatorService/ConnectSession',
            message__pb2.ConnectSessionRequest.SerializeToString,
            message__pb2.ConnectSessionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def HeartBeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/gs.rpc.CoordinatorService/HeartBeat',
            message__pb2.HeartBeatRequest.SerializeToString,
            message__pb2.HeartBeatResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RunStep(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/gs.rpc.CoordinatorService/RunStep',
            message__pb2.RunStepRequest.SerializeToString,
            message__pb2.RunStepResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FetchLogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/gs.rpc.CoordinatorService/FetchLogs',
            message__pb2.FetchLogsRequest.SerializeToString,
            message__pb2.FetchLogsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CloseSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/gs.rpc.CoordinatorService/CloseSession',
            message__pb2.CloseSessionRequest.SerializeToString,
            message__pb2.CloseSessionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AddLib(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/gs.rpc.CoordinatorService/AddLib',
            message__pb2.AddLibRequest.SerializeToString,
            message__pb2.AddLibResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateAnalyticalInstance(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/gs.rpc.CoordinatorService/CreateAnalyticalInstance',
            message__pb2.CreateAnalyticalInstanceRequest.SerializeToString,
            message__pb2.CreateAnalyticalInstanceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateInteractiveInstance(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/gs.rpc.CoordinatorService/CreateInteractiveInstance',
            message__pb2.CreateInteractiveInstanceRequest.SerializeToString,
            message__pb2.CreateInteractiveInstanceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateLearningInstance(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/gs.rpc.CoordinatorService/CreateLearningInstance',
            message__pb2.CreateLearningInstanceRequest.SerializeToString,
            message__pb2.CreateLearningInstanceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CloseAnalyticalInstance(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/gs.rpc.CoordinatorService/CloseAnalyticalInstance',
            message__pb2.CloseAnalyticalInstanceRequest.SerializeToString,
            message__pb2.CloseAnalyticalInstanceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CloseInteractiveInstance(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/gs.rpc.CoordinatorService/CloseInteractiveInstance',
            message__pb2.CloseInteractiveInstanceRequest.SerializeToString,
            message__pb2.CloseInteractiveInstanceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CloseLearningInstance(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/gs.rpc.CoordinatorService/CloseLearningInstance',
            message__pb2.CloseLearningInstanceRequest.SerializeToString,
            message__pb2.CloseLearningInstanceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
