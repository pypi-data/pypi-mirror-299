"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
*
Copyright 2020 Alibaba Group Holding Limited.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""
import abc
import groot.sdk.client_service_pb2
import groot.sdk.model_pb2
import grpc

class ClientStub:
    def __init__(self, channel: grpc.Channel) -> None: ...
    getSchema: grpc.UnaryUnaryMultiCallable[
        groot.sdk.client_service_pb2.GetSchemaRequest,
        groot.sdk.client_service_pb2.GetSchemaResponse,
    ]
    ingestData: grpc.UnaryUnaryMultiCallable[
        groot.sdk.model_pb2.IngestDataRequest,
        groot.sdk.model_pb2.IngestDataResponse,
    ]
    getMetrics: grpc.UnaryUnaryMultiCallable[
        groot.sdk.client_service_pb2.GetMetricsRequest,
        groot.sdk.client_service_pb2.GetMetricsResponse,
    ]
    loadSchema: grpc.UnaryUnaryMultiCallable[
        groot.sdk.client_service_pb2.LoadSchemaRequest,
        groot.sdk.client_service_pb2.LoadSchemaResponse,
    ]
    dropSchema: grpc.UnaryUnaryMultiCallable[
        groot.sdk.client_service_pb2.DropSchemaRequest,
        groot.sdk.client_service_pb2.DropSchemaResponse,
    ]
    prepareDataLoad: grpc.UnaryUnaryMultiCallable[
        groot.sdk.client_service_pb2.PrepareDataLoadRequest,
        groot.sdk.client_service_pb2.PrepareDataLoadResponse,
    ]
    commitDataLoad: grpc.UnaryUnaryMultiCallable[
        groot.sdk.client_service_pb2.CommitDataLoadRequest,
        groot.sdk.client_service_pb2.CommitDataLoadResponse,
    ]
    getPartitionNum: grpc.UnaryUnaryMultiCallable[
        groot.sdk.client_service_pb2.GetPartitionNumRequest,
        groot.sdk.client_service_pb2.GetPartitionNumResponse,
    ]
    getLoggerInfo: grpc.UnaryUnaryMultiCallable[
        groot.sdk.client_service_pb2.GetLoggerInfoRequest,
        groot.sdk.client_service_pb2.GetLoggerInfoResponse,
    ]
    clearIngest: grpc.UnaryUnaryMultiCallable[
        groot.sdk.model_pb2.ClearIngestRequest,
        groot.sdk.model_pb2.ClearIngestResponse,
    ]
    getStoreState: grpc.UnaryUnaryMultiCallable[
        groot.sdk.model_pb2.GetStoreStateRequest,
        groot.sdk.model_pb2.GetStoreStateResponse,
    ]
    compactDB: grpc.UnaryUnaryMultiCallable[
        groot.sdk.model_pb2.CompactDBRequest,
        groot.sdk.model_pb2.CompactDBResponse,
    ]
    reopenSecondary: grpc.UnaryUnaryMultiCallable[
        groot.sdk.model_pb2.ReopenSecondaryRequest,
        groot.sdk.model_pb2.ReopenSecondaryResponse,
    ]

class ClientServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def getSchema(
        self,
        request: groot.sdk.client_service_pb2.GetSchemaRequest,
        context: grpc.ServicerContext,
    ) -> groot.sdk.client_service_pb2.GetSchemaResponse: ...
    @abc.abstractmethod
    def ingestData(
        self,
        request: groot.sdk.model_pb2.IngestDataRequest,
        context: grpc.ServicerContext,
    ) -> groot.sdk.model_pb2.IngestDataResponse: ...
    @abc.abstractmethod
    def getMetrics(
        self,
        request: groot.sdk.client_service_pb2.GetMetricsRequest,
        context: grpc.ServicerContext,
    ) -> groot.sdk.client_service_pb2.GetMetricsResponse: ...
    @abc.abstractmethod
    def loadSchema(
        self,
        request: groot.sdk.client_service_pb2.LoadSchemaRequest,
        context: grpc.ServicerContext,
    ) -> groot.sdk.client_service_pb2.LoadSchemaResponse: ...
    @abc.abstractmethod
    def dropSchema(
        self,
        request: groot.sdk.client_service_pb2.DropSchemaRequest,
        context: grpc.ServicerContext,
    ) -> groot.sdk.client_service_pb2.DropSchemaResponse: ...
    @abc.abstractmethod
    def prepareDataLoad(
        self,
        request: groot.sdk.client_service_pb2.PrepareDataLoadRequest,
        context: grpc.ServicerContext,
    ) -> groot.sdk.client_service_pb2.PrepareDataLoadResponse: ...
    @abc.abstractmethod
    def commitDataLoad(
        self,
        request: groot.sdk.client_service_pb2.CommitDataLoadRequest,
        context: grpc.ServicerContext,
    ) -> groot.sdk.client_service_pb2.CommitDataLoadResponse: ...
    @abc.abstractmethod
    def getPartitionNum(
        self,
        request: groot.sdk.client_service_pb2.GetPartitionNumRequest,
        context: grpc.ServicerContext,
    ) -> groot.sdk.client_service_pb2.GetPartitionNumResponse: ...
    @abc.abstractmethod
    def getLoggerInfo(
        self,
        request: groot.sdk.client_service_pb2.GetLoggerInfoRequest,
        context: grpc.ServicerContext,
    ) -> groot.sdk.client_service_pb2.GetLoggerInfoResponse: ...
    @abc.abstractmethod
    def clearIngest(
        self,
        request: groot.sdk.model_pb2.ClearIngestRequest,
        context: grpc.ServicerContext,
    ) -> groot.sdk.model_pb2.ClearIngestResponse: ...
    @abc.abstractmethod
    def getStoreState(
        self,
        request: groot.sdk.model_pb2.GetStoreStateRequest,
        context: grpc.ServicerContext,
    ) -> groot.sdk.model_pb2.GetStoreStateResponse: ...
    @abc.abstractmethod
    def compactDB(
        self,
        request: groot.sdk.model_pb2.CompactDBRequest,
        context: grpc.ServicerContext,
    ) -> groot.sdk.model_pb2.CompactDBResponse: ...
    @abc.abstractmethod
    def reopenSecondary(
        self,
        request: groot.sdk.model_pb2.ReopenSecondaryRequest,
        context: grpc.ServicerContext,
    ) -> groot.sdk.model_pb2.ReopenSecondaryResponse: ...

def add_ClientServicer_to_server(servicer: ClientServicer, server: grpc.Server) -> None: ...
