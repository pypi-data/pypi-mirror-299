# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from groot.sdk import client_service_pb2 as groot_dot_sdk_dot_client__service__pb2
from groot.sdk import model_pb2 as groot_dot_sdk_dot_model__pb2


class ClientStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getSchema = channel.unary_unary(
                '/gs.rpc.groot.Client/getSchema',
                request_serializer=groot_dot_sdk_dot_client__service__pb2.GetSchemaRequest.SerializeToString,
                response_deserializer=groot_dot_sdk_dot_client__service__pb2.GetSchemaResponse.FromString,
                )
        self.ingestData = channel.unary_unary(
                '/gs.rpc.groot.Client/ingestData',
                request_serializer=groot_dot_sdk_dot_model__pb2.IngestDataRequest.SerializeToString,
                response_deserializer=groot_dot_sdk_dot_model__pb2.IngestDataResponse.FromString,
                )
        self.getMetrics = channel.unary_unary(
                '/gs.rpc.groot.Client/getMetrics',
                request_serializer=groot_dot_sdk_dot_client__service__pb2.GetMetricsRequest.SerializeToString,
                response_deserializer=groot_dot_sdk_dot_client__service__pb2.GetMetricsResponse.FromString,
                )
        self.loadSchema = channel.unary_unary(
                '/gs.rpc.groot.Client/loadSchema',
                request_serializer=groot_dot_sdk_dot_client__service__pb2.LoadSchemaRequest.SerializeToString,
                response_deserializer=groot_dot_sdk_dot_client__service__pb2.LoadSchemaResponse.FromString,
                )
        self.dropSchema = channel.unary_unary(
                '/gs.rpc.groot.Client/dropSchema',
                request_serializer=groot_dot_sdk_dot_client__service__pb2.DropSchemaRequest.SerializeToString,
                response_deserializer=groot_dot_sdk_dot_client__service__pb2.DropSchemaResponse.FromString,
                )
        self.prepareDataLoad = channel.unary_unary(
                '/gs.rpc.groot.Client/prepareDataLoad',
                request_serializer=groot_dot_sdk_dot_client__service__pb2.PrepareDataLoadRequest.SerializeToString,
                response_deserializer=groot_dot_sdk_dot_client__service__pb2.PrepareDataLoadResponse.FromString,
                )
        self.commitDataLoad = channel.unary_unary(
                '/gs.rpc.groot.Client/commitDataLoad',
                request_serializer=groot_dot_sdk_dot_client__service__pb2.CommitDataLoadRequest.SerializeToString,
                response_deserializer=groot_dot_sdk_dot_client__service__pb2.CommitDataLoadResponse.FromString,
                )
        self.getPartitionNum = channel.unary_unary(
                '/gs.rpc.groot.Client/getPartitionNum',
                request_serializer=groot_dot_sdk_dot_client__service__pb2.GetPartitionNumRequest.SerializeToString,
                response_deserializer=groot_dot_sdk_dot_client__service__pb2.GetPartitionNumResponse.FromString,
                )
        self.getLoggerInfo = channel.unary_unary(
                '/gs.rpc.groot.Client/getLoggerInfo',
                request_serializer=groot_dot_sdk_dot_client__service__pb2.GetLoggerInfoRequest.SerializeToString,
                response_deserializer=groot_dot_sdk_dot_client__service__pb2.GetLoggerInfoResponse.FromString,
                )
        self.clearIngest = channel.unary_unary(
                '/gs.rpc.groot.Client/clearIngest',
                request_serializer=groot_dot_sdk_dot_model__pb2.ClearIngestRequest.SerializeToString,
                response_deserializer=groot_dot_sdk_dot_model__pb2.ClearIngestResponse.FromString,
                )
        self.getStoreState = channel.unary_unary(
                '/gs.rpc.groot.Client/getStoreState',
                request_serializer=groot_dot_sdk_dot_model__pb2.GetStoreStateRequest.SerializeToString,
                response_deserializer=groot_dot_sdk_dot_model__pb2.GetStoreStateResponse.FromString,
                )
        self.compactDB = channel.unary_unary(
                '/gs.rpc.groot.Client/compactDB',
                request_serializer=groot_dot_sdk_dot_model__pb2.CompactDBRequest.SerializeToString,
                response_deserializer=groot_dot_sdk_dot_model__pb2.CompactDBResponse.FromString,
                )
        self.reopenSecondary = channel.unary_unary(
                '/gs.rpc.groot.Client/reopenSecondary',
                request_serializer=groot_dot_sdk_dot_model__pb2.ReopenSecondaryRequest.SerializeToString,
                response_deserializer=groot_dot_sdk_dot_model__pb2.ReopenSecondaryResponse.FromString,
                )


class ClientServicer(object):
    """Missing associated documentation comment in .proto file."""

    def getSchema(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ingestData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getMetrics(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def loadSchema(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def dropSchema(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def prepareDataLoad(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def commitDataLoad(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getPartitionNum(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getLoggerInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def clearIngest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getStoreState(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def compactDB(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def reopenSecondary(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ClientServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getSchema': grpc.unary_unary_rpc_method_handler(
                    servicer.getSchema,
                    request_deserializer=groot_dot_sdk_dot_client__service__pb2.GetSchemaRequest.FromString,
                    response_serializer=groot_dot_sdk_dot_client__service__pb2.GetSchemaResponse.SerializeToString,
            ),
            'ingestData': grpc.unary_unary_rpc_method_handler(
                    servicer.ingestData,
                    request_deserializer=groot_dot_sdk_dot_model__pb2.IngestDataRequest.FromString,
                    response_serializer=groot_dot_sdk_dot_model__pb2.IngestDataResponse.SerializeToString,
            ),
            'getMetrics': grpc.unary_unary_rpc_method_handler(
                    servicer.getMetrics,
                    request_deserializer=groot_dot_sdk_dot_client__service__pb2.GetMetricsRequest.FromString,
                    response_serializer=groot_dot_sdk_dot_client__service__pb2.GetMetricsResponse.SerializeToString,
            ),
            'loadSchema': grpc.unary_unary_rpc_method_handler(
                    servicer.loadSchema,
                    request_deserializer=groot_dot_sdk_dot_client__service__pb2.LoadSchemaRequest.FromString,
                    response_serializer=groot_dot_sdk_dot_client__service__pb2.LoadSchemaResponse.SerializeToString,
            ),
            'dropSchema': grpc.unary_unary_rpc_method_handler(
                    servicer.dropSchema,
                    request_deserializer=groot_dot_sdk_dot_client__service__pb2.DropSchemaRequest.FromString,
                    response_serializer=groot_dot_sdk_dot_client__service__pb2.DropSchemaResponse.SerializeToString,
            ),
            'prepareDataLoad': grpc.unary_unary_rpc_method_handler(
                    servicer.prepareDataLoad,
                    request_deserializer=groot_dot_sdk_dot_client__service__pb2.PrepareDataLoadRequest.FromString,
                    response_serializer=groot_dot_sdk_dot_client__service__pb2.PrepareDataLoadResponse.SerializeToString,
            ),
            'commitDataLoad': grpc.unary_unary_rpc_method_handler(
                    servicer.commitDataLoad,
                    request_deserializer=groot_dot_sdk_dot_client__service__pb2.CommitDataLoadRequest.FromString,
                    response_serializer=groot_dot_sdk_dot_client__service__pb2.CommitDataLoadResponse.SerializeToString,
            ),
            'getPartitionNum': grpc.unary_unary_rpc_method_handler(
                    servicer.getPartitionNum,
                    request_deserializer=groot_dot_sdk_dot_client__service__pb2.GetPartitionNumRequest.FromString,
                    response_serializer=groot_dot_sdk_dot_client__service__pb2.GetPartitionNumResponse.SerializeToString,
            ),
            'getLoggerInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.getLoggerInfo,
                    request_deserializer=groot_dot_sdk_dot_client__service__pb2.GetLoggerInfoRequest.FromString,
                    response_serializer=groot_dot_sdk_dot_client__service__pb2.GetLoggerInfoResponse.SerializeToString,
            ),
            'clearIngest': grpc.unary_unary_rpc_method_handler(
                    servicer.clearIngest,
                    request_deserializer=groot_dot_sdk_dot_model__pb2.ClearIngestRequest.FromString,
                    response_serializer=groot_dot_sdk_dot_model__pb2.ClearIngestResponse.SerializeToString,
            ),
            'getStoreState': grpc.unary_unary_rpc_method_handler(
                    servicer.getStoreState,
                    request_deserializer=groot_dot_sdk_dot_model__pb2.GetStoreStateRequest.FromString,
                    response_serializer=groot_dot_sdk_dot_model__pb2.GetStoreStateResponse.SerializeToString,
            ),
            'compactDB': grpc.unary_unary_rpc_method_handler(
                    servicer.compactDB,
                    request_deserializer=groot_dot_sdk_dot_model__pb2.CompactDBRequest.FromString,
                    response_serializer=groot_dot_sdk_dot_model__pb2.CompactDBResponse.SerializeToString,
            ),
            'reopenSecondary': grpc.unary_unary_rpc_method_handler(
                    servicer.reopenSecondary,
                    request_deserializer=groot_dot_sdk_dot_model__pb2.ReopenSecondaryRequest.FromString,
                    response_serializer=groot_dot_sdk_dot_model__pb2.ReopenSecondaryResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'gs.rpc.groot.Client', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Client(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def getSchema(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gs.rpc.groot.Client/getSchema',
            groot_dot_sdk_dot_client__service__pb2.GetSchemaRequest.SerializeToString,
            groot_dot_sdk_dot_client__service__pb2.GetSchemaResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ingestData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gs.rpc.groot.Client/ingestData',
            groot_dot_sdk_dot_model__pb2.IngestDataRequest.SerializeToString,
            groot_dot_sdk_dot_model__pb2.IngestDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getMetrics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gs.rpc.groot.Client/getMetrics',
            groot_dot_sdk_dot_client__service__pb2.GetMetricsRequest.SerializeToString,
            groot_dot_sdk_dot_client__service__pb2.GetMetricsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def loadSchema(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gs.rpc.groot.Client/loadSchema',
            groot_dot_sdk_dot_client__service__pb2.LoadSchemaRequest.SerializeToString,
            groot_dot_sdk_dot_client__service__pb2.LoadSchemaResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def dropSchema(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gs.rpc.groot.Client/dropSchema',
            groot_dot_sdk_dot_client__service__pb2.DropSchemaRequest.SerializeToString,
            groot_dot_sdk_dot_client__service__pb2.DropSchemaResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def prepareDataLoad(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gs.rpc.groot.Client/prepareDataLoad',
            groot_dot_sdk_dot_client__service__pb2.PrepareDataLoadRequest.SerializeToString,
            groot_dot_sdk_dot_client__service__pb2.PrepareDataLoadResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def commitDataLoad(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gs.rpc.groot.Client/commitDataLoad',
            groot_dot_sdk_dot_client__service__pb2.CommitDataLoadRequest.SerializeToString,
            groot_dot_sdk_dot_client__service__pb2.CommitDataLoadResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getPartitionNum(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gs.rpc.groot.Client/getPartitionNum',
            groot_dot_sdk_dot_client__service__pb2.GetPartitionNumRequest.SerializeToString,
            groot_dot_sdk_dot_client__service__pb2.GetPartitionNumResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getLoggerInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gs.rpc.groot.Client/getLoggerInfo',
            groot_dot_sdk_dot_client__service__pb2.GetLoggerInfoRequest.SerializeToString,
            groot_dot_sdk_dot_client__service__pb2.GetLoggerInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def clearIngest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gs.rpc.groot.Client/clearIngest',
            groot_dot_sdk_dot_model__pb2.ClearIngestRequest.SerializeToString,
            groot_dot_sdk_dot_model__pb2.ClearIngestResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getStoreState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gs.rpc.groot.Client/getStoreState',
            groot_dot_sdk_dot_model__pb2.GetStoreStateRequest.SerializeToString,
            groot_dot_sdk_dot_model__pb2.GetStoreStateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def compactDB(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gs.rpc.groot.Client/compactDB',
            groot_dot_sdk_dot_model__pb2.CompactDBRequest.SerializeToString,
            groot_dot_sdk_dot_model__pb2.CompactDBResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def reopenSecondary(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gs.rpc.groot.Client/reopenSecondary',
            groot_dot_sdk_dot_model__pb2.ReopenSecondaryRequest.SerializeToString,
            groot_dot_sdk_dot_model__pb2.ReopenSecondaryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
