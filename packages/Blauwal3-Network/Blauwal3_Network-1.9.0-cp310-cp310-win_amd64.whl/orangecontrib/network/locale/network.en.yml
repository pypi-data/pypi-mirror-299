en:
  package_label: "Network"
  package_desc: "Network visualization and analysis tools for Orange."

  common:
    network: "Network"
    items: "Items"
    distance: "Distances"
    data: "Data"
    node_data: "Node Data"
    node_subset: "Node Subset"
    node_distance: "Node Distances"
    select_sub-network: "Selected sub-network"
    remain_sub-network: "Remaining sub-network"
    distance_matrix: "Distance matrix"

  twomode:
    weight:
      no_weights: "No weights"
      connections: "Number of connections"
      weighted_connection: "Weighted number of connections"
      geo: "Geometric normalization"
      geodeg: "Geometric normalization by degrees"
      input: "Normalization by sum of input weights"
      output: "Normalization by sum of output weights"
      min: "Normalization by minimal sum of weights"
      max: "Normalization by maximal sum of weights"

  OWNxAnalysis:
    name: "Network Analysis"
    desc: "Statistical analysis of network data."
    msg_compute: "Computing {}"
    status:
      pend: "pending"
      run: "running"
      terminate: "terminated"
    box:
      graph-level_index: "Graph-level indices"
      node-level_index: "Node-level indices"
    btn:
      degree: "Degree"
      in_degree: "In-degree"
      out_degree: "Out-degree"
      number_node: "Number of nodes"
      shortest_paths: "Shortest paths"
      number_edge: "Number of edges"
      average_degree: "Average degree"
      density: "Density"
      diameter: "Diameter"
      average_shortest_path_length: "Average shortest path length"
      radius: "Radius"
      number_strongly_connect_component: "Number of strongly connected components"
      number_weakly_connect_component: "Number of weakly connected components"
      average_neighbor_degree: "Average neighbor degree"
      degree_centrality: "Degree centrality"
      in_degree_centrality: "In-degree centrality"
      out_degree_centrality: "Out-degree centrality"
      closeness_centrality: "Closeness centrality"

  OWNxClustering:
    name: "Network Clustering"
    desc: "BlueWhale widget for community detection in networks."
    box:
      label_pro: "Label Propagation"
    label:
      max_iter: "Max. iterations: "
      apply: "Apply hop attenuation: "
      replicable: "Replicable clustering"

  OWNxEmbeddings:
    name: "Network Embeddings"
    desc: "Embed network elements"
    btn_commit: "Commit"
    btn_auto_commit: "Auto-commit"
    label:
      p: "Return parameter (p): "
      q: "In-out parameter (q): "
      walk_len: "Walk length: "
      num_walks: "Walks per node: "
      emb_size: "Embedding size: "
      window_size: "Context size: "
      num_epochs: "Number of epochs: "

  OWNxExplorer:
    name: "Network Explorer"
    desc: "Visually explore the network and its properties."
    node_detail: "Nodes: %(number_of_nodes)i (%(nodes_per_edge).2f per edge); %(nSelected)i selected"
    edge_detail: "Edges: %(number_of_edges)i (%(edges_per_node).2f per node)"
    label_text: "Text: "
    label_gravity: "Gravity"
    label_gravity_tip: "Lower values improve optimization,\n higher work better for graph with many small components"
    label_observe_weights: "Make edges with large weights shorter"
    number_hops: "Number of hops:"
    max_connection: "Max. connections:"
    min_connection: "Min. connections:"
    box_layout: "Layout"
    box_size: "Widths and Sizes"
    mark_number: "Number of marked:"
    gbox:
      mark_criteria: "(Select criteria for marking)"
      mark_node_labelled_as: "Mark node labelled as"
      mark_label_starts: "Mark nodes whose label starts with"
      mark_label_contains: "Mark nodes whose label contains"
      mark_text: "Mark nodes whose label contains"
      mark_reachable: "Mark nodes reachable from selected"
      mark_close: "Mark nodes in vicinity of selection"
      mark_from_input: "Mark nodes from subset signal"
      mark_connection: "Mark nodes with few connections"
      mark_min_conn: "Mark nodes with many connections"
      mark_most_connections: "Mark nodes with most connections"
      mark_more_than_any_neighbour: "Mark nodes with more connections than any neighbour"
      mark_more_than_average_neighbour: "Mark nodes with more connections than average neighbour"
    checkbox:
      random_position: "Randomize positions"
      relative_edges: "Scale edge widths to weights"
      select_edges: "Label only edges of selected nodes"
      show_weights: "Show edge weights"
    row:
      node_size: "Node Size:"
      edge_width: "Edge width:"
    msg:
      connect_component: "Double clicks select connected components"
      distance_matrix_mismatch: "Distance matrix size doesn't match the number of network nodes and will be ignored."
      no_graph_found: "Node data is given, graph data is missing."
      data_size_mismatch: "Length of the data does not match the number of nodes."
      network_too_large: "Network is too large to visualize."
      single_node_graph: "I don't do single-node graphs today."
      add_select: "Add to Selection"
      add_group: "Add to Group"
    btn:
      send_selection: "Send Selection"
      send_automatically: "Send Automatically"
      re_layout: "Re-layout"
      re_layout_tip: "Restart laying out from random positions"
      improve: "Improve"
      improve_tip: "Optimize the current layout, with a small initial jerk"
      stop: "Stop"
      select: "Select"
      select_add_marked: "Add to Selection"
      select_as_group: "Add New Group"

  OWNxFile:
    name: "Network File"
    desc: "Read network graph file"
    btn_reload: "Reload"
    dialog_open_file: "Open a Network File"
    browse_documentation_network: "Browse documentation networks..."
    placeholder_match: "(Match by rows)"
    none: "(None)"
    label_variable: "Match node labels to data column: "
    msg:
      node_annotated_data_name: "Nodes annotated with data from file with the same name"
      add_optional_data: "Add optional data input to annotate nodes"
      data_size_not_match_node: "Data size does not match the number of nodes.\n Select a data column whose values can be matched with network labels"
      read_file_io_err: "Error reading file '{}'\n{}"
      read_file_parse_err: "Error reading file '{}'"
      read_file_data_err: "Attempt to read {} failed\n The widget tried to annotated nodes with data from\n a file with the same name."

  OWNxFromDistances:
    name: "Network From Distances"
    desc: "Constructs Graph object by connecting nodes from data table where distance between them is between given threshold."
    text:
      no_data_load: "No data loaded."
      input_data_item: "Data items on input: "
      network_nodes: "Network nodes: "
      network_edges: "Network edges: "
    box:
      info: "Info"
      edges: "Edges"
      node_selection: "Node selection"
      keep_all_nodes: "Keep all nodes"
      edge_weights: "Edge weights"
    label:
      no_data: "No data loaded."
      distance_threshold: "Distance threshold"
      percentile: "Percentile"
      include_closest_neighbors: "Include closest neighbors"
    msg:
      knn_large_than_supply_distance: "kNN is larger than supplied distance matrix dimension.Using k = {}"
      performance_hinder: "Large number of nodes/edges; performance will be hindered"
      number_data_items_nodes: "Number of data items does not match the number of nodes"
      edges_high: "Estimated number of edges is too high ({})"
      too_large_network: "The network is too large ({})"
    row:
      component_contain_nodes: "Components with at least nodes"
      largest_connect_component: "Largest connected component"
      proportional_distance: "Proportional to distance"
      inverted_distance: "Inverted distance"
    report:
      setting: "Settings"
      edge_thresholds: "Edge thresholds"
      selected_vertices: "Selected vertices"
      weight: "Weight"
      histogram: "Histogram"
      output_graph: "Output graph"
      vertex: "Vertices"
      edges: "Edges"
      connect_vertex: "Connected vertices"

  OWNxNeighbor:
    name: "Network of Neighbors"
    desc: "Constructs a network by connecting nearest neighbors."
    num_of_nb: "Number of neighbors:"
    directed_edges: "Directed edges"


  OWNxGenerator:
    name: "Network Generator"
    desc: "Construct example graphs."
    regenerate_network: "Regenerate Network"
    with: "with"
    nodes: "nodes"
    Path: "Path"
    Cycle: "Cycle"
    Complete: "Complete"
    Complete bipartite: "Complete bipartite"
    Barbell: "Barbell"
    Ladder: "Ladder"
    Circular ladder: "Circular ladder"
    Grid: "Grid"
    Hypercube: "Hypercube"
    Star: "Star"
    Lollipop: "Lollipop"
    Geometric: "Geometric"
    box:
      graph_type: "Graph type"
    defaults:
      nodes: "nodes, "
      edges: "edges"
      steps: "steps"
      and: "and"
      path_len: "of length"
      grid_height: ", height"
      grid_width: "and width"
      dimensional: "dimensional"
      nodes_stem: "nodes, stem of"

  OWNxGroups:
    name: "Network Of Groups"
    desc: "Group instances by feature and connect related groups."
    checkbox_normalize_geometric_mean : "Normalize by geometric mean"
    text:
      input_no_data: "Input: no data"
      input_data: "Input: {} nodes, {} edges"
      output_no_data: "Output: no data"
      output_data: "Output: {} nodes, {} edges"
    box:
      info: "Info"
      group_by: "Group by"
      output_weights: "Output weights"
    msg:
      network_miss_data: "Data is given, network is missing."
      miss_discrete_feature: "Data has no discrete features."
      data_length_nodes_not_match: "Length of the data does not match the number of nodes."
    label:
      no_weight: "No weights"
      number_connections: "Number of connections"
      sum_connection_weights: "Sum of connection weights"
    report:
      input_network: "Input network"
      number_vertices: "Number of vertices"
      number_edges: "Number of edges"
      input_data: "Input data"
      settings: "Settings"
      group_by: "Group by"
      weights: "Weights"
      output_network: "Output network"

  OWNxSave:
    name: "Save Network"
    desc: "Save network to an output file."
    msg_save_error: "Can't save network with multiple edge types"
    placeholder_none: "(None)"
    node_label: "Node label: "
    node_label_tip: "Choose the variables that will be used as a label"
    report:
      node_label: "Node labels"
      file_name: "File name"
      not_set: "not set"

  ownxsinglemode:
    name: "Single Mode"
    desc: "Convert multimodal graphs to single modal"
    msg:
      network_additional_data: "Network has additional data."
      no_categorical_feature: "Data has no categorical features."
      modes_value_not_same: "Values for modes cannot be the same."
    row:
      feature: "Feature:"
      connect: "Connect:"
      by: "by:"
    text:
      no_network_output: "No network on output"
      node_edge: "{} nodes, {} edges"
    box:
      mode_indicator: "Mode indicator"
      edge_weights: "Edge weights"
      output: "Output"
    report:
      input_network: "Input network"
      edge_weights: "{} nodes, {} edges"
      mode: "Mode"
      weighting: "Weighting"
      output_network: "Output network"