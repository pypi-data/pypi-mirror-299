

# This file was autogenerated by some hot garbage in the `uniffi` crate.
# Trust me, you don't want to mess with it!

# Common helper code.
#
# Ideally this would live in a separate .py file where it can be unittested etc
# in isolation, and perhaps even published as a re-useable package.
#
# However, it's important that the details of how this helper code works (e.g. the
# way that different builtin types are passed across the FFI) exactly match what's
# expected by the rust code on the other side of the interface. In practice right
# now that means coming from the exact some version of `uniffi` that was used to
# compile the rust component. The easiest way to ensure this is to bundle the Python
# helpers directly inline like we're doing here.

from __future__ import annotations
import os
import sys
import ctypes
import enum
import struct
import contextlib
import datetime
import threading
import itertools
import traceback
import typing
import asyncio
import platform
from .nostr_ffi import ClientMessage
from .nostr_ffi import Coordinate
from .nostr_ffi import Event
from .nostr_ffi import EventBuilder
from .nostr_ffi import EventId
from .nostr_ffi import FileMetadata
from .nostr_ffi import Filter
from .nostr_ffi import GetInfoResponseResult
from .nostr_ffi import Keys
from .nostr_ffi import Kind
from .nostr_ffi import ListTransactionsRequestParams
from .nostr_ffi import LookupInvoiceRequestParams
from .nostr_ffi import LookupInvoiceResponseResult
from .nostr_ffi import MakeInvoiceRequestParams
from .nostr_ffi import MakeInvoiceResponseResult
from .nostr_ffi import Metadata
from .nostr_ffi import Nip46Request
from .nostr_ffi import NostrConnectUri
from .nostr_ffi import NostrWalletConnectUri
from .nostr_ffi import PayKeysendRequestParams
from .nostr_ffi import PayKeysendResponseResult
from .nostr_ffi import PublicKey
from .nostr_ffi import RelayInformationDocument
from .nostr_ffi import RelayMessage
from .nostr_ffi import SecretKey
from .nostr_ffi import Timestamp
from .nostr_ffi import UnsignedEvent
from .nostr_ffi import UnwrappedGift
from .nostr_ffi import ZapType
from .nostr_ffi import _UniffiConverterTypeClientMessage
from .nostr_ffi import _UniffiConverterTypeCoordinate
from .nostr_ffi import _UniffiConverterTypeEvent
from .nostr_ffi import _UniffiConverterTypeEventBuilder
from .nostr_ffi import _UniffiConverterTypeEventId
from .nostr_ffi import _UniffiConverterTypeFileMetadata
from .nostr_ffi import _UniffiConverterTypeFilter
from .nostr_ffi import _UniffiConverterTypeGetInfoResponseResult
from .nostr_ffi import _UniffiConverterTypeKeys
from .nostr_ffi import _UniffiConverterTypeKind
from .nostr_ffi import _UniffiConverterTypeListTransactionsRequestParams
from .nostr_ffi import _UniffiConverterTypeLookupInvoiceRequestParams
from .nostr_ffi import _UniffiConverterTypeLookupInvoiceResponseResult
from .nostr_ffi import _UniffiConverterTypeMakeInvoiceRequestParams
from .nostr_ffi import _UniffiConverterTypeMakeInvoiceResponseResult
from .nostr_ffi import _UniffiConverterTypeMetadata
from .nostr_ffi import _UniffiConverterTypeNip46Request
from .nostr_ffi import _UniffiConverterTypeNostrConnectURI
from .nostr_ffi import _UniffiConverterTypeNostrWalletConnectURI
from .nostr_ffi import _UniffiConverterTypePayKeysendRequestParams
from .nostr_ffi import _UniffiConverterTypePayKeysendResponseResult
from .nostr_ffi import _UniffiConverterTypePublicKey
from .nostr_ffi import _UniffiConverterTypeRelayInformationDocument
from .nostr_ffi import _UniffiConverterTypeRelayMessage
from .nostr_ffi import _UniffiConverterTypeSecretKey
from .nostr_ffi import _UniffiConverterTypeTimestamp
from .nostr_ffi import _UniffiConverterTypeUnsignedEvent
from .nostr_ffi import _UniffiConverterTypeUnwrappedGift
from .nostr_ffi import _UniffiConverterTypeZapType
from .nostr_ffi import _UniffiRustBuffer as _UniffiRustBufferClientMessage
from .nostr_ffi import _UniffiRustBuffer as _UniffiRustBufferCoordinate
from .nostr_ffi import _UniffiRustBuffer as _UniffiRustBufferEvent
from .nostr_ffi import _UniffiRustBuffer as _UniffiRustBufferEventBuilder
from .nostr_ffi import _UniffiRustBuffer as _UniffiRustBufferEventId
from .nostr_ffi import _UniffiRustBuffer as _UniffiRustBufferFileMetadata
from .nostr_ffi import _UniffiRustBuffer as _UniffiRustBufferFilter
from .nostr_ffi import _UniffiRustBuffer as _UniffiRustBufferGetInfoResponseResult
from .nostr_ffi import _UniffiRustBuffer as _UniffiRustBufferKeys
from .nostr_ffi import _UniffiRustBuffer as _UniffiRustBufferKind
from .nostr_ffi import _UniffiRustBuffer as _UniffiRustBufferListTransactionsRequestParams
from .nostr_ffi import _UniffiRustBuffer as _UniffiRustBufferLookupInvoiceRequestParams
from .nostr_ffi import _UniffiRustBuffer as _UniffiRustBufferLookupInvoiceResponseResult
from .nostr_ffi import _UniffiRustBuffer as _UniffiRustBufferMakeInvoiceRequestParams
from .nostr_ffi import _UniffiRustBuffer as _UniffiRustBufferMakeInvoiceResponseResult
from .nostr_ffi import _UniffiRustBuffer as _UniffiRustBufferMetadata
from .nostr_ffi import _UniffiRustBuffer as _UniffiRustBufferNip46Request
from .nostr_ffi import _UniffiRustBuffer as _UniffiRustBufferNostrConnectURI
from .nostr_ffi import _UniffiRustBuffer as _UniffiRustBufferNostrWalletConnectURI
from .nostr_ffi import _UniffiRustBuffer as _UniffiRustBufferPayKeysendRequestParams
from .nostr_ffi import _UniffiRustBuffer as _UniffiRustBufferPayKeysendResponseResult
from .nostr_ffi import _UniffiRustBuffer as _UniffiRustBufferPublicKey
from .nostr_ffi import _UniffiRustBuffer as _UniffiRustBufferRelayInformationDocument
from .nostr_ffi import _UniffiRustBuffer as _UniffiRustBufferRelayMessage
from .nostr_ffi import _UniffiRustBuffer as _UniffiRustBufferSecretKey
from .nostr_ffi import _UniffiRustBuffer as _UniffiRustBufferTimestamp
from .nostr_ffi import _UniffiRustBuffer as _UniffiRustBufferUnsignedEvent
from .nostr_ffi import _UniffiRustBuffer as _UniffiRustBufferUnwrappedGift
from .nostr_ffi import _UniffiRustBuffer as _UniffiRustBufferZapType

# Used for default argument values
_DEFAULT = object() # type: typing.Any


class _UniffiRustBuffer(ctypes.Structure):
    _fields_ = [
        ("capacity", ctypes.c_uint64),
        ("len", ctypes.c_uint64),
        ("data", ctypes.POINTER(ctypes.c_char)),
    ]

    @staticmethod
    def default():
        return _UniffiRustBuffer(0, 0, None)

    @staticmethod
    def alloc(size):
        return _uniffi_rust_call(_UniffiLib.ffi_nostr_sdk_ffi_rustbuffer_alloc, size)

    @staticmethod
    def reserve(rbuf, additional):
        return _uniffi_rust_call(_UniffiLib.ffi_nostr_sdk_ffi_rustbuffer_reserve, rbuf, additional)

    def free(self):
        return _uniffi_rust_call(_UniffiLib.ffi_nostr_sdk_ffi_rustbuffer_free, self)

    def __str__(self):
        return "_UniffiRustBuffer(capacity={}, len={}, data={})".format(
            self.capacity,
            self.len,
            self.data[0:self.len]
        )

    @contextlib.contextmanager
    def alloc_with_builder(*args):
        """Context-manger to allocate a buffer using a _UniffiRustBufferBuilder.

        The allocated buffer will be automatically freed if an error occurs, ensuring that
        we don't accidentally leak it.
        """
        builder = _UniffiRustBufferBuilder()
        try:
            yield builder
        except:
            builder.discard()
            raise

    @contextlib.contextmanager
    def consume_with_stream(self):
        """Context-manager to consume a buffer using a _UniffiRustBufferStream.

        The _UniffiRustBuffer will be freed once the context-manager exits, ensuring that we don't
        leak it even if an error occurs.
        """
        try:
            s = _UniffiRustBufferStream.from_rust_buffer(self)
            yield s
            if s.remaining() != 0:
                raise RuntimeError("junk data left in buffer at end of consume_with_stream")
        finally:
            self.free()

    @contextlib.contextmanager
    def read_with_stream(self):
        """Context-manager to read a buffer using a _UniffiRustBufferStream.

        This is like consume_with_stream, but doesn't free the buffer afterwards.
        It should only be used with borrowed `_UniffiRustBuffer` data.
        """
        s = _UniffiRustBufferStream.from_rust_buffer(self)
        yield s
        if s.remaining() != 0:
            raise RuntimeError("junk data left in buffer at end of read_with_stream")

class _UniffiForeignBytes(ctypes.Structure):
    _fields_ = [
        ("len", ctypes.c_int32),
        ("data", ctypes.POINTER(ctypes.c_char)),
    ]

    def __str__(self):
        return "_UniffiForeignBytes(len={}, data={})".format(self.len, self.data[0:self.len])


class _UniffiRustBufferStream:
    """
    Helper for structured reading of bytes from a _UniffiRustBuffer
    """

    def __init__(self, data, len):
        self.data = data
        self.len = len
        self.offset = 0

    @classmethod
    def from_rust_buffer(cls, buf):
        return cls(buf.data, buf.len)

    def remaining(self):
        return self.len - self.offset

    def _unpack_from(self, size, format):
        if self.offset + size > self.len:
            raise InternalError("read past end of rust buffer")
        value = struct.unpack(format, self.data[self.offset:self.offset+size])[0]
        self.offset += size
        return value

    def read(self, size):
        if self.offset + size > self.len:
            raise InternalError("read past end of rust buffer")
        data = self.data[self.offset:self.offset+size]
        self.offset += size
        return data

    def read_i8(self):
        return self._unpack_from(1, ">b")

    def read_u8(self):
        return self._unpack_from(1, ">B")

    def read_i16(self):
        return self._unpack_from(2, ">h")

    def read_u16(self):
        return self._unpack_from(2, ">H")

    def read_i32(self):
        return self._unpack_from(4, ">i")

    def read_u32(self):
        return self._unpack_from(4, ">I")

    def read_i64(self):
        return self._unpack_from(8, ">q")

    def read_u64(self):
        return self._unpack_from(8, ">Q")

    def read_float(self):
        v = self._unpack_from(4, ">f")
        return v

    def read_double(self):
        return self._unpack_from(8, ">d")

class _UniffiRustBufferBuilder:
    """
    Helper for structured writing of bytes into a _UniffiRustBuffer.
    """

    def __init__(self):
        self.rbuf = _UniffiRustBuffer.alloc(16)
        self.rbuf.len = 0

    def finalize(self):
        rbuf = self.rbuf
        self.rbuf = None
        return rbuf

    def discard(self):
        if self.rbuf is not None:
            rbuf = self.finalize()
            rbuf.free()

    @contextlib.contextmanager
    def _reserve(self, num_bytes):
        if self.rbuf.len + num_bytes > self.rbuf.capacity:
            self.rbuf = _UniffiRustBuffer.reserve(self.rbuf, num_bytes)
        yield None
        self.rbuf.len += num_bytes

    def _pack_into(self, size, format, value):
        with self._reserve(size):
            # XXX TODO: I feel like I should be able to use `struct.pack_into` here but can't figure it out.
            for i, byte in enumerate(struct.pack(format, value)):
                self.rbuf.data[self.rbuf.len + i] = byte

    def write(self, value):
        with self._reserve(len(value)):
            for i, byte in enumerate(value):
                self.rbuf.data[self.rbuf.len + i] = byte

    def write_i8(self, v):
        self._pack_into(1, ">b", v)

    def write_u8(self, v):
        self._pack_into(1, ">B", v)

    def write_i16(self, v):
        self._pack_into(2, ">h", v)

    def write_u16(self, v):
        self._pack_into(2, ">H", v)

    def write_i32(self, v):
        self._pack_into(4, ">i", v)

    def write_u32(self, v):
        self._pack_into(4, ">I", v)

    def write_i64(self, v):
        self._pack_into(8, ">q", v)

    def write_u64(self, v):
        self._pack_into(8, ">Q", v)

    def write_float(self, v):
        self._pack_into(4, ">f", v)

    def write_double(self, v):
        self._pack_into(8, ">d", v)

    def write_c_size_t(self, v):
        self._pack_into(ctypes.sizeof(ctypes.c_size_t) , "@N", v)
# A handful of classes and functions to support the generated data structures.
# This would be a good candidate for isolating in its own ffi-support lib.

class InternalError(Exception):
    pass

class _UniffiRustCallStatus(ctypes.Structure):
    """
    Error runtime.
    """
    _fields_ = [
        ("code", ctypes.c_int8),
        ("error_buf", _UniffiRustBuffer),
    ]

    # These match the values from the uniffi::rustcalls module
    CALL_SUCCESS = 0
    CALL_ERROR = 1
    CALL_UNEXPECTED_ERROR = 2

    @staticmethod
    def default():
        return _UniffiRustCallStatus(code=_UniffiRustCallStatus.CALL_SUCCESS, error_buf=_UniffiRustBuffer.default())

    def __str__(self):
        if self.code == _UniffiRustCallStatus.CALL_SUCCESS:
            return "_UniffiRustCallStatus(CALL_SUCCESS)"
        elif self.code == _UniffiRustCallStatus.CALL_ERROR:
            return "_UniffiRustCallStatus(CALL_ERROR)"
        elif self.code == _UniffiRustCallStatus.CALL_UNEXPECTED_ERROR:
            return "_UniffiRustCallStatus(CALL_UNEXPECTED_ERROR)"
        else:
            return "_UniffiRustCallStatus(<invalid code>)"

def _uniffi_rust_call(fn, *args):
    # Call a rust function
    return _uniffi_rust_call_with_error(None, fn, *args)

def _uniffi_rust_call_with_error(error_ffi_converter, fn, *args):
    # Call a rust function and handle any errors
    #
    # This function is used for rust calls that return Result<> and therefore can set the CALL_ERROR status code.
    # error_ffi_converter must be set to the _UniffiConverter for the error class that corresponds to the result.
    call_status = _UniffiRustCallStatus.default()

    args_with_error = args + (ctypes.byref(call_status),)
    result = fn(*args_with_error)
    _uniffi_check_call_status(error_ffi_converter, call_status)
    return result

def _uniffi_check_call_status(error_ffi_converter, call_status):
    if call_status.code == _UniffiRustCallStatus.CALL_SUCCESS:
        pass
    elif call_status.code == _UniffiRustCallStatus.CALL_ERROR:
        if error_ffi_converter is None:
            call_status.error_buf.free()
            raise InternalError("_uniffi_rust_call_with_error: CALL_ERROR, but error_ffi_converter is None")
        else:
            raise error_ffi_converter.lift(call_status.error_buf)
    elif call_status.code == _UniffiRustCallStatus.CALL_UNEXPECTED_ERROR:
        # When the rust code sees a panic, it tries to construct a _UniffiRustBuffer
        # with the message.  But if that code panics, then it just sends back
        # an empty buffer.
        if call_status.error_buf.len > 0:
            msg = _UniffiConverterString.lift(call_status.error_buf)
        else:
            msg = "Unknown rust panic"
        raise InternalError(msg)
    else:
        raise InternalError("Invalid _UniffiRustCallStatus code: {}".format(
            call_status.code))

def _uniffi_trait_interface_call(call_status, make_call, write_return_value):
    try:
        return write_return_value(make_call())
    except Exception as e:
        call_status.code = _UniffiRustCallStatus.CALL_UNEXPECTED_ERROR
        call_status.error_buf = _UniffiConverterString.lower(repr(e))

def _uniffi_trait_interface_call_with_error(call_status, make_call, write_return_value, error_type, lower_error):
    try:
        try:
            return write_return_value(make_call())
        except error_type as e:
            call_status.code = _UniffiRustCallStatus.CALL_ERROR
            call_status.error_buf = lower_error(e)
    except Exception as e:
        call_status.code = _UniffiRustCallStatus.CALL_UNEXPECTED_ERROR
        call_status.error_buf = _UniffiConverterString.lower(repr(e))
class _UniffiHandleMap:
    """
    A map where inserting, getting and removing data is synchronized with a lock.
    """

    def __init__(self):
        # type Handle = int
        self._map = {}  # type: Dict[Handle, Any]
        self._lock = threading.Lock()
        self._counter = itertools.count()

    def insert(self, obj):
        with self._lock:
            handle = next(self._counter)
            self._map[handle] = obj
            return handle

    def get(self, handle):
        try:
            with self._lock:
                return self._map[handle]
        except KeyError:
            raise InternalError("_UniffiHandleMap.get: Invalid handle")

    def remove(self, handle):
        try:
            with self._lock:
                return self._map.pop(handle)
        except KeyError:
            raise InternalError("_UniffiHandleMap.remove: Invalid handle")

    def __len__(self):
        return len(self._map)
# Types conforming to `_UniffiConverterPrimitive` pass themselves directly over the FFI.
class _UniffiConverterPrimitive:
    @classmethod
    def lift(cls, value):
        return value

    @classmethod
    def lower(cls, value):
        return value

class _UniffiConverterPrimitiveInt(_UniffiConverterPrimitive):
    @classmethod
    def check_lower(cls, value):
        try:
            value = value.__index__()
        except Exception:
            raise TypeError("'{}' object cannot be interpreted as an integer".format(type(value).__name__))
        if not isinstance(value, int):
            raise TypeError("__index__ returned non-int (type {})".format(type(value).__name__))
        if not cls.VALUE_MIN <= value < cls.VALUE_MAX:
            raise ValueError("{} requires {} <= value < {}".format(cls.CLASS_NAME, cls.VALUE_MIN, cls.VALUE_MAX))

class _UniffiConverterPrimitiveFloat(_UniffiConverterPrimitive):
    @classmethod
    def check_lower(cls, value):
        try:
            value = value.__float__()
        except Exception:
            raise TypeError("must be real number, not {}".format(type(value).__name__))
        if not isinstance(value, float):
            raise TypeError("__float__ returned non-float (type {})".format(type(value).__name__))

# Helper class for wrapper types that will always go through a _UniffiRustBuffer.
# Classes should inherit from this and implement the `read` and `write` static methods.
class _UniffiConverterRustBuffer:
    @classmethod
    def lift(cls, rbuf):
        with rbuf.consume_with_stream() as stream:
            return cls.read(stream)

    @classmethod
    def lower(cls, value):
        with _UniffiRustBuffer.alloc_with_builder() as builder:
            cls.write(value, builder)
            return builder.finalize()

# Contains loading, initialization code, and the FFI Function declarations.
# Define some ctypes FFI types that we use in the library

"""
Function pointer for a Rust task, which a callback function that takes a opaque pointer
"""
_UNIFFI_RUST_TASK = ctypes.CFUNCTYPE(None, ctypes.c_void_p, ctypes.c_int8)

def _uniffi_future_callback_t(return_type):
    """
    Factory function to create callback function types for async functions
    """
    return ctypes.CFUNCTYPE(None, ctypes.c_uint64, return_type, _UniffiRustCallStatus)

def _uniffi_load_indirect():
    """
    This is how we find and load the dynamic library provided by the component.
    For now we just look it up by name.
    """
    if sys.platform == "darwin":
        libname = "lib{}.dylib"
    elif sys.platform.startswith("win"):
        # As of python3.8, ctypes does not seem to search $PATH when loading DLLs.
        # We could use `os.add_dll_directory` to configure the search path, but
        # it doesn't feel right to mess with application-wide settings. Let's
        # assume that the `.dll` is next to the `.py` file and load by full path.
        libname = os.path.join(
            os.path.dirname(__file__),
            "{}.dll",
        )
    else:
        # Anything else must be an ELF platform - Linux, *BSD, Solaris/illumos
        libname = "lib{}.so"

    libname = libname.format("nostr_sdk_ffi")
    path = os.path.join(os.path.dirname(__file__), libname)
    lib = ctypes.cdll.LoadLibrary(path)
    return lib

def _uniffi_check_contract_api_version(lib):
    # Get the bindings contract version from our ComponentInterface
    bindings_contract_version = 26
    # Get the scaffolding contract version by calling the into the dylib
    scaffolding_contract_version = lib.ffi_nostr_sdk_ffi_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version:
        raise InternalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")

def _uniffi_check_api_checksums(lib):
    if lib.uniffi_nostr_sdk_ffi_checksum_func_init_logger() != 38847:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_add_discovery_relay() != 57691:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_add_read_relay() != 52565:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_add_relay() != 33779:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_add_write_relay() != 6818:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_automatic_authentication() != 51347:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_connect() != 30312:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_connect_relay() != 31242:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_connect_with_timeout() != 16188:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_database() != 35722:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_disconnect() != 21461:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_disconnect_relay() != 63825:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_dislike() != 15515:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_fetch_metadata() != 24983:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_file_metadata() != 65496:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_filtering() != 62979:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_get_events_from() != 34355:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_get_events_of() != 44667:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_gift_wrap() != 52974:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_gift_wrap_to() != 59923:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_handle_notifications() != 8916:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_like() != 17749:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_pool() != 3145:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_reaction() != 13847:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_reconcile() != 9483:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_relay() != 53414:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_relays() != 53935:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_remove_relay() != 5421:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_repost() != 15487:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_send_event() != 36678:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_send_event_builder() != 28604:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_send_event_builder_to() != 34972:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_send_event_to() != 40531:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_send_msg_to() != 7643:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_send_private_msg() != 65326:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_send_private_msg_to() != 1051:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_set_metadata() != 37318:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_shutdown() != 16786:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_sign_event_builder() != 47615:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_signer() != 31951:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_subscribe() != 20608:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_subscribe_to() != 26336:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_subscribe_with_id() != 13157:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_subscribe_with_id_to() != 27069:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_subscription() != 1946:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_subscriptions() != 20072:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_unsubscribe() != 16499:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_unsubscribe_all() != 37740:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_unwrap_gift_wrap() != 9076:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_update_difficulty() != 12551:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_update_min_pow_difficulty() != 58908:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_zap() != 33763:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_clientbuilder_build() != 61424:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_clientbuilder_database() != 21061:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_clientbuilder_opts() != 22620:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_clientbuilder_signer() != 30905:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_clientbuilder_zapper() != 2114:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_connection_addr() != 43068:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_connection_embedded_tor() != 63012:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_connection_mode() != 217:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_connection_target() != 61648:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_customnostrdatabase_backend() != 43310:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_customnostrdatabase_save_event() != 44808:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_customnostrdatabase_check_id() != 33847:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_customnostrdatabase_has_coordinate_been_deleted() != 8731:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_customnostrdatabase_event_id_seen() != 48961:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_customnostrdatabase_event_seen_on_relays() != 64294:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_customnostrdatabase_event_by_id() != 63015:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_customnostrdatabase_count() != 29484:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_customnostrdatabase_query() != 33233:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_customnostrdatabase_delete() != 56179:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_customnostrdatabase_wipe() != 62100:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_handlenotification_handle_msg() != 15446:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_handlenotification_handle() != 58660:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_mockrelay__none() != 40990:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_mockrelay_shutdown() != 1736:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_mockrelay_url() != 63169:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_nwc_get_balance() != 30742:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_nwc_get_info() != 13299:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_nwc_list_transactions() != 27417:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_nwc_lookup_invoice() != 14000:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_nwc_make_invoice() != 26233:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_nwc_pay_invoice() != 28548:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_nwc_pay_keysend() != 7487:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_negentropyoptions_direction() != 49635:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_negentropyoptions_dry_run() != 41399:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_negentropyoptions_initial_timeout() != 40199:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_nip46signer_bunker_uri() != 15034:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_nip46signer_relays() != 52111:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_nip46signer_signer_public_key() != 60994:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_nostrconnectremotesigner_bunker_uri() != 7854:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_nostrconnectremotesigner_relays() != 20744:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_nostrconnectremotesigner_serve() != 40586:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_nostrconnectsigneractions_approve() != 33577:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_count() != 63911:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_delete() != 19224:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_event_by_id() != 13180:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_event_seen_on_relays() != 47905:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_profile() != 30385:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_query() != 20702:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_save_event() != 62854:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_wipe() != 58001:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_nip04_decrypt() != 13688:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_nip04_encrypt() != 22096:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_nip44_decrypt() != 16401:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_nip44_encrypt() != 37397:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_public_key() != 58772:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_sign_event() != 49886:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_sign_event_builder() != 4087:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_unwrap_gift_wrap() != 27503:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_nostrwalletconnectoptions_connection_mode() != 29062:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_nostrwalletconnectoptions_timeout() != 18259:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_options_autoconnect() != 15533:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_options_automatic_authentication() != 33238:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_options_connection() != 11615:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_options_connection_timeout() != 57708:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_options_difficulty() != 20804:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_options_filtering_mode() != 33603:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_options_gossip() != 22162:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_options_max_avg_latency() != 34264:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_options_min_pow() != 54102:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_options_relay_limits() != 11682:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_options_req_filters_chunk_size() != 19808:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_options_send_timeout() != 11614:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_options_skip_disconnected_relays() != 28418:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_options_timeout() != 10820:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_options_wait_for_send() != 50702:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_options_wait_for_subscription() != 52599:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_profile_metadata() != 34875:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_profile_name() != 10929:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_profile_public_key() != 31716:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relay_batch_event() != 30109:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relay_batch_msg() != 15403:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relay_connect() != 15421:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relay_connection_mode() != 52002:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relay_count_events_of() != 10925:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relay_disconnect() != 54334:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relay_document() != 55628:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relay_filtering() != 16293:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relay_get_events_of() != 8379:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relay_is_connected() != 50961:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relay_opts() != 21198:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relay_queue() != 23174:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relay_reconcile() != 20273:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relay_reconcile_with_items() != 13207:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relay_send_event() != 20786:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relay_send_msg() != 20244:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relay_stats() != 58574:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relay_status() != 14630:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relay_subscribe() != 7870:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relay_subscribe_with_id() != 33573:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relay_subscription() != 14346:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relay_subscriptions() != 24939:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relay_support_negentropy() != 5020:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relay_unsubscribe() != 20812:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relay_unsubscribe_all() != 32815:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relay_url() != 1351:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_attempts() != 52060:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_bytes_received() != 157:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_bytes_sent() != 64970:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_connected_at() != 17598:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_first_connection_timestamp() != 30824:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_latency() != 43153:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_success() != 52759:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_uptime() != 29449:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relayfiltering_add_ids() != 37238:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relayfiltering_add_public_keys() != 16552:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relayfiltering_clear() != 53904:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relayfiltering_has_id() != 884:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relayfiltering_has_public_key() != 9857:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relayfiltering_mode() != 29749:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relayfiltering_remove_id() != 62305:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relayfiltering_remove_ids() != 35650:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relayfiltering_remove_public_key() != 61695:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relayfiltering_remove_public_keys() != 54891:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relayfiltering_update_mode() != 20763:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relaylimits_event_max_num_tags() != 29781:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relaylimits_event_max_num_tags_per_kind() != 24819:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relaylimits_event_max_size() != 63930:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relaylimits_event_max_size_per_kind() != 61881:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relaylimits_message_max_size() != 9957:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relayoptions_adjust_retry_sec() != 36994:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relayoptions_connection_mode() != 24699:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relayoptions_filtering_mode() != 53101:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relayoptions_limits() != 10405:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relayoptions_max_avg_latency() != 58939:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relayoptions_ping() != 51607:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relayoptions_pow() != 37387:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relayoptions_read() != 47081:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relayoptions_reconnect() != 48820:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relayoptions_retry_sec() != 58762:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relayoptions_update_adjust_retry_sec() != 1296:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relayoptions_update_pow_difficulty() != 44137:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relayoptions_update_reconnect() != 23173:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relayoptions_update_retry_sec() != 43799:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relayoptions_write() != 45946:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_add_relay() != 60070:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_batch_event() != 30015:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_batch_event_to() != 65135:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_batch_msg_to() != 33822:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_connect() != 31806:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_connect_relay() != 36418:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_database() != 4532:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_disconnect() != 51163:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_filtering() != 46575:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_get_events_from() != 53633:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_get_events_of() != 56917:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_handle_notifications() != 15285:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_reconcile() != 62721:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_reconcile_with_items() != 61106:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_relay() != 11676:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_relays() != 16476:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_remove_all_relay() != 16039:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_remove_relay() != 40859:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_send_event() != 16615:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_send_event_to() != 14653:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_send_msg_to() != 65436:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_shutdown() != 24603:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_subscribe() != 63089:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_subscribe_to() != 20032:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_subscribe_with_id() != 5916:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_subscribe_with_id_to() != 46946:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_subscription() != 18304:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_subscriptions() != 34853:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_unsubscribe() != 28366:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_unsubscribe_all() != 15780:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relaysendoptions_skip_disconnected() != 4190:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relaysendoptions_skip_send_confirmation() != 22060:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relaysendoptions_timeout() != 16256:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_subscribeautocloseoptions_filter() != 17195:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_subscribeautocloseoptions_timeout() != 36298:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_subscribeoptions_close_on() != 31672:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_subscribeoptions_send_opts() != 55685:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_zapdetails_message() != 43166:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_constructor_client_new() != 54751:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_constructor_client_with_opts() != 35054:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_constructor_clientbuilder_new() != 11332:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_constructor_connection_new() != 32544:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_constructor_eventsource_both() != 16599:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_constructor_eventsource_both_with_specific_relays() != 59547:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_constructor_eventsource_database() != 22588:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_constructor_eventsource_relays() != 8271:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_constructor_eventsource_specific_relays() != 35301:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_constructor_mockrelay_run() != 52562:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_constructor_nwc_new() != 26100:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_constructor_nwc_with_opts() != 18653:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_constructor_negentropyoptions_new() != 15449:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_constructor_nip46signer_init() != 34524:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_constructor_nostrconnectremotesigner_from_uri() != 28026:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_constructor_nostrconnectremotesigner_init() != 6872:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_constructor_nostrdatabase_custom() != 63992:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_constructor_nostrdatabase_lmdb() != 21752:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_constructor_nostrsigner_keys() != 51910:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_constructor_nostrsigner_nip46() != 28927:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_constructor_nostrwalletconnectoptions_new() != 35456:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_constructor_nostrzapper_nwc() != 65346:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_constructor_options_new() != 30503:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_constructor_profile_new() != 65224:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_constructor_relay_custom() != 38370:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_constructor_relay_new() != 3279:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_constructor_relay_with_opts() != 9335:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_constructor_relayfiltering_blacklist() != 16765:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_constructor_relayfiltering_whitelist() != 49922:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_constructor_relaylimits_disable() != 39641:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_constructor_relaylimits_new() != 1364:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_constructor_relayoptions_new() != 32157:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_constructor_relaypool_new() != 50786:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_constructor_relaypool_with_database() != 59953:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_constructor_relaysendoptions_new() != 31427:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_constructor_subscribeautocloseoptions_new() != 39595:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_constructor_subscribeoptions_new() != 56214:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_constructor_zapdetails_new() != 18563:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_constructor_zapentity_event() != 61043:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_constructor_zapentity_public_key() != 56616:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")

# A ctypes library to expose the extern-C FFI definitions.
# This is an implementation detail which will be called internally by the public API.

_UniffiLib = _uniffi_load_indirect()
_UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK = ctypes.CFUNCTYPE(None,ctypes.c_uint64,ctypes.c_int8,
)
_UNIFFI_FOREIGN_FUTURE_FREE = ctypes.CFUNCTYPE(None,ctypes.c_uint64,
)
_UNIFFI_CALLBACK_INTERFACE_FREE = ctypes.CFUNCTYPE(None,ctypes.c_uint64,
)
class _UniffiForeignFuture(ctypes.Structure):
    _fields_ = [
        ("handle", ctypes.c_uint64),
        ("free", _UNIFFI_FOREIGN_FUTURE_FREE),
    ]
class _UniffiForeignFutureStructU8(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_uint8),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_U8 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructU8,
)
class _UniffiForeignFutureStructI8(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_int8),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_I8 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructI8,
)
class _UniffiForeignFutureStructU16(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_uint16),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_U16 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructU16,
)
class _UniffiForeignFutureStructI16(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_int16),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_I16 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructI16,
)
class _UniffiForeignFutureStructU32(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_uint32),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_U32 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructU32,
)
class _UniffiForeignFutureStructI32(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_int32),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_I32 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructI32,
)
class _UniffiForeignFutureStructU64(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_uint64),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_U64 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructU64,
)
class _UniffiForeignFutureStructI64(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_int64),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_I64 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructI64,
)
class _UniffiForeignFutureStructF32(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_float),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_F32 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructF32,
)
class _UniffiForeignFutureStructF64(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_double),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_F64 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructF64,
)
class _UniffiForeignFutureStructPointer(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_void_p),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_POINTER = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructPointer,
)
class _UniffiForeignFutureStructRustBuffer(ctypes.Structure):
    _fields_ = [
        ("return_value", _UniffiRustBuffer),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_RUST_BUFFER = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructRustBuffer,
)
class _UniffiForeignFutureStructVoid(ctypes.Structure):
    _fields_ = [
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_VOID = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructVoid,
)
_UNIFFI_CALLBACK_INTERFACE_CUSTOM_NOSTR_DATABASE_METHOD0 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,ctypes.POINTER(_UniffiRustBuffer),
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UNIFFI_CALLBACK_INTERFACE_CUSTOM_NOSTR_DATABASE_METHOD1 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,ctypes.c_void_p,_UNIFFI_FOREIGN_FUTURE_COMPLETE_I8,ctypes.c_uint64,ctypes.POINTER(_UniffiForeignFuture),
)
_UNIFFI_CALLBACK_INTERFACE_CUSTOM_NOSTR_DATABASE_METHOD2 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,ctypes.c_void_p,_UNIFFI_FOREIGN_FUTURE_COMPLETE_RUST_BUFFER,ctypes.c_uint64,ctypes.POINTER(_UniffiForeignFuture),
)
_UNIFFI_CALLBACK_INTERFACE_CUSTOM_NOSTR_DATABASE_METHOD3 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,ctypes.c_void_p,ctypes.c_void_p,_UNIFFI_FOREIGN_FUTURE_COMPLETE_I8,ctypes.c_uint64,ctypes.POINTER(_UniffiForeignFuture),
)
_UNIFFI_CALLBACK_INTERFACE_CUSTOM_NOSTR_DATABASE_METHOD4 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,ctypes.c_void_p,_UniffiRustBuffer,_UNIFFI_FOREIGN_FUTURE_COMPLETE_VOID,ctypes.c_uint64,ctypes.POINTER(_UniffiForeignFuture),
)
_UNIFFI_CALLBACK_INTERFACE_CUSTOM_NOSTR_DATABASE_METHOD5 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,ctypes.c_void_p,_UNIFFI_FOREIGN_FUTURE_COMPLETE_RUST_BUFFER,ctypes.c_uint64,ctypes.POINTER(_UniffiForeignFuture),
)
_UNIFFI_CALLBACK_INTERFACE_CUSTOM_NOSTR_DATABASE_METHOD6 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,ctypes.c_void_p,_UNIFFI_FOREIGN_FUTURE_COMPLETE_RUST_BUFFER,ctypes.c_uint64,ctypes.POINTER(_UniffiForeignFuture),
)
_UNIFFI_CALLBACK_INTERFACE_CUSTOM_NOSTR_DATABASE_METHOD7 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiRustBuffer,_UNIFFI_FOREIGN_FUTURE_COMPLETE_U64,ctypes.c_uint64,ctypes.POINTER(_UniffiForeignFuture),
)
_UNIFFI_CALLBACK_INTERFACE_CUSTOM_NOSTR_DATABASE_METHOD8 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiRustBuffer,_UNIFFI_FOREIGN_FUTURE_COMPLETE_RUST_BUFFER,ctypes.c_uint64,ctypes.POINTER(_UniffiForeignFuture),
)
_UNIFFI_CALLBACK_INTERFACE_CUSTOM_NOSTR_DATABASE_METHOD9 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,ctypes.c_void_p,_UNIFFI_FOREIGN_FUTURE_COMPLETE_VOID,ctypes.c_uint64,ctypes.POINTER(_UniffiForeignFuture),
)
_UNIFFI_CALLBACK_INTERFACE_CUSTOM_NOSTR_DATABASE_METHOD10 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UNIFFI_FOREIGN_FUTURE_COMPLETE_VOID,ctypes.c_uint64,ctypes.POINTER(_UniffiForeignFuture),
)
_UNIFFI_CALLBACK_INTERFACE_HANDLE_NOTIFICATION_METHOD0 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiRustBuffer,ctypes.c_void_p,_UNIFFI_FOREIGN_FUTURE_COMPLETE_VOID,ctypes.c_uint64,ctypes.POINTER(_UniffiForeignFuture),
)
_UNIFFI_CALLBACK_INTERFACE_HANDLE_NOTIFICATION_METHOD1 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiRustBuffer,_UniffiRustBuffer,ctypes.c_void_p,_UNIFFI_FOREIGN_FUTURE_COMPLETE_VOID,ctypes.c_uint64,ctypes.POINTER(_UniffiForeignFuture),
)
_UNIFFI_CALLBACK_INTERFACE_NOSTR_CONNECT_SIGNER_ACTIONS_METHOD0 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiRustBufferNip46Request,ctypes.POINTER(ctypes.c_int8),
    ctypes.POINTER(_UniffiRustCallStatus),
)
class _UniffiVTableCallbackInterfaceCustomNostrDatabase(ctypes.Structure):
    _fields_ = [
        ("backend", _UNIFFI_CALLBACK_INTERFACE_CUSTOM_NOSTR_DATABASE_METHOD0),
        ("save_event", _UNIFFI_CALLBACK_INTERFACE_CUSTOM_NOSTR_DATABASE_METHOD1),
        ("check_id", _UNIFFI_CALLBACK_INTERFACE_CUSTOM_NOSTR_DATABASE_METHOD2),
        ("has_coordinate_been_deleted", _UNIFFI_CALLBACK_INTERFACE_CUSTOM_NOSTR_DATABASE_METHOD3),
        ("event_id_seen", _UNIFFI_CALLBACK_INTERFACE_CUSTOM_NOSTR_DATABASE_METHOD4),
        ("event_seen_on_relays", _UNIFFI_CALLBACK_INTERFACE_CUSTOM_NOSTR_DATABASE_METHOD5),
        ("event_by_id", _UNIFFI_CALLBACK_INTERFACE_CUSTOM_NOSTR_DATABASE_METHOD6),
        ("count", _UNIFFI_CALLBACK_INTERFACE_CUSTOM_NOSTR_DATABASE_METHOD7),
        ("query", _UNIFFI_CALLBACK_INTERFACE_CUSTOM_NOSTR_DATABASE_METHOD8),
        ("delete", _UNIFFI_CALLBACK_INTERFACE_CUSTOM_NOSTR_DATABASE_METHOD9),
        ("wipe", _UNIFFI_CALLBACK_INTERFACE_CUSTOM_NOSTR_DATABASE_METHOD10),
        ("uniffi_free", _UNIFFI_CALLBACK_INTERFACE_FREE),
    ]
class _UniffiVTableCallbackInterfaceHandleNotification(ctypes.Structure):
    _fields_ = [
        ("handle_msg", _UNIFFI_CALLBACK_INTERFACE_HANDLE_NOTIFICATION_METHOD0),
        ("handle", _UNIFFI_CALLBACK_INTERFACE_HANDLE_NOTIFICATION_METHOD1),
        ("uniffi_free", _UNIFFI_CALLBACK_INTERFACE_FREE),
    ]
class _UniffiVTableCallbackInterfaceNostrConnectSignerActions(ctypes.Structure):
    _fields_ = [
        ("approve", _UNIFFI_CALLBACK_INTERFACE_NOSTR_CONNECT_SIGNER_ACTIONS_METHOD0),
        ("uniffi_free", _UNIFFI_CALLBACK_INTERFACE_FREE),
    ]
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_client.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_client.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_client.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_client.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_client_new.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_client_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_client_with_opts.argtypes = (
    _UniffiRustBuffer,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_client_with_opts.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_add_discovery_relay.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_add_discovery_relay.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_add_read_relay.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_add_read_relay.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_add_relay.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_add_relay.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_add_write_relay.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_add_write_relay.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_automatic_authentication.argtypes = (
    ctypes.c_void_p,
    ctypes.c_int8,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_automatic_authentication.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_connect.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_connect.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_connect_relay.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_connect_relay.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_connect_with_timeout.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_connect_with_timeout.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_database.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_database.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_disconnect.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_disconnect.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_disconnect_relay.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_disconnect_relay.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_dislike.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_dislike.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_fetch_metadata.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_fetch_metadata.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_file_metadata.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_void_p,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_file_metadata.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_filtering.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_filtering.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_get_events_from.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_get_events_from.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_get_events_of.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_void_p,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_get_events_of.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_gift_wrap.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.c_void_p,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_gift_wrap.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_gift_wrap_to.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_void_p,
    ctypes.c_void_p,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_gift_wrap_to.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_handle_notifications.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_handle_notifications.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_like.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_like.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_pool.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_pool.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_reaction.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_reaction.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_reconcile.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.c_void_p,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_reconcile.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_relay.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_relay.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_relays.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_relays.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_remove_relay.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_remove_relay.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_repost.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_repost.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_send_event.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_send_event.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_send_event_builder.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_send_event_builder.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_send_event_builder_to.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_void_p,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_send_event_builder_to.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_send_event_to.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_void_p,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_send_event_to.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_send_msg_to.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_void_p,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_send_msg_to.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_send_private_msg.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_send_private_msg.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_send_private_msg_to.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_void_p,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_send_private_msg_to.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_set_metadata.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_set_metadata.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_shutdown.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_shutdown.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_sign_event_builder.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_sign_event_builder.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_signer.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_signer.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_subscribe.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_subscribe.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_subscribe_to.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_subscribe_to.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_subscribe_with_id.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_subscribe_with_id.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_subscribe_with_id_to.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_subscribe_with_id_to.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_subscription.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_subscription.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_subscriptions.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_subscriptions.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_unsubscribe.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_unsubscribe.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_unsubscribe_all.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_unsubscribe_all.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_unwrap_gift_wrap.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_unwrap_gift_wrap.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_update_difficulty.argtypes = (
    ctypes.c_void_p,
    ctypes.c_uint8,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_update_difficulty.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_update_min_pow_difficulty.argtypes = (
    ctypes.c_void_p,
    ctypes.c_uint8,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_update_min_pow_difficulty.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_zap.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.c_uint64,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_zap.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_clientbuilder.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_clientbuilder.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_clientbuilder.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_clientbuilder.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_clientbuilder_new.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_clientbuilder_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_clientbuilder_build.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_clientbuilder_build.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_clientbuilder_database.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_clientbuilder_database.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_clientbuilder_opts.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_clientbuilder_opts.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_clientbuilder_signer.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_clientbuilder_signer.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_clientbuilder_zapper.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_clientbuilder_zapper.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_connection.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_connection.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_connection.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_connection.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_connection_new.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_connection_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_connection_addr.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_connection_addr.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_connection_embedded_tor.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_connection_embedded_tor.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_connection_mode.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_connection_mode.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_connection_target.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_connection_target.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_connection_uniffi_trait_debug.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_connection_uniffi_trait_debug.restype = _UniffiRustBuffer
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_connection_uniffi_trait_eq_eq.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_connection_uniffi_trait_eq_eq.restype = ctypes.c_int8
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_connection_uniffi_trait_eq_ne.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_connection_uniffi_trait_eq_ne.restype = ctypes.c_int8
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_connection_uniffi_trait_hash.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_connection_uniffi_trait_hash.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_customnostrdatabase.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_customnostrdatabase.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_customnostrdatabase.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_customnostrdatabase.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_init_callback_vtable_customnostrdatabase.argtypes = (
    ctypes.POINTER(_UniffiVTableCallbackInterfaceCustomNostrDatabase),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_init_callback_vtable_customnostrdatabase.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_customnostrdatabase_backend.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_customnostrdatabase_backend.restype = _UniffiRustBuffer
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_customnostrdatabase_save_event.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_customnostrdatabase_save_event.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_customnostrdatabase_check_id.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_customnostrdatabase_check_id.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_customnostrdatabase_has_coordinate_been_deleted.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.c_void_p,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_customnostrdatabase_has_coordinate_been_deleted.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_customnostrdatabase_event_id_seen.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_customnostrdatabase_event_id_seen.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_customnostrdatabase_event_seen_on_relays.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_customnostrdatabase_event_seen_on_relays.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_customnostrdatabase_event_by_id.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_customnostrdatabase_event_by_id.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_customnostrdatabase_count.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_customnostrdatabase_count.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_customnostrdatabase_query.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_customnostrdatabase_query.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_customnostrdatabase_delete.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_customnostrdatabase_delete.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_customnostrdatabase_wipe.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_customnostrdatabase_wipe.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_eventsource.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_eventsource.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_eventsource.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_eventsource.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_eventsource_both.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_eventsource_both.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_eventsource_both_with_specific_relays.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_eventsource_both_with_specific_relays.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_eventsource_database.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_eventsource_database.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_eventsource_relays.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_eventsource_relays.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_eventsource_specific_relays.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_eventsource_specific_relays.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_handlenotification.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_handlenotification.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_handlenotification.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_handlenotification.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_init_callback_vtable_handlenotification.argtypes = (
    ctypes.POINTER(_UniffiVTableCallbackInterfaceHandleNotification),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_init_callback_vtable_handlenotification.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_handlenotification_handle_msg.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_void_p,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_handlenotification_handle_msg.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_handlenotification_handle.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.c_void_p,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_handlenotification_handle.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_mockrelay.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_mockrelay.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_mockrelay.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_mockrelay.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_mockrelay_run.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_mockrelay_run.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_mockrelay__none.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_mockrelay__none.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_mockrelay_shutdown.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_mockrelay_shutdown.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_mockrelay_url.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_mockrelay_url.restype = _UniffiRustBuffer
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_nwc.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_nwc.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_nwc.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_nwc.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_nwc_new.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_nwc_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_nwc_with_opts.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_nwc_with_opts.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nwc_get_balance.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nwc_get_balance.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nwc_get_info.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nwc_get_info.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nwc_list_transactions.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBufferListTransactionsRequestParams,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nwc_list_transactions.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nwc_lookup_invoice.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBufferLookupInvoiceRequestParams,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nwc_lookup_invoice.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nwc_make_invoice.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBufferMakeInvoiceRequestParams,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nwc_make_invoice.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nwc_pay_invoice.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nwc_pay_invoice.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nwc_pay_keysend.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBufferPayKeysendRequestParams,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nwc_pay_keysend.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_negentropyoptions.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_negentropyoptions.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_negentropyoptions.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_negentropyoptions.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_negentropyoptions_new.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_negentropyoptions_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_negentropyoptions_direction.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_negentropyoptions_direction.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_negentropyoptions_dry_run.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_negentropyoptions_dry_run.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_negentropyoptions_initial_timeout.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_negentropyoptions_initial_timeout.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_nip46signer.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_nip46signer.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_nip46signer.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_nip46signer.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_nip46signer_init.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_nip46signer_init.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nip46signer_bunker_uri.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nip46signer_bunker_uri.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nip46signer_relays.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nip46signer_relays.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nip46signer_signer_public_key.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nip46signer_signer_public_key.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_nostrconnectremotesigner.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_nostrconnectremotesigner.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_nostrconnectremotesigner.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_nostrconnectremotesigner.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_nostrconnectremotesigner_from_uri.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_nostrconnectremotesigner_from_uri.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_nostrconnectremotesigner_init.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_nostrconnectremotesigner_init.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrconnectremotesigner_bunker_uri.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrconnectremotesigner_bunker_uri.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrconnectremotesigner_relays.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrconnectremotesigner_relays.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrconnectremotesigner_serve.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrconnectremotesigner_serve.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_nostrconnectsigneractions.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_nostrconnectsigneractions.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_nostrconnectsigneractions.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_nostrconnectsigneractions.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_init_callback_vtable_nostrconnectsigneractions.argtypes = (
    ctypes.POINTER(_UniffiVTableCallbackInterfaceNostrConnectSignerActions),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_init_callback_vtable_nostrconnectsigneractions.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrconnectsigneractions_approve.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBufferNip46Request,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrconnectsigneractions_approve.restype = ctypes.c_int8
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_nostrdatabase.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_nostrdatabase.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_nostrdatabase.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_nostrdatabase.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_nostrdatabase_custom.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_nostrdatabase_custom.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_nostrdatabase_lmdb.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_nostrdatabase_lmdb.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_count.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_count.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_delete.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_delete.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_event_by_id.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_event_by_id.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_event_seen_on_relays.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_event_seen_on_relays.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_profile.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_profile.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_query.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_query.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_save_event.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_save_event.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_wipe.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_wipe.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_nostrsigner.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_nostrsigner.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_nostrsigner.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_nostrsigner.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_nostrsigner_keys.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_nostrsigner_keys.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_nostrsigner_nip46.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_nostrsigner_nip46.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrsigner_nip04_decrypt.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrsigner_nip04_decrypt.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrsigner_nip04_encrypt.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrsigner_nip04_encrypt.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrsigner_nip44_decrypt.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrsigner_nip44_decrypt.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrsigner_nip44_encrypt.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrsigner_nip44_encrypt.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrsigner_public_key.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrsigner_public_key.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrsigner_sign_event.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrsigner_sign_event.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrsigner_sign_event_builder.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrsigner_sign_event_builder.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrsigner_unwrap_gift_wrap.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrsigner_unwrap_gift_wrap.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_nostrwalletconnectoptions.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_nostrwalletconnectoptions.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_nostrwalletconnectoptions.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_nostrwalletconnectoptions.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_nostrwalletconnectoptions_new.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_nostrwalletconnectoptions_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrwalletconnectoptions_connection_mode.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrwalletconnectoptions_connection_mode.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrwalletconnectoptions_timeout.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrwalletconnectoptions_timeout.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_nostrzapper.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_nostrzapper.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_nostrzapper.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_nostrzapper.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_nostrzapper_nwc.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_nostrzapper_nwc.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_options.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_options.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_options.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_options.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_options_new.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_options_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_autoconnect.argtypes = (
    ctypes.c_void_p,
    ctypes.c_int8,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_autoconnect.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_automatic_authentication.argtypes = (
    ctypes.c_void_p,
    ctypes.c_int8,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_automatic_authentication.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_connection.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_connection.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_connection_timeout.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_connection_timeout.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_difficulty.argtypes = (
    ctypes.c_void_p,
    ctypes.c_uint8,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_difficulty.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_filtering_mode.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_filtering_mode.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_gossip.argtypes = (
    ctypes.c_void_p,
    ctypes.c_int8,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_gossip.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_max_avg_latency.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_max_avg_latency.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_min_pow.argtypes = (
    ctypes.c_void_p,
    ctypes.c_uint8,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_min_pow.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_relay_limits.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_relay_limits.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_req_filters_chunk_size.argtypes = (
    ctypes.c_void_p,
    ctypes.c_uint8,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_req_filters_chunk_size.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_send_timeout.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_send_timeout.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_skip_disconnected_relays.argtypes = (
    ctypes.c_void_p,
    ctypes.c_int8,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_skip_disconnected_relays.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_timeout.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_timeout.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_wait_for_send.argtypes = (
    ctypes.c_void_p,
    ctypes.c_int8,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_wait_for_send.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_wait_for_subscription.argtypes = (
    ctypes.c_void_p,
    ctypes.c_int8,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_wait_for_subscription.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_profile.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_profile.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_profile.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_profile.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_profile_new.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_profile_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_profile_metadata.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_profile_metadata.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_profile_name.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_profile_name.restype = _UniffiRustBuffer
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_profile_public_key.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_profile_public_key.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_profile_uniffi_trait_debug.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_profile_uniffi_trait_debug.restype = _UniffiRustBuffer
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_profile_uniffi_trait_eq_eq.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_profile_uniffi_trait_eq_eq.restype = ctypes.c_int8
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_profile_uniffi_trait_eq_ne.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_profile_uniffi_trait_eq_ne.restype = ctypes.c_int8
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_profile_uniffi_trait_hash.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_profile_uniffi_trait_hash.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_relay.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_relay.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_relay.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_relay.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_relay_custom.argtypes = (
    _UniffiRustBuffer,
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_relay_custom.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_relay_new.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_relay_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_relay_with_opts.argtypes = (
    _UniffiRustBuffer,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_relay_with_opts.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_batch_event.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_void_p,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_batch_event.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_batch_msg.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_void_p,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_batch_msg.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_connect.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_connect.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_connection_mode.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_connection_mode.restype = _UniffiRustBuffer
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_count_events_of.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_count_events_of.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_disconnect.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_disconnect.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_document.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_document.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_filtering.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_filtering.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_get_events_of.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_get_events_of.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_is_connected.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_is_connected.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_opts.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_opts.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_queue.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_queue.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_reconcile.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.c_void_p,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_reconcile.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_reconcile_with_items.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_void_p,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_reconcile_with_items.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_send_event.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.c_void_p,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_send_event.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_send_msg.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.c_void_p,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_send_msg.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_stats.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_stats.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_status.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_status.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_subscribe.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_void_p,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_subscribe.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_subscribe_with_id.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.c_void_p,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_subscribe_with_id.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_subscription.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_subscription.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_subscriptions.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_subscriptions.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_support_negentropy.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_support_negentropy.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_unsubscribe.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_void_p,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_unsubscribe.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_unsubscribe_all.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_unsubscribe_all.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_url.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_url.restype = _UniffiRustBuffer
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_relayconnectionstats.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_relayconnectionstats.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_relayconnectionstats.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_relayconnectionstats.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_attempts.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_attempts.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_bytes_received.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_bytes_received.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_bytes_sent.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_bytes_sent.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_connected_at.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_connected_at.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_first_connection_timestamp.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_first_connection_timestamp.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_latency.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_latency.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_success.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_success.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_uptime.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_uptime.restype = ctypes.c_double
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_relayfiltering.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_relayfiltering.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_relayfiltering.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_relayfiltering.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_relayfiltering_blacklist.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_relayfiltering_blacklist.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_relayfiltering_whitelist.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_relayfiltering_whitelist.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayfiltering_add_ids.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayfiltering_add_ids.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayfiltering_add_public_keys.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayfiltering_add_public_keys.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayfiltering_clear.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayfiltering_clear.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayfiltering_has_id.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayfiltering_has_id.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayfiltering_has_public_key.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayfiltering_has_public_key.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayfiltering_mode.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayfiltering_mode.restype = _UniffiRustBuffer
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayfiltering_remove_id.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayfiltering_remove_id.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayfiltering_remove_ids.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayfiltering_remove_ids.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayfiltering_remove_public_key.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayfiltering_remove_public_key.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayfiltering_remove_public_keys.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayfiltering_remove_public_keys.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayfiltering_update_mode.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayfiltering_update_mode.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_relaylimits.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_relaylimits.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_relaylimits.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_relaylimits.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_relaylimits_disable.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_relaylimits_disable.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_relaylimits_new.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_relaylimits_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaylimits_event_max_num_tags.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaylimits_event_max_num_tags.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaylimits_event_max_num_tags_per_kind.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaylimits_event_max_num_tags_per_kind.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaylimits_event_max_size.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaylimits_event_max_size.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaylimits_event_max_size_per_kind.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaylimits_event_max_size_per_kind.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaylimits_message_max_size.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaylimits_message_max_size.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaylimits_uniffi_trait_debug.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaylimits_uniffi_trait_debug.restype = _UniffiRustBuffer
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaylimits_uniffi_trait_eq_eq.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaylimits_uniffi_trait_eq_eq.restype = ctypes.c_int8
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaylimits_uniffi_trait_eq_ne.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaylimits_uniffi_trait_eq_ne.restype = ctypes.c_int8
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_relayoptions.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_relayoptions.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_relayoptions.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_relayoptions.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_relayoptions_new.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_relayoptions_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayoptions_adjust_retry_sec.argtypes = (
    ctypes.c_void_p,
    ctypes.c_int8,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayoptions_adjust_retry_sec.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayoptions_connection_mode.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayoptions_connection_mode.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayoptions_filtering_mode.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayoptions_filtering_mode.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayoptions_limits.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayoptions_limits.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayoptions_max_avg_latency.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayoptions_max_avg_latency.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayoptions_ping.argtypes = (
    ctypes.c_void_p,
    ctypes.c_int8,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayoptions_ping.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayoptions_pow.argtypes = (
    ctypes.c_void_p,
    ctypes.c_uint8,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayoptions_pow.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayoptions_read.argtypes = (
    ctypes.c_void_p,
    ctypes.c_int8,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayoptions_read.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayoptions_reconnect.argtypes = (
    ctypes.c_void_p,
    ctypes.c_int8,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayoptions_reconnect.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayoptions_retry_sec.argtypes = (
    ctypes.c_void_p,
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayoptions_retry_sec.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayoptions_update_adjust_retry_sec.argtypes = (
    ctypes.c_void_p,
    ctypes.c_int8,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayoptions_update_adjust_retry_sec.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayoptions_update_pow_difficulty.argtypes = (
    ctypes.c_void_p,
    ctypes.c_uint8,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayoptions_update_pow_difficulty.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayoptions_update_reconnect.argtypes = (
    ctypes.c_void_p,
    ctypes.c_int8,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayoptions_update_reconnect.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayoptions_update_retry_sec.argtypes = (
    ctypes.c_void_p,
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayoptions_update_retry_sec.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayoptions_write.argtypes = (
    ctypes.c_void_p,
    ctypes.c_int8,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayoptions_write.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_relaypool.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_relaypool.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_relaypool.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_relaypool.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_relaypool_new.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_relaypool_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_relaypool_with_database.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_relaypool_with_database.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_add_relay.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_void_p,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_add_relay.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_batch_event.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_void_p,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_batch_event.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_batch_event_to.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.c_void_p,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_batch_event_to.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_batch_msg_to.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.c_void_p,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_batch_msg_to.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_connect.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_connect.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_connect_relay.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_connect_relay.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_database.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_database.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_disconnect.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_disconnect.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_filtering.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_filtering.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_get_events_from.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_get_events_from.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_get_events_of.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_get_events_of.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_handle_notifications.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_handle_notifications.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_reconcile.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.c_void_p,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_reconcile.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_reconcile_with_items.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_void_p,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_reconcile_with_items.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_relay.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_relay.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_relays.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_relays.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_remove_all_relay.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_remove_all_relay.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_remove_relay.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_remove_relay.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_send_event.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.c_void_p,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_send_event.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_send_event_to.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_void_p,
    ctypes.c_void_p,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_send_event_to.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_send_msg_to.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_void_p,
    ctypes.c_void_p,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_send_msg_to.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_shutdown.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_shutdown.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_subscribe.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_void_p,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_subscribe.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_subscribe_to.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.c_void_p,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_subscribe_to.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_subscribe_with_id.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.c_void_p,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_subscribe_with_id.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_subscribe_with_id_to.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.c_void_p,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_subscribe_with_id_to.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_subscription.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_subscription.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_subscriptions.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_subscriptions.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_unsubscribe.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_void_p,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_unsubscribe.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_unsubscribe_all.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_unsubscribe_all.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_relaysendoptions.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_relaysendoptions.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_relaysendoptions.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_relaysendoptions.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_relaysendoptions_new.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_relaysendoptions_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaysendoptions_skip_disconnected.argtypes = (
    ctypes.c_void_p,
    ctypes.c_int8,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaysendoptions_skip_disconnected.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaysendoptions_skip_send_confirmation.argtypes = (
    ctypes.c_void_p,
    ctypes.c_int8,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaysendoptions_skip_send_confirmation.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaysendoptions_timeout.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaysendoptions_timeout.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_subscribeautocloseoptions.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_subscribeautocloseoptions.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_subscribeautocloseoptions.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_subscribeautocloseoptions.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_subscribeautocloseoptions_new.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_subscribeautocloseoptions_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_subscribeautocloseoptions_filter.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_subscribeautocloseoptions_filter.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_subscribeautocloseoptions_timeout.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_subscribeautocloseoptions_timeout.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_subscribeoptions.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_subscribeoptions.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_subscribeoptions.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_subscribeoptions.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_subscribeoptions_new.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_subscribeoptions_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_subscribeoptions_close_on.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_subscribeoptions_close_on.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_subscribeoptions_send_opts.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_subscribeoptions_send_opts.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_zapdetails.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_zapdetails.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_zapdetails.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_zapdetails.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_zapdetails_new.argtypes = (
    _UniffiRustBufferZapType,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_zapdetails_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_zapdetails_message.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_zapdetails_message.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_zapdetails_uniffi_trait_debug.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_zapdetails_uniffi_trait_debug.restype = _UniffiRustBuffer
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_zapdetails_uniffi_trait_eq_eq.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_zapdetails_uniffi_trait_eq_eq.restype = ctypes.c_int8
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_zapdetails_uniffi_trait_eq_ne.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_zapdetails_uniffi_trait_eq_ne.restype = ctypes.c_int8
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_zapdetails_uniffi_trait_hash.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_zapdetails_uniffi_trait_hash.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_zapentity.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_zapentity.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_zapentity.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_zapentity.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_zapentity_event.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_zapentity_event.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_zapentity_public_key.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_zapentity_public_key.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_zapentity_uniffi_trait_debug.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_zapentity_uniffi_trait_debug.restype = _UniffiRustBuffer
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_zapentity_uniffi_trait_eq_eq.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_zapentity_uniffi_trait_eq_eq.restype = ctypes.c_int8
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_zapentity_uniffi_trait_eq_ne.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_zapentity_uniffi_trait_eq_ne.restype = ctypes.c_int8
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_zapentity_uniffi_trait_hash.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_zapentity_uniffi_trait_hash.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_func_init_logger.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_func_init_logger.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rustbuffer_alloc.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_nostr_sdk_ffi_rustbuffer_alloc.restype = _UniffiRustBuffer
_UniffiLib.ffi_nostr_sdk_ffi_rustbuffer_from_bytes.argtypes = (
    _UniffiForeignBytes,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_nostr_sdk_ffi_rustbuffer_from_bytes.restype = _UniffiRustBuffer
_UniffiLib.ffi_nostr_sdk_ffi_rustbuffer_free.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_nostr_sdk_ffi_rustbuffer_free.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rustbuffer_reserve.argtypes = (
    _UniffiRustBuffer,
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_nostr_sdk_ffi_rustbuffer_reserve.restype = _UniffiRustBuffer
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_u8.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_u8.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_cancel_u8.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_cancel_u8.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_u8.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_u8.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_u8.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_u8.restype = ctypes.c_uint8
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_i8.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_i8.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_cancel_i8.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_cancel_i8.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_i8.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_i8.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_i8.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_i8.restype = ctypes.c_int8
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_u16.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_u16.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_cancel_u16.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_cancel_u16.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_u16.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_u16.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_u16.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_u16.restype = ctypes.c_uint16
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_i16.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_i16.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_cancel_i16.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_cancel_i16.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_i16.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_i16.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_i16.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_i16.restype = ctypes.c_int16
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_u32.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_u32.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_cancel_u32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_cancel_u32.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_u32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_u32.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_u32.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_u32.restype = ctypes.c_uint32
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_i32.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_i32.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_cancel_i32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_cancel_i32.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_i32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_i32.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_i32.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_i32.restype = ctypes.c_int32
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_u64.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_u64.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_cancel_u64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_cancel_u64.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_u64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_u64.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_u64.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_u64.restype = ctypes.c_uint64
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_i64.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_i64.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_cancel_i64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_cancel_i64.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_i64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_i64.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_i64.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_i64.restype = ctypes.c_int64
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_f32.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_f32.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_cancel_f32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_cancel_f32.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_f32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_f32.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_f32.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_f32.restype = ctypes.c_float
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_f64.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_f64.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_cancel_f64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_cancel_f64.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_f64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_f64.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_f64.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_f64.restype = ctypes.c_double
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_pointer.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_pointer.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_cancel_pointer.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_cancel_pointer.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_pointer.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_pointer.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_pointer.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_pointer.restype = ctypes.c_void_p
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_rust_buffer.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_rust_buffer.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_cancel_rust_buffer.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_cancel_rust_buffer.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_rust_buffer.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_rust_buffer.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_rust_buffer.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_rust_buffer.restype = _UniffiRustBuffer
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_void.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_void.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_cancel_void.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_cancel_void.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_void.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_void.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_void.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_void.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_func_init_logger.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_func_init_logger.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_add_discovery_relay.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_add_discovery_relay.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_add_read_relay.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_add_read_relay.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_add_relay.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_add_relay.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_add_write_relay.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_add_write_relay.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_automatic_authentication.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_automatic_authentication.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_connect.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_connect.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_connect_relay.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_connect_relay.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_connect_with_timeout.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_connect_with_timeout.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_database.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_database.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_disconnect.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_disconnect.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_disconnect_relay.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_disconnect_relay.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_dislike.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_dislike.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_fetch_metadata.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_fetch_metadata.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_file_metadata.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_file_metadata.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_filtering.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_filtering.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_get_events_from.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_get_events_from.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_get_events_of.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_get_events_of.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_gift_wrap.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_gift_wrap.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_gift_wrap_to.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_gift_wrap_to.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_handle_notifications.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_handle_notifications.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_like.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_like.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_pool.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_pool.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_reaction.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_reaction.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_reconcile.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_reconcile.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_relay.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_relay.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_relays.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_relays.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_remove_relay.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_remove_relay.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_repost.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_repost.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_send_event.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_send_event.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_send_event_builder.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_send_event_builder.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_send_event_builder_to.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_send_event_builder_to.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_send_event_to.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_send_event_to.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_send_msg_to.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_send_msg_to.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_send_private_msg.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_send_private_msg.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_send_private_msg_to.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_send_private_msg_to.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_set_metadata.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_set_metadata.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_shutdown.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_shutdown.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_sign_event_builder.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_sign_event_builder.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_signer.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_signer.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_subscribe.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_subscribe.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_subscribe_to.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_subscribe_to.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_subscribe_with_id.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_subscribe_with_id.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_subscribe_with_id_to.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_subscribe_with_id_to.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_subscription.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_subscription.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_subscriptions.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_subscriptions.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_unsubscribe.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_unsubscribe.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_unsubscribe_all.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_unsubscribe_all.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_unwrap_gift_wrap.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_unwrap_gift_wrap.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_update_difficulty.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_update_difficulty.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_update_min_pow_difficulty.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_update_min_pow_difficulty.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_zap.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_zap.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_clientbuilder_build.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_clientbuilder_build.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_clientbuilder_database.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_clientbuilder_database.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_clientbuilder_opts.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_clientbuilder_opts.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_clientbuilder_signer.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_clientbuilder_signer.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_clientbuilder_zapper.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_clientbuilder_zapper.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_connection_addr.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_connection_addr.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_connection_embedded_tor.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_connection_embedded_tor.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_connection_mode.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_connection_mode.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_connection_target.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_connection_target.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_customnostrdatabase_backend.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_customnostrdatabase_backend.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_customnostrdatabase_save_event.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_customnostrdatabase_save_event.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_customnostrdatabase_check_id.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_customnostrdatabase_check_id.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_customnostrdatabase_has_coordinate_been_deleted.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_customnostrdatabase_has_coordinate_been_deleted.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_customnostrdatabase_event_id_seen.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_customnostrdatabase_event_id_seen.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_customnostrdatabase_event_seen_on_relays.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_customnostrdatabase_event_seen_on_relays.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_customnostrdatabase_event_by_id.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_customnostrdatabase_event_by_id.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_customnostrdatabase_count.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_customnostrdatabase_count.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_customnostrdatabase_query.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_customnostrdatabase_query.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_customnostrdatabase_delete.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_customnostrdatabase_delete.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_customnostrdatabase_wipe.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_customnostrdatabase_wipe.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_handlenotification_handle_msg.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_handlenotification_handle_msg.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_handlenotification_handle.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_handlenotification_handle.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_mockrelay__none.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_mockrelay__none.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_mockrelay_shutdown.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_mockrelay_shutdown.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_mockrelay_url.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_mockrelay_url.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nwc_get_balance.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nwc_get_balance.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nwc_get_info.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nwc_get_info.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nwc_list_transactions.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nwc_list_transactions.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nwc_lookup_invoice.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nwc_lookup_invoice.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nwc_make_invoice.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nwc_make_invoice.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nwc_pay_invoice.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nwc_pay_invoice.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nwc_pay_keysend.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nwc_pay_keysend.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_negentropyoptions_direction.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_negentropyoptions_direction.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_negentropyoptions_dry_run.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_negentropyoptions_dry_run.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_negentropyoptions_initial_timeout.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_negentropyoptions_initial_timeout.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nip46signer_bunker_uri.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nip46signer_bunker_uri.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nip46signer_relays.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nip46signer_relays.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nip46signer_signer_public_key.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nip46signer_signer_public_key.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrconnectremotesigner_bunker_uri.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrconnectremotesigner_bunker_uri.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrconnectremotesigner_relays.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrconnectremotesigner_relays.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrconnectremotesigner_serve.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrconnectremotesigner_serve.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrconnectsigneractions_approve.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrconnectsigneractions_approve.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_count.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_count.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_delete.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_delete.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_event_by_id.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_event_by_id.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_event_seen_on_relays.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_event_seen_on_relays.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_profile.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_profile.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_query.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_query.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_save_event.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_save_event.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_wipe.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_wipe.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_nip04_decrypt.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_nip04_decrypt.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_nip04_encrypt.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_nip04_encrypt.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_nip44_decrypt.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_nip44_decrypt.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_nip44_encrypt.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_nip44_encrypt.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_public_key.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_public_key.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_sign_event.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_sign_event.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_sign_event_builder.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_sign_event_builder.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_unwrap_gift_wrap.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_unwrap_gift_wrap.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrwalletconnectoptions_connection_mode.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrwalletconnectoptions_connection_mode.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrwalletconnectoptions_timeout.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrwalletconnectoptions_timeout.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_options_autoconnect.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_options_autoconnect.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_options_automatic_authentication.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_options_automatic_authentication.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_options_connection.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_options_connection.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_options_connection_timeout.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_options_connection_timeout.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_options_difficulty.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_options_difficulty.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_options_filtering_mode.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_options_filtering_mode.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_options_gossip.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_options_gossip.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_options_max_avg_latency.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_options_max_avg_latency.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_options_min_pow.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_options_min_pow.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_options_relay_limits.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_options_relay_limits.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_options_req_filters_chunk_size.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_options_req_filters_chunk_size.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_options_send_timeout.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_options_send_timeout.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_options_skip_disconnected_relays.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_options_skip_disconnected_relays.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_options_timeout.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_options_timeout.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_options_wait_for_send.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_options_wait_for_send.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_options_wait_for_subscription.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_options_wait_for_subscription.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_profile_metadata.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_profile_metadata.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_profile_name.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_profile_name.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_profile_public_key.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_profile_public_key.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_batch_event.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_batch_event.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_batch_msg.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_batch_msg.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_connect.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_connect.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_connection_mode.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_connection_mode.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_count_events_of.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_count_events_of.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_disconnect.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_disconnect.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_document.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_document.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_filtering.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_filtering.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_get_events_of.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_get_events_of.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_is_connected.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_is_connected.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_opts.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_opts.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_queue.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_queue.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_reconcile.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_reconcile.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_reconcile_with_items.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_reconcile_with_items.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_send_event.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_send_event.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_send_msg.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_send_msg.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_stats.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_stats.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_status.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_status.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_subscribe.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_subscribe.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_subscribe_with_id.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_subscribe_with_id.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_subscription.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_subscription.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_subscriptions.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_subscriptions.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_support_negentropy.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_support_negentropy.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_unsubscribe.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_unsubscribe.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_unsubscribe_all.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_unsubscribe_all.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_url.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_url.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_attempts.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_attempts.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_bytes_received.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_bytes_received.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_bytes_sent.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_bytes_sent.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_connected_at.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_connected_at.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_first_connection_timestamp.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_first_connection_timestamp.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_latency.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_latency.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_success.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_success.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_uptime.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_uptime.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayfiltering_add_ids.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayfiltering_add_ids.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayfiltering_add_public_keys.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayfiltering_add_public_keys.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayfiltering_clear.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayfiltering_clear.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayfiltering_has_id.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayfiltering_has_id.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayfiltering_has_public_key.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayfiltering_has_public_key.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayfiltering_mode.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayfiltering_mode.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayfiltering_remove_id.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayfiltering_remove_id.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayfiltering_remove_ids.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayfiltering_remove_ids.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayfiltering_remove_public_key.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayfiltering_remove_public_key.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayfiltering_remove_public_keys.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayfiltering_remove_public_keys.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayfiltering_update_mode.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayfiltering_update_mode.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaylimits_event_max_num_tags.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaylimits_event_max_num_tags.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaylimits_event_max_num_tags_per_kind.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaylimits_event_max_num_tags_per_kind.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaylimits_event_max_size.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaylimits_event_max_size.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaylimits_event_max_size_per_kind.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaylimits_event_max_size_per_kind.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaylimits_message_max_size.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaylimits_message_max_size.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayoptions_adjust_retry_sec.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayoptions_adjust_retry_sec.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayoptions_connection_mode.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayoptions_connection_mode.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayoptions_filtering_mode.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayoptions_filtering_mode.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayoptions_limits.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayoptions_limits.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayoptions_max_avg_latency.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayoptions_max_avg_latency.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayoptions_ping.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayoptions_ping.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayoptions_pow.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayoptions_pow.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayoptions_read.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayoptions_read.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayoptions_reconnect.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayoptions_reconnect.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayoptions_retry_sec.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayoptions_retry_sec.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayoptions_update_adjust_retry_sec.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayoptions_update_adjust_retry_sec.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayoptions_update_pow_difficulty.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayoptions_update_pow_difficulty.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayoptions_update_reconnect.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayoptions_update_reconnect.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayoptions_update_retry_sec.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayoptions_update_retry_sec.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayoptions_write.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayoptions_write.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_add_relay.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_add_relay.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_batch_event.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_batch_event.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_batch_event_to.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_batch_event_to.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_batch_msg_to.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_batch_msg_to.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_connect.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_connect.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_connect_relay.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_connect_relay.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_database.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_database.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_disconnect.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_disconnect.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_filtering.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_filtering.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_get_events_from.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_get_events_from.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_get_events_of.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_get_events_of.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_handle_notifications.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_handle_notifications.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_reconcile.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_reconcile.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_reconcile_with_items.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_reconcile_with_items.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_relay.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_relay.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_relays.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_relays.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_remove_all_relay.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_remove_all_relay.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_remove_relay.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_remove_relay.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_send_event.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_send_event.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_send_event_to.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_send_event_to.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_send_msg_to.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_send_msg_to.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_shutdown.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_shutdown.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_subscribe.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_subscribe.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_subscribe_to.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_subscribe_to.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_subscribe_with_id.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_subscribe_with_id.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_subscribe_with_id_to.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_subscribe_with_id_to.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_subscription.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_subscription.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_subscriptions.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_subscriptions.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_unsubscribe.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_unsubscribe.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_unsubscribe_all.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_unsubscribe_all.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaysendoptions_skip_disconnected.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaysendoptions_skip_disconnected.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaysendoptions_skip_send_confirmation.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaysendoptions_skip_send_confirmation.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaysendoptions_timeout.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaysendoptions_timeout.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_subscribeautocloseoptions_filter.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_subscribeautocloseoptions_filter.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_subscribeautocloseoptions_timeout.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_subscribeautocloseoptions_timeout.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_subscribeoptions_close_on.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_subscribeoptions_close_on.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_subscribeoptions_send_opts.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_subscribeoptions_send_opts.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_zapdetails_message.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_zapdetails_message.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_client_new.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_client_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_client_with_opts.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_client_with_opts.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_clientbuilder_new.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_clientbuilder_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_connection_new.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_connection_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_eventsource_both.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_eventsource_both.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_eventsource_both_with_specific_relays.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_eventsource_both_with_specific_relays.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_eventsource_database.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_eventsource_database.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_eventsource_relays.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_eventsource_relays.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_eventsource_specific_relays.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_eventsource_specific_relays.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_mockrelay_run.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_mockrelay_run.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_nwc_new.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_nwc_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_nwc_with_opts.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_nwc_with_opts.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_negentropyoptions_new.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_negentropyoptions_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_nip46signer_init.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_nip46signer_init.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_nostrconnectremotesigner_from_uri.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_nostrconnectremotesigner_from_uri.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_nostrconnectremotesigner_init.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_nostrconnectremotesigner_init.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_nostrdatabase_custom.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_nostrdatabase_custom.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_nostrdatabase_lmdb.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_nostrdatabase_lmdb.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_nostrsigner_keys.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_nostrsigner_keys.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_nostrsigner_nip46.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_nostrsigner_nip46.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_nostrwalletconnectoptions_new.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_nostrwalletconnectoptions_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_nostrzapper_nwc.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_nostrzapper_nwc.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_options_new.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_options_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_profile_new.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_profile_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_relay_custom.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_relay_custom.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_relay_new.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_relay_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_relay_with_opts.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_relay_with_opts.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_relayfiltering_blacklist.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_relayfiltering_blacklist.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_relayfiltering_whitelist.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_relayfiltering_whitelist.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_relaylimits_disable.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_relaylimits_disable.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_relaylimits_new.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_relaylimits_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_relayoptions_new.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_relayoptions_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_relaypool_new.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_relaypool_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_relaypool_with_database.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_relaypool_with_database.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_relaysendoptions_new.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_relaysendoptions_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_subscribeautocloseoptions_new.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_subscribeautocloseoptions_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_subscribeoptions_new.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_subscribeoptions_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_zapdetails_new.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_zapdetails_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_zapentity_event.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_zapentity_event.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_zapentity_public_key.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_zapentity_public_key.restype = ctypes.c_uint16
_UniffiLib.ffi_nostr_sdk_ffi_uniffi_contract_version.argtypes = (
)
_UniffiLib.ffi_nostr_sdk_ffi_uniffi_contract_version.restype = ctypes.c_uint32

_uniffi_check_contract_api_version(_UniffiLib)
_uniffi_check_api_checksums(_UniffiLib)

# Public interface members begin here.


class _UniffiConverterUInt8(_UniffiConverterPrimitiveInt):
    CLASS_NAME = "u8"
    VALUE_MIN = 0
    VALUE_MAX = 2**8

    @staticmethod
    def read(buf):
        return buf.read_u8()

    @staticmethod
    def write(value, buf):
        buf.write_u8(value)

class _UniffiConverterUInt16(_UniffiConverterPrimitiveInt):
    CLASS_NAME = "u16"
    VALUE_MIN = 0
    VALUE_MAX = 2**16

    @staticmethod
    def read(buf):
        return buf.read_u16()

    @staticmethod
    def write(value, buf):
        buf.write_u16(value)

class _UniffiConverterUInt32(_UniffiConverterPrimitiveInt):
    CLASS_NAME = "u32"
    VALUE_MIN = 0
    VALUE_MAX = 2**32

    @staticmethod
    def read(buf):
        return buf.read_u32()

    @staticmethod
    def write(value, buf):
        buf.write_u32(value)

class _UniffiConverterUInt64(_UniffiConverterPrimitiveInt):
    CLASS_NAME = "u64"
    VALUE_MIN = 0
    VALUE_MAX = 2**64

    @staticmethod
    def read(buf):
        return buf.read_u64()

    @staticmethod
    def write(value, buf):
        buf.write_u64(value)

class _UniffiConverterDouble(_UniffiConverterPrimitiveFloat):
    @staticmethod
    def read(buf):
        return buf.read_double()

    @staticmethod
    def write(value, buf):
        buf.write_double(value)

class _UniffiConverterBool:
    @classmethod
    def check_lower(cls, value):
        return not not value

    @classmethod
    def lower(cls, value):
        return 1 if value else 0

    @staticmethod
    def lift(value):
        return value != 0

    @classmethod
    def read(cls, buf):
        return cls.lift(buf.read_u8())

    @classmethod
    def write(cls, value, buf):
        buf.write_u8(value)

class _UniffiConverterString:
    @staticmethod
    def check_lower(value):
        if not isinstance(value, str):
            raise TypeError("argument must be str, not {}".format(type(value).__name__))
        return value

    @staticmethod
    def read(buf):
        size = buf.read_i32()
        if size < 0:
            raise InternalError("Unexpected negative string length")
        utf8_bytes = buf.read(size)
        return utf8_bytes.decode("utf-8")

    @staticmethod
    def write(value, buf):
        utf8_bytes = value.encode("utf-8")
        buf.write_i32(len(utf8_bytes))
        buf.write(utf8_bytes)

    @staticmethod
    def lift(buf):
        with buf.consume_with_stream() as stream:
            return stream.read(stream.remaining()).decode("utf-8")

    @staticmethod
    def lower(value):
        with _UniffiRustBuffer.alloc_with_builder() as builder:
            builder.write(value.encode("utf-8"))
            return builder.finalize()

# The Duration type.
Duration = datetime.timedelta

# There is a loss of precision when converting from Rust durations,
# which are accurate to the nanosecond,
# to Python durations, which are only accurate to the microsecond.
class _UniffiConverterDuration(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        seconds = buf.read_u64()
        microseconds = buf.read_u32() / 1.0e3
        return datetime.timedelta(seconds=seconds, microseconds=microseconds)

    @staticmethod
    def check_lower(value):
        seconds = value.seconds + value.days * 24 * 3600
        if seconds < 0:
            raise ValueError("Invalid duration, must be non-negative")

    @staticmethod
    def write(value, buf):
        seconds = value.seconds + value.days * 24 * 3600
        nanoseconds = value.microseconds * 1000
        buf.write_i64(seconds)
        buf.write_u32(nanoseconds)



class ClientProtocol(typing.Protocol):
    def add_discovery_relay(self, url: "str"):
        """
        Add discovery relay

        If relay already exists, this method automatically add the `DISCOVERY` flag to it and return `false`.

        <https://github.com/nostr-protocol/nips/blob/master/65.md>
        """

        raise NotImplementedError
    def add_read_relay(self, url: "str"):
        """
        Add read relay

        If relay already exists, this method add the `READ` flag to it and return `false`.

        If are set pool subscriptions, the new added relay will inherit them. Use `subscribe_to` method instead of `subscribe`,
        to avoid to set pool subscriptions.
        """

        raise NotImplementedError
    def add_relay(self, url: "str"):
        """
        Add new relay

        Relays added with this method will have both `READ` and `WRITE` flags enabled

        If the relay already exists, the flags will be updated and `false` returned.

        If are set pool subscriptions, the new added relay will inherit them. Use `subscribe_to` method instead of `subscribe`,
        to avoid to set pool subscriptions.

        This method use previously set or default `Options` to configure the `Relay` (ex. set proxy, set min POW, set relay limits, ...).
        To use custom `RelayOptions` use `add_relay` method on `RelayPool`.

        Connection is **NOT** automatically started with relay, remember to call `connect` method!
        """

        raise NotImplementedError
    def add_write_relay(self, url: "str"):
        """
        Add write relay

        If relay already exists, this method add the `WRITE` flag to it and return `false`.
        """

        raise NotImplementedError
    def automatic_authentication(self, enable: "bool"):
        """
        Auto authenticate to relays (default: true)

        <https://github.com/nostr-protocol/nips/blob/master/42.md>
        """

        raise NotImplementedError
    def connect(self, ):
        """
        Connect to all added relays
        """

        raise NotImplementedError
    def connect_relay(self, url: "str"):
        """
        Connect to a previously added relay
        """

        raise NotImplementedError
    def connect_with_timeout(self, timeout: "Duration"):
        """
        Connect to all added relays

        Try to connect to the relays and wait for them to be connected at most for the specified `timeout`.
        The code continues if the `timeout` is reached or if all relays connect.
        """

        raise NotImplementedError
    def database(self, ):
        raise NotImplementedError
    def disconnect(self, ):
        raise NotImplementedError
    def disconnect_relay(self, url: "str"):
        raise NotImplementedError
    def dislike(self, event: "Event"):
        """
        Disike event

        <https://github.com/nostr-protocol/nips/blob/master/25.md>
        """

        raise NotImplementedError
    def fetch_metadata(self, public_key: "PublicKey",timeout: "typing.Union[object, typing.Optional[Duration]]" = _DEFAULT):
        """
        Fetch the newest public key metadata from database and connected relays.

        If you only want to consult cached data,
        consider `client.database().profile(PUBKEY)`.

        <https://github.com/nostr-protocol/nips/blob/master/01.md>
        """

        raise NotImplementedError
    def file_metadata(self, description: "str",metadata: "FileMetadata"):
        raise NotImplementedError
    def filtering(self, ):
        """
        Get filtering
        """

        raise NotImplementedError
    def get_events_from(self, urls: "typing.List[str]",filters: "typing.List[Filter]",timeout: "typing.Optional[Duration]"):
        """
        Get events of filters from specific relays
        """

        raise NotImplementedError
    def get_events_of(self, filters: "typing.List[Filter]",source: "EventSource"):
        """
        Get events of filters

        The returned events are sorted by newest first, if there is a limit only the newest are returned.

        If `gossip` is enabled (see `Options]) the events will be requested also to
        NIP-65 relays (automatically discovered) of public keys included in filters (if any).
        """

        raise NotImplementedError
    def gift_wrap(self, receiver: "PublicKey",rumor: "EventBuilder",expiration: "typing.Optional[Timestamp]"):
        """
        Construct Gift Wrap and send to all relays

        <https://github.com/nostr-protocol/nips/blob/master/59.md>
        """

        raise NotImplementedError
    def gift_wrap_to(self, urls: "typing.List[str]",receiver: "PublicKey",rumor: "EventBuilder",expiration: "typing.Optional[Timestamp]"):
        """
        Construct Gift Wrap and send to specific relays

        <https://github.com/nostr-protocol/nips/blob/master/59.md>
        """

        raise NotImplementedError
    def handle_notifications(self, handler: "HandleNotification"):
        """
        Handle notifications
        """

        raise NotImplementedError
    def like(self, event: "Event"):
        """
        Like event

        <https://github.com/nostr-protocol/nips/blob/master/25.md>
        """

        raise NotImplementedError
    def pool(self, ):
        """
        Get relay pool
        """

        raise NotImplementedError
    def reaction(self, event: "Event",reaction: "str"):
        """
        React to an [`Event`]

        <https://github.com/nostr-protocol/nips/blob/master/25.md>
        """

        raise NotImplementedError
    def reconcile(self, filter: "Filter",opts: "NegentropyOptions"):
        raise NotImplementedError
    def relay(self, url: "str"):
        raise NotImplementedError
    def relays(self, ):
        """
        Get relays with `READ` or `WRITE` flags
        """

        raise NotImplementedError
    def remove_relay(self, url: "str"):
        raise NotImplementedError
    def repost(self, event: "Event",relay_url: "typing.Optional[str]"):
        """
        Repost
        """

        raise NotImplementedError
    def send_event(self, event: "Event"):
        """
        Send event

        Send event to all relays with `WRITE` flag.
        If `gossip` is enabled (see `Options`) the event will be sent also to NIP-65 relays (automatically discovered).
        """

        raise NotImplementedError
    def send_event_builder(self, builder: "EventBuilder"):
        """
        Take an `EventBuilder`, sign it by using the `NostrSigner` and broadcast to relays (check `send_event` method for more details)

        Rise an error if the `NostrSigner` is not set.
        """

        raise NotImplementedError
    def send_event_builder_to(self, urls: "typing.List[str]",builder: "EventBuilder"):
        """
        Take an `EventBuilder`, sign it by using the `NostrSigner` and broadcast to specific relays.

        Rise an error if the `NostrSigner` is not set.
        """

        raise NotImplementedError
    def send_event_to(self, urls: "typing.List[str]",event: "Event"):
        """
        Send event to specific relays.
        """

        raise NotImplementedError
    def send_msg_to(self, urls: "typing.List[str]",msg: "ClientMessage"):
        raise NotImplementedError
    def send_private_msg(self, receiver: "PublicKey",message: "str",reply_to: "typing.Union[object, typing.Optional[EventId]]" = _DEFAULT):
        """
        Send private direct message to all relays

        <https://github.com/nostr-protocol/nips/blob/master/17.md>
        """

        raise NotImplementedError
    def send_private_msg_to(self, urls: "typing.List[str]",receiver: "PublicKey",message: "str",reply_to: "typing.Union[object, typing.Optional[EventId]]" = _DEFAULT):
        """
        Send private direct message to specific relays

        <https://github.com/nostr-protocol/nips/blob/master/17.md>
        """

        raise NotImplementedError
    def set_metadata(self, metadata: "Metadata"):
        raise NotImplementedError
    def shutdown(self, ):
        raise NotImplementedError
    def sign_event_builder(self, builder: "EventBuilder"):
        """
        Signs the `EventBuilder` into an `Event` using the `NostrSigner`
        """

        raise NotImplementedError
    def signer(self, ):
        raise NotImplementedError
    def subscribe(self, filters: "typing.List[Filter]",opts: "typing.Union[object, typing.Optional[SubscribeAutoCloseOptions]]" = _DEFAULT):
        """
        Subscribe to filters

        If `gossip` is enabled (see `Options]) the events will be requested also to
        NIP-65 relays (automatically discovered) of public keys included in filters (if any).

        ### Auto-closing subscription

        It's possible to automatically close a subscription by configuring the `SubscribeAutoCloseOptions`.
        """

        raise NotImplementedError
    def subscribe_to(self, urls: "typing.List[str]",filters: "typing.List[Filter]",opts: "typing.Union[object, typing.Optional[SubscribeAutoCloseOptions]]" = _DEFAULT):
        """
        Subscribe to filters to specific relays

        ### Auto-closing subscription

        It's possible to automatically close a subscription by configuring the `SubscribeAutoCloseOptions`.
        """

        raise NotImplementedError
    def subscribe_with_id(self, id: "str",filters: "typing.List[Filter]",opts: "typing.Union[object, typing.Optional[SubscribeAutoCloseOptions]]" = _DEFAULT):
        """
        Subscribe to filters with custom subscription ID

        If `gossip` is enabled (see `Options]) the events will be requested also to
        NIP-65 relays (automatically discovered) of public keys included in filters (if any).

        ### Auto-closing subscription

        It's possible to automatically close a subscription by configuring the `SubscribeAutoCloseOptions`.
        """

        raise NotImplementedError
    def subscribe_with_id_to(self, urls: "typing.List[str]",id: "str",filters: "typing.List[Filter]",opts: "typing.Union[object, typing.Optional[SubscribeAutoCloseOptions]]" = _DEFAULT):
        """
        Subscribe to filters with custom subscription ID to specific relays

        ### Auto-closing subscription

        It's possible to automatically close a subscription by configuring the `SubscribeAutoCloseOptions`.
        """

        raise NotImplementedError
    def subscription(self, id: "str"):
        raise NotImplementedError
    def subscriptions(self, ):
        raise NotImplementedError
    def unsubscribe(self, subscription_id: "str"):
        raise NotImplementedError
    def unsubscribe_all(self, ):
        raise NotImplementedError
    def unwrap_gift_wrap(self, gift_wrap: "Event"):
        """
        Unwrap Gift Wrap event

        Internally verify the `seal` event

        <https://github.com/nostr-protocol/nips/blob/master/59.md>
        """

        raise NotImplementedError
    def update_difficulty(self, difficulty: "int"):
        """
        Update default difficulty for new `Event`
        """

        raise NotImplementedError
    def update_min_pow_difficulty(self, difficulty: "int"):
        """
        Update minimum POW difficulty for received events

        Events with a POW lower than the current value will be ignored to prevent resources exhaustion.
        """

        raise NotImplementedError
    def zap(self, to: "ZapEntity",satoshi: "int",details: "typing.Optional[ZapDetails]"):
        """
        Send a Zap!
        """

        raise NotImplementedError


class Client:
    _pointer: ctypes.c_void_p
    def __init__(self, signer: "typing.Union[object, typing.Optional[NostrSigner]]" = _DEFAULT):
        if signer is _DEFAULT:
            signer = None
        _UniffiConverterOptionalTypeNostrSigner.check_lower(signer)
        
        self._pointer = _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_client_new,
        _UniffiConverterOptionalTypeNostrSigner.lower(signer))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_client, pointer)

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_client, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def with_opts(cls, signer: "typing.Optional[NostrSigner]",opts: "Options"):
        _UniffiConverterOptionalTypeNostrSigner.check_lower(signer)
        
        _UniffiConverterTypeOptions.check_lower(opts)
        
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_client_with_opts,
        _UniffiConverterOptionalTypeNostrSigner.lower(signer),
        _UniffiConverterTypeOptions.lower(opts))
        return cls._make_instance_(pointer)


    async def add_discovery_relay(self, url: "str") -> "bool":
        """
        Add discovery relay

        If relay already exists, this method automatically add the `DISCOVERY` flag to it and return `false`.

        <https://github.com/nostr-protocol/nips/blob/master/65.md>
        """

        _UniffiConverterString.check_lower(url)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_add_discovery_relay(
                self._uniffi_clone_pointer(), 
        _UniffiConverterString.lower(url)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_i8,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_i8,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_i8,
            # lift function
            _UniffiConverterBool.lift,
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )



    async def add_read_relay(self, url: "str") -> "bool":
        """
        Add read relay

        If relay already exists, this method add the `READ` flag to it and return `false`.

        If are set pool subscriptions, the new added relay will inherit them. Use `subscribe_to` method instead of `subscribe`,
        to avoid to set pool subscriptions.
        """

        _UniffiConverterString.check_lower(url)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_add_read_relay(
                self._uniffi_clone_pointer(), 
        _UniffiConverterString.lower(url)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_i8,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_i8,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_i8,
            # lift function
            _UniffiConverterBool.lift,
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )



    async def add_relay(self, url: "str") -> "bool":
        """
        Add new relay

        Relays added with this method will have both `READ` and `WRITE` flags enabled

        If the relay already exists, the flags will be updated and `false` returned.

        If are set pool subscriptions, the new added relay will inherit them. Use `subscribe_to` method instead of `subscribe`,
        to avoid to set pool subscriptions.

        This method use previously set or default `Options` to configure the `Relay` (ex. set proxy, set min POW, set relay limits, ...).
        To use custom `RelayOptions` use `add_relay` method on `RelayPool`.

        Connection is **NOT** automatically started with relay, remember to call `connect` method!
        """

        _UniffiConverterString.check_lower(url)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_add_relay(
                self._uniffi_clone_pointer(), 
        _UniffiConverterString.lower(url)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_i8,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_i8,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_i8,
            # lift function
            _UniffiConverterBool.lift,
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )



    async def add_write_relay(self, url: "str") -> "bool":
        """
        Add write relay

        If relay already exists, this method add the `WRITE` flag to it and return `false`.
        """

        _UniffiConverterString.check_lower(url)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_add_write_relay(
                self._uniffi_clone_pointer(), 
        _UniffiConverterString.lower(url)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_i8,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_i8,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_i8,
            # lift function
            _UniffiConverterBool.lift,
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )




    def automatic_authentication(self, enable: "bool") -> None:
        """
        Auto authenticate to relays (default: true)

        <https://github.com/nostr-protocol/nips/blob/master/42.md>
        """

        _UniffiConverterBool.check_lower(enable)
        
        _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_automatic_authentication,self._uniffi_clone_pointer(),
        _UniffiConverterBool.lower(enable))





    async def connect(self, ) -> None:

        """
        Connect to all added relays
        """

        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_connect(
                self._uniffi_clone_pointer(), 
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_void,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_void,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_void,
            # lift function
            lambda val: None,
            
            
    # Error FFI converter

    None,

        )



    async def connect_relay(self, url: "str") -> None:

        """
        Connect to a previously added relay
        """

        _UniffiConverterString.check_lower(url)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_connect_relay(
                self._uniffi_clone_pointer(), 
        _UniffiConverterString.lower(url)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_void,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_void,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_void,
            # lift function
            lambda val: None,
            
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )



    async def connect_with_timeout(self, timeout: "Duration") -> None:

        """
        Connect to all added relays

        Try to connect to the relays and wait for them to be connected at most for the specified `timeout`.
        The code continues if the `timeout` is reached or if all relays connect.
        """

        _UniffiConverterDuration.check_lower(timeout)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_connect_with_timeout(
                self._uniffi_clone_pointer(), 
        _UniffiConverterDuration.lower(timeout)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_void,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_void,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_void,
            # lift function
            lambda val: None,
            
            
    # Error FFI converter

    None,

        )




    def database(self, ) -> "NostrDatabase":
        return _UniffiConverterTypeNostrDatabase.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_database,self._uniffi_clone_pointer(),)
        )




    async def disconnect(self, ) -> None:

        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_disconnect(
                self._uniffi_clone_pointer(), 
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_void,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_void,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_void,
            # lift function
            lambda val: None,
            
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )



    async def disconnect_relay(self, url: "str") -> None:

        _UniffiConverterString.check_lower(url)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_disconnect_relay(
                self._uniffi_clone_pointer(), 
        _UniffiConverterString.lower(url)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_void,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_void,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_void,
            # lift function
            lambda val: None,
            
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )



    async def dislike(self, event: "Event") -> "SendEventOutput":
        """
        Disike event

        <https://github.com/nostr-protocol/nips/blob/master/25.md>
        """

        _UniffiConverterTypeEvent.check_lower(event)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_dislike(
                self._uniffi_clone_pointer(), 
        _UniffiConverterTypeEvent.lower(event)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_rust_buffer,
            # lift function
            _UniffiConverterTypeSendEventOutput.lift,
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )



    async def fetch_metadata(self, public_key: "PublicKey",timeout: "typing.Union[object, typing.Optional[Duration]]" = _DEFAULT) -> "Metadata":
        """
        Fetch the newest public key metadata from database and connected relays.

        If you only want to consult cached data,
        consider `client.database().profile(PUBKEY)`.

        <https://github.com/nostr-protocol/nips/blob/master/01.md>
        """

        _UniffiConverterTypePublicKey.check_lower(public_key)
        
        if timeout is _DEFAULT:
            timeout = None
        _UniffiConverterOptionalDuration.check_lower(timeout)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_fetch_metadata(
                self._uniffi_clone_pointer(), 
        _UniffiConverterTypePublicKey.lower(public_key),
        _UniffiConverterOptionalDuration.lower(timeout)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_pointer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_pointer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_pointer,
            # lift function
            _UniffiConverterTypeMetadata.lift,
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )



    async def file_metadata(self, description: "str",metadata: "FileMetadata") -> "SendEventOutput":
        _UniffiConverterString.check_lower(description)
        
        _UniffiConverterTypeFileMetadata.check_lower(metadata)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_file_metadata(
                self._uniffi_clone_pointer(), 
        _UniffiConverterString.lower(description),
        _UniffiConverterTypeFileMetadata.lower(metadata)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_rust_buffer,
            # lift function
            _UniffiConverterTypeSendEventOutput.lift,
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )




    def filtering(self, ) -> "RelayFiltering":
        """
        Get filtering
        """

        return _UniffiConverterTypeRelayFiltering.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_filtering,self._uniffi_clone_pointer(),)
        )




    async def get_events_from(self, urls: "typing.List[str]",filters: "typing.List[Filter]",timeout: "typing.Optional[Duration]") -> "typing.List[Event]":
        """
        Get events of filters from specific relays
        """

        _UniffiConverterSequenceString.check_lower(urls)
        
        _UniffiConverterSequenceTypeFilter.check_lower(filters)
        
        _UniffiConverterOptionalDuration.check_lower(timeout)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_get_events_from(
                self._uniffi_clone_pointer(), 
        _UniffiConverterSequenceString.lower(urls),
        _UniffiConverterSequenceTypeFilter.lower(filters),
        _UniffiConverterOptionalDuration.lower(timeout)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_rust_buffer,
            # lift function
            _UniffiConverterSequenceTypeEvent.lift,
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )



    async def get_events_of(self, filters: "typing.List[Filter]",source: "EventSource") -> "typing.List[Event]":
        """
        Get events of filters

        The returned events are sorted by newest first, if there is a limit only the newest are returned.

        If `gossip` is enabled (see `Options]) the events will be requested also to
        NIP-65 relays (automatically discovered) of public keys included in filters (if any).
        """

        _UniffiConverterSequenceTypeFilter.check_lower(filters)
        
        _UniffiConverterTypeEventSource.check_lower(source)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_get_events_of(
                self._uniffi_clone_pointer(), 
        _UniffiConverterSequenceTypeFilter.lower(filters),
        _UniffiConverterTypeEventSource.lower(source)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_rust_buffer,
            # lift function
            _UniffiConverterSequenceTypeEvent.lift,
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )



    async def gift_wrap(self, receiver: "PublicKey",rumor: "EventBuilder",expiration: "typing.Optional[Timestamp]") -> "SendEventOutput":
        """
        Construct Gift Wrap and send to all relays

        <https://github.com/nostr-protocol/nips/blob/master/59.md>
        """

        _UniffiConverterTypePublicKey.check_lower(receiver)
        
        _UniffiConverterTypeEventBuilder.check_lower(rumor)
        
        _UniffiConverterOptionalTypeTimestamp.check_lower(expiration)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_gift_wrap(
                self._uniffi_clone_pointer(), 
        _UniffiConverterTypePublicKey.lower(receiver),
        _UniffiConverterTypeEventBuilder.lower(rumor),
        _UniffiConverterOptionalTypeTimestamp.lower(expiration)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_rust_buffer,
            # lift function
            _UniffiConverterTypeSendEventOutput.lift,
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )



    async def gift_wrap_to(self, urls: "typing.List[str]",receiver: "PublicKey",rumor: "EventBuilder",expiration: "typing.Optional[Timestamp]") -> "SendEventOutput":
        """
        Construct Gift Wrap and send to specific relays

        <https://github.com/nostr-protocol/nips/blob/master/59.md>
        """

        _UniffiConverterSequenceString.check_lower(urls)
        
        _UniffiConverterTypePublicKey.check_lower(receiver)
        
        _UniffiConverterTypeEventBuilder.check_lower(rumor)
        
        _UniffiConverterOptionalTypeTimestamp.check_lower(expiration)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_gift_wrap_to(
                self._uniffi_clone_pointer(), 
        _UniffiConverterSequenceString.lower(urls),
        _UniffiConverterTypePublicKey.lower(receiver),
        _UniffiConverterTypeEventBuilder.lower(rumor),
        _UniffiConverterOptionalTypeTimestamp.lower(expiration)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_rust_buffer,
            # lift function
            _UniffiConverterTypeSendEventOutput.lift,
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )



    async def handle_notifications(self, handler: "HandleNotification") -> None:

        """
        Handle notifications
        """

        _UniffiConverterTypeHandleNotification.check_lower(handler)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_handle_notifications(
                self._uniffi_clone_pointer(), 
        _UniffiConverterTypeHandleNotification.lower(handler)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_void,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_void,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_void,
            # lift function
            lambda val: None,
            
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )



    async def like(self, event: "Event") -> "SendEventOutput":
        """
        Like event

        <https://github.com/nostr-protocol/nips/blob/master/25.md>
        """

        _UniffiConverterTypeEvent.check_lower(event)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_like(
                self._uniffi_clone_pointer(), 
        _UniffiConverterTypeEvent.lower(event)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_rust_buffer,
            # lift function
            _UniffiConverterTypeSendEventOutput.lift,
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )




    def pool(self, ) -> "RelayPool":
        """
        Get relay pool
        """

        return _UniffiConverterTypeRelayPool.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_pool,self._uniffi_clone_pointer(),)
        )




    async def reaction(self, event: "Event",reaction: "str") -> "SendEventOutput":
        """
        React to an [`Event`]

        <https://github.com/nostr-protocol/nips/blob/master/25.md>
        """

        _UniffiConverterTypeEvent.check_lower(event)
        
        _UniffiConverterString.check_lower(reaction)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_reaction(
                self._uniffi_clone_pointer(), 
        _UniffiConverterTypeEvent.lower(event),
        _UniffiConverterString.lower(reaction)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_rust_buffer,
            # lift function
            _UniffiConverterTypeSendEventOutput.lift,
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )



    async def reconcile(self, filter: "Filter",opts: "NegentropyOptions") -> "ReconciliationOutput":
        _UniffiConverterTypeFilter.check_lower(filter)
        
        _UniffiConverterTypeNegentropyOptions.check_lower(opts)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_reconcile(
                self._uniffi_clone_pointer(), 
        _UniffiConverterTypeFilter.lower(filter),
        _UniffiConverterTypeNegentropyOptions.lower(opts)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_rust_buffer,
            # lift function
            _UniffiConverterTypeReconciliationOutput.lift,
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )



    async def relay(self, url: "str") -> "Relay":
        _UniffiConverterString.check_lower(url)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_relay(
                self._uniffi_clone_pointer(), 
        _UniffiConverterString.lower(url)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_pointer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_pointer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_pointer,
            # lift function
            _UniffiConverterTypeRelay.lift,
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )



    async def relays(self, ) -> "dict[str, Relay]":
        """
        Get relays with `READ` or `WRITE` flags
        """

        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_relays(
                self._uniffi_clone_pointer(), 
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_rust_buffer,
            # lift function
            _UniffiConverterMapStringTypeRelay.lift,
            
    # Error FFI converter

    None,

        )



    async def remove_relay(self, url: "str") -> None:

        _UniffiConverterString.check_lower(url)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_remove_relay(
                self._uniffi_clone_pointer(), 
        _UniffiConverterString.lower(url)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_void,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_void,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_void,
            # lift function
            lambda val: None,
            
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )



    async def repost(self, event: "Event",relay_url: "typing.Optional[str]") -> "SendEventOutput":
        """
        Repost
        """

        _UniffiConverterTypeEvent.check_lower(event)
        
        _UniffiConverterOptionalString.check_lower(relay_url)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_repost(
                self._uniffi_clone_pointer(), 
        _UniffiConverterTypeEvent.lower(event),
        _UniffiConverterOptionalString.lower(relay_url)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_rust_buffer,
            # lift function
            _UniffiConverterTypeSendEventOutput.lift,
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )



    async def send_event(self, event: "Event") -> "SendEventOutput":
        """
        Send event

        Send event to all relays with `WRITE` flag.
        If `gossip` is enabled (see `Options`) the event will be sent also to NIP-65 relays (automatically discovered).
        """

        _UniffiConverterTypeEvent.check_lower(event)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_send_event(
                self._uniffi_clone_pointer(), 
        _UniffiConverterTypeEvent.lower(event)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_rust_buffer,
            # lift function
            _UniffiConverterTypeSendEventOutput.lift,
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )



    async def send_event_builder(self, builder: "EventBuilder") -> "SendEventOutput":
        """
        Take an `EventBuilder`, sign it by using the `NostrSigner` and broadcast to relays (check `send_event` method for more details)

        Rise an error if the `NostrSigner` is not set.
        """

        _UniffiConverterTypeEventBuilder.check_lower(builder)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_send_event_builder(
                self._uniffi_clone_pointer(), 
        _UniffiConverterTypeEventBuilder.lower(builder)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_rust_buffer,
            # lift function
            _UniffiConverterTypeSendEventOutput.lift,
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )



    async def send_event_builder_to(self, urls: "typing.List[str]",builder: "EventBuilder") -> "SendEventOutput":
        """
        Take an `EventBuilder`, sign it by using the `NostrSigner` and broadcast to specific relays.

        Rise an error if the `NostrSigner` is not set.
        """

        _UniffiConverterSequenceString.check_lower(urls)
        
        _UniffiConverterTypeEventBuilder.check_lower(builder)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_send_event_builder_to(
                self._uniffi_clone_pointer(), 
        _UniffiConverterSequenceString.lower(urls),
        _UniffiConverterTypeEventBuilder.lower(builder)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_rust_buffer,
            # lift function
            _UniffiConverterTypeSendEventOutput.lift,
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )



    async def send_event_to(self, urls: "typing.List[str]",event: "Event") -> "SendEventOutput":
        """
        Send event to specific relays.
        """

        _UniffiConverterSequenceString.check_lower(urls)
        
        _UniffiConverterTypeEvent.check_lower(event)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_send_event_to(
                self._uniffi_clone_pointer(), 
        _UniffiConverterSequenceString.lower(urls),
        _UniffiConverterTypeEvent.lower(event)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_rust_buffer,
            # lift function
            _UniffiConverterTypeSendEventOutput.lift,
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )



    async def send_msg_to(self, urls: "typing.List[str]",msg: "ClientMessage") -> "Output":
        _UniffiConverterSequenceString.check_lower(urls)
        
        _UniffiConverterTypeClientMessage.check_lower(msg)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_send_msg_to(
                self._uniffi_clone_pointer(), 
        _UniffiConverterSequenceString.lower(urls),
        _UniffiConverterTypeClientMessage.lower(msg)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_rust_buffer,
            # lift function
            _UniffiConverterTypeOutput.lift,
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )



    async def send_private_msg(self, receiver: "PublicKey",message: "str",reply_to: "typing.Union[object, typing.Optional[EventId]]" = _DEFAULT) -> "SendEventOutput":
        """
        Send private direct message to all relays

        <https://github.com/nostr-protocol/nips/blob/master/17.md>
        """

        _UniffiConverterTypePublicKey.check_lower(receiver)
        
        _UniffiConverterString.check_lower(message)
        
        if reply_to is _DEFAULT:
            reply_to = None
        _UniffiConverterOptionalTypeEventId.check_lower(reply_to)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_send_private_msg(
                self._uniffi_clone_pointer(), 
        _UniffiConverterTypePublicKey.lower(receiver),
        _UniffiConverterString.lower(message),
        _UniffiConverterOptionalTypeEventId.lower(reply_to)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_rust_buffer,
            # lift function
            _UniffiConverterTypeSendEventOutput.lift,
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )



    async def send_private_msg_to(self, urls: "typing.List[str]",receiver: "PublicKey",message: "str",reply_to: "typing.Union[object, typing.Optional[EventId]]" = _DEFAULT) -> "SendEventOutput":
        """
        Send private direct message to specific relays

        <https://github.com/nostr-protocol/nips/blob/master/17.md>
        """

        _UniffiConverterSequenceString.check_lower(urls)
        
        _UniffiConverterTypePublicKey.check_lower(receiver)
        
        _UniffiConverterString.check_lower(message)
        
        if reply_to is _DEFAULT:
            reply_to = None
        _UniffiConverterOptionalTypeEventId.check_lower(reply_to)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_send_private_msg_to(
                self._uniffi_clone_pointer(), 
        _UniffiConverterSequenceString.lower(urls),
        _UniffiConverterTypePublicKey.lower(receiver),
        _UniffiConverterString.lower(message),
        _UniffiConverterOptionalTypeEventId.lower(reply_to)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_rust_buffer,
            # lift function
            _UniffiConverterTypeSendEventOutput.lift,
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )



    async def set_metadata(self, metadata: "Metadata") -> "SendEventOutput":
        _UniffiConverterTypeMetadata.check_lower(metadata)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_set_metadata(
                self._uniffi_clone_pointer(), 
        _UniffiConverterTypeMetadata.lower(metadata)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_rust_buffer,
            # lift function
            _UniffiConverterTypeSendEventOutput.lift,
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )



    async def shutdown(self, ) -> None:

        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_shutdown(
                self._uniffi_clone_pointer(), 
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_void,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_void,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_void,
            # lift function
            lambda val: None,
            
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )



    async def sign_event_builder(self, builder: "EventBuilder") -> "Event":
        """
        Signs the `EventBuilder` into an `Event` using the `NostrSigner`
        """

        _UniffiConverterTypeEventBuilder.check_lower(builder)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_sign_event_builder(
                self._uniffi_clone_pointer(), 
        _UniffiConverterTypeEventBuilder.lower(builder)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_pointer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_pointer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_pointer,
            # lift function
            _UniffiConverterTypeEvent.lift,
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )



    async def signer(self, ) -> "NostrSigner":
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_signer(
                self._uniffi_clone_pointer(), 
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_pointer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_pointer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_pointer,
            # lift function
            _UniffiConverterTypeNostrSigner.lift,
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )



    async def subscribe(self, filters: "typing.List[Filter]",opts: "typing.Union[object, typing.Optional[SubscribeAutoCloseOptions]]" = _DEFAULT) -> "SubscribeOutput":
        """
        Subscribe to filters

        If `gossip` is enabled (see `Options]) the events will be requested also to
        NIP-65 relays (automatically discovered) of public keys included in filters (if any).

        ### Auto-closing subscription

        It's possible to automatically close a subscription by configuring the `SubscribeAutoCloseOptions`.
        """

        _UniffiConverterSequenceTypeFilter.check_lower(filters)
        
        if opts is _DEFAULT:
            opts = None
        _UniffiConverterOptionalTypeSubscribeAutoCloseOptions.check_lower(opts)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_subscribe(
                self._uniffi_clone_pointer(), 
        _UniffiConverterSequenceTypeFilter.lower(filters),
        _UniffiConverterOptionalTypeSubscribeAutoCloseOptions.lower(opts)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_rust_buffer,
            # lift function
            _UniffiConverterTypeSubscribeOutput.lift,
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )



    async def subscribe_to(self, urls: "typing.List[str]",filters: "typing.List[Filter]",opts: "typing.Union[object, typing.Optional[SubscribeAutoCloseOptions]]" = _DEFAULT) -> "SubscribeOutput":
        """
        Subscribe to filters to specific relays

        ### Auto-closing subscription

        It's possible to automatically close a subscription by configuring the `SubscribeAutoCloseOptions`.
        """

        _UniffiConverterSequenceString.check_lower(urls)
        
        _UniffiConverterSequenceTypeFilter.check_lower(filters)
        
        if opts is _DEFAULT:
            opts = None
        _UniffiConverterOptionalTypeSubscribeAutoCloseOptions.check_lower(opts)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_subscribe_to(
                self._uniffi_clone_pointer(), 
        _UniffiConverterSequenceString.lower(urls),
        _UniffiConverterSequenceTypeFilter.lower(filters),
        _UniffiConverterOptionalTypeSubscribeAutoCloseOptions.lower(opts)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_rust_buffer,
            # lift function
            _UniffiConverterTypeSubscribeOutput.lift,
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )



    async def subscribe_with_id(self, id: "str",filters: "typing.List[Filter]",opts: "typing.Union[object, typing.Optional[SubscribeAutoCloseOptions]]" = _DEFAULT) -> "Output":
        """
        Subscribe to filters with custom subscription ID

        If `gossip` is enabled (see `Options]) the events will be requested also to
        NIP-65 relays (automatically discovered) of public keys included in filters (if any).

        ### Auto-closing subscription

        It's possible to automatically close a subscription by configuring the `SubscribeAutoCloseOptions`.
        """

        _UniffiConverterString.check_lower(id)
        
        _UniffiConverterSequenceTypeFilter.check_lower(filters)
        
        if opts is _DEFAULT:
            opts = None
        _UniffiConverterOptionalTypeSubscribeAutoCloseOptions.check_lower(opts)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_subscribe_with_id(
                self._uniffi_clone_pointer(), 
        _UniffiConverterString.lower(id),
        _UniffiConverterSequenceTypeFilter.lower(filters),
        _UniffiConverterOptionalTypeSubscribeAutoCloseOptions.lower(opts)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_rust_buffer,
            # lift function
            _UniffiConverterTypeOutput.lift,
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )



    async def subscribe_with_id_to(self, urls: "typing.List[str]",id: "str",filters: "typing.List[Filter]",opts: "typing.Union[object, typing.Optional[SubscribeAutoCloseOptions]]" = _DEFAULT) -> "Output":
        """
        Subscribe to filters with custom subscription ID to specific relays

        ### Auto-closing subscription

        It's possible to automatically close a subscription by configuring the `SubscribeAutoCloseOptions`.
        """

        _UniffiConverterSequenceString.check_lower(urls)
        
        _UniffiConverterString.check_lower(id)
        
        _UniffiConverterSequenceTypeFilter.check_lower(filters)
        
        if opts is _DEFAULT:
            opts = None
        _UniffiConverterOptionalTypeSubscribeAutoCloseOptions.check_lower(opts)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_subscribe_with_id_to(
                self._uniffi_clone_pointer(), 
        _UniffiConverterSequenceString.lower(urls),
        _UniffiConverterString.lower(id),
        _UniffiConverterSequenceTypeFilter.lower(filters),
        _UniffiConverterOptionalTypeSubscribeAutoCloseOptions.lower(opts)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_rust_buffer,
            # lift function
            _UniffiConverterTypeOutput.lift,
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )



    async def subscription(self, id: "str") -> "typing.Optional[typing.List[Filter]]":
        _UniffiConverterString.check_lower(id)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_subscription(
                self._uniffi_clone_pointer(), 
        _UniffiConverterString.lower(id)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_rust_buffer,
            # lift function
            _UniffiConverterOptionalSequenceTypeFilter.lift,
            
    # Error FFI converter

    None,

        )



    async def subscriptions(self, ) -> "dict[str, typing.List[Filter]]":
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_subscriptions(
                self._uniffi_clone_pointer(), 
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_rust_buffer,
            # lift function
            _UniffiConverterMapStringSequenceTypeFilter.lift,
            
    # Error FFI converter

    None,

        )



    async def unsubscribe(self, subscription_id: "str") -> None:

        _UniffiConverterString.check_lower(subscription_id)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_unsubscribe(
                self._uniffi_clone_pointer(), 
        _UniffiConverterString.lower(subscription_id)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_void,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_void,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_void,
            # lift function
            lambda val: None,
            
            
    # Error FFI converter

    None,

        )



    async def unsubscribe_all(self, ) -> None:

        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_unsubscribe_all(
                self._uniffi_clone_pointer(), 
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_void,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_void,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_void,
            # lift function
            lambda val: None,
            
            
    # Error FFI converter

    None,

        )



    async def unwrap_gift_wrap(self, gift_wrap: "Event") -> "UnwrappedGift":
        """
        Unwrap Gift Wrap event

        Internally verify the `seal` event

        <https://github.com/nostr-protocol/nips/blob/master/59.md>
        """

        _UniffiConverterTypeEvent.check_lower(gift_wrap)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_unwrap_gift_wrap(
                self._uniffi_clone_pointer(), 
        _UniffiConverterTypeEvent.lower(gift_wrap)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_pointer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_pointer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_pointer,
            # lift function
            _UniffiConverterTypeUnwrappedGift.lift,
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )




    def update_difficulty(self, difficulty: "int") -> None:
        """
        Update default difficulty for new `Event`
        """

        _UniffiConverterUInt8.check_lower(difficulty)
        
        _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_update_difficulty,self._uniffi_clone_pointer(),
        _UniffiConverterUInt8.lower(difficulty))






    def update_min_pow_difficulty(self, difficulty: "int") -> None:
        """
        Update minimum POW difficulty for received events

        Events with a POW lower than the current value will be ignored to prevent resources exhaustion.
        """

        _UniffiConverterUInt8.check_lower(difficulty)
        
        _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_update_min_pow_difficulty,self._uniffi_clone_pointer(),
        _UniffiConverterUInt8.lower(difficulty))





    async def zap(self, to: "ZapEntity",satoshi: "int",details: "typing.Optional[ZapDetails]") -> None:

        """
        Send a Zap!
        """

        _UniffiConverterTypeZapEntity.check_lower(to)
        
        _UniffiConverterUInt64.check_lower(satoshi)
        
        _UniffiConverterOptionalTypeZapDetails.check_lower(details)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_zap(
                self._uniffi_clone_pointer(), 
        _UniffiConverterTypeZapEntity.lower(to),
        _UniffiConverterUInt64.lower(satoshi),
        _UniffiConverterOptionalTypeZapDetails.lower(details)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_void,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_void,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_void,
            # lift function
            lambda val: None,
            
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )





class _UniffiConverterTypeClient:

    @staticmethod
    def lift(value: int):
        return Client._make_instance_(value)

    @staticmethod
    def check_lower(value: Client):
        if not isinstance(value, Client):
            raise TypeError("Expected Client instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: ClientProtocol):
        if not isinstance(value, Client):
            raise TypeError("Expected Client instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: ClientProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class ClientBuilderProtocol(typing.Protocol):
    def build(self, ):
        """
        Build [`Client`]
        """

        raise NotImplementedError
    def database(self, database: "NostrDatabase"):
        raise NotImplementedError
    def opts(self, opts: "Options"):
        """
        Set opts
        """

        raise NotImplementedError
    def signer(self, signer: "NostrSigner"):
        raise NotImplementedError
    def zapper(self, zapper: "NostrZapper"):
        raise NotImplementedError


class ClientBuilder:
    _pointer: ctypes.c_void_p
    def __init__(self, ):
        """
        New client builder
        """

        self._pointer = _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_clientbuilder_new,)

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_clientbuilder, pointer)

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_clientbuilder, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def build(self, ) -> "Client":
        """
        Build [`Client`]
        """

        return _UniffiConverterTypeClient.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_clientbuilder_build,self._uniffi_clone_pointer(),)
        )





    def database(self, database: "NostrDatabase") -> "ClientBuilder":
        _UniffiConverterTypeNostrDatabase.check_lower(database)
        
        return _UniffiConverterTypeClientBuilder.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_clientbuilder_database,self._uniffi_clone_pointer(),
        _UniffiConverterTypeNostrDatabase.lower(database))
        )





    def opts(self, opts: "Options") -> "ClientBuilder":
        """
        Set opts
        """

        _UniffiConverterTypeOptions.check_lower(opts)
        
        return _UniffiConverterTypeClientBuilder.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_clientbuilder_opts,self._uniffi_clone_pointer(),
        _UniffiConverterTypeOptions.lower(opts))
        )





    def signer(self, signer: "NostrSigner") -> "ClientBuilder":
        _UniffiConverterTypeNostrSigner.check_lower(signer)
        
        return _UniffiConverterTypeClientBuilder.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_clientbuilder_signer,self._uniffi_clone_pointer(),
        _UniffiConverterTypeNostrSigner.lower(signer))
        )





    def zapper(self, zapper: "NostrZapper") -> "ClientBuilder":
        _UniffiConverterTypeNostrZapper.check_lower(zapper)
        
        return _UniffiConverterTypeClientBuilder.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_clientbuilder_zapper,self._uniffi_clone_pointer(),
        _UniffiConverterTypeNostrZapper.lower(zapper))
        )






class _UniffiConverterTypeClientBuilder:

    @staticmethod
    def lift(value: int):
        return ClientBuilder._make_instance_(value)

    @staticmethod
    def check_lower(value: ClientBuilder):
        if not isinstance(value, ClientBuilder):
            raise TypeError("Expected ClientBuilder instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: ClientBuilderProtocol):
        if not isinstance(value, ClientBuilder):
            raise TypeError("Expected ClientBuilder instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: ClientBuilderProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class ConnectionProtocol(typing.Protocol):
    """
    Connection
    """

    def addr(self, addr: "str"):
        """
        Set proxy (ex. `127.0.0.1:9050`)
        """

        raise NotImplementedError
    def embedded_tor(self, ):
        """
        Use embedded tor client
        """

        raise NotImplementedError
    def mode(self, mode: "ConnectionMode"):
        """
        Set connection mode (default: direct)
        """

        raise NotImplementedError
    def target(self, target: "ConnectionTarget"):
        """
        Set connection target (default: all)
        """

        raise NotImplementedError


class Connection:
    """
    Connection
    """

    _pointer: ctypes.c_void_p
    def __init__(self, ):
        self._pointer = _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_connection_new,)

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_connection, pointer)

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_connection, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def addr(self, addr: "str") -> "Connection":
        """
        Set proxy (ex. `127.0.0.1:9050`)
        """

        _UniffiConverterString.check_lower(addr)
        
        return _UniffiConverterTypeConnection.lift(
            _uniffi_rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_connection_addr,self._uniffi_clone_pointer(),
        _UniffiConverterString.lower(addr))
        )





    def embedded_tor(self, ) -> "Connection":
        """
        Use embedded tor client
        """

        return _UniffiConverterTypeConnection.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_connection_embedded_tor,self._uniffi_clone_pointer(),)
        )





    def mode(self, mode: "ConnectionMode") -> "Connection":
        """
        Set connection mode (default: direct)
        """

        _UniffiConverterTypeConnectionMode.check_lower(mode)
        
        return _UniffiConverterTypeConnection.lift(
            _uniffi_rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_connection_mode,self._uniffi_clone_pointer(),
        _UniffiConverterTypeConnectionMode.lower(mode))
        )





    def target(self, target: "ConnectionTarget") -> "Connection":
        """
        Set connection target (default: all)
        """

        _UniffiConverterTypeConnectionTarget.check_lower(target)
        
        return _UniffiConverterTypeConnection.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_connection_target,self._uniffi_clone_pointer(),
        _UniffiConverterTypeConnectionTarget.lower(target))
        )





    def __repr__(self, ) -> "str":
        return _UniffiConverterString.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_connection_uniffi_trait_debug,self._uniffi_clone_pointer(),)
        )



    def __eq__(self, other: object) -> bool:
        if not isinstance(other, Connection):
            return NotImplemented

        return _UniffiConverterBool.lift(_uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_connection_uniffi_trait_eq_eq,self._uniffi_clone_pointer(),
        _UniffiConverterTypeConnection.lower(other)))

    def __ne__(self, other: object) -> bool:
        if not isinstance(other, Connection):
            return NotImplemented

        return _UniffiConverterBool.lift(_uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_connection_uniffi_trait_eq_ne,self._uniffi_clone_pointer(),
        _UniffiConverterTypeConnection.lower(other)))


    def __hash__(self, ) -> "int":
        return _UniffiConverterUInt64.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_connection_uniffi_trait_hash,self._uniffi_clone_pointer(),)
        )






class _UniffiConverterTypeConnection:

    @staticmethod
    def lift(value: int):
        return Connection._make_instance_(value)

    @staticmethod
    def check_lower(value: Connection):
        if not isinstance(value, Connection):
            raise TypeError("Expected Connection instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: ConnectionProtocol):
        if not isinstance(value, Connection):
            raise TypeError("Expected Connection instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: ConnectionProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class CustomNostrDatabase(typing.Protocol):
    def backend(self, ):
        """
        Name of backend
        """

        raise NotImplementedError
    def save_event(self, event: "Event"):
        """
        Save [`Event`] into store

        Return `true` if event was successfully saved into database.

        **This method assume that [`Event`] was already verified**
        """

        raise NotImplementedError
    def check_id(self, event_id: "EventId"):
        """
        Check event status by ID

        Check if the event is saved, deleted or not existent.
        """

        raise NotImplementedError
    def has_coordinate_been_deleted(self, coordinate: "Coordinate",timestamp: "Timestamp"):
        """
        Check if event with [`Coordinate`] has been deleted before [`Timestamp`]
        """

        raise NotImplementedError
    def event_id_seen(self, event_id: "EventId",relay_url: "str"):
        """
        Set [`EventId`] as seen by relay

        Useful for NIP65 (aka gossip)
        """

        raise NotImplementedError
    def event_seen_on_relays(self, event_id: "EventId"):
        """
        Get list of relays that have seen the [`EventId`]
        """

        raise NotImplementedError
    def event_by_id(self, event_id: "EventId"):
        """
        Get event by ID
        """

        raise NotImplementedError
    def count(self, filters: "typing.List[Filter]"):
        """
        Count number of [`Event`] found by filters

        Use `Filter::new()` or `Filter::default()` to count all events.
        """

        raise NotImplementedError
    def query(self, filters: "typing.List[Filter]"):
        """
        Query store with filters
        """

        raise NotImplementedError
    def delete(self, filter: "Filter"):
        """
        Delete all events that match the `Filter`
        """

        raise NotImplementedError
    def wipe(self, ):
        """
        Wipe all data
        """

        raise NotImplementedError


class CustomNostrDatabaseImpl:
    _pointer: ctypes.c_void_p
    
    def __init__(self, *args, **kwargs):
        raise ValueError("This class has no default constructor")

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_customnostrdatabase, pointer)

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_customnostrdatabase, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def backend(self, ) -> "str":
        """
        Name of backend
        """

        return _UniffiConverterString.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_customnostrdatabase_backend,self._uniffi_clone_pointer(),)
        )




    async def save_event(self, event: "Event") -> "bool":
        """
        Save [`Event`] into store

        Return `true` if event was successfully saved into database.

        **This method assume that [`Event`] was already verified**
        """

        _UniffiConverterTypeEvent.check_lower(event)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_customnostrdatabase_save_event(
                self._uniffi_clone_pointer(), 
        _UniffiConverterTypeEvent.lower(event)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_i8,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_i8,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_i8,
            # lift function
            _UniffiConverterBool.lift,
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )



    async def check_id(self, event_id: "EventId") -> "DatabaseEventStatus":
        """
        Check event status by ID

        Check if the event is saved, deleted or not existent.
        """

        _UniffiConverterTypeEventId.check_lower(event_id)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_customnostrdatabase_check_id(
                self._uniffi_clone_pointer(), 
        _UniffiConverterTypeEventId.lower(event_id)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_rust_buffer,
            # lift function
            _UniffiConverterTypeDatabaseEventStatus.lift,
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )



    async def has_coordinate_been_deleted(self, coordinate: "Coordinate",timestamp: "Timestamp") -> "bool":
        """
        Check if event with [`Coordinate`] has been deleted before [`Timestamp`]
        """

        _UniffiConverterTypeCoordinate.check_lower(coordinate)
        
        _UniffiConverterTypeTimestamp.check_lower(timestamp)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_customnostrdatabase_has_coordinate_been_deleted(
                self._uniffi_clone_pointer(), 
        _UniffiConverterTypeCoordinate.lower(coordinate),
        _UniffiConverterTypeTimestamp.lower(timestamp)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_i8,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_i8,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_i8,
            # lift function
            _UniffiConverterBool.lift,
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )



    async def event_id_seen(self, event_id: "EventId",relay_url: "str") -> None:

        """
        Set [`EventId`] as seen by relay

        Useful for NIP65 (aka gossip)
        """

        _UniffiConverterTypeEventId.check_lower(event_id)
        
        _UniffiConverterString.check_lower(relay_url)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_customnostrdatabase_event_id_seen(
                self._uniffi_clone_pointer(), 
        _UniffiConverterTypeEventId.lower(event_id),
        _UniffiConverterString.lower(relay_url)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_void,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_void,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_void,
            # lift function
            lambda val: None,
            
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )



    async def event_seen_on_relays(self, event_id: "EventId") -> "typing.Optional[typing.List[str]]":
        """
        Get list of relays that have seen the [`EventId`]
        """

        _UniffiConverterTypeEventId.check_lower(event_id)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_customnostrdatabase_event_seen_on_relays(
                self._uniffi_clone_pointer(), 
        _UniffiConverterTypeEventId.lower(event_id)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_rust_buffer,
            # lift function
            _UniffiConverterOptionalSequenceString.lift,
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )



    async def event_by_id(self, event_id: "EventId") -> "typing.Optional[Event]":
        """
        Get event by ID
        """

        _UniffiConverterTypeEventId.check_lower(event_id)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_customnostrdatabase_event_by_id(
                self._uniffi_clone_pointer(), 
        _UniffiConverterTypeEventId.lower(event_id)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_rust_buffer,
            # lift function
            _UniffiConverterOptionalTypeEvent.lift,
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )



    async def count(self, filters: "typing.List[Filter]") -> "int":
        """
        Count number of [`Event`] found by filters

        Use `Filter::new()` or `Filter::default()` to count all events.
        """

        _UniffiConverterSequenceTypeFilter.check_lower(filters)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_customnostrdatabase_count(
                self._uniffi_clone_pointer(), 
        _UniffiConverterSequenceTypeFilter.lower(filters)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_u64,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_u64,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_u64,
            # lift function
            _UniffiConverterUInt64.lift,
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )



    async def query(self, filters: "typing.List[Filter]") -> "typing.List[Event]":
        """
        Query store with filters
        """

        _UniffiConverterSequenceTypeFilter.check_lower(filters)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_customnostrdatabase_query(
                self._uniffi_clone_pointer(), 
        _UniffiConverterSequenceTypeFilter.lower(filters)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_rust_buffer,
            # lift function
            _UniffiConverterSequenceTypeEvent.lift,
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )



    async def delete(self, filter: "Filter") -> None:

        """
        Delete all events that match the `Filter`
        """

        _UniffiConverterTypeFilter.check_lower(filter)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_customnostrdatabase_delete(
                self._uniffi_clone_pointer(), 
        _UniffiConverterTypeFilter.lower(filter)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_void,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_void,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_void,
            # lift function
            lambda val: None,
            
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )



    async def wipe(self, ) -> None:

        """
        Wipe all data
        """

        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_customnostrdatabase_wipe(
                self._uniffi_clone_pointer(), 
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_void,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_void,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_void,
            # lift function
            lambda val: None,
            
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )


# Magic number for the Rust proxy to call using the same mechanism as every other method,
# to free the callback once it's dropped by Rust.
_UNIFFI_IDX_CALLBACK_FREE = 0
# Return codes for callback calls
_UNIFFI_CALLBACK_SUCCESS = 0
_UNIFFI_CALLBACK_ERROR = 1
_UNIFFI_CALLBACK_UNEXPECTED_ERROR = 2

class _UniffiCallbackInterfaceFfiConverter:
    _handle_map = _UniffiHandleMap()

    @classmethod
    def lift(cls, handle):
        return cls._handle_map.get(handle)

    @classmethod
    def read(cls, buf):
        handle = buf.read_u64()
        cls.lift(handle)

    @classmethod
    def check_lower(cls, cb):
        pass

    @classmethod
    def lower(cls, cb):
        handle = cls._handle_map.insert(cb)
        return handle

    @classmethod
    def write(cls, cb, buf):
        buf.write_u64(cls.lower(cb))

# Put all the bits inside a class to keep the top-level namespace clean
class _UniffiTraitImplCustomNostrDatabase:
    # For each method, generate a callback function to pass to Rust

    @_UNIFFI_CALLBACK_INTERFACE_CUSTOM_NOSTR_DATABASE_METHOD0
    def backend(
            uniffi_handle,
            uniffi_out_return,
            uniffi_call_status_ptr,
        ):
        uniffi_obj = _UniffiConverterTypeCustomNostrDatabase._handle_map.get(uniffi_handle)
        def make_call():
            args = ()
            method = uniffi_obj.backend
            return method(*args)

        
        def write_return_value(v):
            uniffi_out_return[0] = _UniffiConverterString.lower(v)
        _uniffi_trait_interface_call(
                uniffi_call_status_ptr.contents,
                make_call,
                write_return_value,
        )

    @_UNIFFI_CALLBACK_INTERFACE_CUSTOM_NOSTR_DATABASE_METHOD1
    def save_event(
            uniffi_handle,
            event,
            uniffi_future_callback,
            uniffi_callback_data,
            uniffi_out_return,
        ):
        uniffi_obj = _UniffiConverterTypeCustomNostrDatabase._handle_map.get(uniffi_handle)
        def make_call():
            args = (_UniffiConverterTypeEvent.lift(event), )
            method = uniffi_obj.save_event
            return method(*args)

        
        def handle_success(return_value):
            uniffi_future_callback(
                uniffi_callback_data,
                _UniffiForeignFutureStructI8(
                    _UniffiConverterBool.lower(return_value),
                    _UniffiRustCallStatus.default()
                )
            )

        def handle_error(status_code, rust_buffer):
            uniffi_future_callback(
                uniffi_callback_data,
                _UniffiForeignFutureStructI8(
                    0,
                    _UniffiRustCallStatus(status_code, rust_buffer),
                )
            )
        uniffi_out_return[0] = _uniffi_trait_interface_call_async_with_error(make_call, handle_success, handle_error, NostrSdkError, _UniffiConverterTypeNostrSdkError.lower)

    @_UNIFFI_CALLBACK_INTERFACE_CUSTOM_NOSTR_DATABASE_METHOD2
    def check_id(
            uniffi_handle,
            event_id,
            uniffi_future_callback,
            uniffi_callback_data,
            uniffi_out_return,
        ):
        uniffi_obj = _UniffiConverterTypeCustomNostrDatabase._handle_map.get(uniffi_handle)
        def make_call():
            args = (_UniffiConverterTypeEventId.lift(event_id), )
            method = uniffi_obj.check_id
            return method(*args)

        
        def handle_success(return_value):
            uniffi_future_callback(
                uniffi_callback_data,
                _UniffiForeignFutureStructRustBuffer(
                    _UniffiConverterTypeDatabaseEventStatus.lower(return_value),
                    _UniffiRustCallStatus.default()
                )
            )

        def handle_error(status_code, rust_buffer):
            uniffi_future_callback(
                uniffi_callback_data,
                _UniffiForeignFutureStructRustBuffer(
                    _UniffiRustBuffer.default(),
                    _UniffiRustCallStatus(status_code, rust_buffer),
                )
            )
        uniffi_out_return[0] = _uniffi_trait_interface_call_async_with_error(make_call, handle_success, handle_error, NostrSdkError, _UniffiConverterTypeNostrSdkError.lower)

    @_UNIFFI_CALLBACK_INTERFACE_CUSTOM_NOSTR_DATABASE_METHOD3
    def has_coordinate_been_deleted(
            uniffi_handle,
            coordinate,
            timestamp,
            uniffi_future_callback,
            uniffi_callback_data,
            uniffi_out_return,
        ):
        uniffi_obj = _UniffiConverterTypeCustomNostrDatabase._handle_map.get(uniffi_handle)
        def make_call():
            args = (_UniffiConverterTypeCoordinate.lift(coordinate), _UniffiConverterTypeTimestamp.lift(timestamp), )
            method = uniffi_obj.has_coordinate_been_deleted
            return method(*args)

        
        def handle_success(return_value):
            uniffi_future_callback(
                uniffi_callback_data,
                _UniffiForeignFutureStructI8(
                    _UniffiConverterBool.lower(return_value),
                    _UniffiRustCallStatus.default()
                )
            )

        def handle_error(status_code, rust_buffer):
            uniffi_future_callback(
                uniffi_callback_data,
                _UniffiForeignFutureStructI8(
                    0,
                    _UniffiRustCallStatus(status_code, rust_buffer),
                )
            )
        uniffi_out_return[0] = _uniffi_trait_interface_call_async_with_error(make_call, handle_success, handle_error, NostrSdkError, _UniffiConverterTypeNostrSdkError.lower)

    @_UNIFFI_CALLBACK_INTERFACE_CUSTOM_NOSTR_DATABASE_METHOD4
    def event_id_seen(
            uniffi_handle,
            event_id,
            relay_url,
            uniffi_future_callback,
            uniffi_callback_data,
            uniffi_out_return,
        ):
        uniffi_obj = _UniffiConverterTypeCustomNostrDatabase._handle_map.get(uniffi_handle)
        def make_call():
            args = (_UniffiConverterTypeEventId.lift(event_id), _UniffiConverterString.lift(relay_url), )
            method = uniffi_obj.event_id_seen
            return method(*args)

        
        def handle_success(return_value):
            uniffi_future_callback(
                uniffi_callback_data,
                _UniffiForeignFutureStructVoid(
                    _UniffiRustCallStatus.default()
                )
            )

        def handle_error(status_code, rust_buffer):
            uniffi_future_callback(
                uniffi_callback_data,
                _UniffiForeignFutureStructVoid(
                    _UniffiRustCallStatus(status_code, rust_buffer),
                )
            )
        uniffi_out_return[0] = _uniffi_trait_interface_call_async_with_error(make_call, handle_success, handle_error, NostrSdkError, _UniffiConverterTypeNostrSdkError.lower)

    @_UNIFFI_CALLBACK_INTERFACE_CUSTOM_NOSTR_DATABASE_METHOD5
    def event_seen_on_relays(
            uniffi_handle,
            event_id,
            uniffi_future_callback,
            uniffi_callback_data,
            uniffi_out_return,
        ):
        uniffi_obj = _UniffiConverterTypeCustomNostrDatabase._handle_map.get(uniffi_handle)
        def make_call():
            args = (_UniffiConverterTypeEventId.lift(event_id), )
            method = uniffi_obj.event_seen_on_relays
            return method(*args)

        
        def handle_success(return_value):
            uniffi_future_callback(
                uniffi_callback_data,
                _UniffiForeignFutureStructRustBuffer(
                    _UniffiConverterOptionalSequenceString.lower(return_value),
                    _UniffiRustCallStatus.default()
                )
            )

        def handle_error(status_code, rust_buffer):
            uniffi_future_callback(
                uniffi_callback_data,
                _UniffiForeignFutureStructRustBuffer(
                    _UniffiRustBuffer.default(),
                    _UniffiRustCallStatus(status_code, rust_buffer),
                )
            )
        uniffi_out_return[0] = _uniffi_trait_interface_call_async_with_error(make_call, handle_success, handle_error, NostrSdkError, _UniffiConverterTypeNostrSdkError.lower)

    @_UNIFFI_CALLBACK_INTERFACE_CUSTOM_NOSTR_DATABASE_METHOD6
    def event_by_id(
            uniffi_handle,
            event_id,
            uniffi_future_callback,
            uniffi_callback_data,
            uniffi_out_return,
        ):
        uniffi_obj = _UniffiConverterTypeCustomNostrDatabase._handle_map.get(uniffi_handle)
        def make_call():
            args = (_UniffiConverterTypeEventId.lift(event_id), )
            method = uniffi_obj.event_by_id
            return method(*args)

        
        def handle_success(return_value):
            uniffi_future_callback(
                uniffi_callback_data,
                _UniffiForeignFutureStructRustBuffer(
                    _UniffiConverterOptionalTypeEvent.lower(return_value),
                    _UniffiRustCallStatus.default()
                )
            )

        def handle_error(status_code, rust_buffer):
            uniffi_future_callback(
                uniffi_callback_data,
                _UniffiForeignFutureStructRustBuffer(
                    _UniffiRustBuffer.default(),
                    _UniffiRustCallStatus(status_code, rust_buffer),
                )
            )
        uniffi_out_return[0] = _uniffi_trait_interface_call_async_with_error(make_call, handle_success, handle_error, NostrSdkError, _UniffiConverterTypeNostrSdkError.lower)

    @_UNIFFI_CALLBACK_INTERFACE_CUSTOM_NOSTR_DATABASE_METHOD7
    def count(
            uniffi_handle,
            filters,
            uniffi_future_callback,
            uniffi_callback_data,
            uniffi_out_return,
        ):
        uniffi_obj = _UniffiConverterTypeCustomNostrDatabase._handle_map.get(uniffi_handle)
        def make_call():
            args = (_UniffiConverterSequenceTypeFilter.lift(filters), )
            method = uniffi_obj.count
            return method(*args)

        
        def handle_success(return_value):
            uniffi_future_callback(
                uniffi_callback_data,
                _UniffiForeignFutureStructU64(
                    _UniffiConverterUInt64.lower(return_value),
                    _UniffiRustCallStatus.default()
                )
            )

        def handle_error(status_code, rust_buffer):
            uniffi_future_callback(
                uniffi_callback_data,
                _UniffiForeignFutureStructU64(
                    0,
                    _UniffiRustCallStatus(status_code, rust_buffer),
                )
            )
        uniffi_out_return[0] = _uniffi_trait_interface_call_async_with_error(make_call, handle_success, handle_error, NostrSdkError, _UniffiConverterTypeNostrSdkError.lower)

    @_UNIFFI_CALLBACK_INTERFACE_CUSTOM_NOSTR_DATABASE_METHOD8
    def query(
            uniffi_handle,
            filters,
            uniffi_future_callback,
            uniffi_callback_data,
            uniffi_out_return,
        ):
        uniffi_obj = _UniffiConverterTypeCustomNostrDatabase._handle_map.get(uniffi_handle)
        def make_call():
            args = (_UniffiConverterSequenceTypeFilter.lift(filters), )
            method = uniffi_obj.query
            return method(*args)

        
        def handle_success(return_value):
            uniffi_future_callback(
                uniffi_callback_data,
                _UniffiForeignFutureStructRustBuffer(
                    _UniffiConverterSequenceTypeEvent.lower(return_value),
                    _UniffiRustCallStatus.default()
                )
            )

        def handle_error(status_code, rust_buffer):
            uniffi_future_callback(
                uniffi_callback_data,
                _UniffiForeignFutureStructRustBuffer(
                    _UniffiRustBuffer.default(),
                    _UniffiRustCallStatus(status_code, rust_buffer),
                )
            )
        uniffi_out_return[0] = _uniffi_trait_interface_call_async_with_error(make_call, handle_success, handle_error, NostrSdkError, _UniffiConverterTypeNostrSdkError.lower)

    @_UNIFFI_CALLBACK_INTERFACE_CUSTOM_NOSTR_DATABASE_METHOD9
    def delete(
            uniffi_handle,
            filter,
            uniffi_future_callback,
            uniffi_callback_data,
            uniffi_out_return,
        ):
        uniffi_obj = _UniffiConverterTypeCustomNostrDatabase._handle_map.get(uniffi_handle)
        def make_call():
            args = (_UniffiConverterTypeFilter.lift(filter), )
            method = uniffi_obj.delete
            return method(*args)

        
        def handle_success(return_value):
            uniffi_future_callback(
                uniffi_callback_data,
                _UniffiForeignFutureStructVoid(
                    _UniffiRustCallStatus.default()
                )
            )

        def handle_error(status_code, rust_buffer):
            uniffi_future_callback(
                uniffi_callback_data,
                _UniffiForeignFutureStructVoid(
                    _UniffiRustCallStatus(status_code, rust_buffer),
                )
            )
        uniffi_out_return[0] = _uniffi_trait_interface_call_async_with_error(make_call, handle_success, handle_error, NostrSdkError, _UniffiConverterTypeNostrSdkError.lower)

    @_UNIFFI_CALLBACK_INTERFACE_CUSTOM_NOSTR_DATABASE_METHOD10
    def wipe(
            uniffi_handle,
            uniffi_future_callback,
            uniffi_callback_data,
            uniffi_out_return,
        ):
        uniffi_obj = _UniffiConverterTypeCustomNostrDatabase._handle_map.get(uniffi_handle)
        def make_call():
            args = ()
            method = uniffi_obj.wipe
            return method(*args)

        
        def handle_success(return_value):
            uniffi_future_callback(
                uniffi_callback_data,
                _UniffiForeignFutureStructVoid(
                    _UniffiRustCallStatus.default()
                )
            )

        def handle_error(status_code, rust_buffer):
            uniffi_future_callback(
                uniffi_callback_data,
                _UniffiForeignFutureStructVoid(
                    _UniffiRustCallStatus(status_code, rust_buffer),
                )
            )
        uniffi_out_return[0] = _uniffi_trait_interface_call_async_with_error(make_call, handle_success, handle_error, NostrSdkError, _UniffiConverterTypeNostrSdkError.lower)

    @_UNIFFI_CALLBACK_INTERFACE_FREE
    def _uniffi_free(uniffi_handle):
        _UniffiConverterTypeCustomNostrDatabase._handle_map.remove(uniffi_handle)

    # Generate the FFI VTable.  This has a field for each callback interface method.
    _uniffi_vtable = _UniffiVTableCallbackInterfaceCustomNostrDatabase(
        backend,
        save_event,
        check_id,
        has_coordinate_been_deleted,
        event_id_seen,
        event_seen_on_relays,
        event_by_id,
        count,
        query,
        delete,
        wipe,
        _uniffi_free
    )
    # Send Rust a pointer to the VTable.  Note: this means we need to keep the struct alive forever,
    # or else bad things will happen when Rust tries to access it.
    _UniffiLib.uniffi_nostr_sdk_ffi_fn_init_callback_vtable_customnostrdatabase(ctypes.byref(_uniffi_vtable))



class _UniffiConverterTypeCustomNostrDatabase:
    _handle_map = _UniffiHandleMap()

    @staticmethod
    def lift(value: int):
        return CustomNostrDatabaseImpl._make_instance_(value)

    @staticmethod
    def check_lower(value: CustomNostrDatabase):
        pass

    @staticmethod
    def lower(value: CustomNostrDatabase):
        return _UniffiConverterTypeCustomNostrDatabase._handle_map.insert(value)

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: CustomNostrDatabase, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class EventSourceProtocol(typing.Protocol):
    pass


class EventSource:
    _pointer: ctypes.c_void_p
    
    def __init__(self, *args, **kwargs):
        raise ValueError("This class has no default constructor")

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_eventsource, pointer)

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_eventsource, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def both(cls, timeout: "typing.Union[object, typing.Optional[Duration]]" = _DEFAULT):
        """
        Both from database and relays
        """

        if timeout is _DEFAULT:
            timeout = None
        _UniffiConverterOptionalDuration.check_lower(timeout)
        
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_eventsource_both,
        _UniffiConverterOptionalDuration.lower(timeout))
        return cls._make_instance_(pointer)


    @classmethod
    def both_with_specific_relays(cls, urls: "typing.List[str]",timeout: "typing.Union[object, typing.Optional[Duration]]" = _DEFAULT):
        """
        Both from database and specific relays
        """

        _UniffiConverterSequenceString.check_lower(urls)
        
        if timeout is _DEFAULT:
            timeout = None
        _UniffiConverterOptionalDuration.check_lower(timeout)
        
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_eventsource_both_with_specific_relays,
        _UniffiConverterSequenceString.lower(urls),
        _UniffiConverterOptionalDuration.lower(timeout))
        return cls._make_instance_(pointer)


    @classmethod
    def database(cls, ):
        """
        Database only
        """

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_eventsource_database,)
        return cls._make_instance_(pointer)


    @classmethod
    def relays(cls, timeout: "typing.Union[object, typing.Optional[Duration]]" = _DEFAULT):
        """
        Relays only
        """

        if timeout is _DEFAULT:
            timeout = None
        _UniffiConverterOptionalDuration.check_lower(timeout)
        
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_eventsource_relays,
        _UniffiConverterOptionalDuration.lower(timeout))
        return cls._make_instance_(pointer)


    @classmethod
    def specific_relays(cls, urls: "typing.List[str]",timeout: "typing.Union[object, typing.Optional[Duration]]" = _DEFAULT):
        """
        From specific relays only
        """

        _UniffiConverterSequenceString.check_lower(urls)
        
        if timeout is _DEFAULT:
            timeout = None
        _UniffiConverterOptionalDuration.check_lower(timeout)
        
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_eventsource_specific_relays,
        _UniffiConverterSequenceString.lower(urls),
        _UniffiConverterOptionalDuration.lower(timeout))
        return cls._make_instance_(pointer)




class _UniffiConverterTypeEventSource:

    @staticmethod
    def lift(value: int):
        return EventSource._make_instance_(value)

    @staticmethod
    def check_lower(value: EventSource):
        if not isinstance(value, EventSource):
            raise TypeError("Expected EventSource instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: EventSourceProtocol):
        if not isinstance(value, EventSource):
            raise TypeError("Expected EventSource instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: EventSourceProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class HandleNotification(typing.Protocol):
    def handle_msg(self, relay_url: "str",msg: "RelayMessage"):
        raise NotImplementedError
    def handle(self, relay_url: "str",subscription_id: "str",event: "Event"):
        raise NotImplementedError


class HandleNotificationImpl:
    _pointer: ctypes.c_void_p
    
    def __init__(self, *args, **kwargs):
        raise ValueError("This class has no default constructor")

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_handlenotification, pointer)

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_handlenotification, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    async def handle_msg(self, relay_url: "str",msg: "RelayMessage") -> None:

        _UniffiConverterString.check_lower(relay_url)
        
        _UniffiConverterTypeRelayMessage.check_lower(msg)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_handlenotification_handle_msg(
                self._uniffi_clone_pointer(), 
        _UniffiConverterString.lower(relay_url),
        _UniffiConverterTypeRelayMessage.lower(msg)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_void,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_void,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_void,
            # lift function
            lambda val: None,
            
            
    # Error FFI converter

    None,

        )



    async def handle(self, relay_url: "str",subscription_id: "str",event: "Event") -> None:

        _UniffiConverterString.check_lower(relay_url)
        
        _UniffiConverterString.check_lower(subscription_id)
        
        _UniffiConverterTypeEvent.check_lower(event)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_handlenotification_handle(
                self._uniffi_clone_pointer(), 
        _UniffiConverterString.lower(relay_url),
        _UniffiConverterString.lower(subscription_id),
        _UniffiConverterTypeEvent.lower(event)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_void,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_void,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_void,
            # lift function
            lambda val: None,
            
            
    # Error FFI converter

    None,

        )




# Put all the bits inside a class to keep the top-level namespace clean
class _UniffiTraitImplHandleNotification:
    # For each method, generate a callback function to pass to Rust

    @_UNIFFI_CALLBACK_INTERFACE_HANDLE_NOTIFICATION_METHOD0
    def handle_msg(
            uniffi_handle,
            relay_url,
            msg,
            uniffi_future_callback,
            uniffi_callback_data,
            uniffi_out_return,
        ):
        uniffi_obj = _UniffiConverterTypeHandleNotification._handle_map.get(uniffi_handle)
        def make_call():
            args = (_UniffiConverterString.lift(relay_url), _UniffiConverterTypeRelayMessage.lift(msg), )
            method = uniffi_obj.handle_msg
            return method(*args)

        
        def handle_success(return_value):
            uniffi_future_callback(
                uniffi_callback_data,
                _UniffiForeignFutureStructVoid(
                    _UniffiRustCallStatus.default()
                )
            )

        def handle_error(status_code, rust_buffer):
            uniffi_future_callback(
                uniffi_callback_data,
                _UniffiForeignFutureStructVoid(
                    _UniffiRustCallStatus(status_code, rust_buffer),
                )
            )
        uniffi_out_return[0] = _uniffi_trait_interface_call_async(make_call, handle_success, handle_error)

    @_UNIFFI_CALLBACK_INTERFACE_HANDLE_NOTIFICATION_METHOD1
    def handle(
            uniffi_handle,
            relay_url,
            subscription_id,
            event,
            uniffi_future_callback,
            uniffi_callback_data,
            uniffi_out_return,
        ):
        uniffi_obj = _UniffiConverterTypeHandleNotification._handle_map.get(uniffi_handle)
        def make_call():
            args = (_UniffiConverterString.lift(relay_url), _UniffiConverterString.lift(subscription_id), _UniffiConverterTypeEvent.lift(event), )
            method = uniffi_obj.handle
            return method(*args)

        
        def handle_success(return_value):
            uniffi_future_callback(
                uniffi_callback_data,
                _UniffiForeignFutureStructVoid(
                    _UniffiRustCallStatus.default()
                )
            )

        def handle_error(status_code, rust_buffer):
            uniffi_future_callback(
                uniffi_callback_data,
                _UniffiForeignFutureStructVoid(
                    _UniffiRustCallStatus(status_code, rust_buffer),
                )
            )
        uniffi_out_return[0] = _uniffi_trait_interface_call_async(make_call, handle_success, handle_error)

    @_UNIFFI_CALLBACK_INTERFACE_FREE
    def _uniffi_free(uniffi_handle):
        _UniffiConverterTypeHandleNotification._handle_map.remove(uniffi_handle)

    # Generate the FFI VTable.  This has a field for each callback interface method.
    _uniffi_vtable = _UniffiVTableCallbackInterfaceHandleNotification(
        handle_msg,
        handle,
        _uniffi_free
    )
    # Send Rust a pointer to the VTable.  Note: this means we need to keep the struct alive forever,
    # or else bad things will happen when Rust tries to access it.
    _UniffiLib.uniffi_nostr_sdk_ffi_fn_init_callback_vtable_handlenotification(ctypes.byref(_uniffi_vtable))



class _UniffiConverterTypeHandleNotification:
    _handle_map = _UniffiHandleMap()

    @staticmethod
    def lift(value: int):
        return HandleNotificationImpl._make_instance_(value)

    @staticmethod
    def check_lower(value: HandleNotification):
        pass

    @staticmethod
    def lower(value: HandleNotification):
        return _UniffiConverterTypeHandleNotification._handle_map.insert(value)

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: HandleNotification, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class MockRelayProtocol(typing.Protocol):
    """
    A mock relay for (unit) tests.
    """

    def none(self, ):
        raise NotImplementedError
    def shutdown(self, ):
        """
        Shutdown relay
        """

        raise NotImplementedError
    def url(self, ):
        """
        Get url
        """

        raise NotImplementedError


class MockRelay:
    """
    A mock relay for (unit) tests.
    """

    _pointer: ctypes.c_void_p
    
    def __init__(self, *args, **kwargs):
        raise ValueError("This class has no default constructor")

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_mockrelay, pointer)

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_mockrelay, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    async def run(cls, ):

        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_mockrelay_run(),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_pointer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_pointer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_pointer,
            _UniffiConverterTypeMockRelay.lift,
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )


    async def none(self, ) -> None:

        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_mockrelay__none(
                self._uniffi_clone_pointer(), 
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_void,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_void,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_void,
            # lift function
            lambda val: None,
            
            
    # Error FFI converter

    None,

        )




    def shutdown(self, ) -> None:
        """
        Shutdown relay
        """

        _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_mockrelay_shutdown,self._uniffi_clone_pointer(),)






    def url(self, ) -> "str":
        """
        Get url
        """

        return _UniffiConverterString.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_mockrelay_url,self._uniffi_clone_pointer(),)
        )






class _UniffiConverterTypeMockRelay:

    @staticmethod
    def lift(value: int):
        return MockRelay._make_instance_(value)

    @staticmethod
    def check_lower(value: MockRelay):
        if not isinstance(value, MockRelay):
            raise TypeError("Expected MockRelay instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: MockRelayProtocol):
        if not isinstance(value, MockRelay):
            raise TypeError("Expected MockRelay instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: MockRelayProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class NwcProtocol(typing.Protocol):
    """
    Nostr Wallet Connect client
    """

    def get_balance(self, ):
        """
        Get balance
        """

        raise NotImplementedError
    def get_info(self, ):
        """
        Get info
        """

        raise NotImplementedError
    def list_transactions(self, params: "ListTransactionsRequestParams"):
        """
        List transactions
        """

        raise NotImplementedError
    def lookup_invoice(self, params: "LookupInvoiceRequestParams"):
        """
        Lookup invoice
        """

        raise NotImplementedError
    def make_invoice(self, params: "MakeInvoiceRequestParams"):
        """
        Create invoice
        """

        raise NotImplementedError
    def pay_invoice(self, invoice: "str"):
        """
        Pay invoice
        """

        raise NotImplementedError
    def pay_keysend(self, params: "PayKeysendRequestParams"):
        """
        Pay keysend
        """

        raise NotImplementedError


class Nwc:
    """
    Nostr Wallet Connect client
    """

    _pointer: ctypes.c_void_p
    def __init__(self, uri: "NostrWalletConnectUri"):
        """
        Compose new `NWC` client
        """

        _UniffiConverterTypeNostrWalletConnectURI.check_lower(uri)
        
        self._pointer = _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_nwc_new,
        _UniffiConverterTypeNostrWalletConnectURI.lower(uri))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_nwc, pointer)

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_nwc, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def with_opts(cls, uri: "NostrWalletConnectUri",opts: "NostrWalletConnectOptions"):
        """
        Compose new `NWC` client with `NostrWalletConnectOptions`
        """

        _UniffiConverterTypeNostrWalletConnectURI.check_lower(uri)
        
        _UniffiConverterTypeNostrWalletConnectOptions.check_lower(opts)
        
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_nwc_with_opts,
        _UniffiConverterTypeNostrWalletConnectURI.lower(uri),
        _UniffiConverterTypeNostrWalletConnectOptions.lower(opts))
        return cls._make_instance_(pointer)


    async def get_balance(self, ) -> "int":
        """
        Get balance
        """

        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nwc_get_balance(
                self._uniffi_clone_pointer(), 
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_u64,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_u64,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_u64,
            # lift function
            _UniffiConverterUInt64.lift,
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )



    async def get_info(self, ) -> "GetInfoResponseResult":
        """
        Get info
        """

        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nwc_get_info(
                self._uniffi_clone_pointer(), 
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_rust_buffer,
            # lift function
            _UniffiConverterTypeGetInfoResponseResult.lift,
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )



    async def list_transactions(self, params: "ListTransactionsRequestParams") -> "typing.List[LookupInvoiceResponseResult]":
        """
        List transactions
        """

        _UniffiConverterTypeListTransactionsRequestParams.check_lower(params)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nwc_list_transactions(
                self._uniffi_clone_pointer(), 
        _UniffiConverterTypeListTransactionsRequestParams.lower(params)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_rust_buffer,
            # lift function
            _UniffiConverterSequenceTypeLookupInvoiceResponseResult.lift,
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )



    async def lookup_invoice(self, params: "LookupInvoiceRequestParams") -> "LookupInvoiceResponseResult":
        """
        Lookup invoice
        """

        _UniffiConverterTypeLookupInvoiceRequestParams.check_lower(params)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nwc_lookup_invoice(
                self._uniffi_clone_pointer(), 
        _UniffiConverterTypeLookupInvoiceRequestParams.lower(params)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_rust_buffer,
            # lift function
            _UniffiConverterTypeLookupInvoiceResponseResult.lift,
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )



    async def make_invoice(self, params: "MakeInvoiceRequestParams") -> "MakeInvoiceResponseResult":
        """
        Create invoice
        """

        _UniffiConverterTypeMakeInvoiceRequestParams.check_lower(params)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nwc_make_invoice(
                self._uniffi_clone_pointer(), 
        _UniffiConverterTypeMakeInvoiceRequestParams.lower(params)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_rust_buffer,
            # lift function
            _UniffiConverterTypeMakeInvoiceResponseResult.lift,
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )



    async def pay_invoice(self, invoice: "str") -> "str":
        """
        Pay invoice
        """

        _UniffiConverterString.check_lower(invoice)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nwc_pay_invoice(
                self._uniffi_clone_pointer(), 
        _UniffiConverterString.lower(invoice)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_rust_buffer,
            # lift function
            _UniffiConverterString.lift,
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )



    async def pay_keysend(self, params: "PayKeysendRequestParams") -> "PayKeysendResponseResult":
        """
        Pay keysend
        """

        _UniffiConverterTypePayKeysendRequestParams.check_lower(params)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nwc_pay_keysend(
                self._uniffi_clone_pointer(), 
        _UniffiConverterTypePayKeysendRequestParams.lower(params)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_rust_buffer,
            # lift function
            _UniffiConverterTypePayKeysendResponseResult.lift,
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )





class _UniffiConverterTypeNWC:

    @staticmethod
    def lift(value: int):
        return Nwc._make_instance_(value)

    @staticmethod
    def check_lower(value: Nwc):
        if not isinstance(value, Nwc):
            raise TypeError("Expected Nwc instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: NwcProtocol):
        if not isinstance(value, Nwc):
            raise TypeError("Expected Nwc instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: NwcProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class NegentropyOptionsProtocol(typing.Protocol):
    def direction(self, direction: "NegentropyDirection"):
        """
        Negentropy Sync direction (default: down)
        """

        raise NotImplementedError
    def dry_run(self, ):
        """
        Dry run

        Just check what event are missing: execute reconciliation but WITHOUT
        getting/sending full events.
        """

        raise NotImplementedError
    def initial_timeout(self, timeout: "Duration"):
        """
        Timeout to check if negentropy it's supported (default: 10 secs)
        """

        raise NotImplementedError


class NegentropyOptions:
    _pointer: ctypes.c_void_p
    def __init__(self, ):
        """
        New default options
        """

        self._pointer = _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_negentropyoptions_new,)

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_negentropyoptions, pointer)

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_negentropyoptions, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def direction(self, direction: "NegentropyDirection") -> "NegentropyOptions":
        """
        Negentropy Sync direction (default: down)
        """

        _UniffiConverterTypeNegentropyDirection.check_lower(direction)
        
        return _UniffiConverterTypeNegentropyOptions.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_negentropyoptions_direction,self._uniffi_clone_pointer(),
        _UniffiConverterTypeNegentropyDirection.lower(direction))
        )





    def dry_run(self, ) -> "NegentropyOptions":
        """
        Dry run

        Just check what event are missing: execute reconciliation but WITHOUT
        getting/sending full events.
        """

        return _UniffiConverterTypeNegentropyOptions.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_negentropyoptions_dry_run,self._uniffi_clone_pointer(),)
        )





    def initial_timeout(self, timeout: "Duration") -> "NegentropyOptions":
        """
        Timeout to check if negentropy it's supported (default: 10 secs)
        """

        _UniffiConverterDuration.check_lower(timeout)
        
        return _UniffiConverterTypeNegentropyOptions.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_negentropyoptions_initial_timeout,self._uniffi_clone_pointer(),
        _UniffiConverterDuration.lower(timeout))
        )






class _UniffiConverterTypeNegentropyOptions:

    @staticmethod
    def lift(value: int):
        return NegentropyOptions._make_instance_(value)

    @staticmethod
    def check_lower(value: NegentropyOptions):
        if not isinstance(value, NegentropyOptions):
            raise TypeError("Expected NegentropyOptions instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: NegentropyOptionsProtocol):
        if not isinstance(value, NegentropyOptions):
            raise TypeError("Expected NegentropyOptions instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: NegentropyOptionsProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class Nip46SignerProtocol(typing.Protocol):
    def bunker_uri(self, ):
        """
        Get `bunker` URI
        """

        raise NotImplementedError
    def relays(self, ):
        """
        Get signer relays
        """

        raise NotImplementedError
    def signer_public_key(self, ):
        """
        Get signer public key
        """

        raise NotImplementedError


class Nip46Signer:
    _pointer: ctypes.c_void_p
    
    def __init__(self, *args, **kwargs):
        raise ValueError("This class has no default constructor")

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_nip46signer, pointer)

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_nip46signer, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    async def init(cls, uri: "NostrConnectUri",app_keys: "Keys",timeout: "Duration",opts: "typing.Optional[RelayOptions]"):
        """
        Construct Nostr Connect client
        """

        _UniffiConverterTypeNostrConnectURI.check_lower(uri)
        
        _UniffiConverterTypeKeys.check_lower(app_keys)
        
        _UniffiConverterDuration.check_lower(timeout)
        
        _UniffiConverterOptionalTypeRelayOptions.check_lower(opts)
        

        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_nip46signer_init(
        _UniffiConverterTypeNostrConnectURI.lower(uri),
        _UniffiConverterTypeKeys.lower(app_keys),
        _UniffiConverterDuration.lower(timeout),
        _UniffiConverterOptionalTypeRelayOptions.lower(opts)),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_pointer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_pointer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_pointer,
            _UniffiConverterTypeNip46Signer.lift,
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )


    async def bunker_uri(self, ) -> "NostrConnectUri":
        """
        Get `bunker` URI
        """

        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nip46signer_bunker_uri(
                self._uniffi_clone_pointer(), 
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_pointer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_pointer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_pointer,
            # lift function
            _UniffiConverterTypeNostrConnectURI.lift,
            
    # Error FFI converter

    None,

        )



    async def relays(self, ) -> "typing.List[str]":
        """
        Get signer relays
        """

        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nip46signer_relays(
                self._uniffi_clone_pointer(), 
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_rust_buffer,
            # lift function
            _UniffiConverterSequenceString.lift,
            
    # Error FFI converter

    None,

        )




    def signer_public_key(self, ) -> "PublicKey":
        """
        Get signer public key
        """

        return _UniffiConverterTypePublicKey.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nip46signer_signer_public_key,self._uniffi_clone_pointer(),)
        )






class _UniffiConverterTypeNip46Signer:

    @staticmethod
    def lift(value: int):
        return Nip46Signer._make_instance_(value)

    @staticmethod
    def check_lower(value: Nip46Signer):
        if not isinstance(value, Nip46Signer):
            raise TypeError("Expected Nip46Signer instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: Nip46SignerProtocol):
        if not isinstance(value, Nip46Signer):
            raise TypeError("Expected Nip46Signer instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: Nip46SignerProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class NostrConnectRemoteSignerProtocol(typing.Protocol):
    """
    Nostr Connect Signer

    Signer that listen for requests from client, handle them and send the response.

    <https://github.com/nostr-protocol/nips/blob/master/46.md>
    """

    def bunker_uri(self, ):
        """
        Get `bunker` URI
        """

        raise NotImplementedError
    def relays(self, ):
        """
        Get signer relays
        """

        raise NotImplementedError
    def serve(self, actions: "NostrConnectSignerActions"):
        """
        Serve signer
        """

        raise NotImplementedError


class NostrConnectRemoteSigner:
    """
    Nostr Connect Signer

    Signer that listen for requests from client, handle them and send the response.

    <https://github.com/nostr-protocol/nips/blob/master/46.md>
    """

    _pointer: ctypes.c_void_p
    
    def __init__(self, *args, **kwargs):
        raise ValueError("This class has no default constructor")

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_nostrconnectremotesigner, pointer)

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_nostrconnectremotesigner, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    async def from_uri(cls, uri: "NostrConnectUri",secret_key: "SecretKey",secret: "typing.Union[object, typing.Optional[str]]" = _DEFAULT,opts: "typing.Union[object, typing.Optional[RelayOptions]]" = _DEFAULT):
        """
        Construct remote signer from client URI (`nostrconnect://..`)
        """

        _UniffiConverterTypeNostrConnectURI.check_lower(uri)
        
        _UniffiConverterTypeSecretKey.check_lower(secret_key)
        
        if secret is _DEFAULT:
            secret = None
        _UniffiConverterOptionalString.check_lower(secret)
        
        if opts is _DEFAULT:
            opts = None
        _UniffiConverterOptionalTypeRelayOptions.check_lower(opts)
        

        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_nostrconnectremotesigner_from_uri(
        _UniffiConverterTypeNostrConnectURI.lower(uri),
        _UniffiConverterTypeSecretKey.lower(secret_key),
        _UniffiConverterOptionalString.lower(secret),
        _UniffiConverterOptionalTypeRelayOptions.lower(opts)),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_pointer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_pointer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_pointer,
            _UniffiConverterTypeNostrConnectRemoteSigner.lift,
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )


    @classmethod
    async def init(cls, secret_key: "SecretKey",relays: "typing.List[str]",secret: "typing.Union[object, typing.Optional[str]]" = _DEFAULT,opts: "typing.Union[object, typing.Optional[RelayOptions]]" = _DEFAULT):
        _UniffiConverterTypeSecretKey.check_lower(secret_key)
        
        _UniffiConverterSequenceString.check_lower(relays)
        
        if secret is _DEFAULT:
            secret = None
        _UniffiConverterOptionalString.check_lower(secret)
        
        if opts is _DEFAULT:
            opts = None
        _UniffiConverterOptionalTypeRelayOptions.check_lower(opts)
        

        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_nostrconnectremotesigner_init(
        _UniffiConverterTypeSecretKey.lower(secret_key),
        _UniffiConverterSequenceString.lower(relays),
        _UniffiConverterOptionalString.lower(secret),
        _UniffiConverterOptionalTypeRelayOptions.lower(opts)),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_pointer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_pointer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_pointer,
            _UniffiConverterTypeNostrConnectRemoteSigner.lift,
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )


    async def bunker_uri(self, ) -> "NostrConnectUri":
        """
        Get `bunker` URI
        """

        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrconnectremotesigner_bunker_uri(
                self._uniffi_clone_pointer(), 
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_pointer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_pointer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_pointer,
            # lift function
            _UniffiConverterTypeNostrConnectURI.lift,
            
    # Error FFI converter

    None,

        )



    async def relays(self, ) -> "typing.List[str]":
        """
        Get signer relays
        """

        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrconnectremotesigner_relays(
                self._uniffi_clone_pointer(), 
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_rust_buffer,
            # lift function
            _UniffiConverterSequenceString.lift,
            
    # Error FFI converter

    None,

        )



    async def serve(self, actions: "NostrConnectSignerActions") -> None:

        """
        Serve signer
        """

        _UniffiConverterTypeNostrConnectSignerActions.check_lower(actions)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrconnectremotesigner_serve(
                self._uniffi_clone_pointer(), 
        _UniffiConverterTypeNostrConnectSignerActions.lower(actions)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_void,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_void,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_void,
            # lift function
            lambda val: None,
            
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )





class _UniffiConverterTypeNostrConnectRemoteSigner:

    @staticmethod
    def lift(value: int):
        return NostrConnectRemoteSigner._make_instance_(value)

    @staticmethod
    def check_lower(value: NostrConnectRemoteSigner):
        if not isinstance(value, NostrConnectRemoteSigner):
            raise TypeError("Expected NostrConnectRemoteSigner instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: NostrConnectRemoteSignerProtocol):
        if not isinstance(value, NostrConnectRemoteSigner):
            raise TypeError("Expected NostrConnectRemoteSigner instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: NostrConnectRemoteSignerProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class NostrConnectSignerActions(typing.Protocol):
    def approve(self, req: "Nip46Request"):
        """
        Approve
        """

        raise NotImplementedError


class NostrConnectSignerActionsImpl:
    _pointer: ctypes.c_void_p
    
    def __init__(self, *args, **kwargs):
        raise ValueError("This class has no default constructor")

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_nostrconnectsigneractions, pointer)

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_nostrconnectsigneractions, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def approve(self, req: "Nip46Request") -> "bool":
        """
        Approve
        """

        _UniffiConverterTypeNip46Request.check_lower(req)
        
        return _UniffiConverterBool.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrconnectsigneractions_approve,self._uniffi_clone_pointer(),
        _UniffiConverterTypeNip46Request.lower(req))
        )





# Put all the bits inside a class to keep the top-level namespace clean
class _UniffiTraitImplNostrConnectSignerActions:
    # For each method, generate a callback function to pass to Rust

    @_UNIFFI_CALLBACK_INTERFACE_NOSTR_CONNECT_SIGNER_ACTIONS_METHOD0
    def approve(
            uniffi_handle,
            req,
            uniffi_out_return,
            uniffi_call_status_ptr,
        ):
        uniffi_obj = _UniffiConverterTypeNostrConnectSignerActions._handle_map.get(uniffi_handle)
        def make_call():
            args = (_UniffiConverterTypeNip46Request.lift(req), )
            method = uniffi_obj.approve
            return method(*args)

        
        def write_return_value(v):
            uniffi_out_return[0] = _UniffiConverterBool.lower(v)
        _uniffi_trait_interface_call(
                uniffi_call_status_ptr.contents,
                make_call,
                write_return_value,
        )

    @_UNIFFI_CALLBACK_INTERFACE_FREE
    def _uniffi_free(uniffi_handle):
        _UniffiConverterTypeNostrConnectSignerActions._handle_map.remove(uniffi_handle)

    # Generate the FFI VTable.  This has a field for each callback interface method.
    _uniffi_vtable = _UniffiVTableCallbackInterfaceNostrConnectSignerActions(
        approve,
        _uniffi_free
    )
    # Send Rust a pointer to the VTable.  Note: this means we need to keep the struct alive forever,
    # or else bad things will happen when Rust tries to access it.
    _UniffiLib.uniffi_nostr_sdk_ffi_fn_init_callback_vtable_nostrconnectsigneractions(ctypes.byref(_uniffi_vtable))



class _UniffiConverterTypeNostrConnectSignerActions:
    _handle_map = _UniffiHandleMap()

    @staticmethod
    def lift(value: int):
        return NostrConnectSignerActionsImpl._make_instance_(value)

    @staticmethod
    def check_lower(value: NostrConnectSignerActions):
        pass

    @staticmethod
    def lower(value: NostrConnectSignerActions):
        return _UniffiConverterTypeNostrConnectSignerActions._handle_map.insert(value)

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: NostrConnectSignerActions, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class NostrDatabaseProtocol(typing.Protocol):
    def count(self, filters: "typing.List[Filter]"):
        raise NotImplementedError
    def delete(self, filter: "Filter"):
        """
        Delete all events that match the `Filter`
        """

        raise NotImplementedError
    def event_by_id(self, event_id: "EventId"):
        """
        Get [`Event`] by [`EventId`]
        """

        raise NotImplementedError
    def event_seen_on_relays(self, event_id: "EventId"):
        """
        Get list of relays that have seen the [`EventId`]
        """

        raise NotImplementedError
    def profile(self, public_key: "PublicKey"):
        raise NotImplementedError
    def query(self, filters: "typing.List[Filter]"):
        raise NotImplementedError
    def save_event(self, event: "Event"):
        """
        Save [`Event`] into store

        Return `true` if event was successfully saved into database.
        """

        raise NotImplementedError
    def wipe(self, ):
        """
        Wipe all data
        """

        raise NotImplementedError


class NostrDatabase:
    _pointer: ctypes.c_void_p
    
    def __init__(self, *args, **kwargs):
        raise ValueError("This class has no default constructor")

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_nostrdatabase, pointer)

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_nostrdatabase, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def custom(cls, database: "CustomNostrDatabase"):
        _UniffiConverterTypeCustomNostrDatabase.check_lower(database)
        
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_nostrdatabase_custom,
        _UniffiConverterTypeCustomNostrDatabase.lower(database))
        return cls._make_instance_(pointer)


    @classmethod
    def lmdb(cls, path: "str"):
        """
        LMDB backend
        """

        _UniffiConverterString.check_lower(path)
        
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _uniffi_rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_nostrdatabase_lmdb,
        _UniffiConverterString.lower(path))
        return cls._make_instance_(pointer)


    async def count(self, filters: "typing.List[Filter]") -> "int":
        _UniffiConverterSequenceTypeFilter.check_lower(filters)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_count(
                self._uniffi_clone_pointer(), 
        _UniffiConverterSequenceTypeFilter.lower(filters)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_u64,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_u64,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_u64,
            # lift function
            _UniffiConverterUInt64.lift,
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )



    async def delete(self, filter: "Filter") -> None:

        """
        Delete all events that match the `Filter`
        """

        _UniffiConverterTypeFilter.check_lower(filter)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_delete(
                self._uniffi_clone_pointer(), 
        _UniffiConverterTypeFilter.lower(filter)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_void,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_void,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_void,
            # lift function
            lambda val: None,
            
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )



    async def event_by_id(self, event_id: "EventId") -> "typing.Optional[Event]":
        """
        Get [`Event`] by [`EventId`]
        """

        _UniffiConverterTypeEventId.check_lower(event_id)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_event_by_id(
                self._uniffi_clone_pointer(), 
        _UniffiConverterTypeEventId.lower(event_id)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_rust_buffer,
            # lift function
            _UniffiConverterOptionalTypeEvent.lift,
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )



    async def event_seen_on_relays(self, event_id: "EventId") -> "typing.Optional[typing.List[str]]":
        """
        Get list of relays that have seen the [`EventId`]
        """

        _UniffiConverterTypeEventId.check_lower(event_id)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_event_seen_on_relays(
                self._uniffi_clone_pointer(), 
        _UniffiConverterTypeEventId.lower(event_id)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_rust_buffer,
            # lift function
            _UniffiConverterOptionalSequenceString.lift,
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )



    async def profile(self, public_key: "PublicKey") -> "Profile":
        _UniffiConverterTypePublicKey.check_lower(public_key)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_profile(
                self._uniffi_clone_pointer(), 
        _UniffiConverterTypePublicKey.lower(public_key)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_pointer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_pointer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_pointer,
            # lift function
            _UniffiConverterTypeProfile.lift,
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )



    async def query(self, filters: "typing.List[Filter]") -> "typing.List[Event]":
        _UniffiConverterSequenceTypeFilter.check_lower(filters)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_query(
                self._uniffi_clone_pointer(), 
        _UniffiConverterSequenceTypeFilter.lower(filters)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_rust_buffer,
            # lift function
            _UniffiConverterSequenceTypeEvent.lift,
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )



    async def save_event(self, event: "Event") -> "bool":
        """
        Save [`Event`] into store

        Return `true` if event was successfully saved into database.
        """

        _UniffiConverterTypeEvent.check_lower(event)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_save_event(
                self._uniffi_clone_pointer(), 
        _UniffiConverterTypeEvent.lower(event)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_i8,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_i8,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_i8,
            # lift function
            _UniffiConverterBool.lift,
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )



    async def wipe(self, ) -> None:

        """
        Wipe all data
        """

        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_wipe(
                self._uniffi_clone_pointer(), 
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_void,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_void,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_void,
            # lift function
            lambda val: None,
            
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )





class _UniffiConverterTypeNostrDatabase:

    @staticmethod
    def lift(value: int):
        return NostrDatabase._make_instance_(value)

    @staticmethod
    def check_lower(value: NostrDatabase):
        if not isinstance(value, NostrDatabase):
            raise TypeError("Expected NostrDatabase instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: NostrDatabaseProtocol):
        if not isinstance(value, NostrDatabase):
            raise TypeError("Expected NostrDatabase instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: NostrDatabaseProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class NostrSignerProtocol(typing.Protocol):
    def nip04_decrypt(self, public_key: "PublicKey",encrypted_content: "str"):
        raise NotImplementedError
    def nip04_encrypt(self, public_key: "PublicKey",content: "str"):
        raise NotImplementedError
    def nip44_decrypt(self, public_key: "PublicKey",content: "str"):
        raise NotImplementedError
    def nip44_encrypt(self, public_key: "PublicKey",content: "str"):
        raise NotImplementedError
    def public_key(self, ):
        """
        Get signer public key
        """

        raise NotImplementedError
    def sign_event(self, unsigned_event: "UnsignedEvent"):
        raise NotImplementedError
    def sign_event_builder(self, builder: "EventBuilder"):
        raise NotImplementedError
    def unwrap_gift_wrap(self, gift_wrap: "Event"):
        """
        Unwrap Gift Wrap event

        Internally verify the `seal` event

        <https://github.com/nostr-protocol/nips/blob/master/59.md>
        """

        raise NotImplementedError


class NostrSigner:
    _pointer: ctypes.c_void_p
    
    def __init__(self, *args, **kwargs):
        raise ValueError("This class has no default constructor")

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_nostrsigner, pointer)

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_nostrsigner, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def keys(cls, keys: "Keys"):
        _UniffiConverterTypeKeys.check_lower(keys)
        
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_nostrsigner_keys,
        _UniffiConverterTypeKeys.lower(keys))
        return cls._make_instance_(pointer)


    @classmethod
    def nip46(cls, nip46: "Nip46Signer"):
        _UniffiConverterTypeNip46Signer.check_lower(nip46)
        
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_nostrsigner_nip46,
        _UniffiConverterTypeNip46Signer.lower(nip46))
        return cls._make_instance_(pointer)


    async def nip04_decrypt(self, public_key: "PublicKey",encrypted_content: "str") -> "str":
        _UniffiConverterTypePublicKey.check_lower(public_key)
        
        _UniffiConverterString.check_lower(encrypted_content)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrsigner_nip04_decrypt(
                self._uniffi_clone_pointer(), 
        _UniffiConverterTypePublicKey.lower(public_key),
        _UniffiConverterString.lower(encrypted_content)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_rust_buffer,
            # lift function
            _UniffiConverterString.lift,
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )



    async def nip04_encrypt(self, public_key: "PublicKey",content: "str") -> "str":
        _UniffiConverterTypePublicKey.check_lower(public_key)
        
        _UniffiConverterString.check_lower(content)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrsigner_nip04_encrypt(
                self._uniffi_clone_pointer(), 
        _UniffiConverterTypePublicKey.lower(public_key),
        _UniffiConverterString.lower(content)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_rust_buffer,
            # lift function
            _UniffiConverterString.lift,
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )



    async def nip44_decrypt(self, public_key: "PublicKey",content: "str") -> "str":
        _UniffiConverterTypePublicKey.check_lower(public_key)
        
        _UniffiConverterString.check_lower(content)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrsigner_nip44_decrypt(
                self._uniffi_clone_pointer(), 
        _UniffiConverterTypePublicKey.lower(public_key),
        _UniffiConverterString.lower(content)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_rust_buffer,
            # lift function
            _UniffiConverterString.lift,
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )



    async def nip44_encrypt(self, public_key: "PublicKey",content: "str") -> "str":
        _UniffiConverterTypePublicKey.check_lower(public_key)
        
        _UniffiConverterString.check_lower(content)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrsigner_nip44_encrypt(
                self._uniffi_clone_pointer(), 
        _UniffiConverterTypePublicKey.lower(public_key),
        _UniffiConverterString.lower(content)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_rust_buffer,
            # lift function
            _UniffiConverterString.lift,
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )



    async def public_key(self, ) -> "PublicKey":
        """
        Get signer public key
        """

        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrsigner_public_key(
                self._uniffi_clone_pointer(), 
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_pointer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_pointer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_pointer,
            # lift function
            _UniffiConverterTypePublicKey.lift,
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )



    async def sign_event(self, unsigned_event: "UnsignedEvent") -> "Event":
        _UniffiConverterTypeUnsignedEvent.check_lower(unsigned_event)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrsigner_sign_event(
                self._uniffi_clone_pointer(), 
        _UniffiConverterTypeUnsignedEvent.lower(unsigned_event)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_pointer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_pointer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_pointer,
            # lift function
            _UniffiConverterTypeEvent.lift,
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )



    async def sign_event_builder(self, builder: "EventBuilder") -> "Event":
        _UniffiConverterTypeEventBuilder.check_lower(builder)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrsigner_sign_event_builder(
                self._uniffi_clone_pointer(), 
        _UniffiConverterTypeEventBuilder.lower(builder)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_pointer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_pointer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_pointer,
            # lift function
            _UniffiConverterTypeEvent.lift,
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )



    async def unwrap_gift_wrap(self, gift_wrap: "Event") -> "UnwrappedGift":
        """
        Unwrap Gift Wrap event

        Internally verify the `seal` event

        <https://github.com/nostr-protocol/nips/blob/master/59.md>
        """

        _UniffiConverterTypeEvent.check_lower(gift_wrap)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrsigner_unwrap_gift_wrap(
                self._uniffi_clone_pointer(), 
        _UniffiConverterTypeEvent.lower(gift_wrap)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_pointer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_pointer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_pointer,
            # lift function
            _UniffiConverterTypeUnwrappedGift.lift,
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )





class _UniffiConverterTypeNostrSigner:

    @staticmethod
    def lift(value: int):
        return NostrSigner._make_instance_(value)

    @staticmethod
    def check_lower(value: NostrSigner):
        if not isinstance(value, NostrSigner):
            raise TypeError("Expected NostrSigner instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: NostrSignerProtocol):
        if not isinstance(value, NostrSigner):
            raise TypeError("Expected NostrSigner instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: NostrSignerProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class NostrWalletConnectOptionsProtocol(typing.Protocol):
    """
    NWC options
    """

    def connection_mode(self, mode: "ConnectionMode"):
        """
        Set connection mode
        """

        raise NotImplementedError
    def timeout(self, timeout: "Duration"):
        """
        Set NWC requests timeout (default: 10 secs)
        """

        raise NotImplementedError


class NostrWalletConnectOptions:
    """
    NWC options
    """

    _pointer: ctypes.c_void_p
    def __init__(self, ):
        """
        New default NWC options
        """

        self._pointer = _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_nostrwalletconnectoptions_new,)

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_nostrwalletconnectoptions, pointer)

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_nostrwalletconnectoptions, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def connection_mode(self, mode: "ConnectionMode") -> "NostrWalletConnectOptions":
        """
        Set connection mode
        """

        _UniffiConverterTypeConnectionMode.check_lower(mode)
        
        return _UniffiConverterTypeNostrWalletConnectOptions.lift(
            _uniffi_rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrwalletconnectoptions_connection_mode,self._uniffi_clone_pointer(),
        _UniffiConverterTypeConnectionMode.lower(mode))
        )





    def timeout(self, timeout: "Duration") -> "NostrWalletConnectOptions":
        """
        Set NWC requests timeout (default: 10 secs)
        """

        _UniffiConverterDuration.check_lower(timeout)
        
        return _UniffiConverterTypeNostrWalletConnectOptions.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrwalletconnectoptions_timeout,self._uniffi_clone_pointer(),
        _UniffiConverterDuration.lower(timeout))
        )






class _UniffiConverterTypeNostrWalletConnectOptions:

    @staticmethod
    def lift(value: int):
        return NostrWalletConnectOptions._make_instance_(value)

    @staticmethod
    def check_lower(value: NostrWalletConnectOptions):
        if not isinstance(value, NostrWalletConnectOptions):
            raise TypeError("Expected NostrWalletConnectOptions instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: NostrWalletConnectOptionsProtocol):
        if not isinstance(value, NostrWalletConnectOptions):
            raise TypeError("Expected NostrWalletConnectOptions instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: NostrWalletConnectOptionsProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class NostrZapperProtocol(typing.Protocol):
    """
    Nostr Zapper
    """

    pass


class NostrZapper:
    """
    Nostr Zapper
    """

    _pointer: ctypes.c_void_p
    
    def __init__(self, *args, **kwargs):
        raise ValueError("This class has no default constructor")

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_nostrzapper, pointer)

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_nostrzapper, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def nwc(cls, client: "Nwc"):
        _UniffiConverterTypeNWC.check_lower(client)
        
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_nostrzapper_nwc,
        _UniffiConverterTypeNWC.lower(client))
        return cls._make_instance_(pointer)




class _UniffiConverterTypeNostrZapper:

    @staticmethod
    def lift(value: int):
        return NostrZapper._make_instance_(value)

    @staticmethod
    def check_lower(value: NostrZapper):
        if not isinstance(value, NostrZapper):
            raise TypeError("Expected NostrZapper instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: NostrZapperProtocol):
        if not isinstance(value, NostrZapper):
            raise TypeError("Expected NostrZapper instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: NostrZapperProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class OptionsProtocol(typing.Protocol):
    def autoconnect(self, val: "bool"):
        """
        Automatically start connection with relays (default: false)

        When set to `true`, there isn't the need of calling the connect methods.
        """

        raise NotImplementedError
    def automatic_authentication(self, enabled: "bool"):
        """
        Auto authenticate to relays (default: true)

        <https://github.com/nostr-protocol/nips/blob/master/42.md>
        """

        raise NotImplementedError
    def connection(self, connection: "Connection"):
        """
        Connection
        """

        raise NotImplementedError
    def connection_timeout(self, timeout: "typing.Optional[Duration]"):
        """
        Connection timeout (default: None)

        If set to `None`, the client will try to connect to the relays without waiting.
        """

        raise NotImplementedError
    def difficulty(self, difficulty: "int"):
        raise NotImplementedError
    def filtering_mode(self, mode: "RelayFilteringMode"):
        """
        Set filtering mode (default: blacklist)
        """

        raise NotImplementedError
    def gossip(self, enabled: "bool"):
        """
        Enable gossip model (default: false)
        """

        raise NotImplementedError
    def max_avg_latency(self, max: "Duration"):
        """
        Set max latency (default: None)

        Relays with an avg. latency greater that this value will be skipped.
        """

        raise NotImplementedError
    def min_pow(self, difficulty: "int"):
        """
        Minimum POW difficulty for received events
        """

        raise NotImplementedError
    def relay_limits(self, limits: "RelayLimits"):
        """
        Set custom relay limits
        """

        raise NotImplementedError
    def req_filters_chunk_size(self, req_filters_chunk_size: "int"):
        raise NotImplementedError
    def send_timeout(self, send_timeout: "typing.Optional[Duration]"):
        raise NotImplementedError
    def skip_disconnected_relays(self, skip: "bool"):
        raise NotImplementedError
    def timeout(self, timeout: "Duration"):
        raise NotImplementedError
    def wait_for_send(self, wait: "bool"):
        raise NotImplementedError
    def wait_for_subscription(self, wait: "bool"):
        raise NotImplementedError


class Options:
    _pointer: ctypes.c_void_p
    def __init__(self, ):
        self._pointer = _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_options_new,)

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_options, pointer)

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_options, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def autoconnect(self, val: "bool") -> "Options":
        """
        Automatically start connection with relays (default: false)

        When set to `true`, there isn't the need of calling the connect methods.
        """

        _UniffiConverterBool.check_lower(val)
        
        return _UniffiConverterTypeOptions.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_autoconnect,self._uniffi_clone_pointer(),
        _UniffiConverterBool.lower(val))
        )





    def automatic_authentication(self, enabled: "bool") -> "Options":
        """
        Auto authenticate to relays (default: true)

        <https://github.com/nostr-protocol/nips/blob/master/42.md>
        """

        _UniffiConverterBool.check_lower(enabled)
        
        return _UniffiConverterTypeOptions.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_automatic_authentication,self._uniffi_clone_pointer(),
        _UniffiConverterBool.lower(enabled))
        )





    def connection(self, connection: "Connection") -> "Options":
        """
        Connection
        """

        _UniffiConverterTypeConnection.check_lower(connection)
        
        return _UniffiConverterTypeOptions.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_connection,self._uniffi_clone_pointer(),
        _UniffiConverterTypeConnection.lower(connection))
        )





    def connection_timeout(self, timeout: "typing.Optional[Duration]") -> "Options":
        """
        Connection timeout (default: None)

        If set to `None`, the client will try to connect to the relays without waiting.
        """

        _UniffiConverterOptionalDuration.check_lower(timeout)
        
        return _UniffiConverterTypeOptions.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_connection_timeout,self._uniffi_clone_pointer(),
        _UniffiConverterOptionalDuration.lower(timeout))
        )





    def difficulty(self, difficulty: "int") -> "Options":
        _UniffiConverterUInt8.check_lower(difficulty)
        
        return _UniffiConverterTypeOptions.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_difficulty,self._uniffi_clone_pointer(),
        _UniffiConverterUInt8.lower(difficulty))
        )





    def filtering_mode(self, mode: "RelayFilteringMode") -> "Options":
        """
        Set filtering mode (default: blacklist)
        """

        _UniffiConverterTypeRelayFilteringMode.check_lower(mode)
        
        return _UniffiConverterTypeOptions.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_filtering_mode,self._uniffi_clone_pointer(),
        _UniffiConverterTypeRelayFilteringMode.lower(mode))
        )





    def gossip(self, enabled: "bool") -> "Options":
        """
        Enable gossip model (default: false)
        """

        _UniffiConverterBool.check_lower(enabled)
        
        return _UniffiConverterTypeOptions.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_gossip,self._uniffi_clone_pointer(),
        _UniffiConverterBool.lower(enabled))
        )





    def max_avg_latency(self, max: "Duration") -> "Options":
        """
        Set max latency (default: None)

        Relays with an avg. latency greater that this value will be skipped.
        """

        _UniffiConverterDuration.check_lower(max)
        
        return _UniffiConverterTypeOptions.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_max_avg_latency,self._uniffi_clone_pointer(),
        _UniffiConverterDuration.lower(max))
        )





    def min_pow(self, difficulty: "int") -> "Options":
        """
        Minimum POW difficulty for received events
        """

        _UniffiConverterUInt8.check_lower(difficulty)
        
        return _UniffiConverterTypeOptions.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_min_pow,self._uniffi_clone_pointer(),
        _UniffiConverterUInt8.lower(difficulty))
        )





    def relay_limits(self, limits: "RelayLimits") -> "Options":
        """
        Set custom relay limits
        """

        _UniffiConverterTypeRelayLimits.check_lower(limits)
        
        return _UniffiConverterTypeOptions.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_relay_limits,self._uniffi_clone_pointer(),
        _UniffiConverterTypeRelayLimits.lower(limits))
        )





    def req_filters_chunk_size(self, req_filters_chunk_size: "int") -> "Options":
        _UniffiConverterUInt8.check_lower(req_filters_chunk_size)
        
        return _UniffiConverterTypeOptions.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_req_filters_chunk_size,self._uniffi_clone_pointer(),
        _UniffiConverterUInt8.lower(req_filters_chunk_size))
        )





    def send_timeout(self, send_timeout: "typing.Optional[Duration]") -> "Options":
        _UniffiConverterOptionalDuration.check_lower(send_timeout)
        
        return _UniffiConverterTypeOptions.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_send_timeout,self._uniffi_clone_pointer(),
        _UniffiConverterOptionalDuration.lower(send_timeout))
        )





    def skip_disconnected_relays(self, skip: "bool") -> "Options":
        _UniffiConverterBool.check_lower(skip)
        
        return _UniffiConverterTypeOptions.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_skip_disconnected_relays,self._uniffi_clone_pointer(),
        _UniffiConverterBool.lower(skip))
        )





    def timeout(self, timeout: "Duration") -> "Options":
        _UniffiConverterDuration.check_lower(timeout)
        
        return _UniffiConverterTypeOptions.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_timeout,self._uniffi_clone_pointer(),
        _UniffiConverterDuration.lower(timeout))
        )





    def wait_for_send(self, wait: "bool") -> "Options":
        _UniffiConverterBool.check_lower(wait)
        
        return _UniffiConverterTypeOptions.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_wait_for_send,self._uniffi_clone_pointer(),
        _UniffiConverterBool.lower(wait))
        )





    def wait_for_subscription(self, wait: "bool") -> "Options":
        _UniffiConverterBool.check_lower(wait)
        
        return _UniffiConverterTypeOptions.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_wait_for_subscription,self._uniffi_clone_pointer(),
        _UniffiConverterBool.lower(wait))
        )






class _UniffiConverterTypeOptions:

    @staticmethod
    def lift(value: int):
        return Options._make_instance_(value)

    @staticmethod
    def check_lower(value: Options):
        if not isinstance(value, Options):
            raise TypeError("Expected Options instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: OptionsProtocol):
        if not isinstance(value, Options):
            raise TypeError("Expected Options instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: OptionsProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class ProfileProtocol(typing.Protocol):
    def metadata(self, ):
        """
        Get profile metadata
        """

        raise NotImplementedError
    def name(self, ):
        """
        Get profile name

        Steps (go to next step if field is `None` or `empty`):
        * Check `display_name` field
        * Check `name` field
        * Return cutted public key (ex. `00000000:00000002`)
        """

        raise NotImplementedError
    def public_key(self, ):
        """
        Get profile public key
        """

        raise NotImplementedError


class Profile:
    _pointer: ctypes.c_void_p
    def __init__(self, public_key: "PublicKey",metadata: "Metadata"):
        """
        Compose new profile
        """

        _UniffiConverterTypePublicKey.check_lower(public_key)
        
        _UniffiConverterTypeMetadata.check_lower(metadata)
        
        self._pointer = _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_profile_new,
        _UniffiConverterTypePublicKey.lower(public_key),
        _UniffiConverterTypeMetadata.lower(metadata))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_profile, pointer)

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_profile, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def metadata(self, ) -> "Metadata":
        """
        Get profile metadata
        """

        return _UniffiConverterTypeMetadata.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_profile_metadata,self._uniffi_clone_pointer(),)
        )





    def name(self, ) -> "str":
        """
        Get profile name

        Steps (go to next step if field is `None` or `empty`):
        * Check `display_name` field
        * Check `name` field
        * Return cutted public key (ex. `00000000:00000002`)
        """

        return _UniffiConverterString.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_profile_name,self._uniffi_clone_pointer(),)
        )





    def public_key(self, ) -> "PublicKey":
        """
        Get profile public key
        """

        return _UniffiConverterTypePublicKey.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_profile_public_key,self._uniffi_clone_pointer(),)
        )





    def __repr__(self, ) -> "str":
        return _UniffiConverterString.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_profile_uniffi_trait_debug,self._uniffi_clone_pointer(),)
        )



    def __eq__(self, other: object) -> bool:
        if not isinstance(other, Profile):
            return NotImplemented

        return _UniffiConverterBool.lift(_uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_profile_uniffi_trait_eq_eq,self._uniffi_clone_pointer(),
        _UniffiConverterTypeProfile.lower(other)))

    def __ne__(self, other: object) -> bool:
        if not isinstance(other, Profile):
            return NotImplemented

        return _UniffiConverterBool.lift(_uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_profile_uniffi_trait_eq_ne,self._uniffi_clone_pointer(),
        _UniffiConverterTypeProfile.lower(other)))


    def __hash__(self, ) -> "int":
        return _UniffiConverterUInt64.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_profile_uniffi_trait_hash,self._uniffi_clone_pointer(),)
        )






class _UniffiConverterTypeProfile:

    @staticmethod
    def lift(value: int):
        return Profile._make_instance_(value)

    @staticmethod
    def check_lower(value: Profile):
        if not isinstance(value, Profile):
            raise TypeError("Expected Profile instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: ProfileProtocol):
        if not isinstance(value, Profile):
            raise TypeError("Expected Profile instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: ProfileProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class RelayProtocol(typing.Protocol):
    def batch_event(self, events: "typing.List[Event]",opts: "RelaySendOptions"):
        """
        Send multiple `Event` at once
        """

        raise NotImplementedError
    def batch_msg(self, msgs: "typing.List[ClientMessage]",opts: "RelaySendOptions"):
        """
        Send multiple `ClientMessage` at once
        """

        raise NotImplementedError
    def connect(self, connection_timeout: "typing.Optional[Duration]"):
        """
        Connect to relay and keep alive connection
        """

        raise NotImplementedError
    def connection_mode(self, ):
        """
        Get connection mode
        """

        raise NotImplementedError
    def count_events_of(self, filters: "typing.List[Filter]",timeout: "Duration"):
        """
        Count events of filters
        """

        raise NotImplementedError
    def disconnect(self, ):
        """
        Disconnect from relay and set status to 'Terminated'
        """

        raise NotImplementedError
    def document(self, ):
        raise NotImplementedError
    def filtering(self, ):
        """
        Get relay filtering
        """

        raise NotImplementedError
    def get_events_of(self, filters: "typing.List[Filter]",timeout: "Duration"):
        """
        Get events of filters
        """

        raise NotImplementedError
    def is_connected(self, ):
        """
        Check if `Relay` is connected
        """

        raise NotImplementedError
    def opts(self, ):
        raise NotImplementedError
    def queue(self, ):
        """
        Get number of messages in queue
        """

        raise NotImplementedError
    def reconcile(self, filter: "Filter",opts: "NegentropyOptions"):
        """
        Negentropy reconciliation

        Use events stored in database
        """

        raise NotImplementedError
    def reconcile_with_items(self, filter: "Filter",items: "typing.List[NegentropyItem]",opts: "NegentropyOptions"):
        """
        Negentropy reconciliation with custom items
        """

        raise NotImplementedError
    def send_event(self, event: "Event",opts: "RelaySendOptions"):
        """
        Send event and wait for `OK` relay msg
        """

        raise NotImplementedError
    def send_msg(self, msg: "ClientMessage",opts: "RelaySendOptions"):
        """
        Send msg to relay
        """

        raise NotImplementedError
    def stats(self, ):
        raise NotImplementedError
    def status(self, ):
        """
        Get relay status
        """

        raise NotImplementedError
    def subscribe(self, filters: "typing.List[Filter]",opts: "SubscribeOptions"):
        """
        Subscribe to filters

        Internally generate a new random subscription ID. Check `subscribe_with_id` method to use a custom subscription ID.

        ### Auto-closing subscription

        It's possible to automatically close a subscription by configuring the `SubscribeOptions`.

        Note: auto-closing subscriptions aren't saved in subscriptions map!
        """

        raise NotImplementedError
    def subscribe_with_id(self, id: "str",filters: "typing.List[Filter]",opts: "SubscribeOptions"):
        """
        Subscribe with custom subscription ID

        ### Auto-closing subscription

        It's possible to automatically close a subscription by configuring the `SubscribeOptions`.

        Note: auto-closing subscriptions aren't saved in subscriptions map!
        """

        raise NotImplementedError
    def subscription(self, id: "str"):
        """
        Get filters by subscription ID
        """

        raise NotImplementedError
    def subscriptions(self, ):
        raise NotImplementedError
    def support_negentropy(self, ):
        """
        Check if relay support negentropy protocol
        """

        raise NotImplementedError
    def unsubscribe(self, id: "str",opts: "RelaySendOptions"):
        """
        Unsubscribe
        """

        raise NotImplementedError
    def unsubscribe_all(self, opts: "RelaySendOptions"):
        """
        Unsubscribe from all subscriptions
        """

        raise NotImplementedError
    def url(self, ):
        """
        Get relay url
        """

        raise NotImplementedError


class Relay:
    _pointer: ctypes.c_void_p
    def __init__(self, url: "str"):
        """
        Create new `Relay` with **default** `options` and `in-memory database`
        """

        _UniffiConverterString.check_lower(url)
        
        self._pointer = _uniffi_rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_relay_new,
        _UniffiConverterString.lower(url))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_relay, pointer)

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_relay, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def custom(cls, url: "str",database: "NostrDatabase",opts: "RelayOptions"):
        """
        Create new `Relay` with **custom** `database` and/or `options`
        """

        _UniffiConverterString.check_lower(url)
        
        _UniffiConverterTypeNostrDatabase.check_lower(database)
        
        _UniffiConverterTypeRelayOptions.check_lower(opts)
        
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _uniffi_rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_relay_custom,
        _UniffiConverterString.lower(url),
        _UniffiConverterTypeNostrDatabase.lower(database),
        _UniffiConverterTypeRelayOptions.lower(opts))
        return cls._make_instance_(pointer)


    @classmethod
    def with_opts(cls, url: "str",opts: "RelayOptions"):
        """
        Create new `Relay` with default `in-memory database` and custom `options`
        """

        _UniffiConverterString.check_lower(url)
        
        _UniffiConverterTypeRelayOptions.check_lower(opts)
        
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _uniffi_rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_relay_with_opts,
        _UniffiConverterString.lower(url),
        _UniffiConverterTypeRelayOptions.lower(opts))
        return cls._make_instance_(pointer)


    async def batch_event(self, events: "typing.List[Event]",opts: "RelaySendOptions") -> None:

        """
        Send multiple `Event` at once
        """

        _UniffiConverterSequenceTypeEvent.check_lower(events)
        
        _UniffiConverterTypeRelaySendOptions.check_lower(opts)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_batch_event(
                self._uniffi_clone_pointer(), 
        _UniffiConverterSequenceTypeEvent.lower(events),
        _UniffiConverterTypeRelaySendOptions.lower(opts)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_void,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_void,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_void,
            # lift function
            lambda val: None,
            
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )



    async def batch_msg(self, msgs: "typing.List[ClientMessage]",opts: "RelaySendOptions") -> None:

        """
        Send multiple `ClientMessage` at once
        """

        _UniffiConverterSequenceTypeClientMessage.check_lower(msgs)
        
        _UniffiConverterTypeRelaySendOptions.check_lower(opts)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_batch_msg(
                self._uniffi_clone_pointer(), 
        _UniffiConverterSequenceTypeClientMessage.lower(msgs),
        _UniffiConverterTypeRelaySendOptions.lower(opts)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_void,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_void,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_void,
            # lift function
            lambda val: None,
            
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )



    async def connect(self, connection_timeout: "typing.Optional[Duration]") -> None:

        """
        Connect to relay and keep alive connection
        """

        _UniffiConverterOptionalDuration.check_lower(connection_timeout)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_connect(
                self._uniffi_clone_pointer(), 
        _UniffiConverterOptionalDuration.lower(connection_timeout)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_void,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_void,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_void,
            # lift function
            lambda val: None,
            
            
    # Error FFI converter

    None,

        )




    def connection_mode(self, ) -> "ConnectionMode":
        """
        Get connection mode
        """

        return _UniffiConverterTypeConnectionMode.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_connection_mode,self._uniffi_clone_pointer(),)
        )




    async def count_events_of(self, filters: "typing.List[Filter]",timeout: "Duration") -> "int":
        """
        Count events of filters
        """

        _UniffiConverterSequenceTypeFilter.check_lower(filters)
        
        _UniffiConverterDuration.check_lower(timeout)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_count_events_of(
                self._uniffi_clone_pointer(), 
        _UniffiConverterSequenceTypeFilter.lower(filters),
        _UniffiConverterDuration.lower(timeout)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_u64,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_u64,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_u64,
            # lift function
            _UniffiConverterUInt64.lift,
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )



    async def disconnect(self, ) -> None:

        """
        Disconnect from relay and set status to 'Terminated'
        """

        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_disconnect(
                self._uniffi_clone_pointer(), 
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_void,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_void,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_void,
            # lift function
            lambda val: None,
            
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )



    async def document(self, ) -> "RelayInformationDocument":
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_document(
                self._uniffi_clone_pointer(), 
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_pointer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_pointer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_pointer,
            # lift function
            _UniffiConverterTypeRelayInformationDocument.lift,
            
    # Error FFI converter

    None,

        )




    def filtering(self, ) -> "RelayFiltering":
        """
        Get relay filtering
        """

        return _UniffiConverterTypeRelayFiltering.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_filtering,self._uniffi_clone_pointer(),)
        )




    async def get_events_of(self, filters: "typing.List[Filter]",timeout: "Duration") -> "typing.List[Event]":
        """
        Get events of filters
        """

        _UniffiConverterSequenceTypeFilter.check_lower(filters)
        
        _UniffiConverterDuration.check_lower(timeout)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_get_events_of(
                self._uniffi_clone_pointer(), 
        _UniffiConverterSequenceTypeFilter.lower(filters),
        _UniffiConverterDuration.lower(timeout)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_rust_buffer,
            # lift function
            _UniffiConverterSequenceTypeEvent.lift,
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )



    async def is_connected(self, ) -> "bool":
        """
        Check if `Relay` is connected
        """

        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_is_connected(
                self._uniffi_clone_pointer(), 
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_i8,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_i8,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_i8,
            # lift function
            _UniffiConverterBool.lift,
            
    # Error FFI converter

    None,

        )




    def opts(self, ) -> "RelayOptions":
        return _UniffiConverterTypeRelayOptions.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_opts,self._uniffi_clone_pointer(),)
        )





    def queue(self, ) -> "int":
        """
        Get number of messages in queue
        """

        return _UniffiConverterUInt64.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_queue,self._uniffi_clone_pointer(),)
        )




    async def reconcile(self, filter: "Filter",opts: "NegentropyOptions") -> "Reconciliation":
        """
        Negentropy reconciliation

        Use events stored in database
        """

        _UniffiConverterTypeFilter.check_lower(filter)
        
        _UniffiConverterTypeNegentropyOptions.check_lower(opts)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_reconcile(
                self._uniffi_clone_pointer(), 
        _UniffiConverterTypeFilter.lower(filter),
        _UniffiConverterTypeNegentropyOptions.lower(opts)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_rust_buffer,
            # lift function
            _UniffiConverterTypeReconciliation.lift,
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )



    async def reconcile_with_items(self, filter: "Filter",items: "typing.List[NegentropyItem]",opts: "NegentropyOptions") -> "Reconciliation":
        """
        Negentropy reconciliation with custom items
        """

        _UniffiConverterTypeFilter.check_lower(filter)
        
        _UniffiConverterSequenceTypeNegentropyItem.check_lower(items)
        
        _UniffiConverterTypeNegentropyOptions.check_lower(opts)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_reconcile_with_items(
                self._uniffi_clone_pointer(), 
        _UniffiConverterTypeFilter.lower(filter),
        _UniffiConverterSequenceTypeNegentropyItem.lower(items),
        _UniffiConverterTypeNegentropyOptions.lower(opts)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_rust_buffer,
            # lift function
            _UniffiConverterTypeReconciliation.lift,
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )



    async def send_event(self, event: "Event",opts: "RelaySendOptions") -> "EventId":
        """
        Send event and wait for `OK` relay msg
        """

        _UniffiConverterTypeEvent.check_lower(event)
        
        _UniffiConverterTypeRelaySendOptions.check_lower(opts)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_send_event(
                self._uniffi_clone_pointer(), 
        _UniffiConverterTypeEvent.lower(event),
        _UniffiConverterTypeRelaySendOptions.lower(opts)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_pointer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_pointer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_pointer,
            # lift function
            _UniffiConverterTypeEventId.lift,
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )



    async def send_msg(self, msg: "ClientMessage",opts: "RelaySendOptions") -> None:

        """
        Send msg to relay
        """

        _UniffiConverterTypeClientMessage.check_lower(msg)
        
        _UniffiConverterTypeRelaySendOptions.check_lower(opts)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_send_msg(
                self._uniffi_clone_pointer(), 
        _UniffiConverterTypeClientMessage.lower(msg),
        _UniffiConverterTypeRelaySendOptions.lower(opts)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_void,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_void,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_void,
            # lift function
            lambda val: None,
            
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )




    def stats(self, ) -> "RelayConnectionStats":
        return _UniffiConverterTypeRelayConnectionStats.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_stats,self._uniffi_clone_pointer(),)
        )




    async def status(self, ) -> "RelayStatus":
        """
        Get relay status
        """

        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_status(
                self._uniffi_clone_pointer(), 
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_rust_buffer,
            # lift function
            _UniffiConverterTypeRelayStatus.lift,
            
    # Error FFI converter

    None,

        )



    async def subscribe(self, filters: "typing.List[Filter]",opts: "SubscribeOptions") -> "str":
        """
        Subscribe to filters

        Internally generate a new random subscription ID. Check `subscribe_with_id` method to use a custom subscription ID.

        ### Auto-closing subscription

        It's possible to automatically close a subscription by configuring the `SubscribeOptions`.

        Note: auto-closing subscriptions aren't saved in subscriptions map!
        """

        _UniffiConverterSequenceTypeFilter.check_lower(filters)
        
        _UniffiConverterTypeSubscribeOptions.check_lower(opts)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_subscribe(
                self._uniffi_clone_pointer(), 
        _UniffiConverterSequenceTypeFilter.lower(filters),
        _UniffiConverterTypeSubscribeOptions.lower(opts)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_rust_buffer,
            # lift function
            _UniffiConverterString.lift,
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )



    async def subscribe_with_id(self, id: "str",filters: "typing.List[Filter]",opts: "SubscribeOptions") -> None:

        """
        Subscribe with custom subscription ID

        ### Auto-closing subscription

        It's possible to automatically close a subscription by configuring the `SubscribeOptions`.

        Note: auto-closing subscriptions aren't saved in subscriptions map!
        """

        _UniffiConverterString.check_lower(id)
        
        _UniffiConverterSequenceTypeFilter.check_lower(filters)
        
        _UniffiConverterTypeSubscribeOptions.check_lower(opts)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_subscribe_with_id(
                self._uniffi_clone_pointer(), 
        _UniffiConverterString.lower(id),
        _UniffiConverterSequenceTypeFilter.lower(filters),
        _UniffiConverterTypeSubscribeOptions.lower(opts)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_void,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_void,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_void,
            # lift function
            lambda val: None,
            
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )



    async def subscription(self, id: "str") -> "typing.Optional[typing.List[Filter]]":
        """
        Get filters by subscription ID
        """

        _UniffiConverterString.check_lower(id)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_subscription(
                self._uniffi_clone_pointer(), 
        _UniffiConverterString.lower(id)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_rust_buffer,
            # lift function
            _UniffiConverterOptionalSequenceTypeFilter.lift,
            
    # Error FFI converter

    None,

        )



    async def subscriptions(self, ) -> "dict[str, typing.List[Filter]]":
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_subscriptions(
                self._uniffi_clone_pointer(), 
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_rust_buffer,
            # lift function
            _UniffiConverterMapStringSequenceTypeFilter.lift,
            
    # Error FFI converter

    None,

        )



    async def support_negentropy(self, ) -> "bool":
        """
        Check if relay support negentropy protocol
        """

        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_support_negentropy(
                self._uniffi_clone_pointer(), 
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_i8,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_i8,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_i8,
            # lift function
            _UniffiConverterBool.lift,
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )



    async def unsubscribe(self, id: "str",opts: "RelaySendOptions") -> None:

        """
        Unsubscribe
        """

        _UniffiConverterString.check_lower(id)
        
        _UniffiConverterTypeRelaySendOptions.check_lower(opts)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_unsubscribe(
                self._uniffi_clone_pointer(), 
        _UniffiConverterString.lower(id),
        _UniffiConverterTypeRelaySendOptions.lower(opts)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_void,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_void,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_void,
            # lift function
            lambda val: None,
            
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )



    async def unsubscribe_all(self, opts: "RelaySendOptions") -> None:

        """
        Unsubscribe from all subscriptions
        """

        _UniffiConverterTypeRelaySendOptions.check_lower(opts)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_unsubscribe_all(
                self._uniffi_clone_pointer(), 
        _UniffiConverterTypeRelaySendOptions.lower(opts)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_void,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_void,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_void,
            # lift function
            lambda val: None,
            
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )




    def url(self, ) -> "str":
        """
        Get relay url
        """

        return _UniffiConverterString.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_url,self._uniffi_clone_pointer(),)
        )






class _UniffiConverterTypeRelay:

    @staticmethod
    def lift(value: int):
        return Relay._make_instance_(value)

    @staticmethod
    def check_lower(value: Relay):
        if not isinstance(value, Relay):
            raise TypeError("Expected Relay instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: RelayProtocol):
        if not isinstance(value, Relay):
            raise TypeError("Expected Relay instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: RelayProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class RelayConnectionStatsProtocol(typing.Protocol):
    def attempts(self, ):
        """
        The number of times a connection has been attempted
        """

        raise NotImplementedError
    def bytes_received(self, ):
        """
        Bytes received
        """

        raise NotImplementedError
    def bytes_sent(self, ):
        """
        Bytes sent
        """

        raise NotImplementedError
    def connected_at(self, ):
        """
        Get UNIX timestamp of the last connection
        """

        raise NotImplementedError
    def first_connection_timestamp(self, ):
        """
        Get UNIX timestamp of the first connection
        """

        raise NotImplementedError
    def latency(self, ):
        raise NotImplementedError
    def success(self, ):
        """
        The number of times a connection has been successfully established
        """

        raise NotImplementedError
    def uptime(self, ):
        """
        Uptime
        """

        raise NotImplementedError


class RelayConnectionStats:
    _pointer: ctypes.c_void_p
    
    def __init__(self, *args, **kwargs):
        raise ValueError("This class has no default constructor")

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_relayconnectionstats, pointer)

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_relayconnectionstats, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def attempts(self, ) -> "int":
        """
        The number of times a connection has been attempted
        """

        return _UniffiConverterUInt64.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_attempts,self._uniffi_clone_pointer(),)
        )





    def bytes_received(self, ) -> "int":
        """
        Bytes received
        """

        return _UniffiConverterUInt64.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_bytes_received,self._uniffi_clone_pointer(),)
        )





    def bytes_sent(self, ) -> "int":
        """
        Bytes sent
        """

        return _UniffiConverterUInt64.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_bytes_sent,self._uniffi_clone_pointer(),)
        )





    def connected_at(self, ) -> "Timestamp":
        """
        Get UNIX timestamp of the last connection
        """

        return _UniffiConverterTypeTimestamp.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_connected_at,self._uniffi_clone_pointer(),)
        )





    def first_connection_timestamp(self, ) -> "Timestamp":
        """
        Get UNIX timestamp of the first connection
        """

        return _UniffiConverterTypeTimestamp.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_first_connection_timestamp,self._uniffi_clone_pointer(),)
        )




    async def latency(self, ) -> "typing.Optional[Duration]":
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_latency(
                self._uniffi_clone_pointer(), 
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_rust_buffer,
            # lift function
            _UniffiConverterOptionalDuration.lift,
            
    # Error FFI converter

    None,

        )




    def success(self, ) -> "int":
        """
        The number of times a connection has been successfully established
        """

        return _UniffiConverterUInt64.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_success,self._uniffi_clone_pointer(),)
        )





    def uptime(self, ) -> "float":
        """
        Uptime
        """

        return _UniffiConverterDouble.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_uptime,self._uniffi_clone_pointer(),)
        )






class _UniffiConverterTypeRelayConnectionStats:

    @staticmethod
    def lift(value: int):
        return RelayConnectionStats._make_instance_(value)

    @staticmethod
    def check_lower(value: RelayConnectionStats):
        if not isinstance(value, RelayConnectionStats):
            raise TypeError("Expected RelayConnectionStats instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: RelayConnectionStatsProtocol):
        if not isinstance(value, RelayConnectionStats):
            raise TypeError("Expected RelayConnectionStats instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: RelayConnectionStatsProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class RelayFilteringProtocol(typing.Protocol):
    def add_ids(self, ids: "typing.List[EventId]"):
        """
        Add event IDs

        Note: IDs are ignored in whitelist mode!
        """

        raise NotImplementedError
    def add_public_keys(self, public_keys: "typing.List[PublicKey]"):
        """
        Add public keys
        """

        raise NotImplementedError
    def clear(self, ):
        """
        Remove everything
        """

        raise NotImplementedError
    def has_id(self, id: "EventId"):
        """
        Check if has event ID
        """

        raise NotImplementedError
    def has_public_key(self, public_key: "PublicKey"):
        """
        Check if has public key
        """

        raise NotImplementedError
    def mode(self, ):
        """
        Get filtering mode
        """

        raise NotImplementedError
    def remove_id(self, id: "EventId"):
        """
        Remove event ID

        Note: IDs are ignored in whitelist mode!
        """

        raise NotImplementedError
    def remove_ids(self, ids: "typing.List[EventId]"):
        """
        Remove event IDs

        Note: IDs are ignored in whitelist mode!
        """

        raise NotImplementedError
    def remove_public_key(self, public_key: "PublicKey"):
        """
        Remove public key
        """

        raise NotImplementedError
    def remove_public_keys(self, ids: "typing.List[PublicKey]"):
        """
        Remove public keys
        """

        raise NotImplementedError
    def update_mode(self, mode: "RelayFilteringMode"):
        """
        Update filtering mode
        """

        raise NotImplementedError


class RelayFiltering:
    _pointer: ctypes.c_void_p
    
    def __init__(self, *args, **kwargs):
        raise ValueError("This class has no default constructor")

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_relayfiltering, pointer)

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_relayfiltering, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def blacklist(cls, ):
        """
        Construct new filtering in blacklist mode
        """

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_relayfiltering_blacklist,)
        return cls._make_instance_(pointer)


    @classmethod
    def whitelist(cls, ):
        """
        Construct new filtering in whitelist mode
        """

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_relayfiltering_whitelist,)
        return cls._make_instance_(pointer)


    async def add_ids(self, ids: "typing.List[EventId]") -> None:

        """
        Add event IDs

        Note: IDs are ignored in whitelist mode!
        """

        _UniffiConverterSequenceTypeEventId.check_lower(ids)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayfiltering_add_ids(
                self._uniffi_clone_pointer(), 
        _UniffiConverterSequenceTypeEventId.lower(ids)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_void,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_void,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_void,
            # lift function
            lambda val: None,
            
            
    # Error FFI converter

    None,

        )



    async def add_public_keys(self, public_keys: "typing.List[PublicKey]") -> None:

        """
        Add public keys
        """

        _UniffiConverterSequenceTypePublicKey.check_lower(public_keys)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayfiltering_add_public_keys(
                self._uniffi_clone_pointer(), 
        _UniffiConverterSequenceTypePublicKey.lower(public_keys)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_void,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_void,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_void,
            # lift function
            lambda val: None,
            
            
    # Error FFI converter

    None,

        )



    async def clear(self, ) -> None:

        """
        Remove everything
        """

        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayfiltering_clear(
                self._uniffi_clone_pointer(), 
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_void,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_void,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_void,
            # lift function
            lambda val: None,
            
            
    # Error FFI converter

    None,

        )



    async def has_id(self, id: "EventId") -> "bool":
        """
        Check if has event ID
        """

        _UniffiConverterTypeEventId.check_lower(id)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayfiltering_has_id(
                self._uniffi_clone_pointer(), 
        _UniffiConverterTypeEventId.lower(id)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_i8,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_i8,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_i8,
            # lift function
            _UniffiConverterBool.lift,
            
    # Error FFI converter

    None,

        )



    async def has_public_key(self, public_key: "PublicKey") -> "bool":
        """
        Check if has public key
        """

        _UniffiConverterTypePublicKey.check_lower(public_key)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayfiltering_has_public_key(
                self._uniffi_clone_pointer(), 
        _UniffiConverterTypePublicKey.lower(public_key)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_i8,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_i8,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_i8,
            # lift function
            _UniffiConverterBool.lift,
            
    # Error FFI converter

    None,

        )




    def mode(self, ) -> "RelayFilteringMode":
        """
        Get filtering mode
        """

        return _UniffiConverterTypeRelayFilteringMode.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayfiltering_mode,self._uniffi_clone_pointer(),)
        )




    async def remove_id(self, id: "EventId") -> None:

        """
        Remove event ID

        Note: IDs are ignored in whitelist mode!
        """

        _UniffiConverterTypeEventId.check_lower(id)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayfiltering_remove_id(
                self._uniffi_clone_pointer(), 
        _UniffiConverterTypeEventId.lower(id)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_void,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_void,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_void,
            # lift function
            lambda val: None,
            
            
    # Error FFI converter

    None,

        )



    async def remove_ids(self, ids: "typing.List[EventId]") -> None:

        """
        Remove event IDs

        Note: IDs are ignored in whitelist mode!
        """

        _UniffiConverterSequenceTypeEventId.check_lower(ids)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayfiltering_remove_ids(
                self._uniffi_clone_pointer(), 
        _UniffiConverterSequenceTypeEventId.lower(ids)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_void,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_void,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_void,
            # lift function
            lambda val: None,
            
            
    # Error FFI converter

    None,

        )



    async def remove_public_key(self, public_key: "PublicKey") -> None:

        """
        Remove public key
        """

        _UniffiConverterTypePublicKey.check_lower(public_key)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayfiltering_remove_public_key(
                self._uniffi_clone_pointer(), 
        _UniffiConverterTypePublicKey.lower(public_key)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_void,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_void,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_void,
            # lift function
            lambda val: None,
            
            
    # Error FFI converter

    None,

        )



    async def remove_public_keys(self, ids: "typing.List[PublicKey]") -> None:

        """
        Remove public keys
        """

        _UniffiConverterSequenceTypePublicKey.check_lower(ids)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayfiltering_remove_public_keys(
                self._uniffi_clone_pointer(), 
        _UniffiConverterSequenceTypePublicKey.lower(ids)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_void,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_void,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_void,
            # lift function
            lambda val: None,
            
            
    # Error FFI converter

    None,

        )




    def update_mode(self, mode: "RelayFilteringMode") -> None:
        """
        Update filtering mode
        """

        _UniffiConverterTypeRelayFilteringMode.check_lower(mode)
        
        _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayfiltering_update_mode,self._uniffi_clone_pointer(),
        _UniffiConverterTypeRelayFilteringMode.lower(mode))







class _UniffiConverterTypeRelayFiltering:

    @staticmethod
    def lift(value: int):
        return RelayFiltering._make_instance_(value)

    @staticmethod
    def check_lower(value: RelayFiltering):
        if not isinstance(value, RelayFiltering):
            raise TypeError("Expected RelayFiltering instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: RelayFilteringProtocol):
        if not isinstance(value, RelayFiltering):
            raise TypeError("Expected RelayFiltering instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: RelayFilteringProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class RelayLimitsProtocol(typing.Protocol):
    """
    Relay Limits
    """

    def event_max_num_tags(self, max_num_tags: "typing.Optional[int]"):
        """
        Maximum number of tags allowed (default: 2_000)
        """

        raise NotImplementedError
    def event_max_num_tags_per_kind(self, kind: "Kind",max_num_tags: "typing.Optional[int]"):
        """
        Maximum number of tags allowed per kind
        """

        raise NotImplementedError
    def event_max_size(self, max_size: "typing.Optional[int]"):
        """
        Maximum size of normalised JSON, in bytes (default: 70_000)
        """

        raise NotImplementedError
    def event_max_size_per_kind(self, kind: "Kind",max_size: "typing.Optional[int]"):
        """
        Maximum size per kind of normalised JSON, in bytes.
        """

        raise NotImplementedError
    def message_max_size(self, max_size: "typing.Optional[int]"):
        """
        Maximum size of normalised JSON, in bytes (default: 5_250_000)
        """

        raise NotImplementedError


class RelayLimits:
    """
    Relay Limits
    """

    _pointer: ctypes.c_void_p
    def __init__(self, ):
        """
        Construct with default limits
        """

        self._pointer = _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_relaylimits_new,)

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_relaylimits, pointer)

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_relaylimits, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def disable(cls, ):
        """
        Disable all limits
        """

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_relaylimits_disable,)
        return cls._make_instance_(pointer)



    def event_max_num_tags(self, max_num_tags: "typing.Optional[int]") -> "RelayLimits":
        """
        Maximum number of tags allowed (default: 2_000)
        """

        _UniffiConverterOptionalUInt16.check_lower(max_num_tags)
        
        return _UniffiConverterTypeRelayLimits.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaylimits_event_max_num_tags,self._uniffi_clone_pointer(),
        _UniffiConverterOptionalUInt16.lower(max_num_tags))
        )





    def event_max_num_tags_per_kind(self, kind: "Kind",max_num_tags: "typing.Optional[int]") -> "RelayLimits":
        """
        Maximum number of tags allowed per kind
        """

        _UniffiConverterTypeKind.check_lower(kind)
        
        _UniffiConverterOptionalUInt16.check_lower(max_num_tags)
        
        return _UniffiConverterTypeRelayLimits.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaylimits_event_max_num_tags_per_kind,self._uniffi_clone_pointer(),
        _UniffiConverterTypeKind.lower(kind),
        _UniffiConverterOptionalUInt16.lower(max_num_tags))
        )





    def event_max_size(self, max_size: "typing.Optional[int]") -> "RelayLimits":
        """
        Maximum size of normalised JSON, in bytes (default: 70_000)
        """

        _UniffiConverterOptionalUInt32.check_lower(max_size)
        
        return _UniffiConverterTypeRelayLimits.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaylimits_event_max_size,self._uniffi_clone_pointer(),
        _UniffiConverterOptionalUInt32.lower(max_size))
        )





    def event_max_size_per_kind(self, kind: "Kind",max_size: "typing.Optional[int]") -> "RelayLimits":
        """
        Maximum size per kind of normalised JSON, in bytes.
        """

        _UniffiConverterTypeKind.check_lower(kind)
        
        _UniffiConverterOptionalUInt32.check_lower(max_size)
        
        return _UniffiConverterTypeRelayLimits.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaylimits_event_max_size_per_kind,self._uniffi_clone_pointer(),
        _UniffiConverterTypeKind.lower(kind),
        _UniffiConverterOptionalUInt32.lower(max_size))
        )





    def message_max_size(self, max_size: "typing.Optional[int]") -> "RelayLimits":
        """
        Maximum size of normalised JSON, in bytes (default: 5_250_000)
        """

        _UniffiConverterOptionalUInt32.check_lower(max_size)
        
        return _UniffiConverterTypeRelayLimits.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaylimits_message_max_size,self._uniffi_clone_pointer(),
        _UniffiConverterOptionalUInt32.lower(max_size))
        )





    def __repr__(self, ) -> "str":
        return _UniffiConverterString.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaylimits_uniffi_trait_debug,self._uniffi_clone_pointer(),)
        )



    def __eq__(self, other: object) -> bool:
        if not isinstance(other, RelayLimits):
            return NotImplemented

        return _UniffiConverterBool.lift(_uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaylimits_uniffi_trait_eq_eq,self._uniffi_clone_pointer(),
        _UniffiConverterTypeRelayLimits.lower(other)))

    def __ne__(self, other: object) -> bool:
        if not isinstance(other, RelayLimits):
            return NotImplemented

        return _UniffiConverterBool.lift(_uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaylimits_uniffi_trait_eq_ne,self._uniffi_clone_pointer(),
        _UniffiConverterTypeRelayLimits.lower(other)))



class _UniffiConverterTypeRelayLimits:

    @staticmethod
    def lift(value: int):
        return RelayLimits._make_instance_(value)

    @staticmethod
    def check_lower(value: RelayLimits):
        if not isinstance(value, RelayLimits):
            raise TypeError("Expected RelayLimits instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: RelayLimitsProtocol):
        if not isinstance(value, RelayLimits):
            raise TypeError("Expected RelayLimits instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: RelayLimitsProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class RelayOptionsProtocol(typing.Protocol):
    """
    `Relay` options
    """

    def adjust_retry_sec(self, adjust_retry_sec: "bool"):
        """
        Automatically adjust retry seconds based on success/attempts (default: true)
        """

        raise NotImplementedError
    def connection_mode(self, mode: "ConnectionMode"):
        """
        Set connection mode
        """

        raise NotImplementedError
    def filtering_mode(self, mode: "RelayFilteringMode"):
        """
        Set filtering mode (default: blacklist)
        """

        raise NotImplementedError
    def limits(self, limits: "RelayLimits"):
        """
        Set custom limits
        """

        raise NotImplementedError
    def max_avg_latency(self, max: "typing.Optional[Duration]"):
        """
        Set max latency (default: None)

        Relay with an avg. latency greater that this value will be skipped.
        """

        raise NotImplementedError
    def ping(self, ping: "bool"):
        """
        Set ping flag
        """

        raise NotImplementedError
    def pow(self, difficulty: "int"):
        """
        Minimum POW for received events (default: 0)
        """

        raise NotImplementedError
    def read(self, read: "bool"):
        """
        Set read flag
        """

        raise NotImplementedError
    def reconnect(self, reconnect: "bool"):
        """
        Enable/disable auto reconnection (default: true)
        """

        raise NotImplementedError
    def retry_sec(self, retry_sec: "int"):
        """
        Retry connection time (default: 10 sec)

        Are allowed values `>=` 5 secs
        """

        raise NotImplementedError
    def update_adjust_retry_sec(self, adjust_retry_sec: "bool"):
        """
        Set adjust_retry_sec option
        """

        raise NotImplementedError
    def update_pow_difficulty(self, difficulty: "int"):
        """
        Update `pow` option
        """

        raise NotImplementedError
    def update_reconnect(self, reconnect: "bool"):
        """
        Update `reconnect` option
        """

        raise NotImplementedError
    def update_retry_sec(self, retry_sec: "int"):
        """
        Set retry_sec option
        """

        raise NotImplementedError
    def write(self, write: "bool"):
        """
        Set write flag
        """

        raise NotImplementedError


class RelayOptions:
    """
    `Relay` options
    """

    _pointer: ctypes.c_void_p
    def __init__(self, ):
        """
        New default relay options
        """

        self._pointer = _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_relayoptions_new,)

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_relayoptions, pointer)

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_relayoptions, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def adjust_retry_sec(self, adjust_retry_sec: "bool") -> "RelayOptions":
        """
        Automatically adjust retry seconds based on success/attempts (default: true)
        """

        _UniffiConverterBool.check_lower(adjust_retry_sec)
        
        return _UniffiConverterTypeRelayOptions.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayoptions_adjust_retry_sec,self._uniffi_clone_pointer(),
        _UniffiConverterBool.lower(adjust_retry_sec))
        )





    def connection_mode(self, mode: "ConnectionMode") -> "RelayOptions":
        """
        Set connection mode
        """

        _UniffiConverterTypeConnectionMode.check_lower(mode)
        
        return _UniffiConverterTypeRelayOptions.lift(
            _uniffi_rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayoptions_connection_mode,self._uniffi_clone_pointer(),
        _UniffiConverterTypeConnectionMode.lower(mode))
        )





    def filtering_mode(self, mode: "RelayFilteringMode") -> "RelayOptions":
        """
        Set filtering mode (default: blacklist)
        """

        _UniffiConverterTypeRelayFilteringMode.check_lower(mode)
        
        return _UniffiConverterTypeRelayOptions.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayoptions_filtering_mode,self._uniffi_clone_pointer(),
        _UniffiConverterTypeRelayFilteringMode.lower(mode))
        )





    def limits(self, limits: "RelayLimits") -> "RelayOptions":
        """
        Set custom limits
        """

        _UniffiConverterTypeRelayLimits.check_lower(limits)
        
        return _UniffiConverterTypeRelayOptions.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayoptions_limits,self._uniffi_clone_pointer(),
        _UniffiConverterTypeRelayLimits.lower(limits))
        )





    def max_avg_latency(self, max: "typing.Optional[Duration]") -> "RelayOptions":
        """
        Set max latency (default: None)

        Relay with an avg. latency greater that this value will be skipped.
        """

        _UniffiConverterOptionalDuration.check_lower(max)
        
        return _UniffiConverterTypeRelayOptions.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayoptions_max_avg_latency,self._uniffi_clone_pointer(),
        _UniffiConverterOptionalDuration.lower(max))
        )





    def ping(self, ping: "bool") -> "RelayOptions":
        """
        Set ping flag
        """

        _UniffiConverterBool.check_lower(ping)
        
        return _UniffiConverterTypeRelayOptions.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayoptions_ping,self._uniffi_clone_pointer(),
        _UniffiConverterBool.lower(ping))
        )





    def pow(self, difficulty: "int") -> "RelayOptions":
        """
        Minimum POW for received events (default: 0)
        """

        _UniffiConverterUInt8.check_lower(difficulty)
        
        return _UniffiConverterTypeRelayOptions.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayoptions_pow,self._uniffi_clone_pointer(),
        _UniffiConverterUInt8.lower(difficulty))
        )





    def read(self, read: "bool") -> "RelayOptions":
        """
        Set read flag
        """

        _UniffiConverterBool.check_lower(read)
        
        return _UniffiConverterTypeRelayOptions.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayoptions_read,self._uniffi_clone_pointer(),
        _UniffiConverterBool.lower(read))
        )





    def reconnect(self, reconnect: "bool") -> "RelayOptions":
        """
        Enable/disable auto reconnection (default: true)
        """

        _UniffiConverterBool.check_lower(reconnect)
        
        return _UniffiConverterTypeRelayOptions.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayoptions_reconnect,self._uniffi_clone_pointer(),
        _UniffiConverterBool.lower(reconnect))
        )





    def retry_sec(self, retry_sec: "int") -> "RelayOptions":
        """
        Retry connection time (default: 10 sec)

        Are allowed values `>=` 5 secs
        """

        _UniffiConverterUInt64.check_lower(retry_sec)
        
        return _UniffiConverterTypeRelayOptions.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayoptions_retry_sec,self._uniffi_clone_pointer(),
        _UniffiConverterUInt64.lower(retry_sec))
        )





    def update_adjust_retry_sec(self, adjust_retry_sec: "bool") -> None:
        """
        Set adjust_retry_sec option
        """

        _UniffiConverterBool.check_lower(adjust_retry_sec)
        
        _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayoptions_update_adjust_retry_sec,self._uniffi_clone_pointer(),
        _UniffiConverterBool.lower(adjust_retry_sec))






    def update_pow_difficulty(self, difficulty: "int") -> None:
        """
        Update `pow` option
        """

        _UniffiConverterUInt8.check_lower(difficulty)
        
        _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayoptions_update_pow_difficulty,self._uniffi_clone_pointer(),
        _UniffiConverterUInt8.lower(difficulty))






    def update_reconnect(self, reconnect: "bool") -> None:
        """
        Update `reconnect` option
        """

        _UniffiConverterBool.check_lower(reconnect)
        
        _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayoptions_update_reconnect,self._uniffi_clone_pointer(),
        _UniffiConverterBool.lower(reconnect))






    def update_retry_sec(self, retry_sec: "int") -> None:
        """
        Set retry_sec option
        """

        _UniffiConverterUInt64.check_lower(retry_sec)
        
        _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayoptions_update_retry_sec,self._uniffi_clone_pointer(),
        _UniffiConverterUInt64.lower(retry_sec))






    def write(self, write: "bool") -> "RelayOptions":
        """
        Set write flag
        """

        _UniffiConverterBool.check_lower(write)
        
        return _UniffiConverterTypeRelayOptions.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayoptions_write,self._uniffi_clone_pointer(),
        _UniffiConverterBool.lower(write))
        )






class _UniffiConverterTypeRelayOptions:

    @staticmethod
    def lift(value: int):
        return RelayOptions._make_instance_(value)

    @staticmethod
    def check_lower(value: RelayOptions):
        if not isinstance(value, RelayOptions):
            raise TypeError("Expected RelayOptions instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: RelayOptionsProtocol):
        if not isinstance(value, RelayOptions):
            raise TypeError("Expected RelayOptions instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: RelayOptionsProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class RelayPoolProtocol(typing.Protocol):
    def add_relay(self, url: "str",opts: "RelayOptions"):
        raise NotImplementedError
    def batch_event(self, events: "typing.List[Event]",opts: "RelaySendOptions"):
        """
        Send multiple events at once to all relays with `WRITE` flag
        """

        raise NotImplementedError
    def batch_event_to(self, urls: "typing.List[str]",events: "typing.List[Event]",opts: "RelaySendOptions"):
        """
        Send multiple events at once to specific relays
        """

        raise NotImplementedError
    def batch_msg_to(self, urls: "typing.List[str]",msgs: "typing.List[ClientMessage]",opts: "RelaySendOptions"):
        """
        Send multiple client messages at once to specific relays

        Note: **the relays must already be added!**
        """

        raise NotImplementedError
    def connect(self, connection_timeout: "typing.Optional[Duration]"):
        """
        Connect to all added relays and keep connection alive
        """

        raise NotImplementedError
    def connect_relay(self, url: "str",connection_timeout: "typing.Optional[Duration]"):
        """
        Connect to relay
        """

        raise NotImplementedError
    def database(self, ):
        """
        Get database
        """

        raise NotImplementedError
    def disconnect(self, ):
        """
        Disconnect from all relays
        """

        raise NotImplementedError
    def filtering(self, ):
        """
        Get relay filtering
        """

        raise NotImplementedError
    def get_events_from(self, urls: "typing.List[str]",filters: "typing.List[Filter]",timeout: "Duration",opts: "FilterOptions"):
        """
        Get events of filters from **specific relays**
        """

        raise NotImplementedError
    def get_events_of(self, filters: "typing.List[Filter]",timeout: "Duration",opts: "FilterOptions"):
        """
        Get events of filters
        """

        raise NotImplementedError
    def handle_notifications(self, handler: "HandleNotification"):
        """
        Handle relay pool notifications
        """

        raise NotImplementedError
    def reconcile(self, filter: "Filter",opts: "NegentropyOptions"):
        """
        Negentropy reconciliation

        Use events stored in database
        """

        raise NotImplementedError
    def reconcile_with_items(self, filter: "Filter",items: "typing.List[NegentropyItem]",opts: "NegentropyOptions"):
        """
        Negentropy reconciliation with custom items
        """

        raise NotImplementedError
    def relay(self, url: "str"):
        """
        Get relay
        """

        raise NotImplementedError
    def relays(self, ):
        """
        Get relays with `READ` or `WRITE` flags
        """

        raise NotImplementedError
    def remove_all_relay(self, ):
        raise NotImplementedError
    def remove_relay(self, url: "str"):
        raise NotImplementedError
    def send_event(self, event: "Event",opts: "RelaySendOptions"):
        """
        Send event to all relays with `WRITE` flag
        """

        raise NotImplementedError
    def send_event_to(self, urls: "typing.List[str]",event: "Event",opts: "RelaySendOptions"):
        """
        Send event to specific relays
        """

        raise NotImplementedError
    def send_msg_to(self, urls: "typing.List[str]",msg: "ClientMessage",opts: "RelaySendOptions"):
        """
        Send client message to specific relays

        Note: **the relays must already be added!**
        """

        raise NotImplementedError
    def shutdown(self, ):
        """
        Completely shutdown pool
        """

        raise NotImplementedError
    def subscribe(self, filters: "typing.List[Filter]",opts: "SubscribeOptions"):
        """
        Subscribe to filters to relays with `READ` flag.

        ### Auto-closing subscription

        It's possible to automatically close a subscription by configuring the `SubscribeOptions`.

        Note: auto-closing subscriptions aren't saved in subscriptions map!
        """

        raise NotImplementedError
    def subscribe_to(self, urls: "typing.List[str]",filters: "typing.List[Filter]",opts: "SubscribeOptions"):
        """
        Subscribe to filters to specific relays

        ### Auto-closing subscription

        It's possible to automatically close a subscription by configuring the `SubscribeOptions`.
        """

        raise NotImplementedError
    def subscribe_with_id(self, id: "str",filters: "typing.List[Filter]",opts: "SubscribeOptions"):
        """
        Subscribe with custom subscription ID to relays with `READ` flag.

        ### Auto-closing subscription

        It's possible to automatically close a subscription by configuring the `SubscribeOptions`.

        Note: auto-closing subscriptions aren't saved in subscriptions map!
        """

        raise NotImplementedError
    def subscribe_with_id_to(self, urls: "typing.List[str]",id: "str",filters: "typing.List[Filter]",opts: "SubscribeOptions"):
        """
        Subscribe to filters with custom subscription ID to specific relays

        ### Auto-closing subscription

        It's possible to automatically close a subscription by configuring the `SubscribeOptions`.
        """

        raise NotImplementedError
    def subscription(self, id: "str"):
        """
        Get filters by subscription ID
        """

        raise NotImplementedError
    def subscriptions(self, ):
        """
        Get subscriptions
        """

        raise NotImplementedError
    def unsubscribe(self, id: "str",opts: "RelaySendOptions"):
        """
        Unsubscribe
        """

        raise NotImplementedError
    def unsubscribe_all(self, opts: "RelaySendOptions"):
        """
        Unsubscribe from all subscriptions
        """

        raise NotImplementedError


class RelayPool:
    _pointer: ctypes.c_void_p
    def __init__(self, ):
        """
        Create new `RelayPool` with `in-memory` database
        """

        self._pointer = _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_relaypool_new,)

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_relaypool, pointer)

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_relaypool, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def with_database(cls, database: "NostrDatabase"):
        """
        Create new `RelayPool` with `custom` database
        """

        _UniffiConverterTypeNostrDatabase.check_lower(database)
        
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_relaypool_with_database,
        _UniffiConverterTypeNostrDatabase.lower(database))
        return cls._make_instance_(pointer)


    async def add_relay(self, url: "str",opts: "RelayOptions") -> "bool":
        _UniffiConverterString.check_lower(url)
        
        _UniffiConverterTypeRelayOptions.check_lower(opts)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_add_relay(
                self._uniffi_clone_pointer(), 
        _UniffiConverterString.lower(url),
        _UniffiConverterTypeRelayOptions.lower(opts)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_i8,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_i8,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_i8,
            # lift function
            _UniffiConverterBool.lift,
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )



    async def batch_event(self, events: "typing.List[Event]",opts: "RelaySendOptions") -> "Output":
        """
        Send multiple events at once to all relays with `WRITE` flag
        """

        _UniffiConverterSequenceTypeEvent.check_lower(events)
        
        _UniffiConverterTypeRelaySendOptions.check_lower(opts)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_batch_event(
                self._uniffi_clone_pointer(), 
        _UniffiConverterSequenceTypeEvent.lower(events),
        _UniffiConverterTypeRelaySendOptions.lower(opts)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_rust_buffer,
            # lift function
            _UniffiConverterTypeOutput.lift,
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )



    async def batch_event_to(self, urls: "typing.List[str]",events: "typing.List[Event]",opts: "RelaySendOptions") -> "Output":
        """
        Send multiple events at once to specific relays
        """

        _UniffiConverterSequenceString.check_lower(urls)
        
        _UniffiConverterSequenceTypeEvent.check_lower(events)
        
        _UniffiConverterTypeRelaySendOptions.check_lower(opts)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_batch_event_to(
                self._uniffi_clone_pointer(), 
        _UniffiConverterSequenceString.lower(urls),
        _UniffiConverterSequenceTypeEvent.lower(events),
        _UniffiConverterTypeRelaySendOptions.lower(opts)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_rust_buffer,
            # lift function
            _UniffiConverterTypeOutput.lift,
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )



    async def batch_msg_to(self, urls: "typing.List[str]",msgs: "typing.List[ClientMessage]",opts: "RelaySendOptions") -> "Output":
        """
        Send multiple client messages at once to specific relays

        Note: **the relays must already be added!**
        """

        _UniffiConverterSequenceString.check_lower(urls)
        
        _UniffiConverterSequenceTypeClientMessage.check_lower(msgs)
        
        _UniffiConverterTypeRelaySendOptions.check_lower(opts)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_batch_msg_to(
                self._uniffi_clone_pointer(), 
        _UniffiConverterSequenceString.lower(urls),
        _UniffiConverterSequenceTypeClientMessage.lower(msgs),
        _UniffiConverterTypeRelaySendOptions.lower(opts)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_rust_buffer,
            # lift function
            _UniffiConverterTypeOutput.lift,
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )



    async def connect(self, connection_timeout: "typing.Optional[Duration]") -> None:

        """
        Connect to all added relays and keep connection alive
        """

        _UniffiConverterOptionalDuration.check_lower(connection_timeout)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_connect(
                self._uniffi_clone_pointer(), 
        _UniffiConverterOptionalDuration.lower(connection_timeout)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_void,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_void,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_void,
            # lift function
            lambda val: None,
            
            
    # Error FFI converter

    None,

        )



    async def connect_relay(self, url: "str",connection_timeout: "typing.Optional[Duration]") -> None:

        """
        Connect to relay
        """

        _UniffiConverterString.check_lower(url)
        
        _UniffiConverterOptionalDuration.check_lower(connection_timeout)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_connect_relay(
                self._uniffi_clone_pointer(), 
        _UniffiConverterString.lower(url),
        _UniffiConverterOptionalDuration.lower(connection_timeout)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_void,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_void,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_void,
            # lift function
            lambda val: None,
            
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )




    def database(self, ) -> "NostrDatabase":
        """
        Get database
        """

        return _UniffiConverterTypeNostrDatabase.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_database,self._uniffi_clone_pointer(),)
        )




    async def disconnect(self, ) -> None:

        """
        Disconnect from all relays
        """

        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_disconnect(
                self._uniffi_clone_pointer(), 
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_void,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_void,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_void,
            # lift function
            lambda val: None,
            
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )




    def filtering(self, ) -> "RelayFiltering":
        """
        Get relay filtering
        """

        return _UniffiConverterTypeRelayFiltering.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_filtering,self._uniffi_clone_pointer(),)
        )




    async def get_events_from(self, urls: "typing.List[str]",filters: "typing.List[Filter]",timeout: "Duration",opts: "FilterOptions") -> "typing.List[Event]":
        """
        Get events of filters from **specific relays**
        """

        _UniffiConverterSequenceString.check_lower(urls)
        
        _UniffiConverterSequenceTypeFilter.check_lower(filters)
        
        _UniffiConverterDuration.check_lower(timeout)
        
        _UniffiConverterTypeFilterOptions.check_lower(opts)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_get_events_from(
                self._uniffi_clone_pointer(), 
        _UniffiConverterSequenceString.lower(urls),
        _UniffiConverterSequenceTypeFilter.lower(filters),
        _UniffiConverterDuration.lower(timeout),
        _UniffiConverterTypeFilterOptions.lower(opts)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_rust_buffer,
            # lift function
            _UniffiConverterSequenceTypeEvent.lift,
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )



    async def get_events_of(self, filters: "typing.List[Filter]",timeout: "Duration",opts: "FilterOptions") -> "typing.List[Event]":
        """
        Get events of filters
        """

        _UniffiConverterSequenceTypeFilter.check_lower(filters)
        
        _UniffiConverterDuration.check_lower(timeout)
        
        _UniffiConverterTypeFilterOptions.check_lower(opts)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_get_events_of(
                self._uniffi_clone_pointer(), 
        _UniffiConverterSequenceTypeFilter.lower(filters),
        _UniffiConverterDuration.lower(timeout),
        _UniffiConverterTypeFilterOptions.lower(opts)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_rust_buffer,
            # lift function
            _UniffiConverterSequenceTypeEvent.lift,
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )



    async def handle_notifications(self, handler: "HandleNotification") -> None:

        """
        Handle relay pool notifications
        """

        _UniffiConverterTypeHandleNotification.check_lower(handler)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_handle_notifications(
                self._uniffi_clone_pointer(), 
        _UniffiConverterTypeHandleNotification.lower(handler)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_void,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_void,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_void,
            # lift function
            lambda val: None,
            
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )



    async def reconcile(self, filter: "Filter",opts: "NegentropyOptions") -> "ReconciliationOutput":
        """
        Negentropy reconciliation

        Use events stored in database
        """

        _UniffiConverterTypeFilter.check_lower(filter)
        
        _UniffiConverterTypeNegentropyOptions.check_lower(opts)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_reconcile(
                self._uniffi_clone_pointer(), 
        _UniffiConverterTypeFilter.lower(filter),
        _UniffiConverterTypeNegentropyOptions.lower(opts)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_rust_buffer,
            # lift function
            _UniffiConverterTypeReconciliationOutput.lift,
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )



    async def reconcile_with_items(self, filter: "Filter",items: "typing.List[NegentropyItem]",opts: "NegentropyOptions") -> "ReconciliationOutput":
        """
        Negentropy reconciliation with custom items
        """

        _UniffiConverterTypeFilter.check_lower(filter)
        
        _UniffiConverterSequenceTypeNegentropyItem.check_lower(items)
        
        _UniffiConverterTypeNegentropyOptions.check_lower(opts)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_reconcile_with_items(
                self._uniffi_clone_pointer(), 
        _UniffiConverterTypeFilter.lower(filter),
        _UniffiConverterSequenceTypeNegentropyItem.lower(items),
        _UniffiConverterTypeNegentropyOptions.lower(opts)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_rust_buffer,
            # lift function
            _UniffiConverterTypeReconciliationOutput.lift,
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )



    async def relay(self, url: "str") -> "Relay":
        """
        Get relay
        """

        _UniffiConverterString.check_lower(url)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_relay(
                self._uniffi_clone_pointer(), 
        _UniffiConverterString.lower(url)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_pointer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_pointer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_pointer,
            # lift function
            _UniffiConverterTypeRelay.lift,
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )



    async def relays(self, ) -> "dict[str, Relay]":
        """
        Get relays with `READ` or `WRITE` flags
        """

        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_relays(
                self._uniffi_clone_pointer(), 
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_rust_buffer,
            # lift function
            _UniffiConverterMapStringTypeRelay.lift,
            
    # Error FFI converter

    None,

        )



    async def remove_all_relay(self, ) -> None:

        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_remove_all_relay(
                self._uniffi_clone_pointer(), 
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_void,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_void,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_void,
            # lift function
            lambda val: None,
            
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )



    async def remove_relay(self, url: "str") -> None:

        _UniffiConverterString.check_lower(url)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_remove_relay(
                self._uniffi_clone_pointer(), 
        _UniffiConverterString.lower(url)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_void,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_void,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_void,
            # lift function
            lambda val: None,
            
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )



    async def send_event(self, event: "Event",opts: "RelaySendOptions") -> "SendEventOutput":
        """
        Send event to all relays with `WRITE` flag
        """

        _UniffiConverterTypeEvent.check_lower(event)
        
        _UniffiConverterTypeRelaySendOptions.check_lower(opts)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_send_event(
                self._uniffi_clone_pointer(), 
        _UniffiConverterTypeEvent.lower(event),
        _UniffiConverterTypeRelaySendOptions.lower(opts)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_rust_buffer,
            # lift function
            _UniffiConverterTypeSendEventOutput.lift,
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )



    async def send_event_to(self, urls: "typing.List[str]",event: "Event",opts: "RelaySendOptions") -> "SendEventOutput":
        """
        Send event to specific relays
        """

        _UniffiConverterSequenceString.check_lower(urls)
        
        _UniffiConverterTypeEvent.check_lower(event)
        
        _UniffiConverterTypeRelaySendOptions.check_lower(opts)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_send_event_to(
                self._uniffi_clone_pointer(), 
        _UniffiConverterSequenceString.lower(urls),
        _UniffiConverterTypeEvent.lower(event),
        _UniffiConverterTypeRelaySendOptions.lower(opts)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_rust_buffer,
            # lift function
            _UniffiConverterTypeSendEventOutput.lift,
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )



    async def send_msg_to(self, urls: "typing.List[str]",msg: "ClientMessage",opts: "RelaySendOptions") -> "Output":
        """
        Send client message to specific relays

        Note: **the relays must already be added!**
        """

        _UniffiConverterSequenceString.check_lower(urls)
        
        _UniffiConverterTypeClientMessage.check_lower(msg)
        
        _UniffiConverterTypeRelaySendOptions.check_lower(opts)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_send_msg_to(
                self._uniffi_clone_pointer(), 
        _UniffiConverterSequenceString.lower(urls),
        _UniffiConverterTypeClientMessage.lower(msg),
        _UniffiConverterTypeRelaySendOptions.lower(opts)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_rust_buffer,
            # lift function
            _UniffiConverterTypeOutput.lift,
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )



    async def shutdown(self, ) -> None:

        """
        Completely shutdown pool
        """

        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_shutdown(
                self._uniffi_clone_pointer(), 
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_void,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_void,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_void,
            # lift function
            lambda val: None,
            
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )



    async def subscribe(self, filters: "typing.List[Filter]",opts: "SubscribeOptions") -> "SubscribeOutput":
        """
        Subscribe to filters to relays with `READ` flag.

        ### Auto-closing subscription

        It's possible to automatically close a subscription by configuring the `SubscribeOptions`.

        Note: auto-closing subscriptions aren't saved in subscriptions map!
        """

        _UniffiConverterSequenceTypeFilter.check_lower(filters)
        
        _UniffiConverterTypeSubscribeOptions.check_lower(opts)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_subscribe(
                self._uniffi_clone_pointer(), 
        _UniffiConverterSequenceTypeFilter.lower(filters),
        _UniffiConverterTypeSubscribeOptions.lower(opts)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_rust_buffer,
            # lift function
            _UniffiConverterTypeSubscribeOutput.lift,
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )



    async def subscribe_to(self, urls: "typing.List[str]",filters: "typing.List[Filter]",opts: "SubscribeOptions") -> "SubscribeOutput":
        """
        Subscribe to filters to specific relays

        ### Auto-closing subscription

        It's possible to automatically close a subscription by configuring the `SubscribeOptions`.
        """

        _UniffiConverterSequenceString.check_lower(urls)
        
        _UniffiConverterSequenceTypeFilter.check_lower(filters)
        
        _UniffiConverterTypeSubscribeOptions.check_lower(opts)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_subscribe_to(
                self._uniffi_clone_pointer(), 
        _UniffiConverterSequenceString.lower(urls),
        _UniffiConverterSequenceTypeFilter.lower(filters),
        _UniffiConverterTypeSubscribeOptions.lower(opts)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_rust_buffer,
            # lift function
            _UniffiConverterTypeSubscribeOutput.lift,
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )



    async def subscribe_with_id(self, id: "str",filters: "typing.List[Filter]",opts: "SubscribeOptions") -> "Output":
        """
        Subscribe with custom subscription ID to relays with `READ` flag.

        ### Auto-closing subscription

        It's possible to automatically close a subscription by configuring the `SubscribeOptions`.

        Note: auto-closing subscriptions aren't saved in subscriptions map!
        """

        _UniffiConverterString.check_lower(id)
        
        _UniffiConverterSequenceTypeFilter.check_lower(filters)
        
        _UniffiConverterTypeSubscribeOptions.check_lower(opts)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_subscribe_with_id(
                self._uniffi_clone_pointer(), 
        _UniffiConverterString.lower(id),
        _UniffiConverterSequenceTypeFilter.lower(filters),
        _UniffiConverterTypeSubscribeOptions.lower(opts)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_rust_buffer,
            # lift function
            _UniffiConverterTypeOutput.lift,
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )



    async def subscribe_with_id_to(self, urls: "typing.List[str]",id: "str",filters: "typing.List[Filter]",opts: "SubscribeOptions") -> "Output":
        """
        Subscribe to filters with custom subscription ID to specific relays

        ### Auto-closing subscription

        It's possible to automatically close a subscription by configuring the `SubscribeOptions`.
        """

        _UniffiConverterSequenceString.check_lower(urls)
        
        _UniffiConverterString.check_lower(id)
        
        _UniffiConverterSequenceTypeFilter.check_lower(filters)
        
        _UniffiConverterTypeSubscribeOptions.check_lower(opts)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_subscribe_with_id_to(
                self._uniffi_clone_pointer(), 
        _UniffiConverterSequenceString.lower(urls),
        _UniffiConverterString.lower(id),
        _UniffiConverterSequenceTypeFilter.lower(filters),
        _UniffiConverterTypeSubscribeOptions.lower(opts)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_rust_buffer,
            # lift function
            _UniffiConverterTypeOutput.lift,
            
    # Error FFI converter
_UniffiConverterTypeNostrSdkError,

        )



    async def subscription(self, id: "str") -> "typing.Optional[typing.List[Filter]]":
        """
        Get filters by subscription ID
        """

        _UniffiConverterString.check_lower(id)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_subscription(
                self._uniffi_clone_pointer(), 
        _UniffiConverterString.lower(id)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_rust_buffer,
            # lift function
            _UniffiConverterOptionalSequenceTypeFilter.lift,
            
    # Error FFI converter

    None,

        )



    async def subscriptions(self, ) -> "dict[str, typing.List[Filter]]":
        """
        Get subscriptions
        """

        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_subscriptions(
                self._uniffi_clone_pointer(), 
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_rust_buffer,
            # lift function
            _UniffiConverterMapStringSequenceTypeFilter.lift,
            
    # Error FFI converter

    None,

        )



    async def unsubscribe(self, id: "str",opts: "RelaySendOptions") -> None:

        """
        Unsubscribe
        """

        _UniffiConverterString.check_lower(id)
        
        _UniffiConverterTypeRelaySendOptions.check_lower(opts)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_unsubscribe(
                self._uniffi_clone_pointer(), 
        _UniffiConverterString.lower(id),
        _UniffiConverterTypeRelaySendOptions.lower(opts)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_void,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_void,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_void,
            # lift function
            lambda val: None,
            
            
    # Error FFI converter

    None,

        )



    async def unsubscribe_all(self, opts: "RelaySendOptions") -> None:

        """
        Unsubscribe from all subscriptions
        """

        _UniffiConverterTypeRelaySendOptions.check_lower(opts)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_unsubscribe_all(
                self._uniffi_clone_pointer(), 
        _UniffiConverterTypeRelaySendOptions.lower(opts)
            ),
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_void,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_void,
            _UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_void,
            # lift function
            lambda val: None,
            
            
    # Error FFI converter

    None,

        )





class _UniffiConverterTypeRelayPool:

    @staticmethod
    def lift(value: int):
        return RelayPool._make_instance_(value)

    @staticmethod
    def check_lower(value: RelayPool):
        if not isinstance(value, RelayPool):
            raise TypeError("Expected RelayPool instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: RelayPoolProtocol):
        if not isinstance(value, RelayPool):
            raise TypeError("Expected RelayPool instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: RelayPoolProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class RelaySendOptionsProtocol(typing.Protocol):
    def skip_disconnected(self, value: "bool"):
        """
        Skip wait for disconnected relay (default: true)
        """

        raise NotImplementedError
    def skip_send_confirmation(self, value: "bool"):
        """
        Skip wait for confirmation that message is sent (default: false)
        """

        raise NotImplementedError
    def timeout(self, timeout: "typing.Optional[Duration]"):
        """
        Timeout for sending event (default: 20 secs)

        If `None`, the default timeout will be used
        """

        raise NotImplementedError


class RelaySendOptions:
    _pointer: ctypes.c_void_p
    def __init__(self, ):
        """
        New default `RelaySendOptions`
        """

        self._pointer = _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_relaysendoptions_new,)

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_relaysendoptions, pointer)

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_relaysendoptions, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def skip_disconnected(self, value: "bool") -> "RelaySendOptions":
        """
        Skip wait for disconnected relay (default: true)
        """

        _UniffiConverterBool.check_lower(value)
        
        return _UniffiConverterTypeRelaySendOptions.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaysendoptions_skip_disconnected,self._uniffi_clone_pointer(),
        _UniffiConverterBool.lower(value))
        )





    def skip_send_confirmation(self, value: "bool") -> "RelaySendOptions":
        """
        Skip wait for confirmation that message is sent (default: false)
        """

        _UniffiConverterBool.check_lower(value)
        
        return _UniffiConverterTypeRelaySendOptions.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaysendoptions_skip_send_confirmation,self._uniffi_clone_pointer(),
        _UniffiConverterBool.lower(value))
        )





    def timeout(self, timeout: "typing.Optional[Duration]") -> "RelaySendOptions":
        """
        Timeout for sending event (default: 20 secs)

        If `None`, the default timeout will be used
        """

        _UniffiConverterOptionalDuration.check_lower(timeout)
        
        return _UniffiConverterTypeRelaySendOptions.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaysendoptions_timeout,self._uniffi_clone_pointer(),
        _UniffiConverterOptionalDuration.lower(timeout))
        )






class _UniffiConverterTypeRelaySendOptions:

    @staticmethod
    def lift(value: int):
        return RelaySendOptions._make_instance_(value)

    @staticmethod
    def check_lower(value: RelaySendOptions):
        if not isinstance(value, RelaySendOptions):
            raise TypeError("Expected RelaySendOptions instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: RelaySendOptionsProtocol):
        if not isinstance(value, RelaySendOptions):
            raise TypeError("Expected RelaySendOptions instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: RelaySendOptionsProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class SubscribeAutoCloseOptionsProtocol(typing.Protocol):
    """
    Auto-closing subscribe options
    """

    def filter(self, filter: "FilterOptions"):
        """
        Close subscription when `FilterOptions` is satisfied
        """

        raise NotImplementedError
    def timeout(self, timeout: "typing.Optional[Duration]"):
        """
        Automatically close subscription after `Duration`
        """

        raise NotImplementedError


class SubscribeAutoCloseOptions:
    """
    Auto-closing subscribe options
    """

    _pointer: ctypes.c_void_p
    def __init__(self, ):
        self._pointer = _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_subscribeautocloseoptions_new,)

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_subscribeautocloseoptions, pointer)

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_subscribeautocloseoptions, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def filter(self, filter: "FilterOptions") -> "SubscribeAutoCloseOptions":
        """
        Close subscription when `FilterOptions` is satisfied
        """

        _UniffiConverterTypeFilterOptions.check_lower(filter)
        
        return _UniffiConverterTypeSubscribeAutoCloseOptions.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_subscribeautocloseoptions_filter,self._uniffi_clone_pointer(),
        _UniffiConverterTypeFilterOptions.lower(filter))
        )





    def timeout(self, timeout: "typing.Optional[Duration]") -> "SubscribeAutoCloseOptions":
        """
        Automatically close subscription after `Duration`
        """

        _UniffiConverterOptionalDuration.check_lower(timeout)
        
        return _UniffiConverterTypeSubscribeAutoCloseOptions.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_subscribeautocloseoptions_timeout,self._uniffi_clone_pointer(),
        _UniffiConverterOptionalDuration.lower(timeout))
        )






class _UniffiConverterTypeSubscribeAutoCloseOptions:

    @staticmethod
    def lift(value: int):
        return SubscribeAutoCloseOptions._make_instance_(value)

    @staticmethod
    def check_lower(value: SubscribeAutoCloseOptions):
        if not isinstance(value, SubscribeAutoCloseOptions):
            raise TypeError("Expected SubscribeAutoCloseOptions instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: SubscribeAutoCloseOptionsProtocol):
        if not isinstance(value, SubscribeAutoCloseOptions):
            raise TypeError("Expected SubscribeAutoCloseOptions instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: SubscribeAutoCloseOptionsProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class SubscribeOptionsProtocol(typing.Protocol):
    """
    Subscribe options
    """

    def close_on(self, opts: "typing.Optional[SubscribeAutoCloseOptions]"):
        """
        Set auto-close conditions
        """

        raise NotImplementedError
    def send_opts(self, opts: "RelaySendOptions"):
        """
        Set [RelaySendOptions]
        """

        raise NotImplementedError


class SubscribeOptions:
    """
    Subscribe options
    """

    _pointer: ctypes.c_void_p
    def __init__(self, ):
        self._pointer = _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_subscribeoptions_new,)

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_subscribeoptions, pointer)

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_subscribeoptions, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def close_on(self, opts: "typing.Optional[SubscribeAutoCloseOptions]") -> "SubscribeOptions":
        """
        Set auto-close conditions
        """

        _UniffiConverterOptionalTypeSubscribeAutoCloseOptions.check_lower(opts)
        
        return _UniffiConverterTypeSubscribeOptions.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_subscribeoptions_close_on,self._uniffi_clone_pointer(),
        _UniffiConverterOptionalTypeSubscribeAutoCloseOptions.lower(opts))
        )





    def send_opts(self, opts: "RelaySendOptions") -> "SubscribeOptions":
        """
        Set [RelaySendOptions]
        """

        _UniffiConverterTypeRelaySendOptions.check_lower(opts)
        
        return _UniffiConverterTypeSubscribeOptions.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_subscribeoptions_send_opts,self._uniffi_clone_pointer(),
        _UniffiConverterTypeRelaySendOptions.lower(opts))
        )






class _UniffiConverterTypeSubscribeOptions:

    @staticmethod
    def lift(value: int):
        return SubscribeOptions._make_instance_(value)

    @staticmethod
    def check_lower(value: SubscribeOptions):
        if not isinstance(value, SubscribeOptions):
            raise TypeError("Expected SubscribeOptions instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: SubscribeOptionsProtocol):
        if not isinstance(value, SubscribeOptions):
            raise TypeError("Expected SubscribeOptions instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: SubscribeOptionsProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class ZapDetailsProtocol(typing.Protocol):
    """
    Zap Details
    """

    def message(self, message: "str"):
        """
        Add message
        """

        raise NotImplementedError


class ZapDetails:
    """
    Zap Details
    """

    _pointer: ctypes.c_void_p
    def __init__(self, zap_type: "ZapType"):
        """
        Create new Zap Details

        **Note: `private` zaps are not currently supported here!**
        """

        _UniffiConverterTypeZapType.check_lower(zap_type)
        
        self._pointer = _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_zapdetails_new,
        _UniffiConverterTypeZapType.lower(zap_type))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_zapdetails, pointer)

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_zapdetails, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def message(self, message: "str") -> "ZapDetails":
        """
        Add message
        """

        _UniffiConverterString.check_lower(message)
        
        return _UniffiConverterTypeZapDetails.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_zapdetails_message,self._uniffi_clone_pointer(),
        _UniffiConverterString.lower(message))
        )





    def __repr__(self, ) -> "str":
        return _UniffiConverterString.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_zapdetails_uniffi_trait_debug,self._uniffi_clone_pointer(),)
        )



    def __eq__(self, other: object) -> bool:
        if not isinstance(other, ZapDetails):
            return NotImplemented

        return _UniffiConverterBool.lift(_uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_zapdetails_uniffi_trait_eq_eq,self._uniffi_clone_pointer(),
        _UniffiConverterTypeZapDetails.lower(other)))

    def __ne__(self, other: object) -> bool:
        if not isinstance(other, ZapDetails):
            return NotImplemented

        return _UniffiConverterBool.lift(_uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_zapdetails_uniffi_trait_eq_ne,self._uniffi_clone_pointer(),
        _UniffiConverterTypeZapDetails.lower(other)))


    def __hash__(self, ) -> "int":
        return _UniffiConverterUInt64.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_zapdetails_uniffi_trait_hash,self._uniffi_clone_pointer(),)
        )






class _UniffiConverterTypeZapDetails:

    @staticmethod
    def lift(value: int):
        return ZapDetails._make_instance_(value)

    @staticmethod
    def check_lower(value: ZapDetails):
        if not isinstance(value, ZapDetails):
            raise TypeError("Expected ZapDetails instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: ZapDetailsProtocol):
        if not isinstance(value, ZapDetails):
            raise TypeError("Expected ZapDetails instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: ZapDetailsProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class ZapEntityProtocol(typing.Protocol):
    """
    Zap entity
    """

    pass


class ZapEntity:
    """
    Zap entity
    """

    _pointer: ctypes.c_void_p
    
    def __init__(self, *args, **kwargs):
        raise ValueError("This class has no default constructor")

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_zapentity, pointer)

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_zapentity, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def event(cls, event_id: "EventId"):
        _UniffiConverterTypeEventId.check_lower(event_id)
        
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_zapentity_event,
        _UniffiConverterTypeEventId.lower(event_id))
        return cls._make_instance_(pointer)


    @classmethod
    def public_key(cls, public_key: "PublicKey"):
        _UniffiConverterTypePublicKey.check_lower(public_key)
        
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_zapentity_public_key,
        _UniffiConverterTypePublicKey.lower(public_key))
        return cls._make_instance_(pointer)



    def __repr__(self, ) -> "str":
        return _UniffiConverterString.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_zapentity_uniffi_trait_debug,self._uniffi_clone_pointer(),)
        )



    def __eq__(self, other: object) -> bool:
        if not isinstance(other, ZapEntity):
            return NotImplemented

        return _UniffiConverterBool.lift(_uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_zapentity_uniffi_trait_eq_eq,self._uniffi_clone_pointer(),
        _UniffiConverterTypeZapEntity.lower(other)))

    def __ne__(self, other: object) -> bool:
        if not isinstance(other, ZapEntity):
            return NotImplemented

        return _UniffiConverterBool.lift(_uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_zapentity_uniffi_trait_eq_ne,self._uniffi_clone_pointer(),
        _UniffiConverterTypeZapEntity.lower(other)))


    def __hash__(self, ) -> "int":
        return _UniffiConverterUInt64.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_zapentity_uniffi_trait_hash,self._uniffi_clone_pointer(),)
        )






class _UniffiConverterTypeZapEntity:

    @staticmethod
    def lift(value: int):
        return ZapEntity._make_instance_(value)

    @staticmethod
    def check_lower(value: ZapEntity):
        if not isinstance(value, ZapEntity):
            raise TypeError("Expected ZapEntity instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: ZapEntityProtocol):
        if not isinstance(value, ZapEntity):
            raise TypeError("Expected ZapEntity instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: ZapEntityProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))


class NegentropyItem:
    id: "EventId"
    timestamp: "Timestamp"
    def __init__(self, *, id: "EventId", timestamp: "Timestamp"):
        self.id = id
        self.timestamp = timestamp

    def __str__(self):
        return "NegentropyItem(id={}, timestamp={})".format(self.id, self.timestamp)

    def __eq__(self, other):
        if self.id != other.id:
            return False
        if self.timestamp != other.timestamp:
            return False
        return True

class _UniffiConverterTypeNegentropyItem(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return NegentropyItem(
            id=_UniffiConverterTypeEventId.read(buf),
            timestamp=_UniffiConverterTypeTimestamp.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterTypeEventId.check_lower(value.id)
        _UniffiConverterTypeTimestamp.check_lower(value.timestamp)

    @staticmethod
    def write(value, buf):
        _UniffiConverterTypeEventId.write(value.id, buf)
        _UniffiConverterTypeTimestamp.write(value.timestamp, buf)


class Output:
    """
    Output

    Send or negentropy reconciliation output
    """

    success: "typing.List[str]"
    """
    Set of relays that success
    """

    failed: "dict[str, typing.Optional[str]]"
    """
    Map of relays that failed, with related errors.
    """

    def __init__(self, *, success: "typing.List[str]", failed: "dict[str, typing.Optional[str]]"):
        self.success = success
        self.failed = failed

    def __str__(self):
        return "Output(success={}, failed={})".format(self.success, self.failed)

    def __eq__(self, other):
        if self.success != other.success:
            return False
        if self.failed != other.failed:
            return False
        return True

class _UniffiConverterTypeOutput(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return Output(
            success=_UniffiConverterSequenceString.read(buf),
            failed=_UniffiConverterMapStringOptionalString.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterSequenceString.check_lower(value.success)
        _UniffiConverterMapStringOptionalString.check_lower(value.failed)

    @staticmethod
    def write(value, buf):
        _UniffiConverterSequenceString.write(value.success, buf)
        _UniffiConverterMapStringOptionalString.write(value.failed, buf)


class Reconciliation:
    """
    Reconciliation output
    """

    local: "typing.List[EventId]"
    """
    The IDs that were stored locally
    """

    remote: "typing.List[EventId]"
    """
    The IDs that were missing locally (stored on relay)
    """

    sent: "typing.List[EventId]"
    """
    Events that are **successfully** sent to relays during reconciliation
    """

    received: "typing.List[EventId]"
    """
    Event that are **successfully** received from relay
    """

    send_failures: "dict[str, typing.List[ReconciliationSendFailureItem]]"
    def __init__(self, *, local: "typing.List[EventId]", remote: "typing.List[EventId]", sent: "typing.List[EventId]", received: "typing.List[EventId]", send_failures: "dict[str, typing.List[ReconciliationSendFailureItem]]"):
        self.local = local
        self.remote = remote
        self.sent = sent
        self.received = received
        self.send_failures = send_failures

    def __str__(self):
        return "Reconciliation(local={}, remote={}, sent={}, received={}, send_failures={})".format(self.local, self.remote, self.sent, self.received, self.send_failures)

    def __eq__(self, other):
        if self.local != other.local:
            return False
        if self.remote != other.remote:
            return False
        if self.sent != other.sent:
            return False
        if self.received != other.received:
            return False
        if self.send_failures != other.send_failures:
            return False
        return True

class _UniffiConverterTypeReconciliation(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return Reconciliation(
            local=_UniffiConverterSequenceTypeEventId.read(buf),
            remote=_UniffiConverterSequenceTypeEventId.read(buf),
            sent=_UniffiConverterSequenceTypeEventId.read(buf),
            received=_UniffiConverterSequenceTypeEventId.read(buf),
            send_failures=_UniffiConverterMapStringSequenceTypeReconciliationSendFailureItem.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterSequenceTypeEventId.check_lower(value.local)
        _UniffiConverterSequenceTypeEventId.check_lower(value.remote)
        _UniffiConverterSequenceTypeEventId.check_lower(value.sent)
        _UniffiConverterSequenceTypeEventId.check_lower(value.received)
        _UniffiConverterMapStringSequenceTypeReconciliationSendFailureItem.check_lower(value.send_failures)

    @staticmethod
    def write(value, buf):
        _UniffiConverterSequenceTypeEventId.write(value.local, buf)
        _UniffiConverterSequenceTypeEventId.write(value.remote, buf)
        _UniffiConverterSequenceTypeEventId.write(value.sent, buf)
        _UniffiConverterSequenceTypeEventId.write(value.received, buf)
        _UniffiConverterMapStringSequenceTypeReconciliationSendFailureItem.write(value.send_failures, buf)


class ReconciliationOutput:
    """
    Reconciliation output
    """

    report: "Reconciliation"
    output: "Output"
    def __init__(self, *, report: "Reconciliation", output: "Output"):
        self.report = report
        self.output = output

    def __str__(self):
        return "ReconciliationOutput(report={}, output={})".format(self.report, self.output)

    def __eq__(self, other):
        if self.report != other.report:
            return False
        if self.output != other.output:
            return False
        return True

class _UniffiConverterTypeReconciliationOutput(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return ReconciliationOutput(
            report=_UniffiConverterTypeReconciliation.read(buf),
            output=_UniffiConverterTypeOutput.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterTypeReconciliation.check_lower(value.report)
        _UniffiConverterTypeOutput.check_lower(value.output)

    @staticmethod
    def write(value, buf):
        _UniffiConverterTypeReconciliation.write(value.report, buf)
        _UniffiConverterTypeOutput.write(value.output, buf)


class ReconciliationSendFailureItem:
    id: "EventId"
    error: "str"
    def __init__(self, *, id: "EventId", error: "str"):
        self.id = id
        self.error = error

    def __str__(self):
        return "ReconciliationSendFailureItem(id={}, error={})".format(self.id, self.error)

    def __eq__(self, other):
        if self.id != other.id:
            return False
        if self.error != other.error:
            return False
        return True

class _UniffiConverterTypeReconciliationSendFailureItem(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return ReconciliationSendFailureItem(
            id=_UniffiConverterTypeEventId.read(buf),
            error=_UniffiConverterString.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterTypeEventId.check_lower(value.id)
        _UniffiConverterString.check_lower(value.error)

    @staticmethod
    def write(value, buf):
        _UniffiConverterTypeEventId.write(value.id, buf)
        _UniffiConverterString.write(value.error, buf)


class SendEventOutput:
    """
    Send event output
    """

    id: "EventId"
    """
    Event ID
    """

    output: "Output"
    """
    Output
    """

    def __init__(self, *, id: "EventId", output: "Output"):
        self.id = id
        self.output = output

    def __str__(self):
        return "SendEventOutput(id={}, output={})".format(self.id, self.output)

    def __eq__(self, other):
        if self.id != other.id:
            return False
        if self.output != other.output:
            return False
        return True

class _UniffiConverterTypeSendEventOutput(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return SendEventOutput(
            id=_UniffiConverterTypeEventId.read(buf),
            output=_UniffiConverterTypeOutput.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterTypeEventId.check_lower(value.id)
        _UniffiConverterTypeOutput.check_lower(value.output)

    @staticmethod
    def write(value, buf):
        _UniffiConverterTypeEventId.write(value.id, buf)
        _UniffiConverterTypeOutput.write(value.output, buf)


class SubscribeOutput:
    """
    Subscribe output
    """

    id: "str"
    """
    Subscription ID
    """

    output: "Output"
    """
    Output
    """

    def __init__(self, *, id: "str", output: "Output"):
        self.id = id
        self.output = output

    def __str__(self):
        return "SubscribeOutput(id={}, output={})".format(self.id, self.output)

    def __eq__(self, other):
        if self.id != other.id:
            return False
        if self.output != other.output:
            return False
        return True

class _UniffiConverterTypeSubscribeOutput(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return SubscribeOutput(
            id=_UniffiConverterString.read(buf),
            output=_UniffiConverterTypeOutput.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterString.check_lower(value.id)
        _UniffiConverterTypeOutput.check_lower(value.output)

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.id, buf)
        _UniffiConverterTypeOutput.write(value.output, buf)





class ConnectionMode:
    def __init__(self):
        raise RuntimeError("ConnectionMode cannot be instantiated directly")

    # Each enum variant is a nested class of the enum itself.
    class DIRECT:

        def __init__(self,):
            pass

        def __str__(self):
            return "ConnectionMode.DIRECT()".format()

        def __eq__(self, other):
            if not other.is_direct():
                return False
            return True
    
    class PROXY:
        addr: "str"

        def __init__(self,addr: "str"):
            self.addr = addr

        def __str__(self):
            return "ConnectionMode.PROXY(addr={})".format(self.addr)

        def __eq__(self, other):
            if not other.is_proxy():
                return False
            if self.addr != other.addr:
                return False
            return True
    
    class TOR:
        custom_path: "typing.Optional[str]"

        def __init__(self,custom_path: "typing.Optional[str]"):
            self.custom_path = custom_path

        def __str__(self):
            return "ConnectionMode.TOR(custom_path={})".format(self.custom_path)

        def __eq__(self, other):
            if not other.is_tor():
                return False
            if self.custom_path != other.custom_path:
                return False
            return True
    
    

    # For each variant, we have an `is_NAME` method for easily checking
    # whether an instance is that variant.
    def is_direct(self) -> bool:
        return isinstance(self, ConnectionMode.DIRECT)
    def is_proxy(self) -> bool:
        return isinstance(self, ConnectionMode.PROXY)
    def is_tor(self) -> bool:
        return isinstance(self, ConnectionMode.TOR)
    

# Now, a little trick - we make each nested variant class be a subclass of the main
# enum class, so that method calls and instance checks etc will work intuitively.
# We might be able to do this a little more neatly with a metaclass, but this'll do.
ConnectionMode.DIRECT = type("ConnectionMode.DIRECT", (ConnectionMode.DIRECT, ConnectionMode,), {})  # type: ignore
ConnectionMode.PROXY = type("ConnectionMode.PROXY", (ConnectionMode.PROXY, ConnectionMode,), {})  # type: ignore
ConnectionMode.TOR = type("ConnectionMode.TOR", (ConnectionMode.TOR, ConnectionMode,), {})  # type: ignore




class _UniffiConverterTypeConnectionMode(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return ConnectionMode.DIRECT(
            )
        if variant == 2:
            return ConnectionMode.PROXY(
                _UniffiConverterString.read(buf),
            )
        if variant == 3:
            return ConnectionMode.TOR(
                _UniffiConverterOptionalString.read(buf),
            )
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if value.is_direct():
            return
        if value.is_proxy():
            _UniffiConverterString.check_lower(value.addr)
            return
        if value.is_tor():
            _UniffiConverterOptionalString.check_lower(value.custom_path)
            return
        raise ValueError(value)

    @staticmethod
    def write(value, buf):
        if value.is_direct():
            buf.write_i32(1)
        if value.is_proxy():
            buf.write_i32(2)
            _UniffiConverterString.write(value.addr, buf)
        if value.is_tor():
            buf.write_i32(3)
            _UniffiConverterOptionalString.write(value.custom_path, buf)







class ConnectionTarget(enum.Enum):
    """
    Connection target
    """

    ALL = 0
    """
    Use proxy for all relays
    """

    
    ONION = 1
    """
    Use proxy only for `.onion` relays
    """

    


class _UniffiConverterTypeConnectionTarget(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return ConnectionTarget.ALL
        if variant == 2:
            return ConnectionTarget.ONION
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if value == ConnectionTarget.ALL:
            return
        if value == ConnectionTarget.ONION:
            return
        raise ValueError(value)

    @staticmethod
    def write(value, buf):
        if value == ConnectionTarget.ALL:
            buf.write_i32(1)
        if value == ConnectionTarget.ONION:
            buf.write_i32(2)







class DatabaseEventStatus(enum.Enum):
    SAVED = 0
    
    DELETED = 1
    
    NOT_EXISTENT = 2
    


class _UniffiConverterTypeDatabaseEventStatus(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return DatabaseEventStatus.SAVED
        if variant == 2:
            return DatabaseEventStatus.DELETED
        if variant == 3:
            return DatabaseEventStatus.NOT_EXISTENT
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if value == DatabaseEventStatus.SAVED:
            return
        if value == DatabaseEventStatus.DELETED:
            return
        if value == DatabaseEventStatus.NOT_EXISTENT:
            return
        raise ValueError(value)

    @staticmethod
    def write(value, buf):
        if value == DatabaseEventStatus.SAVED:
            buf.write_i32(1)
        if value == DatabaseEventStatus.DELETED:
            buf.write_i32(2)
        if value == DatabaseEventStatus.NOT_EXISTENT:
            buf.write_i32(3)







class FilterOptions:
    """
    Filter options
    """

    def __init__(self):
        raise RuntimeError("FilterOptions cannot be instantiated directly")

    # Each enum variant is a nested class of the enum itself.
    class EXIT_ON_EOSE:
        """
        Exit on EOSE
        """


        def __init__(self,):
            pass

        def __str__(self):
            return "FilterOptions.EXIT_ON_EOSE()".format()

        def __eq__(self, other):
            if not other.is_exit_on_eose():
                return False
            return True
    
    class WAIT_FOR_EVENTS_AFTER_EOSE:
        """
        After EOSE is received, keep listening for N more events that match the filter, then return
        """

        num: "int"

        def __init__(self,num: "int"):
            self.num = num

        def __str__(self):
            return "FilterOptions.WAIT_FOR_EVENTS_AFTER_EOSE(num={})".format(self.num)

        def __eq__(self, other):
            if not other.is_wait_for_events_after_eose():
                return False
            if self.num != other.num:
                return False
            return True
    
    class WAIT_DURATION_AFTER_EOSE:
        """
        After EOSE is received, keep listening for matching events for `Duration` more time, then return
        """

        duration: "Duration"

        def __init__(self,duration: "Duration"):
            self.duration = duration

        def __str__(self):
            return "FilterOptions.WAIT_DURATION_AFTER_EOSE(duration={})".format(self.duration)

        def __eq__(self, other):
            if not other.is_wait_duration_after_eose():
                return False
            if self.duration != other.duration:
                return False
            return True
    
    

    # For each variant, we have an `is_NAME` method for easily checking
    # whether an instance is that variant.
    def is_exit_on_eose(self) -> bool:
        return isinstance(self, FilterOptions.EXIT_ON_EOSE)
    def is_wait_for_events_after_eose(self) -> bool:
        return isinstance(self, FilterOptions.WAIT_FOR_EVENTS_AFTER_EOSE)
    def is_wait_duration_after_eose(self) -> bool:
        return isinstance(self, FilterOptions.WAIT_DURATION_AFTER_EOSE)
    

# Now, a little trick - we make each nested variant class be a subclass of the main
# enum class, so that method calls and instance checks etc will work intuitively.
# We might be able to do this a little more neatly with a metaclass, but this'll do.
FilterOptions.EXIT_ON_EOSE = type("FilterOptions.EXIT_ON_EOSE", (FilterOptions.EXIT_ON_EOSE, FilterOptions,), {})  # type: ignore
FilterOptions.WAIT_FOR_EVENTS_AFTER_EOSE = type("FilterOptions.WAIT_FOR_EVENTS_AFTER_EOSE", (FilterOptions.WAIT_FOR_EVENTS_AFTER_EOSE, FilterOptions,), {})  # type: ignore
FilterOptions.WAIT_DURATION_AFTER_EOSE = type("FilterOptions.WAIT_DURATION_AFTER_EOSE", (FilterOptions.WAIT_DURATION_AFTER_EOSE, FilterOptions,), {})  # type: ignore




class _UniffiConverterTypeFilterOptions(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return FilterOptions.EXIT_ON_EOSE(
            )
        if variant == 2:
            return FilterOptions.WAIT_FOR_EVENTS_AFTER_EOSE(
                _UniffiConverterUInt16.read(buf),
            )
        if variant == 3:
            return FilterOptions.WAIT_DURATION_AFTER_EOSE(
                _UniffiConverterDuration.read(buf),
            )
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if value.is_exit_on_eose():
            return
        if value.is_wait_for_events_after_eose():
            _UniffiConverterUInt16.check_lower(value.num)
            return
        if value.is_wait_duration_after_eose():
            _UniffiConverterDuration.check_lower(value.duration)
            return
        raise ValueError(value)

    @staticmethod
    def write(value, buf):
        if value.is_exit_on_eose():
            buf.write_i32(1)
        if value.is_wait_for_events_after_eose():
            buf.write_i32(2)
            _UniffiConverterUInt16.write(value.num, buf)
        if value.is_wait_duration_after_eose():
            buf.write_i32(3)
            _UniffiConverterDuration.write(value.duration, buf)







class LogLevel(enum.Enum):
    ERROR = 0
    
    WARN = 1
    
    INFO = 2
    
    DEBUG = 3
    
    TRACE = 4
    


class _UniffiConverterTypeLogLevel(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return LogLevel.ERROR
        if variant == 2:
            return LogLevel.WARN
        if variant == 3:
            return LogLevel.INFO
        if variant == 4:
            return LogLevel.DEBUG
        if variant == 5:
            return LogLevel.TRACE
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if value == LogLevel.ERROR:
            return
        if value == LogLevel.WARN:
            return
        if value == LogLevel.INFO:
            return
        if value == LogLevel.DEBUG:
            return
        if value == LogLevel.TRACE:
            return
        raise ValueError(value)

    @staticmethod
    def write(value, buf):
        if value == LogLevel.ERROR:
            buf.write_i32(1)
        if value == LogLevel.WARN:
            buf.write_i32(2)
        if value == LogLevel.INFO:
            buf.write_i32(3)
        if value == LogLevel.DEBUG:
            buf.write_i32(4)
        if value == LogLevel.TRACE:
            buf.write_i32(5)







class NegentropyDirection(enum.Enum):
    UP = 0
    
    DOWN = 1
    
    BOTH = 2
    


class _UniffiConverterTypeNegentropyDirection(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return NegentropyDirection.UP
        if variant == 2:
            return NegentropyDirection.DOWN
        if variant == 3:
            return NegentropyDirection.BOTH
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if value == NegentropyDirection.UP:
            return
        if value == NegentropyDirection.DOWN:
            return
        if value == NegentropyDirection.BOTH:
            return
        raise ValueError(value)

    @staticmethod
    def write(value, buf):
        if value == NegentropyDirection.UP:
            buf.write_i32(1)
        if value == NegentropyDirection.DOWN:
            buf.write_i32(2)
        if value == NegentropyDirection.BOTH:
            buf.write_i32(3)




# NostrSdkError
# We want to define each variant as a nested class that's also a subclass,
# which is tricky in Python.  To accomplish this we're going to create each
# class separately, then manually add the child classes to the base class's
# __dict__.  All of this happens in dummy class to avoid polluting the module
# namespace.
class NostrSdkError(Exception):
    pass

_UniffiTempNostrSdkError = NostrSdkError

class NostrSdkError:  # type: ignore
    class Generic(_UniffiTempNostrSdkError):

        def __repr__(self):
            return "NostrSdkError.Generic({})".format(repr(str(self)))
    _UniffiTempNostrSdkError.Generic = Generic # type: ignore

NostrSdkError = _UniffiTempNostrSdkError # type: ignore
del _UniffiTempNostrSdkError


class _UniffiConverterTypeNostrSdkError(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return NostrSdkError.Generic(
                _UniffiConverterString.read(buf),
            )
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if isinstance(value, NostrSdkError.Generic):
            return

    @staticmethod
    def write(value, buf):
        if isinstance(value, NostrSdkError.Generic):
            buf.write_i32(1)





class RelayFilteringMode(enum.Enum):
    WHITELIST = 0
    """
    Only the matching values will be allowed
    """

    
    BLACKLIST = 1
    """
    All matching values will be discarded
    """

    


class _UniffiConverterTypeRelayFilteringMode(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return RelayFilteringMode.WHITELIST
        if variant == 2:
            return RelayFilteringMode.BLACKLIST
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if value == RelayFilteringMode.WHITELIST:
            return
        if value == RelayFilteringMode.BLACKLIST:
            return
        raise ValueError(value)

    @staticmethod
    def write(value, buf):
        if value == RelayFilteringMode.WHITELIST:
            buf.write_i32(1)
        if value == RelayFilteringMode.BLACKLIST:
            buf.write_i32(2)







class RelayStatus(enum.Enum):
    INITIALIZED = 0
    """
    Relay initialized
    """

    
    PENDING = 1
    """
    Pending
    """

    
    CONNECTING = 2
    """
    Connecting
    """

    
    CONNECTED = 3
    """
    Relay connected
    """

    
    DISCONNECTED = 4
    """
    Relay disconnected, will retry to connect again
    """

    
    TERMINATED = 5
    """
    Relay completely disconnected
    """

    


class _UniffiConverterTypeRelayStatus(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return RelayStatus.INITIALIZED
        if variant == 2:
            return RelayStatus.PENDING
        if variant == 3:
            return RelayStatus.CONNECTING
        if variant == 4:
            return RelayStatus.CONNECTED
        if variant == 5:
            return RelayStatus.DISCONNECTED
        if variant == 6:
            return RelayStatus.TERMINATED
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if value == RelayStatus.INITIALIZED:
            return
        if value == RelayStatus.PENDING:
            return
        if value == RelayStatus.CONNECTING:
            return
        if value == RelayStatus.CONNECTED:
            return
        if value == RelayStatus.DISCONNECTED:
            return
        if value == RelayStatus.TERMINATED:
            return
        raise ValueError(value)

    @staticmethod
    def write(value, buf):
        if value == RelayStatus.INITIALIZED:
            buf.write_i32(1)
        if value == RelayStatus.PENDING:
            buf.write_i32(2)
        if value == RelayStatus.CONNECTING:
            buf.write_i32(3)
        if value == RelayStatus.CONNECTED:
            buf.write_i32(4)
        if value == RelayStatus.DISCONNECTED:
            buf.write_i32(5)
        if value == RelayStatus.TERMINATED:
            buf.write_i32(6)





class _UniffiConverterOptionalUInt16(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterUInt16.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterUInt16.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterUInt16.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalUInt32(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterUInt32.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterUInt32.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterUInt32.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalString(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterString.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterString.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterString.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalDuration(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterDuration.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterDuration.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterDuration.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalTypeNostrSigner(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterTypeNostrSigner.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterTypeNostrSigner.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterTypeNostrSigner.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalTypeRelayOptions(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterTypeRelayOptions.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterTypeRelayOptions.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterTypeRelayOptions.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalTypeSubscribeAutoCloseOptions(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterTypeSubscribeAutoCloseOptions.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterTypeSubscribeAutoCloseOptions.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterTypeSubscribeAutoCloseOptions.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalTypeZapDetails(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterTypeZapDetails.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterTypeZapDetails.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterTypeZapDetails.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalSequenceString(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterSequenceString.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterSequenceString.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterSequenceString.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalSequenceTypeFilter(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterSequenceTypeFilter.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterSequenceTypeFilter.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterSequenceTypeFilter.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalTypeEvent(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterTypeEvent.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterTypeEvent.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterTypeEvent.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalTypeEventId(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterTypeEventId.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterTypeEventId.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterTypeEventId.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalTypeTimestamp(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterTypeTimestamp.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterTypeTimestamp.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterTypeTimestamp.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterSequenceString(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        for item in value:
            _UniffiConverterString.check_lower(item)

    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterString.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterString.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceTypeNegentropyItem(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        for item in value:
            _UniffiConverterTypeNegentropyItem.check_lower(item)

    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypeNegentropyItem.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypeNegentropyItem.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceTypeReconciliationSendFailureItem(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        for item in value:
            _UniffiConverterTypeReconciliationSendFailureItem.check_lower(item)

    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypeReconciliationSendFailureItem.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypeReconciliationSendFailureItem.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceTypeClientMessage(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        for item in value:
            _UniffiConverterTypeClientMessage.check_lower(item)

    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypeClientMessage.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypeClientMessage.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceTypeEvent(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        for item in value:
            _UniffiConverterTypeEvent.check_lower(item)

    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypeEvent.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypeEvent.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceTypeEventId(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        for item in value:
            _UniffiConverterTypeEventId.check_lower(item)

    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypeEventId.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypeEventId.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceTypeFilter(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        for item in value:
            _UniffiConverterTypeFilter.check_lower(item)

    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypeFilter.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypeFilter.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceTypeLookupInvoiceResponseResult(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        for item in value:
            _UniffiConverterTypeLookupInvoiceResponseResult.check_lower(item)

    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypeLookupInvoiceResponseResult.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypeLookupInvoiceResponseResult.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceTypePublicKey(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        for item in value:
            _UniffiConverterTypePublicKey.check_lower(item)

    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypePublicKey.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypePublicKey.read(buf) for i in range(count)
        ]



class _UniffiConverterMapStringTypeRelay(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, items):
        for (key, value) in items.items():
            _UniffiConverterString.check_lower(key)
            _UniffiConverterTypeRelay.check_lower(value)

    @classmethod
    def write(cls, items, buf):
        buf.write_i32(len(items))
        for (key, value) in items.items():
            _UniffiConverterString.write(key, buf)
            _UniffiConverterTypeRelay.write(value, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative map size")

        # It would be nice to use a dict comprehension,
        # but in Python 3.7 and before the evaluation order is not according to spec,
        # so we we're reading the value before the key.
        # This loop makes the order explicit: first reading the key, then the value.
        d = {}
        for i in range(count):
            key = _UniffiConverterString.read(buf)
            val = _UniffiConverterTypeRelay.read(buf)
            d[key] = val
        return d



class _UniffiConverterMapStringOptionalString(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, items):
        for (key, value) in items.items():
            _UniffiConverterString.check_lower(key)
            _UniffiConverterOptionalString.check_lower(value)

    @classmethod
    def write(cls, items, buf):
        buf.write_i32(len(items))
        for (key, value) in items.items():
            _UniffiConverterString.write(key, buf)
            _UniffiConverterOptionalString.write(value, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative map size")

        # It would be nice to use a dict comprehension,
        # but in Python 3.7 and before the evaluation order is not according to spec,
        # so we we're reading the value before the key.
        # This loop makes the order explicit: first reading the key, then the value.
        d = {}
        for i in range(count):
            key = _UniffiConverterString.read(buf)
            val = _UniffiConverterOptionalString.read(buf)
            d[key] = val
        return d



class _UniffiConverterMapStringSequenceTypeReconciliationSendFailureItem(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, items):
        for (key, value) in items.items():
            _UniffiConverterString.check_lower(key)
            _UniffiConverterSequenceTypeReconciliationSendFailureItem.check_lower(value)

    @classmethod
    def write(cls, items, buf):
        buf.write_i32(len(items))
        for (key, value) in items.items():
            _UniffiConverterString.write(key, buf)
            _UniffiConverterSequenceTypeReconciliationSendFailureItem.write(value, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative map size")

        # It would be nice to use a dict comprehension,
        # but in Python 3.7 and before the evaluation order is not according to spec,
        # so we we're reading the value before the key.
        # This loop makes the order explicit: first reading the key, then the value.
        d = {}
        for i in range(count):
            key = _UniffiConverterString.read(buf)
            val = _UniffiConverterSequenceTypeReconciliationSendFailureItem.read(buf)
            d[key] = val
        return d



class _UniffiConverterMapStringSequenceTypeFilter(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, items):
        for (key, value) in items.items():
            _UniffiConverterString.check_lower(key)
            _UniffiConverterSequenceTypeFilter.check_lower(value)

    @classmethod
    def write(cls, items, buf):
        buf.write_i32(len(items))
        for (key, value) in items.items():
            _UniffiConverterString.write(key, buf)
            _UniffiConverterSequenceTypeFilter.write(value, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative map size")

        # It would be nice to use a dict comprehension,
        # but in Python 3.7 and before the evaluation order is not according to spec,
        # so we we're reading the value before the key.
        # This loop makes the order explicit: first reading the key, then the value.
        d = {}
        for i in range(count):
            key = _UniffiConverterString.read(buf)
            val = _UniffiConverterSequenceTypeFilter.read(buf)
            d[key] = val
        return d

# External type ClientMessage is in namespace "nostr_ffi", crate nostr_ffi




# External type Coordinate is in namespace "nostr_ffi", crate nostr_ffi




# External type Event is in namespace "nostr_ffi", crate nostr_ffi




# External type EventBuilder is in namespace "nostr_ffi", crate nostr_ffi




# External type EventId is in namespace "nostr_ffi", crate nostr_ffi




# External type FileMetadata is in namespace "nostr_ffi", crate nostr_ffi




# External type Filter is in namespace "nostr_ffi", crate nostr_ffi




# External type GetInfoResponseResult is in namespace "nostr_ffi", crate nostr_ffi




# External type Keys is in namespace "nostr_ffi", crate nostr_ffi




# External type Kind is in namespace "nostr_ffi", crate nostr_ffi




# External type ListTransactionsRequestParams is in namespace "nostr_ffi", crate nostr_ffi




# External type LookupInvoiceRequestParams is in namespace "nostr_ffi", crate nostr_ffi




# External type LookupInvoiceResponseResult is in namespace "nostr_ffi", crate nostr_ffi




# External type MakeInvoiceRequestParams is in namespace "nostr_ffi", crate nostr_ffi




# External type MakeInvoiceResponseResult is in namespace "nostr_ffi", crate nostr_ffi




# External type Metadata is in namespace "nostr_ffi", crate nostr_ffi




# External type Nip46Request is in namespace "nostr_ffi", crate nostr_ffi




# External type NostrConnectURI is in namespace "nostr_ffi", crate nostr_ffi




# External type NostrWalletConnectURI is in namespace "nostr_ffi", crate nostr_ffi




# External type PayKeysendRequestParams is in namespace "nostr_ffi", crate nostr_ffi




# External type PayKeysendResponseResult is in namespace "nostr_ffi", crate nostr_ffi




# External type PublicKey is in namespace "nostr_ffi", crate nostr_ffi




# External type RelayInformationDocument is in namespace "nostr_ffi", crate nostr_ffi




# External type RelayMessage is in namespace "nostr_ffi", crate nostr_ffi




# External type SecretKey is in namespace "nostr_ffi", crate nostr_ffi




# External type Timestamp is in namespace "nostr_ffi", crate nostr_ffi




# External type UnsignedEvent is in namespace "nostr_ffi", crate nostr_ffi




# External type UnwrappedGift is in namespace "nostr_ffi", crate nostr_ffi




# External type ZapType is in namespace "nostr_ffi", crate nostr_ffi




# Async support# RustFuturePoll values
_UNIFFI_RUST_FUTURE_POLL_READY = 0
_UNIFFI_RUST_FUTURE_POLL_MAYBE_READY = 1

# Stores futures for _uniffi_continuation_callback
_UniffiContinuationHandleMap = _UniffiHandleMap()

_UNIFFI_GLOBAL_EVENT_LOOP = None

"""
Set the event loop to use for async functions

This is needed if some async functions run outside of the eventloop, for example:
    - A non-eventloop thread is spawned, maybe from `EventLoop.run_in_executor` or maybe from the
      Rust code spawning its own thread.
    - The Rust code calls an async callback method from a sync callback function, using something
      like `pollster` to block on the async call.

In this case, we need an event loop to run the Python async function, but there's no eventloop set
for the thread.  Use `uniffi_set_event_loop` to force an eventloop to be used in this case.
"""
def uniffi_set_event_loop(eventloop: asyncio.BaseEventLoop):
    global _UNIFFI_GLOBAL_EVENT_LOOP
    _UNIFFI_GLOBAL_EVENT_LOOP = eventloop

def _uniffi_get_event_loop():
    if _UNIFFI_GLOBAL_EVENT_LOOP is not None:
        return _UNIFFI_GLOBAL_EVENT_LOOP
    else:
        return asyncio.get_running_loop()

# Continuation callback for async functions
# lift the return value or error and resolve the future, causing the async function to resume.
@_UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK
def _uniffi_continuation_callback(future_ptr, poll_code):
    (eventloop, future) = _UniffiContinuationHandleMap.remove(future_ptr)
    eventloop.call_soon_threadsafe(_uniffi_set_future_result, future, poll_code)

def _uniffi_set_future_result(future, poll_code):
    if not future.cancelled():
        future.set_result(poll_code)

async def _uniffi_rust_call_async(rust_future, ffi_poll, ffi_complete, ffi_free, lift_func, error_ffi_converter):
    try:
        eventloop = _uniffi_get_event_loop()

        # Loop and poll until we see a _UNIFFI_RUST_FUTURE_POLL_READY value
        while True:
            future = eventloop.create_future()
            ffi_poll(
                rust_future,
                _uniffi_continuation_callback,
                _UniffiContinuationHandleMap.insert((eventloop, future)),
            )
            poll_code = await future
            if poll_code == _UNIFFI_RUST_FUTURE_POLL_READY:
                break

        return lift_func(
            _uniffi_rust_call_with_error(error_ffi_converter, ffi_complete, rust_future)
        )
    finally:
        ffi_free(rust_future)
def _uniffi_trait_interface_call_async(make_call, handle_success, handle_error):
    async def make_call_and_call_callback():
        try:
            handle_success(await make_call())
        except Exception as e:
            print("UniFFI: Unhandled exception in trait interface call", file=sys.stderr)
            traceback.print_exc(file=sys.stderr)
            handle_error(
                _UniffiRustCallStatus.CALL_UNEXPECTED_ERROR,
                _UniffiConverterString.lower(repr(e)),
            )
    eventloop = _uniffi_get_event_loop()
    task = asyncio.run_coroutine_threadsafe(make_call_and_call_callback(), eventloop)
    handle = _UNIFFI_FOREIGN_FUTURE_HANDLE_MAP.insert((eventloop, task))
    return _UniffiForeignFuture(handle, _uniffi_foreign_future_free)

def _uniffi_trait_interface_call_async_with_error(make_call, handle_success, handle_error, error_type, lower_error):
    async def make_call_and_call_callback():
        try:
            try:
                handle_success(await make_call())
            except error_type as e:
                handle_error(
                    _UniffiRustCallStatus.CALL_ERROR,
                    lower_error(e),
                )
        except Exception as e:
            print("UniFFI: Unhandled exception in trait interface call", file=sys.stderr)
            traceback.print_exc(file=sys.stderr)
            handle_error(
                _UniffiRustCallStatus.CALL_UNEXPECTED_ERROR,
                _UniffiConverterString.lower(repr(e)),
            )
    eventloop = _uniffi_get_event_loop()
    task = asyncio.run_coroutine_threadsafe(make_call_and_call_callback(), eventloop)
    handle = _UNIFFI_FOREIGN_FUTURE_HANDLE_MAP.insert((eventloop, task))
    return _UniffiForeignFuture(handle, _uniffi_foreign_future_free)

_UNIFFI_FOREIGN_FUTURE_HANDLE_MAP = _UniffiHandleMap()

@_UNIFFI_FOREIGN_FUTURE_FREE
def _uniffi_foreign_future_free(handle):
    (eventloop, task) = _UNIFFI_FOREIGN_FUTURE_HANDLE_MAP.remove(handle)
    eventloop.call_soon(_uniffi_foreign_future_do_free, task)

def _uniffi_foreign_future_do_free(task):
    if not task.done():
        task.cancel()

def init_logger(level: "LogLevel") -> None:
    _UniffiConverterTypeLogLevel.check_lower(level)
    
    _uniffi_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_func_init_logger,
        _UniffiConverterTypeLogLevel.lower(level))


__all__ = [
    "InternalError",
    "ConnectionMode",
    "ConnectionTarget",
    "DatabaseEventStatus",
    "FilterOptions",
    "LogLevel",
    "NegentropyDirection",
    "NostrSdkError",
    "RelayFilteringMode",
    "RelayStatus",
    "NegentropyItem",
    "Output",
    "Reconciliation",
    "ReconciliationOutput",
    "ReconciliationSendFailureItem",
    "SendEventOutput",
    "SubscribeOutput",
    "init_logger",
    "Client",
    "ClientBuilder",
    "Connection",
    "CustomNostrDatabase",
    "EventSource",
    "HandleNotification",
    "MockRelay",
    "Nwc",
    "NegentropyOptions",
    "Nip46Signer",
    "NostrConnectRemoteSigner",
    "NostrConnectSignerActions",
    "NostrDatabase",
    "NostrSigner",
    "NostrWalletConnectOptions",
    "NostrZapper",
    "Options",
    "Profile",
    "Relay",
    "RelayConnectionStats",
    "RelayFiltering",
    "RelayLimits",
    "RelayOptions",
    "RelayPool",
    "RelaySendOptions",
    "SubscribeAutoCloseOptions",
    "SubscribeOptions",
    "ZapDetails",
    "ZapEntity",
]

