# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class PushFundsRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'client_reference_information': 'Ptsv1pushfundstransferClientReferenceInformation',
        'order_information': 'Ptsv1pushfundstransferOrderInformation',
        'processing_information': 'Ptsv1pushfundstransferProcessingInformation',
        'recipient_information': 'Ptsv1pushfundstransferRecipientInformation',
        'sender_information': 'Ptsv1pushfundstransferSenderInformation'
    }

    attribute_map = {
        'client_reference_information': 'clientReferenceInformation',
        'order_information': 'orderInformation',
        'processing_information': 'processingInformation',
        'recipient_information': 'recipientInformation',
        'sender_information': 'senderInformation'
    }

    def __init__(self, client_reference_information=None, order_information=None, processing_information=None, recipient_information=None, sender_information=None):
        """
        PushFundsRequest - a model defined in Swagger
        """

        self._client_reference_information = None
        self._order_information = None
        self._processing_information = None
        self._recipient_information = None
        self._sender_information = None

        if client_reference_information is not None:
          self.client_reference_information = client_reference_information
        self.order_information = order_information
        self.processing_information = processing_information
        if recipient_information is not None:
          self.recipient_information = recipient_information
        if sender_information is not None:
          self.sender_information = sender_information

    @property
    def client_reference_information(self):
        """
        Gets the client_reference_information of this PushFundsRequest.

        :return: The client_reference_information of this PushFundsRequest.
        :rtype: Ptsv1pushfundstransferClientReferenceInformation
        """
        return self._client_reference_information

    @client_reference_information.setter
    def client_reference_information(self, client_reference_information):
        """
        Sets the client_reference_information of this PushFundsRequest.

        :param client_reference_information: The client_reference_information of this PushFundsRequest.
        :type: Ptsv1pushfundstransferClientReferenceInformation
        """

        self._client_reference_information = client_reference_information

    @property
    def order_information(self):
        """
        Gets the order_information of this PushFundsRequest.

        :return: The order_information of this PushFundsRequest.
        :rtype: Ptsv1pushfundstransferOrderInformation
        """
        return self._order_information

    @order_information.setter
    def order_information(self, order_information):
        """
        Sets the order_information of this PushFundsRequest.

        :param order_information: The order_information of this PushFundsRequest.
        :type: Ptsv1pushfundstransferOrderInformation
        """

        self._order_information = order_information

    @property
    def processing_information(self):
        """
        Gets the processing_information of this PushFundsRequest.

        :return: The processing_information of this PushFundsRequest.
        :rtype: Ptsv1pushfundstransferProcessingInformation
        """
        return self._processing_information

    @processing_information.setter
    def processing_information(self, processing_information):
        """
        Sets the processing_information of this PushFundsRequest.

        :param processing_information: The processing_information of this PushFundsRequest.
        :type: Ptsv1pushfundstransferProcessingInformation
        """

        self._processing_information = processing_information

    @property
    def recipient_information(self):
        """
        Gets the recipient_information of this PushFundsRequest.

        :return: The recipient_information of this PushFundsRequest.
        :rtype: Ptsv1pushfundstransferRecipientInformation
        """
        return self._recipient_information

    @recipient_information.setter
    def recipient_information(self, recipient_information):
        """
        Sets the recipient_information of this PushFundsRequest.

        :param recipient_information: The recipient_information of this PushFundsRequest.
        :type: Ptsv1pushfundstransferRecipientInformation
        """

        self._recipient_information = recipient_information

    @property
    def sender_information(self):
        """
        Gets the sender_information of this PushFundsRequest.

        :return: The sender_information of this PushFundsRequest.
        :rtype: Ptsv1pushfundstransferSenderInformation
        """
        return self._sender_information

    @sender_information.setter
    def sender_information(self, sender_information):
        """
        Sets the sender_information of this PushFundsRequest.

        :param sender_information: The sender_information of this PushFundsRequest.
        :type: Ptsv1pushfundstransferSenderInformation
        """

        self._sender_information = sender_information

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, PushFundsRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
