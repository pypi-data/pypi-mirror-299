# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import pydantic
import typing
from .feature_usage_response_data_allocation_type import FeatureUsageResponseDataAllocationType
from .feature_detail_response_data import FeatureDetailResponseData
from .plan_response_data import PlanResponseData
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class FeatureUsageResponseData(UniversalBaseModel):
    access: bool = pydantic.Field()
    """
    Whether further usage is permitted.
    """

    allocation: typing.Optional[int] = pydantic.Field(default=None)
    """
    The maximum amount of usage that is permitted; a null value indicates that unlimited usage is permitted.
    """

    allocation_type: FeatureUsageResponseDataAllocationType = pydantic.Field()
    """
    The type of allocation that is being used.
    """

    entitlement_id: str
    entitlement_type: str
    feature: typing.Optional[FeatureDetailResponseData] = None
    period: typing.Optional[str] = pydantic.Field(default=None)
    """
    The period over which usage is measured.
    """

    plan: typing.Optional[PlanResponseData] = None
    usage: typing.Optional[int] = pydantic.Field(default=None)
    """
    The amount of usage that has been consumed; a null value indicates that usage is not being measured.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
