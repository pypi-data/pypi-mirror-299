import pandas as pd


def read_pyrosci(filename):
    """Import the text files generated by PyroScience Workbench as a
    pandas DataFrame."""
    # Figure out how many rows to skip
    with open(filename, "r", encoding="unicode_escape") as f:
        lines = f.read().splitlines()
    i = 0
    sensor_type = "Unknown"
    while not lines[i].startswith("Date"):
        if lines[i].startswith("#Device Name") or lines[i].startswith("#Device:"):
            if "Pico" in lines[i]:
                sensor_type = "Pico"
            elif "AquapHOx" in lines[i]:
                sensor_type = "AquapHOx"
            else:
                sensor_type = "Unknown"
                print("Unknown sensor.")
        i += 1
    assert sensor_type != "Unknown"
    # Import data file
    data = pd.read_table(filename, skiprows=i, encoding="unicode_escape")
    # Rename columns
    rn = {
        "Pico": {
            "Date [A Ch.1 Main]": "date",
            "Time [A Ch.1 Main]": "time",
            " dt (s) [A Ch.1 Main]": "seconds",
            "pH [A Ch.1 Main]": "pH",
            "Sample Temp. (°C) [A Ch.1 CompT]": "temperature",
            "dphi (°) [A Ch.1 Main]": "phase_shift",
            "Signal Intensity (mV) [A Ch.1 Main]": "signal_intensity",
            "Ambient Light (mV) [A Ch.1 Main]": "ambient_light",
            "ldev (nm) [A Ch.1 Main]": "ldev",
            "Status [A Ch.1 Main]": "status_pH",
            "Status [A Ch.1 CompT]": "status_temperature",
            "Date [A T1]": "date_T",
            "Time [A T1]": "time_T",
            " dt (s) [A T1]": "seconds_T",
            "Sample Temp. (°C) [A T1]": "temperature_T",
            "Status [A T1]": "status_temperature_T",
        },
        "AquapHOx": {
            "DateTime (YYYY-MM-DD hh:mm:ss)": "datetime",
            "dphi (0.001 °)": "phase_shift",
            "dphi (0.001 ¡)": "phase_shift",
            # "umolar (0.001 umol/L)": "dissolved_oxygen",
            # "mbar (0.001 mbar)": "partial_pressure_oxygen",
            # "airSat (0.001 %air sat)": "dissolved_oxygen_air_saturation",
            "tempSample (0.001 °C)": "temperature",
            "tempSample (0.001 ¡C)": "temperature",
            "tempCase (0.001 °C)": "temperature_device",
            "tempCase (0.001 ¡C)": "temperature_device",
            "signalIntensity (0.001 mV)": "signal_intensity",
            "ambientLight (0.001 mV)": "ambient_light",
            "pressure (0.001 mbar)": "air_pressure",
            "humidity (0.001 %RH)": "humidity_device",
            "resistorTemp (0.001 Ohm or 0.001 mV)": "resistance",
            # "percentO2 (0.001 %O2)": "oxygen_volume_fraction",
            # "tempOptical (0.001 °C)": "temperature_opt_sensor",
            # "tempOptical (0.001 ¡C)": "temperature_opt_sensor",
            "pH (0.001 pH)": "pH",
        },
    }
    data = data.rename(columns=rn[sensor_type])
    # Wrangle datetime
    if sensor_type == "Pico":
        data["datetime"] = data.date + " " + data.time
        data["datetime"] = pd.to_datetime(data.datetime, format="%d-%m-%Y %H:%M:%S.%f")
        data["datetime_T"] = data.date_T + " " + data.time_T
        data["datetime_T"] = pd.to_datetime(
            data.datetime_T, format="%d-%m-%Y %H:%M:%S.%f"
        )
        data_T = data[[c for c in data.columns if c.endswith("_T")]]
        data = data[[c for c in data.columns if c not in data_T.columns]]
    elif sensor_type == "AquapHOx":
        data["datetime"] = pd.to_datetime(data.datetime, format="%Y-%m-%d %H:%M:%S")
        data["seconds"] = (data.datetime - data.datetime.iloc[0]).dt.total_seconds()
        data_T = None
    # Drop NaNs and unnecessary columns
    data.dropna(how="all", inplace=True)
    data_T.dropna(how="all", inplace=True)
    cols = list(
        {
            k
            for k in rn[sensor_type].values()
            if k not in ["date", "time"] and not k.endswith("_T")
        }
    )
    if sensor_type == "Pico":
        cols = ["datetime", *cols]
    data = data[cols]
    return data, data_T
