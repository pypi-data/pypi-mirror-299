{"version":3,"file":"vendors-node_modules_sprotty-protocol_lib_index_js.5db21a213999b4bd3542.js?v=5db21a213999b4bd3542","mappings":"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","sources":["webpack://@jupyrdf/jupyter-elk/./node_modules/sprotty-protocol/src/action-handler.ts","webpack://@jupyrdf/jupyter-elk/./node_modules/sprotty-protocol/src/diagram-server.ts","webpack://@jupyrdf/jupyter-elk/./node_modules/sprotty-protocol/src/diagram-services.ts","webpack://@jupyrdf/jupyter-elk/./node_modules/sprotty-protocol/src/index.ts","webpack://@jupyrdf/jupyter-elk/./node_modules/sprotty-protocol/src/model.ts","webpack://@jupyrdf/jupyter-elk/./node_modules/sprotty-protocol/src/utils/json.ts"],"sourcesContent":["/********************************************************************************\n * Copyright (c) 2021 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { Action } from './actions';\nimport { DiagramServer } from './diagram-server';\nimport { DiagramState } from './diagram-services';\n\nexport type ServerActionHandler<A extends Action = Action> = (action: A, state: DiagramState, server: DiagramServer) => void | Promise<void>;\n\n/**\n * Use this service to register handlers to specific actions. The `DiagramServer` queries this registry\n * when an action is received from the client, and falls back to the built-in behavior if no handlers\n * are found.\n */\nexport class ServerActionHandlerRegistry {\n\n    protected readonly handlers = new Map<string, ServerActionHandler[]>();\n\n    /**\n     * Returns the action handlers for the given action kind, or `undefined` if there are none.\n     */\n    getHandler(kind: string): ServerActionHandler[] | undefined {\n        return this.handlers.get(kind);\n    }\n\n    /**\n     * Add an action handler to be called when an action of the specified kind is received.\n     */\n    onAction<A extends Action>(kind: string, handler: ServerActionHandler<A>) {\n        if (this.handlers.has(kind)) {\n            this.handlers.get(kind)!.push(handler);\n        } else {\n            this.handlers.set(kind, [handler]);\n        }\n    }\n\n    /**\n     * Remove an action handler that was previously added with `onAction`.\n     */\n    removeActionHandler<A extends Action>(kind: string, handler: ServerActionHandler<A>) {\n        const list = this.handlers.get(kind);\n        if (list) {\n            const index = list.indexOf(handler);\n            if (index >= 0) {\n                list.splice(index, 1);\n            }\n        }\n    }\n\n}\n","/********************************************************************************\n * Copyright (c) 2021 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { ServerActionHandlerRegistry } from './action-handler';\nimport {\n    Action, isResponseAction, ResponseAction, RequestModelAction, ComputedBoundsAction, LayoutAction, RequestBoundsAction,\n    RequestAction, generateRequestId, SetModelAction, UpdateModelAction, RejectAction, isRequestAction\n} from './actions';\nimport { DiagramServices, DiagramState, IDiagramGenerator, IModelLayoutEngine } from './diagram-services';\nimport { SModelRoot } from './model';\nimport { Deferred } from './utils/async';\nimport { applyBounds, cloneModel } from './utils/model-utils';\n\n/**\n * An instance of this class is responsible for handling a single diagram client. It holds the current\n * state of the diagram and manages communication with the client via actions.\n */\nexport class DiagramServer {\n\n    readonly state: DiagramState & {\n        lastSubmittedModelType?: string\n    } = {\n        currentRoot: {\n            type: 'NONE',\n            id: 'ROOT'\n        },\n        revision: 0\n    };\n    readonly dispatch: <A extends Action>(action: A) => Promise<void>;\n\n    protected readonly diagramGenerator: IDiagramGenerator;\n    protected readonly layoutEngine?: IModelLayoutEngine;\n    protected actionHandlerRegistry?: ServerActionHandlerRegistry;\n    protected readonly requests = new Map<string, Deferred<ResponseAction>>();\n\n    constructor(dispatch: <A extends Action>(action: A) => Promise<void>,\n                services: DiagramServices) {\n        this.dispatch = dispatch;\n        this.diagramGenerator = services.DiagramGenerator;\n        this.layoutEngine = services.ModelLayoutEngine;\n        this.actionHandlerRegistry = services.ServerActionHandlerRegistry;\n    }\n\n    /**\n     * Set the model and submit it to the client.\n     */\n    setModel(newRoot: SModelRoot): Promise<void> {\n        newRoot.revision = ++this.state.revision;\n        this.state.currentRoot = newRoot;\n        return this.submitModel(newRoot, false);\n    }\n\n    /**\n     * Update the model to a new state and submit it to the client.\n     */\n    updateModel(newRoot: SModelRoot): Promise<void> {\n        newRoot.revision = ++this.state.revision;\n        this.state.currentRoot = newRoot;\n        return this.submitModel(newRoot, true);\n    }\n\n    /**\n     * Whether the client needs to compute the layout of parts of the model. This affects the behavior\n     * of `submitModel`.\n     *\n     * This setting is determined by the `DiagramOptions` that are received with the `RequestModelAction`\n     * from the client. If the client does not specify whether it needs client layout, the default value\n     * is `true`.\n     */\n    get needsClientLayout(): boolean {\n        if (this.state.options && this.state.options.needsClientLayout !== undefined) {\n            return !!this.state.options.needsClientLayout;\n        }\n        return true;\n    }\n\n    /**\n     * Whether the server needs to compute the layout of parts of the model. This affects the behavior\n     * of `submitModel`.\n     *\n     * This setting is determined by the `DiagramOptions` that are received with the `RequestModelAction`\n     * from the client. If the client does not specify whether it needs server layout, the default value\n     * is `false`.\n     */\n    get needsServerLayout(): boolean {\n        if (this.state.options && this.state.options.needsServerLayout !== undefined) {\n            return !!this.state.options.needsServerLayout;\n        }\n        return false;\n    }\n\n    /**\n     * Called when an action is received from the client.\n     */\n    accept(action: Action): Promise<void> {\n        if (isResponseAction(action)) {\n            const id = action.responseId;\n            const future = this.requests.get(id);\n            if (future) {\n                this.requests.delete(id);\n                if (action.kind === RejectAction.KIND) {\n                    const rejectAction: RejectAction = action as any;\n                    future.reject(new Error(rejectAction.message));\n                    console.warn(`Request with id ${action.responseId} failed: ${rejectAction.message}`, rejectAction.detail);\n                } else {\n                    future.resolve(action);\n                }\n                return Promise.resolve();\n            }\n            console.info('No matching request for response:', action);\n        }\n        return this.handleAction(action);\n    }\n\n    /**\n     * Send a request action to the client. The resulting promise is resolved when a matching\n     * response is received and rejected when a `RejectAction` is received.\n     */\n    request<Res extends ResponseAction>(action: RequestAction<Res>): Promise<Res> {\n        if (!action.requestId) {\n            action.requestId = 'server_' + generateRequestId();\n        }\n        const future = new Deferred<Res>();\n        this.requests.set(action.requestId, future as any);\n        this.dispatch(action).catch(err => {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            this.requests.delete(action.requestId!);\n            future.reject(err);\n        });\n        return future.promise;\n    }\n\n    /**\n     * Send a `RejectAction` to the client to notify that a request could not be fulfilled.\n     */\n    rejectRemoteRequest(action: Action | undefined, error: Error): void {\n        if (action && isRequestAction(action)) {\n            this.dispatch({\n                kind: RejectAction.KIND,\n                responseId: action.requestId,\n                message: error.message,\n                detail: error.stack\n            });\n        }\n    }\n\n    protected handleAction(action: Action): Promise<void> {\n        // Find a matching action handler in the registry\n        const handlers = this.actionHandlerRegistry?.getHandler(action.kind);\n        if (handlers && handlers.length === 1) {\n            return handlers[0](action, this.state, this) ?? Promise.resolve();\n        } else if (handlers && handlers.length > 1) {\n            return Promise.all(handlers.map(h => h(action, this.state, this) ?? Promise.resolve())) as Promise<any>;\n        }\n        // If no handler is registered, call one of the default handling methods\n        switch (action.kind) {\n            case RequestModelAction.KIND:\n                return this.handleRequestModel(action as RequestModelAction);\n            case ComputedBoundsAction.KIND:\n                return this.handleComputedBounds(action as ComputedBoundsAction);\n            case LayoutAction.KIND:\n                return this.handleLayout(action as LayoutAction);\n        }\n        // We don't know this action kind, sigh\n        console.warn(`Unhandled action from client: ${action.kind}`);\n        return Promise.resolve();\n    }\n\n    protected async handleRequestModel(action: RequestModelAction): Promise<void> {\n        this.state.options = action.options;\n        try {\n            const newRoot = await this.diagramGenerator.generate({\n                options: this.state.options ?? {},\n                state: this.state\n            });\n            newRoot.revision = ++this.state.revision;\n            this.state.currentRoot = newRoot;\n            await this.submitModel(this.state.currentRoot, false, action);\n        } catch (err) {\n            this.rejectRemoteRequest(action, err as Error);\n            console.error('Failed to generate diagram:', err);\n        }\n    }\n\n    /**\n     * Submit a model to the client after it has been updated in the server state.\n     */\n     protected async submitModel(newRoot: SModelRoot, update: boolean, cause?: Action): Promise<void> {\n        if (this.needsClientLayout) {\n            if (!this.needsServerLayout) {\n                // In this case the client won't send us the computed bounds\n                this.dispatch({ kind: RequestBoundsAction.KIND, newRoot });\n            } else {\n                const request = RequestBoundsAction.create(newRoot);\n                const response = await this.request<ComputedBoundsAction>(request);\n                const currentRoot = this.state.currentRoot;\n                if (response.revision === currentRoot.revision) {\n                    applyBounds(currentRoot, response);\n                    await this.doSubmitModel(currentRoot, update, cause);\n                } else {\n                    this.rejectRemoteRequest(cause, new Error(`Model revision does not match: ${response.revision}`));\n                }\n            }\n        } else {\n            await this.doSubmitModel(newRoot, update, cause);\n        }\n    }\n\n    private async doSubmitModel(newRoot: SModelRoot, update: boolean, cause?: Action): Promise<void> {\n        if (newRoot.revision !== this.state.revision) {\n            return;\n        }\n        if (this.needsServerLayout && this.layoutEngine) {\n            newRoot = await this.layoutEngine.layout(newRoot);\n        }\n        const modelType = newRoot.type;\n        if (cause && cause.kind === RequestModelAction.KIND) {\n            const requestId = (cause as RequestModelAction).requestId;\n            const response = SetModelAction.create(newRoot, requestId);\n            await this.dispatch(response);\n        } else if (update && modelType === this.state.lastSubmittedModelType) {\n            await this.dispatch({ kind: UpdateModelAction.KIND, newRoot, cause });\n        } else {\n            await this.dispatch({ kind: SetModelAction.KIND, newRoot });\n        }\n        this.state.lastSubmittedModelType = modelType;\n    }\n\n    protected handleComputedBounds(action: ComputedBoundsAction): Promise<void> {\n        if (action.revision !== this.state.currentRoot.revision) {\n            return Promise.reject();\n        }\n        applyBounds(this.state.currentRoot, action);\n        return Promise.resolve();\n    }\n\n    protected async handleLayout(action: LayoutAction): Promise<void> {\n        if (!this.layoutEngine) {\n            return;\n        }\n        if (!this.needsServerLayout) {\n            let newRoot = cloneModel(this.state.currentRoot);\n            newRoot = await this.layoutEngine.layout(newRoot);\n            newRoot.revision = ++this.state.revision;\n            this.state.currentRoot = newRoot;\n        }\n        await this.doSubmitModel(this.state.currentRoot, true, action);\n    }\n\n}\n","/********************************************************************************\n * Copyright (c) 2021 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { ServerActionHandlerRegistry } from './action-handler';\nimport { SModelRoot } from './model';\nimport { JsonMap } from './utils/json';\nimport { SModelIndex } from './utils/model-utils';\n\nexport type DiagramOptions = JsonMap;\n\n/**\n * The current state captured by a `DiagramServer`.\n */\nexport interface DiagramState {\n    options?: DiagramOptions\n    currentRoot: SModelRoot\n    revision: number\n    index?: SModelIndex\n}\n\n/**\n * The set of services required by a `DiagramServer`.\n */\nexport interface DiagramServices {\n    readonly DiagramGenerator: IDiagramGenerator\n    readonly ModelLayoutEngine?: IModelLayoutEngine\n    readonly ServerActionHandlerRegistry?: ServerActionHandlerRegistry\n}\n\n/**\n * A diagram generator is responsible for creating a diagram model from some source.\n * This process is controlled by the `DiagramOptions`, which for example may contain\n * a URI to the source document from which the diagram shall be created.\n */\nexport interface IDiagramGenerator {\n    generate(args: GeneratorArguments): SModelRoot | Promise<SModelRoot>\n}\n\nexport interface GeneratorArguments {\n    options: DiagramOptions\n    state: DiagramState\n}\n\n/**\n * This service is responsible for the \"macro layout\" of a model, that is the positioning\n * and sizing of the main structural elements of a model. In a graph, macro layout affects\n * positions of nodes and routings of edges, but not necessarily the layout of labels and\n * compartments inside a node, which are often arranged on the client side (\"micro layout\").\n */\nexport interface IModelLayoutEngine {\n    layout(model: SModelRoot, index?: SModelIndex): SModelRoot | Promise<SModelRoot>;\n}\n","/********************************************************************************\n * Copyright (c) 2021 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nexport * from './action-handler';\nexport * from './actions';\nexport * from './diagram-server';\nexport * from './diagram-services';\nexport * from './model';\nexport * from './utils/async';\nexport * from './utils/geometry';\nexport * from './utils/json';\nexport * from './utils/model-utils';\nexport * from './utils/object';\n","/********************************************************************************\n * Copyright (c) 2021-2023 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { Bounds, Point, Dimension } from './utils/geometry';\nimport { hasOwnProperty } from './utils/object';\n\n/**\n * Base type for all elements of the diagram model.\n * Each model element must have a unique ID and a type that is used to look up its view.\n */\nexport interface SModelElement {\n    type: string\n    id: string\n    children?: SModelElement[]\n    cssClasses?: string[]\n}\n\n/**\n * Base type for the root element of the diagram model tree.\n */\nexport interface SModelRoot extends SModelElement {\n    canvasBounds?: Bounds\n    revision?: number\n}\n\n/**\n * Usually the root of a model is also a viewport.\n */\nexport interface ViewportRootElement extends SModelRoot, Partial<Viewport>, Partial<BoundsAware> {\n}\n\n/**\n * Root element for graph-like models.\n */\nexport interface SGraph extends ViewportRootElement, Partial<LayoutableChild> {\n    children: SModelElement[]\n\n    /** @deprecated Use `position` and `size` instead. */\n    bounds?: Bounds\n}\n\nexport interface SShapeElement extends SModelElement, Partial<LayoutableChild> {\n}\n\n/**\n * Model element class for nodes, which are the main entities in a graph. A node can be connected to\n * another node via an SEdge. Such a connection can be direct, i.e. the node is the source or target of\n * the edge, or indirect through a port, i.e. it contains an SPort which is the source or target of the edge.\n */\nexport interface SNode extends SShapeElement, Partial<LayoutContainer>, Partial<Selectable>, Partial<Hoverable>, Partial<Fadeable> {\n    anchorKind?: string\n}\n\n/**\n * A port is a connection point for edges. It should always be contained in an SNode.\n */\nexport interface SPort extends SShapeElement, Partial<Selectable>, Partial<Hoverable>, Partial<Fadeable> {\n    anchorKind?: string\n}\n\n/**\n * Model element class for edges, which are the connectors in a graph. An edge has a source and a target,\n * each of which can be either a node or a port. The source and target elements are referenced via their ids.\n */\nexport interface SEdge extends SModelElement, Partial<Selectable>, Partial<Hoverable>, Partial<Fadeable> {\n    sourceId: string\n    targetId: string\n    routerKind?: string\n    routingPoints?: Point[]\n}\n\n/**\n * A label can be attached to a node, edge, or port, and contains some text to be rendered in its view.\n */\nexport interface SLabel extends SShapeElement, Partial<Selectable>, Partial<Alignable> {\n    text: string\n}\n\n/**\n * A compartment is used to group multiple child elements such as labels of a node. Usually a `vbox`\n * or `hbox` layout is used to arrange these children.\n */\nexport interface SCompartment extends SShapeElement, Partial<LayoutContainer> {\n}\n\n/**\n * A viewport has a scroll position and a zoom factor. Usually these properties are\n * applied to the root element to enable navigating through the diagram.\n */\nexport interface Viewport extends Scrollable, Zoomable {\n}\n\n/**\n * A scrollable element has a scroll position, which indicates the top left corner of the\n * visible area.\n */\nexport interface Scrollable {\n    scroll: Point\n}\n\nexport function isScrollable(element: SModelElement | Scrollable): element is Scrollable {\n    return hasOwnProperty(element, 'scroll');\n}\n\n/**\n * A zoomable element can be scaled so it appears smaller or larger than its actual size.\n * The zoom value 1 is the default scale where the content is drawn with its actual size.\n */\nexport interface Zoomable {\n    zoom: number\n}\n\nexport function isZoomable(element: SModelElement | Zoomable): element is Zoomable {\n    return hasOwnProperty(element, 'zoom');\n}\n\n/**\n * An element that can be placed at a specific location using its position property.\n * Feature extension interface for `moveFeature`.\n */\nexport interface Locateable {\n    position: Point\n}\n\n/**\n * Model elements that implement this interface have a position and a size.\n */\nexport interface BoundsAware extends Locateable {\n    size: Dimension\n}\n\n/**\n * Feature extension interface for `layoutableChildFeature`. This is used when the parent\n * element has a `layout` property (meaning it's a `LayoutContainer`).\n*/\nexport interface LayoutableChild extends BoundsAware {\n    layoutOptions?: ModelLayoutOptions\n}\n\n/**\n * Layout options of a `LayoutableChild`.\n */\nexport interface ModelLayoutOptions {\n    hAlign?: HAlignment\n    hGap?: number\n    vAlign?: VAlignment\n    vGap?: number\n    paddingTop?: number\n    paddingRight?: number\n    paddingBottom?: number\n    paddingLeft?: number\n    paddingFactor?: number\n    minWidth?: number\n    minHeight?: number\n    resizeContainer?: boolean\n    [key: string]: string | number | boolean | undefined\n};\n\nexport type HAlignment = 'left' | 'center' | 'right';\nexport type VAlignment = 'top' | 'center' | 'bottom';\n\n/**\n * Used to identify model elements that specify a layout to apply to their children.\n */\nexport interface LayoutContainer extends LayoutableChild {\n    layout: LayoutKind\n}\n\n/**\n * Type for the layout property of a `LayoutContainer`.\n */\nexport type LayoutKind = 'stack' | 'vbox' | 'hbox' | (string & {});\n\n/**\n * Feature extension interface for `alignFeature`.\n * Used to adjust elements whose bounding box is not at the origin, e.g. labels\n * or pre-rendered SVG figures.\n */\nexport interface Alignable {\n    alignment: Point\n}\n\n/**\n * Feature extension interface for `selectFeature`. The selection status is often considered\n * in the frontend views, e.g. by switching CSS classes.\n */\nexport interface Selectable {\n    selected: boolean\n}\n\n/**\n * Feature extension interface for `hoverFeedbackFeature`. The hover feedback status is often\n * considered in the frontend views, e.g. by switching CSS classes.\n */\nexport interface Hoverable {\n    hoverFeedback: boolean\n}\n\n/**\n * Feature extension interface for `fadeFeature`. Fading is mostly used to animate when an element\n * appears or disappears.\n */\nexport interface Fadeable {\n    opacity: number\n}\n\n/**\n * Feature extension interface for `expandFeature`.\n * Model elements that implement this interface can be expanded and collapsed.\n */\nexport interface Expandable {\n    expanded: boolean\n}\n\n/**\n * Model elements implementing this interface can be displayed on a projection bar.\n * _Note:_ If set, the projectedBounds property will be prefered over the model element bounds.\n * Otherwise model elements also have to be `BoundsAware` so their projections can be shown.\n */\nexport interface Projectable {\n    projectionCssClasses: string[],\n    projectedBounds?: Bounds,\n}\n\n/**\n * Feature extension interface for `edgeLayoutFeature`. This is often applied to\n * {@link SLabel} elements to specify their placement along the containing edge.\n */\nexport interface EdgeLayoutable {\n    edgePlacement: EdgePlacement\n}\n\nexport type EdgeSide = 'left' | 'right' | 'top' | 'bottom' | 'on';\n\n/**\n * Each label attached to an edge can be placed on the edge in different ways.\n * With this interface the placement of such a single label is defined.\n */\nexport interface EdgePlacement {\n    /**\n     * true, if the label should be rotated to touch the edge tangentially\n     */\n    rotate: boolean;\n\n    /**\n     * where is the label relative to the line's direction\n     */\n    side: EdgeSide;\n\n    /**\n     * between 0 (source anchor) and 1 (target anchor)\n     */\n    position: number;\n\n    /**\n     * space between label and edge/connected nodes\n     */\n    offset: number;\n\n    /**\n     * where should the label be moved when move feature is enabled.\n     * 'edge' means the label is moved along the edge, 'free' means the label is moved freely, 'none' means the label can not be moved.\n     * Default is 'edge'.\n     */\n    moveMode?: 'edge' | 'free' | 'none';\n}\n\n/**\n * Buttons are elements that can react to clicks. A button handler can be registered in the frontend.\n */\nexport interface SButton extends SShapeElement {\n    pressed: boolean\n    enabled: boolean\n}\n\n/**\n * An issue marker is used to display a symbol about an error or a warning attached to another model element.\n */\nexport interface SIssueMarker extends SShapeElement {\n    issues: SIssue[]\n}\n\nexport type SIssueSeverity = 'error' | 'warning' | 'info';\n\nexport interface SIssue {\n    message: string\n    severity: SIssueSeverity\n}\n\n/**\n * Root model element class for HTML content. Usually this is rendered with a `div` DOM element.\n */\nexport interface HtmlRoot extends SModelRoot {\n    classes?: string[]\n}\n\n/**\n * Pre-rendered elements contain HTML or SVG code to be transferred to the DOM. This can be useful to\n * render complex figures or to compute the view on the server instead of the client code.\n */\nexport interface PreRenderedElement extends SModelElement {\n    code: string\n}\n\n/**\n * Same as PreRenderedElement, but with a position and a size.\n */\nexport interface ShapedPreRenderedElement extends PreRenderedElement {\n    position?: Point\n    size?: Dimension\n}\n\n/**\n * A `foreignObject` element to be transferred to the DOM within the SVG.\n *\n * This can be useful to to benefit from e.g. HTML rendering features, such as line wrapping, inside of\n * the SVG diagram.  Note that `foreignObject` is not supported by all browsers and SVG viewers may not\n * support rendering the `foreignObject` content.\n *\n * If no dimensions are specified in the schema element, this element will obtain the dimension of\n * its parent to fill the entire available room. Thus, this element requires specified bounds itself\n * or bounds to be available for its parent.\n */\nexport interface ForeignObjectElement extends ShapedPreRenderedElement {\n    /** The namespace to be assigned to the elements inside of the `foreignObject`. */\n    namespace: string\n}\n","/********************************************************************************\n * Copyright (c) 2020-2021 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nexport type JsonAny =  JsonPrimitive | JsonMap | JsonArray | null;\n\nexport type JsonPrimitive = string | number | boolean;\n\nexport interface JsonMap {\n    [key: string]: JsonAny;\n}\n\nexport type JsonArray = Array<JsonAny>;\n"],"names":[],"sourceRoot":""}