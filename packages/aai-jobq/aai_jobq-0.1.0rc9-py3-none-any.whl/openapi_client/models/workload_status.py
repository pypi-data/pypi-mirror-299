"""
the jobq cluster workflow management tool backend

Backend service for the appliedAI infrastructure product

The version of the OpenAPI document: 0.1.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar

from pydantic import BaseModel, ConfigDict, Field
from typing_extensions import Self

from openapi_client.models.workload_admission import WorkloadAdmission


class WorkloadStatus(BaseModel):
    """
    WorkloadStatus
    """  # noqa: E501

    conditions: list[dict[str, Any]]
    admission: WorkloadAdmission | None = None
    requeue_state: dict[str, Any] | None = Field(default=None, alias="requeueState")
    reclaimable_pods: list[Any] | None = Field(default=None, alias="reclaimablePods")
    admission_checks: list[Any] | None = Field(default=None, alias="admissionChecks")
    __properties: ClassVar[list[str]] = [
        "conditions",
        "admission",
        "requeueState",
        "reclaimablePods",
        "admissionChecks",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self | None:
        """Create an instance of WorkloadStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: set[str] = set()

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of admission
        if self.admission:
            _dict["admission"] = self.admission.to_dict()
        # set to None if admission (nullable) is None
        # and model_fields_set contains the field
        if self.admission is None and "admission" in self.model_fields_set:
            _dict["admission"] = None

        # set to None if requeue_state (nullable) is None
        # and model_fields_set contains the field
        if self.requeue_state is None and "requeue_state" in self.model_fields_set:
            _dict["requeueState"] = None

        # set to None if reclaimable_pods (nullable) is None
        # and model_fields_set contains the field
        if (
            self.reclaimable_pods is None
            and "reclaimable_pods" in self.model_fields_set
        ):
            _dict["reclaimablePods"] = None

        # set to None if admission_checks (nullable) is None
        # and model_fields_set contains the field
        if (
            self.admission_checks is None
            and "admission_checks" in self.model_fields_set
        ):
            _dict["admissionChecks"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict[str, Any] | None) -> Self | None:
        """Create an instance of WorkloadStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "conditions": obj.get("conditions"),
            "admission": WorkloadAdmission.from_dict(obj["admission"])
            if obj.get("admission") is not None
            else None,
            "requeueState": obj.get("requeueState"),
            "reclaimablePods": obj.get("reclaimablePods"),
            "admissionChecks": obj.get("admissionChecks"),
        })
        return _obj
