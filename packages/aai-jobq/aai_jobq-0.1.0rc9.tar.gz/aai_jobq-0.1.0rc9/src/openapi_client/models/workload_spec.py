"""
the jobq cluster workflow management tool backend

Backend service for the appliedAI infrastructure product

The version of the OpenAPI document: 0.1.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing_extensions import Self


class WorkloadSpec(BaseModel):
    """
    WorkloadSpec
    """  # noqa: E501

    pod_sets: list[Any] = Field(alias="podSets")
    queue_name: StrictStr = Field(alias="queueName")
    active: StrictBool
    priority_class_name: StrictStr | None = Field(
        default=None, alias="priorityClassName"
    )
    priority: StrictInt | None = None
    priority_class_source: StrictStr | None = Field(
        default=None, alias="priorityClassSource"
    )
    __properties: ClassVar[list[str]] = [
        "podSets",
        "queueName",
        "active",
        "priorityClassName",
        "priority",
        "priorityClassSource",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self | None:
        """Create an instance of WorkloadSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: set[str] = set()

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if priority_class_name (nullable) is None
        # and model_fields_set contains the field
        if (
            self.priority_class_name is None
            and "priority_class_name" in self.model_fields_set
        ):
            _dict["priorityClassName"] = None

        # set to None if priority (nullable) is None
        # and model_fields_set contains the field
        if self.priority is None and "priority" in self.model_fields_set:
            _dict["priority"] = None

        # set to None if priority_class_source (nullable) is None
        # and model_fields_set contains the field
        if (
            self.priority_class_source is None
            and "priority_class_source" in self.model_fields_set
        ):
            _dict["priorityClassSource"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict[str, Any] | None) -> Self | None:
        """Create an instance of WorkloadSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "podSets": obj.get("podSets"),
            "queueName": obj.get("queueName"),
            "active": obj.get("active"),
            "priorityClassName": obj.get("priorityClassName"),
            "priority": obj.get("priority"),
            "priorityClassSource": obj.get("priorityClassSource"),
        })
        return _obj
